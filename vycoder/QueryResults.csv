Post Link,body
"252202","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>s∆ṁwfṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJz4oiG4bmBd2bhuYEiLCIiLCJbMSw0LDMsMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>s</code>ort the input, get the <code>∆ṁ</code>iddle item(s), <code>w</code>rap in a list, <code>f</code>latten and get the <code>ṁ</code>ean of that. (<code>wf</code> is needed to handle cases where the list is of odd length)</p>
<p>Or, without a trivial built-in</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h2>
<pre><code>L‹½₍⌈⌊$s$İṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJM4oC5wr3igo3ijIjijIokcyTEsOG5gSIsIiIsIlsxLjUsMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsLTUsMTAwMDAwLDEuMywxLjRdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>L‹½₍⌈⌊$s$İṁ
L‹         # Length of the input - 1 (this accounts for 0 indexing)
  ½        # halved
   ₍⌈⌊      # a list of the ceiling and floor of that number
     $s    # the input list sorted
       $İ  # indexed at the positions in the ceil,floor list
         ṁ # take the average of that
</code></pre>
"
"210307","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, <s>18</s> <s>17</s> <s>14</s> <s>12</s> 11 bytes</h1>
<pre><code>₁ƛ₍₃₅kF½*∑∴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJqIiwiIiwi4oKBxpvigo3igoPigoVrRsK9KuKIkeKItCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I refuse to be beaten by Arn, Ash and Fig. I absolutely will not be beaten by any of those languages. Vyxal forever lads.</p>
<h2>Explained</h2>
<pre><code>₁ƛ₍₃₅kF½*∑∴
₁           # Push 100 to the stack
 ƛ          # Over the range [1, 100], map: (we'll call the argument n)
  ₍₃₅       #   [n % 3 == 0, n % 5 == 0] (call this X)
     kF     #   &quot;FizzBuzz&quot;
       ½    #   [&quot;Fizz&quot;, &quot;Buzz&quot;] # halve the string - split into two equal pieces
        *∑  #   sum(X * ↑)
          ∴ #   max(↑, n)
            # The -j flag joins on newlines before outputting
</code></pre>
<p>If you want it flagless:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h2>
<pre><code>₁⟑₍₃₅kF½*∑∴,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHin5Higo3igoPigoVrRsK9KuKIkeKItCwiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>See how inconsequential flags are?</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h2>
<pre><code>₁⟑35fḊ`₴ḟȦ↑`½*∑∴,
</code></pre>
<p>No questionable built-ins, no flags, just plain legitimate fizzbuzz.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHin5EzNWbhuIpg4oK04bifyKbihpFgwr0q4oiR4oi0LCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"210313","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>`ƈṡ, ƛ€!
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%C6%88%E1%B9%A1%2C%20%C6%9B%E2%82%AC!&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simply the compressed string <code>Hello, World!</code></p>
<p>Alternatively,</p>
<h1><a href=""https://github.com/JonoCode9374/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>kH
</code></pre>
<p>Pushes the constant <code>Hello, World!</code></p>
"
"211759","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Lð*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=L%C3%B0*&amp;inputs=Hello%20World&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Command-line usage:</p>
<pre><code>python3 Vyxal.py file_name &quot;&quot; input_string
</code></pre>
<h2>Explained</h2>
<pre><code>L    # Push the length of the implicit input
  ð  # Push a space character
   * # Multiply that space by the length and output.
</code></pre>
"
"211771","<h1><a href=""https://github.com/JonoCode9374/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=%7B&amp;inputs=Hello%20World&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-3 thanks to answering the right question</em></p>
<h2>Explained</h2>
<pre><code>{      # Start an infinite while loop
</code></pre>
"
"211772","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>jH</code>, <s>6</s> <s>5</s> <sup>4</sup> 3 bytes</h1>
<pre><code>×*²
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=Hj&amp;code=%C3%97*%C2%B2&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre class=""lang-python prettyprint-override""><code>×*²
×*      # Push 100 asterisks onto the stack (as a single string) // the H flag initalises the stack with 100
  ²     # Split into pieces of 10 and use the j flag to join on newlines.
</code></pre>
<p>Alternatively:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h2>
<pre><code>₁×*²⁋
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%81%C3%97*%C2%B2%E2%81%8B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"211778","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 3 bytes</h1>
<pre><code>»÷∩
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%C3%B7%E2%88%A9&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simply the compressed number <code>2014</code></p>
"
"212108","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 4 bytes</h1>
<pre><code>ṡƛ1O
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%E1%B9%A1%C6%9B1O&amp;inputs=100%0A1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ṡƛ1O;
ṡ       # Create an inclusive range between the two inputs
 ƛ      # For each item in that range:
  1O    #   Count the number of 1s
        # The 's' flag autosums t.o.s and implicitly prints.
</code></pre>
"
"212149","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>∑/₁*ṙ:∑₁$-Þ…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%91%2F%E2%82%81*%E1%B9%99%3A%E2%88%91%E2%82%81%24-%C3%9E%E2%80%A6&amp;inputs=%5B1%2C%201%2C%201%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>∑/₁*ṙ:∑₁$-Þ…
∑             # sum(input)
 /            # input ÷ ↑         # get the weight of each number
  ₁*          # ↑ * 100           # and make it a percentage
    ṙ         # map(round, ↑)     # rounding each number
     :∑       # ↑, sum(↑)         # now sum the above
       ₁$-    # 100 - ↑           # and subtract from 100. The result represents any potential round errors that need correction
          Þ…  # distribute(↑, ↑↑) # spread ↑ over the rounded list evenly
</code></pre>
"
"212255","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>L</code>, <s>6</s> 5 bytes</h1>
<pre><code>ƛKL×*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=L&amp;code=%C6%9BKL%5C%23*&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ƛKL×*
ƛ       # Over the range [1, input] do the following:
 KL     #   Push the length of the list of that number's divisors
   ×    #   Push '*'
    *   #   And multiply the two together, repeating the &quot;*&quot;
        # Automatically close the map and then use the L flag to vertically join that list
</code></pre>
"
"212296","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>∑dœ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=%E2%88%91d%C5%93&amp;inputs=100&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Compiles as:</p>
<pre class=""lang-python prettyprint-override""><code>stack.push(summate(stack.pop()))
stack.push(stack.pop() * 2)
lhs, rhs = stack.pop(2); stack.push(int((rhs % lhs) == 0))
</code></pre>
<h2>Explained</h2>
<pre><code>∑dœ
∑   # Push the sum of the integers of the input
 d  # Double that sum
  œ # And push ((sum(input) * 2) % input) == 0
</code></pre>
"
"212348","<h1>4. <a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 245 available bytes</h1>
<pre><code>#λ¬∧⟑∨⟇÷«»°․⍎½∆øÏÔÇæʀʁɾɽÞƈ∞⫙ß⎝⎠ !&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~⎡⎣⨥⨪∺❝ð£¥§¦¡∂ÐřŠč√∖ẊȦȮḊĖẸṙ∑Ṡİ•Ĥ⟨⟩ƛıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘŚśŜŝŞşšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƁƂƃƄƅƆƇƊƋƌƍƎ¢≈Ωªº
    
ĳ
</code></pre>
<p>This outputs <code>10</code>.</p>
<p>This uses every character except in the range <code>[48, 57]</code>.</p>
<p>After everything is ignored in the comment, simply push <code>10</code> to the stack and auto print.</p>
<hr />
<p>The next answer may only have bytes in this list: <code>[69, 42, 0, 15, 6, 9, 4, 20]</code></p>
"
"212351","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>C48-I
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=C48-I&amp;inputs=Lorem&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wow it's actually ASCII.</p>
"
"213432","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>L</code>, <s>47</s> <s>43</s> 38 bytes (old codepage)</h1>
<pre><code>λ\#*wnř;:£f⍎÷ð\+ð?¥f⍎÷ð\=ð??Ķĵ∑√I¥f⍎÷W
</code></pre>
<p>This was <em>intense</em>.</p>
<p>Also, according to code-golf's statistics, only a small percentage of people who see my answers actually upvote them. So if you enjoy this answer, consider upvoting, it's free, and you can change your mind at any time (given you have ≥2k rep). Enjoy the answer.</p>
<h2>Explained</h2>
<pre class=""lang-python prettyprint-override""><code>λn\#*wnř;:£f⍎ðJ\+JðJ?¥f⍎JðJ\=JðJ??Ķĵ∑√I¥f⍎J

λ                                               # Start a lambda that:
 n\#*                                           #   Repeats the character &quot;#&quot; n times THEN
     w                                          #   Wraps that into a stack AND
      nř                                        #   Repeats the list n times
        ;                                       # Close lambda
         :£f                                    # Assign the lambda to variable 'f' leaving an extra copy
            ⍎                                   # Apply that lambda to the first input
             ðJ\+JðJ                            # Append &quot; &quot;, &quot;+&quot; and &quot; &quot; to the result from above
                    ?¥f⍎                        # Apply the lambda to the second input
                        J                       # Add it to the current list
                         ðJ\=Jð                 # Append &quot; &quot;, &quot;=&quot; and &quot; &quot; to the result from above
                               ??Ķ              # Pair the two inputs into a list
                                  ĵ∑            # Square each number and sum the list (a^2 + b^2)
                                    √I          # Square root that number and convert it to an integer
                                      ¥f⍎       # Apply the lambda to that result (c)
                                         J      # And add it to the big list
                                                # The L flag then auto vertical joins the list and outputs it
</code></pre>
"
"213575","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ċ↓h
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C4%8A%E2%86%93h&amp;inputs=%5B9%2C%202%2C%209%2C%209%2C%209%2C%209%2C%209%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>Ċ↓h
Ċ     # Get the counts of all items
 ↓    # Get the smallest item based on last item
  h   # Output the head of that list
</code></pre>
<p>Also, according to code-golf's statistics, only a small percentage of people who view my answers actually upvote them. So if you enjoy this answer, consider upvoting, it's free, and you can change your mind at any time (given you have ≥2k rep). Enjoy the answer.</p>
"
"213733","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>8+ĳ∖
</code></pre>
<p>the easy solution.</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>Ms</code>, 6 bytes</h1>
<pre><code>ƛSt\2=
</code></pre>
<p>-2 bytes from Lyxal.</p>
<h2>Explanation</h2>
<pre><code>ƛSt\2=
ƛ      map range 1..n to the following:
 S     convert to string
  t    get last character 
   \2= is it equal to '2'?
       sum the results(s flag)
</code></pre>
"
"214159","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 150 bytes</h1>
<pre><code>`Yup|λ⍎ řð me?|Of ⟑ₑ|... ¬⁌ I ɾ⟑ ⟇↜?|plz ¬Ĵ teh ʁƛ|←⍋ λ« ⊛⟑ λ′ of λÞ ∨Œ ∨ſ Ô₂ ℅⁑|ₑ¥ °⊛a|λ⍎ ƛð ∺⁂ ɽ∫ λ⟇ λ¬ λʗ jßø|\¯\\_(`12484C+`)_\\\¯|... ƛ∫ ⟇¹`+\|/℅
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60Yup%7C%CE%BB%E2%8D%8E%20%C5%99%C3%B0%20me%3F%7COf%20%E2%9F%91%E2%82%91%7C...%20%C2%AC%E2%81%8C%20I%20%C9%BE%E2%9F%91%20%E2%9F%87%E2%86%9C%3F%7Cplz%20%C2%AC%C4%B4%20teh%20%CA%81%C6%9B%7C%E2%86%90%E2%8D%8B%20%CE%BB%C2%AB%20%E2%8A%9B%E2%9F%91%20%CE%BB%E2%80%B2%20of%20%CE%BB%C3%9E%20%E2%88%A8%C5%92%20%E2%88%A8%C5%BF%20%C3%94%E2%82%82%20%E2%84%85%E2%81%91%7C%E2%82%91%C2%A5%20%C2%B0%E2%8A%9Ba%7C%CE%BB%E2%8D%8E%20%C6%9B%C3%B0%20%E2%88%BA%E2%81%82%20%C9%BD%E2%88%AB%20%CE%BB%E2%9F%87%20%CE%BB%C2%AC%20%CE%BB%CA%97%20j%C3%9F%C3%B8%7C%5C%C2%AF%5C%5C_%28%6012484C%2B%60%29_%5C%5C%5C%C2%AF%7C...%20%C6%9B%E2%88%AB%20%E2%9F%87%C2%B9%60%2B%5C%7C%2F%E2%84%85&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I decided to use an alternate approach with the new built-ins</p>
"
"214458","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>r</code>, 5 - 15 = -10 bytes</h1>
<pre><code>90*1&quot;
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=r&amp;code=90*1%22&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Well if the Ruby answer's output method is valid, so is this. Outputs in &quot;polar form (angular unit: degrees)&quot;.</p>
<h2>Explained</h2>
<pre><code>90*1&quot;
90*   # Multiply the input by 90
   1&quot; # Push one and pair the two inputs. The `-r` flag makes dyads take their arguments in reverse.
</code></pre>
"
"214461","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, <s>13</s> <s>9</s> 8 bytes</h1>
<pre><code>kA:ẊvG∑²
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=j&amp;code=kA%3A%E1%BA%8AvG%E2%88%91%C2%B2&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>4 bytes off by porting jelly and -1 from Aaron.</p>
<h2>Explained (old)</h2>
<pre><code>kA:ẊvG26ẇ
kA        # &quot;ABCDEF....XYZ&quot;
  :       # ↑, ↑
   Ẋ      # cartesianProduct(↑)
    vG    # max of each item in ↑
      26ẇ # ↑ wrapped into lengths of 26
</code></pre>
"
"215046","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 5 bytes</h1>
<pre><code>1?(ms
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=1?(ms&amp;inputs=7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>1?(ms

1?          # Push 1 followed by the input
  (         # for n in range(0, input):
    m       #   push tos + tos[::-1] (palindromize on integers doesn't make it a palindrome)
     +s     #   add and sort the result
</code></pre>
<p>It's a shame how in order to remain competitive, one has to port other answers. Why do I say this? Because I have a nifty 21 byte function that accomplishes the same task:</p>
<pre><code>@f:1|0=[1|n⨪@f;:ŉ+]s;
</code></pre>
<p>Example usage:</p>
<pre><code>6 @f; , # Single number
0 11 r °f; z # Provide a test case unit kinda display
</code></pre>
"
"215164","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, <s>6</s> <s>5</s> 4 bytes</h1>
<pre><code>3*¦₃
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=3*%C2%A6%E2%82%83&amp;inputs=26042&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>;)</p>
<h2>Explained</h2>
<pre><code>3*¦₃
3*      # multiply the input by 3
  ¦     # take cumulative sums of that number, treating it as a list
   ₃    # get the divisibility of 3 of each number and then
        # the `-s` flag sums the top of the stack before outputting
</code></pre>
"
"215165","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>kD
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=kD&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uh, it's a built in constant using python's <code>date.today().isoformat()</code>.</p>
"
"215166","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 8 bytes</h1>
<pre><code>`:qp`:qp
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aqp%60%3Aqp&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-2 thanks to a stone arachnid</em></p>
<h2>Explained</h2>
<pre><code>`:qp`:qp
`:qp`    # the string &quot;:qp&quot;
     :q  # surrounded in backticks
       p # and prepended to itself
</code></pre>
"
"215226","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 6 bytes</h1>
<pre><code>9ŻB⁺ɽ-
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=9%C5%BBB%E2%81%BA%C9%BD-&amp;inputs=00111101110011001100110011001101&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I've got an advantage that y'all don't have: I actually sat the exam this question is based upon as well at the same time as the OP (#hsc_gang #option_topic_2 #ir_sw_hw). Hopefully I got both that question and this answer right!</p>
<h2>Explained</h2>
<pre><code>9ŻB⁺ɽ-
9Ż      #     input[1:9]
  B     # int(          , 2)
   ⁺ɽ   #                      127 (N.B. Pushes the index of ɽ in the codepage + 101)
     -  #                    -
        # int(input[1:9], 2) - 127
</code></pre>
<p><strong>Update</strong>: Turns out I got the wrong answer in the exam. Not pog.</p>
"
"215399","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>l</code>, 2 bytes</h1>
<pre><code>Ġt
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=l&amp;code=%C4%A0t&amp;inputs=12344444&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<blockquote>
<p>need to get this to 2 bytes somehow – Razetime</p>
</blockquote>
<h2>Explained</h2>
<pre><code>Ġt
Ġ    # Group the integer into consecutive chunks
 t   # Take the tail of that list
     # The `-l` flag prints the length of TOS
</code></pre>
"
"215401","<h1><a href=""https://github.com/JonoCode9374/Keg"" rel=""nofollow noreferrer"">Keg</a> to <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>᠀\+
</code></pre>
<p><a href=""https://tio.run/##y05N////4YKGGO3//w2NAA"" rel=""nofollow noreferrer"" title=""Keg – Try It Online"">Try it online!</a></p>
<p>This takes the input at a string, pushes a plus sign, and outputs everything on the stack. It prints <code>&lt;input&gt;+</code>, which adds the input to a number in Vyxal.</p>
"
"215729","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>,  3 bytes</h1>
<pre><code>C+C
</code></pre>
<h2>Explained</h2>
<pre><code>C     # Convert input string to a list of ord values
 +    # Add implicit number shift
  C   # Convert back to a list of chars and output
</code></pre>
<p>If it must absolutely be a function:</p>
<h1>7 bytes</h1>
<pre><code>λ2|C+C;
</code></pre>
<h2>Explained</h2>
<pre><code>λ2|C+C;
λ2|      # Start a lambda with two arguments
   C+C   # Same as the full program
      ;  # Close lambda
</code></pre>
"
"216247","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>0{i…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=0%7Bi%E2%80%A6&amp;inputs=%5B2%2C%201%2C%200%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Note that the <code>-5</code> flag is purely for code time-out purposes: it makes the online interpreter stop execution if it takes longer than 5 seconds.</p>
<h2>Explained</h2>
<pre><code>0{i…
0       # Push 0 to the stack
 {      # Repeat the following infinitely:
  i     #   Push the item at index (top of stack) in the input
   …    #   Print that without popping
</code></pre>
"
"217329","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 309 bytes</h1>
<pre><code>In this answer, I coded it so that the program errors when executed․
Also, according to code-golf statistics, only a small percentage of people who view my answers actually upvote․ 
So if you enjoy this answer, please consider upvoting - it's free, and you can change your mind at any time․ 
Enjoy the answer․
</code></pre>
<p>I request that you imagine <a href=""https://www.youtube.com/watch?v=beCC9xJjLZQ"" rel=""noreferrer"">Epic Dawn</a> by Bobby Cole is playing while reading this answer.</p>
<h2>The Error</h2>
<pre class=""lang-python prettyprint-override""><code>Traceback (most recent call last):
  File &quot;C:\Users\61419\Desktop\Vyxal\Vyxal.py&quot;, line 867, in &lt;module&gt;
    exec(line)
  File &quot;&lt;string&gt;&quot;, line 4, in &lt;module&gt;
  File &quot;C:\Users\61419\Desktop\Vyxal\Vyxal.py&quot;, line 592, in VY_int
    return int(item, base)
ValueError: invalid literal for int() with base 10: ''
</code></pre>
<h1>Explained</h1>
<p>This fails immediately on the first instruction it sees: <code>I</code>. It tries to convert the empty input to base 10 (which is impossible)</p>
"
"217519","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>∆QN
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?s=?flags=&amp;code=%E2%88%86QN&amp;inputs=2%0A-15&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Solve for the roots and then negate</p>
"
"217774","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>0?(»Þ([ǒ»Ȯİ∑Ṡ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0%3F%28%C2%BB%C3%9E%28%5B%C7%92%C2%BB%C8%AE%C4%B0%E2%88%91%E1%B9%A0&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of the 05AB1E answer</p>
<h2>Explained</h2>
<pre><code>0?(»Þ([ǒ»Ȯİ∑Ṡ
0?              # Push 0 followed by the input number
  (             # Input number of times:
   »Þ([ǒ»       #     Push the number 433544355
         Ȯİ     #     And get the indexes corresponding to the numbers in the second last item on the stack
           ∑Ṡ   #     Sum that list and then the stack
</code></pre>
"
"217777","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 3 bytes</h1>
<pre><code>yṘY
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=y%E1%B9%98Y&amp;inputs=Hello%20World!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Turns out by making my answer valid I saved a byte. Oh the irony</p>
<h2>Explained</h2>
<pre><code>yṘY
y      # un-interleave
 Ṙ     # reverse
  Y    # re-interleave
</code></pre>
"
"217781","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>=[‿|₌‿⁂JU
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3D%5B%E2%80%BF%7C%E2%82%8C%E2%80%BF%E2%81%82JU&amp;inputs=4%0A4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<p>The output for this challenge is the two input numbers paired together joined with the range between those two numbers. However, there can't be any duplicates in the joined list, so it needs to be uniquified by order of appearance. But we also need to make sure that the two numbers aren't the same: otherwise, a singleton will be returned.</p>
"
"217807","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, <s>14</s> <s>9</s> 8 bytes</h1>
<pre><code>₈ʁ₇ʁḂꜝJZ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=j&amp;code=%E2%82%88%CA%81%E2%82%87%CA%81%E1%B8%82%EA%9C%9DJZ&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://chat.stackexchange.com/transcript/message/56815478#56815478"">OP says it's allowable</a></p>
<p><em>-5 bytes due to porting 05AB1E</em></p>
<h2>Explained</h2>
<pre><code>₈ʁ₇ʁḂꜝJZ
₈ʁ         # Push range [0, 256)
  ₇ʁḂ      # Push [0, 128) and (128, 0]
     ꜝ     # Bit-not over that last copy
      JZ   # Merge and zip
           # The j flag joins on newlines
</code></pre>
"
"218009","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Y
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=Y&amp;inputs=Double%20Speak&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yet another trivial answer. <code>Y</code> interleaves the input string with itself. It’s good that Vyxal can tie with Jelly and beat 05AB1E in matters of triviality.</p>
"
"218187","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>{₁ʁ℅…|
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%7B%E2%82%81%CA%81%E2%84%85%E2%80%A6%7C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm actually quite happy with the way this one turned out. It's always fun when you can print things in the loop's condition.</p>
<h2>Explained</h2>
<pre><code>{₁ʁ℅…|
{      # Open a while loop which loops while:
 ₁ʁ    #      From the range [0, 100)
   ℅   #      A randomly chosen item is truthy (non-0)
    …  #      (Print that value without popping it)
     | # Branch to the empty body of the while loop
</code></pre>
<p>In summary, this works by randomly choosing and printing a random number in the range [0, 100) until that value is 0.</p>
"
"218423","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>W</code>, 24 bytes</h1>
<pre><code>?(4(?℅)?_)`(λṠ ƛ□ ¢¼ up)
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=W&amp;code=%3F%284%28%3F%E2%84%85%29%3F_%29%60%28%CE%BB%E1%B9%A0%20%C6%9B%E2%96%A1%20%C2%A2%C2%BC%20up%29&amp;inputs=4%0A%5B%22I%20am%20a%20terrible%20person%22%2C%20%22Everything%20I%20do%20is%20useless%22%2C%20%22I%20don%27t%20deserve%20to%20be%20loved%22%2C%20%22I%20will%20never%20succeed%20at%20anything%22%5D%0A%5B%22It%27s%20foolish%20to%20believe%20that%22%2C%20%22I%20don%27t%20think%20it%27s%20reasonable%20to%20say%20that%22%2C%20%22I%20will%20never%20believe%20that%22%2C%20%22No%20one%20can%20convince%20me%20into%20thinking%20that%22%5D%0A%5B%22I%20am%20beautiful%20inside%20and%20out%22%2C%20%22The%20people%20around%20me%20love%20me%22%2C%20%22I%20will%20succeed%20at%20my%20career%22%2C%20%22I%20can%20be%20successful%22%5D%0A%5B%22I%20just%20have%20to%20accept%20that%22%2C%20%22After%20all%2C%20it%27s%20pretty%20clear%22%2C%20%22So%20I%20think%20it%27s%20pretty%20obvious%22%2C%20%22It%20will%20be%20clear%20if%20you%20think%20about%20it%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>?(
</code></pre>
<p>Start a for loop, repeating <code>number of stanzas</code> times.</p>
<pre><code>4(?℅)
</code></pre>
<p>From each list of possible lines, choose a random line.</p>
<pre><code>?_) 
</code></pre>
<p>Skip over the next input (which would be the number of stanzas again - input is cyclical in Vyxal, meaning that it loops around if EOI is reached [not applicable when using STDIN, only when passing input through command line])</p>
<pre><code>`(λ≗ ƛΐ æ∺ up)`
</code></pre>
<p>Push the string &quot;(Now read bottom up)`</p>
<pre><code>-W flag
</code></pre>
<p>Wrap the entire stack into a list and implicitly output to STDOUT</p>
"
"218872","<h1><a href=""http://lyxal.pythonanywhere.com"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ġ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C4%A0&amp;inputs=%5B1%2C%201%2C%201%2C%203%2C%203%2C%201%2C%201%2C%202%2C%202%2C%202%2C%201%2C%201%2C%203%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ah yes, the power of triviality.</p>
"
"218874","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 7 bytes</h1>
<pre><code>꘍9v∵›ĖΠ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%EA%98%8D9v%E2%88%B5%E2%80%BA%C4%96%CE%A0&amp;inputs=%5B4%2C%209%2C%2010%2C%207%5D%0A%5B4%2C%204%2C%204%2C%204%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-3 by porting Jonathan Allan's <a href=""https://codegolf.stackexchange.com/a/218917/78850"">Jelly answer</a></em></p>
<h2>Explained</h2>
<pre><code>꘍9v∵›ĖΠ
꘍         # Bitwise XOR of the two input lists
 9v∵      # vectorise(min, ^, 9)
    ›     # ^ + 1 (vectorises)
     Ė    # 1 / ^ (vectorises)
      Π   # product(^)
</code></pre>
"
"218968","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>ja</code>, <s>13</s> 12 bytes</h1>
<pre><code>ƛ⇩ȧṫ4&gt;59$iJṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=ja&amp;code=%C6%9B%E2%87%A9%C8%A7%E1%B9%AB4%3E59%24iJ%E1%B9%85&amp;inputs=12%0A8%0A41%0A27%0A144%0A99%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I simply ported the CJam answer.</p>
<h2>Explained</h2>
<pre><code>ƛ⇩ȧṫ4&gt;59$iJṅ
ƛ             # Over every number in the input,
 ⇩ȧ           #   abs(a - 2)
   ṫ4&gt;        #   ↑[:-1], ↑[-1] &gt; 4
      59$i    #   indexed into 59
          Jṅ  #   merged and joined on &quot;&quot;
</code></pre>
"
"219003","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, <s>5</s> 3 bytes</h1>
<pre><code>'Ḃ=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=j&amp;code=%27%E1%B8%82%3D&amp;inputs=515&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pretty simple answer really.</p>
<h2>Explained</h2>
<pre><code>'Ḃ=
'     # Filter by:
 Ḇ=   #     Bifuricate the argument passed and check if the two results are equal
      # The `j` flag joins on newlines
</code></pre>
"
"219006","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 5 bytes</h1>
<pre><code>ʀ7%1&gt;
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%CA%807%251%3E&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another port of my 05AB1E answer</p>
"
"219111","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>d</code>, <s>15</s> <s>13</s> <s>11</s> <s>10</s> 9 bytes</h1>
<pre><code>≬bL‹↔1€Rb
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=d&amp;code=%E2%89%ACbL%E2%80%B9%E2%86%941%E2%82%ACRb&amp;inputs=12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained (old)</h2>
<pre class=""lang-python prettyprint-override""><code>≬bL‹↔1€Rb
≬bL‹         # lambda: len(bin(argument)) - 1
   ↔        # generate_until_no_change(^, input)
     1€      # ^.split(1)
       R     # map(reverse, ^)
        b    # bin(^)
             # `d` flag: deep_sum(^)
</code></pre>
"
"219231","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ka¦∑℅
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ka%C2%A6%E2%88%91%E2%84%85&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>same idea as the Pyth answer.</p>
"
"219387","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>a</code>, <s>5</s> 4 bytes</h1>
<pre><code>R÷ġṘ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=a&amp;code=R%C3%B7%C4%A1%E1%B9%98&amp;inputs=pog%0Apogchamo&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>R÷ġṘ
R÷   # vectorise reverse over the input (wrapped in an array by the -a flag) and push contents onto the stack
  ġ  # Push the greatest common suffix
   Ṙ # and reverse it to get the prefix
</code></pre>
"
"219442","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 10 bytes</h1>
<pre><code>«/
∨+Ċ≤«βǐ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%2F%0A%E2%88%A8%2B%C4%8A%E2%89%A4%C2%AB%CE%B2%C7%90&amp;inputs=999&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I finally turned my suggested 13 byte 05AB1E answer into a Vyxal answer.</p>
<h2>Explained</h2>
<pre class=""lang-python prettyprint-override""><code>«...«βǐ
«...«    # the string &quot;nubtqphsoe&quot;
     β   # convert the input to bijective-base 10 using the above string as the alphabet
      ǐ  # titlecase that result
</code></pre>
"
"219479","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>‛»Ǒ≠/÷L
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%C2%BB%C7%91%E2%89%A0%2F%C3%B7L&amp;inputs=google&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre class=""lang-python prettyprint-override""><code>‛»Ǒ≠/÷L
‛»Ǒ     # &quot;google&quot;
   ≠    # ↑ != input
    /   # split input into ↑ even pieces. If input is &quot;google&quot;, this will be 0, consequently causing an error
     ÷L # Get the length of the item
</code></pre>
"
"219483","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>⊍
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8A%8D&amp;inputs=cbad%0Adabc&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>An empty list signifies truthy and a non-empty list signifies falsiness. <code>⊍</code> is the built-in for <code>set(a) ^ set(b)</code> in Python (I'm still not sure what that actually does).</p>
<p>But if that's bending things a bit too far:</p>
<h2><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h2>
<pre><code>⊍¬
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8A%8D%C2%AC&amp;inputs=cbad%0Adabc&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>⊍¬
⊍  # set(first) ^ set(second)
   # logical not that and implicitly output
</code></pre>
"
"219487","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 5 bytes</h1>
<pre><code>₌CLœΠ
</code></pre>
<p>Thanks @Lyxal for saving 3 bytes
<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8CCL%C5%93%CE%A0&amp;inputs=%5B%22A%22%5D%20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"219541","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>21</s> <s>20</s> 19 bytes</h1>
<pre><code>3ɽ÷«eeȮǒḋp«₁‹₁W‛, j
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=3%C9%BD%C3%B7%C2%ABee%C8%AE%C7%92%E1%B8%8Bp%C2%AB%E2%82%81%E2%80%B9%E2%82%81W%E2%80%9B%2C%20j&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre class=""lang-python prettyprint-override""><code>3ɽ÷      # stack = [1, 2]
«eeȮǒḋp« # stack = [1, 2, &quot;miss a few&quot;] 
₁‹₁      # stack = [1, 2, &quot;miss a few&quot;, 99, 100]
W‛, j    # join stack on &quot;, &quot;
</code></pre>
"
"219625","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <code>jH</code>, 1 byte</h1>
<pre><code>ʀ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=jH&amp;code=%CA%80&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Flags for the win. The <code>H</code> flag presets the stack to 100, generate range 0 to 100 and then <code>j</code> flag joins on newlines. The flag was around before this challenge too.</p>
"
"219667","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>l</code>, 6 bytes</h1>
<pre><code>‡≈¬⁽¯ẋ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=l&amp;code=%E2%80%A1%E2%89%88%C2%AC%E2%81%BD%C2%AF%E1%BA%8B&amp;inputs=&amp;header=1296%202401%204096%206561%2010000W&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm very proud with how this turned out. It looks and works exactly how I hoped Vyxal would eventually look like.</p>
<h2>Explained</h2>
<pre><code>‡≈¬
</code></pre>
<p>Push a two character lambda to the stack, which returns the logical not of whether or not every element in the list is equal.</p>
<pre><code>⁽¯
</code></pre>
<p>Push a function reference of the detlas built-in</p>
<pre><code>ẋ
</code></pre>
<p>Repeat the deltas function on the input until the first lambda returns true for the current iteration (generate while condition true). Push and implicitly print the length of the resulting list (done by the <code>-l</code> flag)</p>
"
"219759","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 8</h1>
<pre><code>`kh#`kH+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60kh%23%60kH%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs:</p>
<pre><code>kh#Hello, World! 
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kh%23Hello%2C%20World!&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs:</p>
<pre><code>Hello World
</code></pre>
<h2>Explained</h2>
<pre><code>`kh#`
</code></pre>
<p>Push the string <code>&quot;kh#&quot;</code> onto the stack (which, when literally executed, is the constant <code>&quot;Hello World&quot;</code> and a comment)</p>
<pre><code>kH+
</code></pre>
<p>Push the string <code>&quot;Hello, World!&quot;</code> onto the stack and concatenate the two strings together. Implicitly print the string.</p>
"
"219800","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>C</code>, 9 bytes</h1>
<pre><code>9ƛɾømĴ;ḆJ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=C&amp;code=9%C6%9B%C9%BE%C3%B8m%C4%B4%3B%E1%B8%86J&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"219873","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>∞
</code></pre>
<p><strong>Don't try it online</strong></p>
<p>Polyglots with 05AB1E.</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>{፣
</code></pre>
<p>A bit more of a creative way to do the job.</p>
"
"219894","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>i1
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=i1&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> or
<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=1i&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Reversed!</a></p>
<h2>Explained</h2>
<p>Before we begin, <code>i</code> takes two arguments (we'll call them <code>a</code> and <code>b</code>) and returns <code>a[b]</code> (indexing). <code>1</code> simply pushes <code>1</code> to the stack.</p>
<p>The program <code>i1</code> is:</p>
<pre class=""lang-python prettyprint-override""><code>rhs, lhs = pop(stack, 2)
stack.append(lhs[rhs])
stack.append(1)
</code></pre>
<p>Because the stack is empty, implicit input is taken for <code>lhs</code> and <code>rhs</code>. And because there is no input, <code>0</code> is returned each time input is needed. Thus, <code>i</code> gives <code>&quot;0&quot;[0]</code> and then pushes <code>1</code>.</p>
<p>The program <code>1i</code> is:</p>
<pre class=""lang-python prettyprint-override""><code>stack.append(1)
rhs, lhs = pop(stack, 2)
stack.append(lhs[rhs])
</code></pre>
<p>Which attempts to push <code>&quot;0&quot;[1]</code>, which is obviously out of the list. Vyxal doesn't have modular indexing (yet), so this errors.</p>
"
"219941","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 2 bytes</h1>
<pre><code>ƛṘ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%C6%9B%E1%B9%98&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"219956","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, 10 bytes</h1>
<pre><code>αɾkAZƛı. j
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=j&amp;code=%CE%B1%C9%BEkAZ%C6%9B%C4%B1.%20j&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"220006","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>❝,(\&amp;`\⨥\⨪\²\₴`ni+ₑuγd‿¥c[0£
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%9D%9D%2C%28%5C%26%60%5C%E2%A8%A5%5C%E2%A8%AA%5C%C2%B2%5C%E2%82%B4%60ni%2B%E2%82%91u%CE%B3d%E2%80%BF%C2%A5c%5B0%C2%A3&amp;inputs=%5B0%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a list of numbers, where <code>0</code> represents <code>i</code>, <code>1</code> represents <code>d</code>, <code>2</code> represents <code>s</code> and <code>3</code> represents <code>o</code></p>
"
"220017","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>∆K&lt;
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86K%3C&amp;inputs=12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"220023","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 10 bytes</h1>
<pre><code>=£₌+ĸW5c¥∨
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3D%C2%A3%E2%82%8C%2B%C4%B8W5c%C2%A5%E2%88%A8&amp;inputs=9%0A4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Credits</h3>
<ul>
<li>Saved 1 byte thanks to @Lyxal by employing the use of an absolute difference built-in</li>
</ul>
"
"220066","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ZvG
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ZvG&amp;inputs=hello%2C%0Aworld!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>That is: the maximum function (<code>G</code>) <code>v</code>ectorised over the inputs <code>Z</code>ipped together (<code>abc</code> and <code>def</code> turn into <code>[[&quot;a&quot;, &quot;d&quot;], [&quot;b&quot;, &quot;e&quot;], [&quot;c&quot;, &quot;f&quot;]]</code>. Takes a single string (alternatively, a list of characters) and outputs a list of characters.</p>
"
"220120","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 16 bytes</h1>
<pre><code>\J\o\h\nð\D\o\eW
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%5CJ%5Co%5Ch%5Cn%C3%B0%5CD%5Co%5CeW&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre class=""lang-python prettyprint-override""><code>\J\o\h\n    # Push the characters J, o, h and n
ð           # Push a space
\D\o\e      # Push the characters D, o and e
W           # Wrap everything into a list. The s flag joins on newlines
</code></pre>
"
"220138","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 8 bytes</h1>
<pre><code>`I$O`I$O
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYEkkT2BJJE8iLCIiLCJJXG5PXG5gXG5LXG4kIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Back then, there was no quine cheese. Now there is.</p>
<h2>Explained</h2>
<pre><code>`I$O`I$O
`I$O`    # The string &quot;I$O&quot;
     I   # surrounded in backticks and appended to itself
      $O # Get the count of the input in that.
</code></pre>
"
"220141","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>3</s> 2 bytes</h1>
<pre><code>µ¬
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B5%C2%AC&amp;inputs=0%205%208%208%203%205%201%206%208%204%200%203%207%205%206%204%204%207%205%206%207%204%204%209%201%200%205%207%209%203%200%202%202%204%203%200%204%208%207%203%201%204%207%205%201%202%201%208%207%208%207%207%202%206%203%201%202%208%205%201%204%202%200%205%200%206%200%203&amp;header=%3F%C3%B0%2FvI&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Sort by logical negation. The header puts the input into a list format.</p>
"
"220229","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>∺∑⨪Ȧ1=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%BA%E2%88%91%E2%A8%AA%C8%A61%3D&amp;inputs=%5B8%2C%206%2C%208%2C%202%2C%202%2C%203%2C%2011%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just another port of the 05ab1e answer.</p>
"
"220344","<h1>3. <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 162 bytes, 162 distinct bytes, Score: 16467, My total score: 16467</h1>
<pre><code>γ₥⌊₴λƛ¬∧⟑∨⟇÷«»°•․⍎Ṛ½∆øÏÔÇæʀʁɾɽÞƈ∞⫙ß⎝⎠⎡⎣⨥⨪∺❝ð→←ÐřŠč√⳹ẊȦȮḊĖẸṙ∑Ĥ⟨⟩ı⁌\tΤĴ²‿⁂ĸ¶⁋⁑Ńń‼⨊≈µʗ◁⊐∫⍋⍒∈ₛ£Œœ≕≠¥ⁱ‹›⍲⍱‸¡⊑≀℅≤≥↜≗⋯⧢ũ⁰¹ªₑϊ≎⇿⊛×¯±⊂⍞፣⍉ΐ₁⊘ᶢ₌↭ſƀƁ⁚⌈⊓⊣Ḟḟ∪∩⊍⁜⌑Ḇ₂⁾₦¼ƒɖꝒ′α″βΠ&quot;
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%B3%E2%82%A5%E2%8C%8A%E2%82%B4%CE%BB%C6%9B%C2%AC%E2%88%A7%E2%9F%91%E2%88%A8%E2%9F%87%C3%B7%C2%AB%C2%BB%C2%B0%E2%80%A2%E2%80%A4%E2%8D%8E%E1%B9%9A%C2%BD%E2%88%86%C3%B8%C3%8F%C3%94%C3%87%C3%A6%CA%80%CA%81%C9%BE%C9%BD%C3%9E%C6%88%E2%88%9E%E2%AB%99%C3%9F%E2%8E%9D%E2%8E%A0%E2%8E%A1%E2%8E%A3%E2%A8%A5%E2%A8%AA%E2%88%BA%E2%9D%9D%C3%B0%E2%86%92%E2%86%90%C3%90%C5%99%C5%A0%C4%8D%E2%88%9A%E2%B3%B9%E1%BA%8A%C8%A6%C8%AE%E1%B8%8A%C4%96%E1%BA%B8%E1%B9%99%E2%88%91%C4%A4%E2%9F%A8%E2%9F%A9%C4%B1%E2%81%8C%5Ct%CE%A4%C4%B4%C2%B2%E2%80%BF%E2%81%82%C4%B8%C2%B6%E2%81%8B%E2%81%91%C5%83%C5%84%E2%80%BC%E2%A8%8A%E2%89%88%C2%B5%CA%97%E2%97%81%E2%8A%90%E2%88%AB%E2%8D%8B%E2%8D%92%E2%88%88%E2%82%9B%C2%A3%C5%92%C5%93%E2%89%95%E2%89%A0%C2%A5%E2%81%B1%E2%80%B9%E2%80%BA%E2%8D%B2%E2%8D%B1%E2%80%B8%C2%A1%E2%8A%91%E2%89%80%E2%84%85%E2%89%A4%E2%89%A5%E2%86%9C%E2%89%97%E2%8B%AF%E2%A7%A2%C5%A9%E2%81%B0%C2%B9%C2%AA%E2%82%91%CF%8A%E2%89%8E%E2%87%BF%E2%8A%9B%C3%97%C2%AF%C2%B1%E2%8A%82%E2%8D%9E%E1%8D%A3%E2%8D%89%CE%90%E2%82%81%E2%8A%98%E1%B6%A2%E2%82%8C%E2%86%AD%C5%BF%C6%80%C6%81%E2%81%9A%E2%8C%88%E2%8A%93%E2%8A%A3%E1%B8%9E%E1%B8%9F%E2%88%AA%E2%88%A9%E2%8A%8D%E2%81%9C%E2%8C%91%E1%B8%86%E2%82%82%E2%81%BE%E2%82%A6%C2%BC%C6%92%C9%96%EA%9D%92%E2%80%B2%CE%B1%E2%80%B3%CE%B2%CE%A0%22&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
The power of Unicode. I'm not sure about the score, but this takes the average of [1, 2, 8] (<code>3.66666...</code>) and takes the floor of that number.</p>
<p>Feel free to correct my score if needed. I calculated it as <span class=""math-container"">\$(1+2+3+...+162)\$</span> [part 1 of scoring]</p>
<p><span class=""math-container"">\$+ (1+2+3+...+96)\$</span> [part 2 of scoring: 162 my answer - 66 previous answer = 96 difference distinct bytes)</p>
<ul>
<li>(<code>sum(map(lambda x: x*10, range(1, 17)))</code>)<span class=""math-container"">\$ - 16*2\$</span> [part 3]</li>
</ul>
<p><s><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3A%CA%80%E2%88%91%24%3F%C4%B8%CA%80%E2%88%91%2B%3F%3A%C2%A310%E2%B3%B9%3A%E2%86%92x%CA%8010*%E2%88%91-%E2%86%90x%C2%A510%25*-&amp;inputs=162%0A66%0A162&amp;header=&amp;footer="" rel=""nofollow noreferrer"">My scoring utility. Takes number of distinct bytes in your answer, the number of distinct bytes in the previous answer and the length of your answer</a></s></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3F%20%E2%86%92your_bytes%0A%3F%20%E2%86%92their_bytes%0A%3F%20%E2%86%92program_length%0A%0A%E2%86%90your_bytes%20%3A%E2%A8%A5*%C2%BD%20%23%20The%20sum%20of%201%20%2B%202%20%2B%203%20%2B...%2B%20n%0A%0A%E2%86%90your_bytes%20%E2%86%90their_bytes%20-%20%23%20Distinct%20byte%20difference%0A%0A%3A%C2%A3%20%23%20Put%20that%20into%20the%20register%20for%20later.%20%0A%0A%3A%E2%A8%A5*%C2%BD%20%23%20Sum%20of%20the%20byte%20difference%0A%0A%C2%A50%3Cu%24e*%20%23%20If%20the%20original%20difference%20is%20negative%2C%20negate%20the%20sum%2C%20which%20will%20be%20positive%0A%0A%C2%A50%E2%89%A0*%2B%20%23%20If%20the%20difference%20is%200%2C%20make%20the%20sum%200.%20Then%20add%0A%0A%E2%86%90program_length%2010%E2%B3%B9%3A%C2%A3%3A%E2%A8%A5*%C2%BD-%20%23%20Subtract%20part%201%20of%20the%20byte%20penalty%0A%0A%E2%86%90program_length%2010%25%20%C2%A5*-%2C%0A%0A%0A&amp;inputs=66%0A1%0A102&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try this one instead. It should work a bit more accurately and work for higher byte counts. Inputs are: a) your distinct bytes, b) last answers distinct bytes, c) program length</a></p>
"
"220371","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>#d
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%23d&amp;inputs=Heck&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very good trivial answer. Make sure to wrap input in double quotation marks.</p>
<h2>Explained</h2>
<pre><code>#d
</code></pre>
<p>Nothing, a standard cat program</p>
<pre><code>d#
</code></pre>
<p>Double the input string and output.</p>
"
"220394","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s> 3+1</s> 3 bytes</h1>
<pre><code>∆K=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86K%3D&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 byte thanks to @Deadcode for telling me to not be an idiot and remember that I added a sum of proper divisors built-in. I actually forgot that I did</em></p>
<p>This is: does the sum of the proper divisors of the input (<code>∆K</code>) equal the input itself (<code>=</code>).</p>
"
"220406","<h1>[5. <a href=""http://lyxal.pythonanywhere.com/"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes, 9 distinct bytes, score 3436]</h1>
<pre><code>⨥⨥²⨥⨥⨪½Ç◁ṙȦ₴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%A8%A5%E2%A8%A5%C2%B2%E2%A8%A5%E2%A8%A5%E2%A8%AA%C2%BD%C3%87%E2%97%81%E1%B9%99%C8%A6%E2%82%B4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it online</a></p>
<p>Well I really just wanted to get this challenge moving again, after @Noodle9 basically ruled out the entire ASCII character set! So I learnt a little Vyxal just for this... after writing a Deadfish interpreter here Vyxal actually made some sense...</p>
<p>I'm sure I could do more useless operations to the register, but basically its just increment twice, square it, increment twice then decrement for 5, half it for 2.5, subtract from 1 for 1.5, reverse for 5.1, round it for 5, take the absolute value, and output it.</p>
<p>(As far as the scoring, I'm totally confused, I just put what Lyxal's utility gave me. From the text, it sounds like my small answer should have a negative score for being smaller than #4...)</p>
"
"220529","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>N⍲
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=N%E2%8D%B2&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just a port of the bitwise stuff.</p>
"
"220590","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>KḢ₃
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%E1%B8%A2%E2%82%83&amp;inputs=0&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I thought something non trivial would be nice for a change. <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%A6&amp;inputs=2&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>æ</code></a> does the job for one byte but where's the fun in that?</p>
<p><em>-1 thanks to EmanresuA</em></p>
<h2>Explained</h2>
<pre><code>KḢ₃
KḢ   # factors(input)[1:]
  ₃  # len(^) == 1 // prime numbers have only [1, n] as factors...other numbers have 1 or 3+ factors
</code></pre>
"
"220660","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>≈
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%89%88&amp;inputs=999&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simply checks if all the digits are equal to each other</p>
"
"220699","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>{k/℅₴
</code></pre>
<p>No trying it online</p>
<p>It was a smart choice adding all of the two byte constants of 05ab1e and Jelly.</p>
"
"220754","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>kd⊍
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kd%E2%8A%8D&amp;inputs=867953120&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Imagine not having set operations.</p>
<h2>Explained</h2>
<pre><code>kd⊍
kd    # &quot;0123456789&quot;
  ⊍   # set(↑) ^ set(input)
</code></pre>
"
"220771","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>‼∑
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%BC%E2%88%91&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A very literal interpretation of the challenge: <code>sum_of_digits_of(factorial(input))</code></p>
"
"220836","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Þ!c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDniFjIiwiIiwiMjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Updated to 2.16.0</p>
<p>This checks if the input is in an infinite list of factorials. Now you're probably wondering &quot;but what if it isn't in the factorial list? A linear search won't ever terminate it'll just keep on going!&quot; Well Vyxal is smart enough to know that in strictly ascending infinite lists of numbers, you stop once you reach a number bigger than what you're searching for.</p>
"
"220838","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>d</code>, 2 bytes</h1>
<pre><code>øe
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=d&amp;code=%C3%B8e&amp;inputs=woooorld&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>That is,</p>
<pre><code>øe  # run length encode the implicit input
    # the d flag deep sums the top of the stack before outputting
</code></pre>
"
"221056","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>÷↭⫙'N^N^W
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B7%E2%86%AD%E2%AB%99%27N%5EN%5EW&amp;inputs=%5B2%2C%203%2C%202%2C%20-1%5D&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>÷↭⫙'N^N^W
÷          # Push every item of the input onto the stack
 ↭        # And rotate the top three items: [a, b, c, d] → [a, d, b, c]
   ⫙'      # Rotate the entire stack left
     N^N^W # Negate the top and bottom of the stack and wrap into a list
</code></pre>
"
"221129","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>kd`0u5uu29u86`⇿ₑ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kd%600u5uu29u86%60%E2%87%BF%E2%82%91&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simply push the digits 0 to 9, push the string <code>0u5uu29u86</code> (the mapping of each number - <code>u</code> pushes -1 in Vyxal), transliterate and evaluate as Vyxal.</p>
"
"221207","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 10 bytes</h1>
<pre><code>ʁ:ḢẊµɖ⁰ε;h
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CA%81%3A%E1%B8%A2%E1%BA%8A%C2%B5%C9%96%E2%81%B0%CE%B5%3Bh&amp;inputs=5%0A0.1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of the 05AB1E answer.</p>
<h2>Explained</h2>
<pre><code>ʁ:ḢẊµɖ⁰ε;h
ʁ:         # Push two copies of the range [0, input)
  Ḣ        # on one of those copies, remove the first element
   Ẋ       # Take the cartesian product of these two lists
    µ...;  # And sort this by:
     ɖ⁰ε   # the absolute difference between the second input and the item reduced by division
         h # output the first item
</code></pre>
"
"221213","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>m?
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=m%3F&amp;inputs=Bees&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A blatant port of the 05ab1e answer. Imaginary brownie points for anyone who can give me an answer to the question posed by my answer.</p>
"
"222940","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>₍ḭ%
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8D%E1%B8%AD%25&amp;inputs=7%0A5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8D%E1%B8%AD%25&amp;inputs=&amp;header=%CE%BB%C3%B7&amp;footer=%3B%0A%0A%E2%9F%A8%0A%20%E2%9F%A85%7C7%E2%9F%A9%7C%0A%20%E2%9F%A85%7C1%E2%9F%A9%7C%0A%20%E2%9F%A818%7C4%E2%9F%A9%7C%0A%20%E2%9F%A8255%7C25%E2%9F%A9%0A%E2%9F%A9%24z%0A%0A%28%0A%20%60%25%2C%20%25%20%5C%E2%86%92%20%25%2C%20%25%60%E2%9F%A8nhh%7Cnht%7Cnth%7Cntt%E2%9F%A9%25%2C%0A%29%20"" rel=""nofollow noreferrer"">Try a test suite!</a></p>
<p>The header and footer are for formatting purposes. Otherwise takes arguments in reversed order.</p>
<h2>Explained</h2>
<pre><code>₍ḭ%
₍   # parallel apply the next two commands and collect into a list:
 ḭ% # integer divide and modulo
</code></pre>
"
"223092","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>j</code>, 3 bytes</h1>
<pre><code>⁽Π↔
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=j&amp;code=%E2%81%BD%CE%A0%E2%86%94&amp;inputs=277777788888899&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very nice little 3 byter here. Uses the same method as the 05ab1e answer.</p>
<h2>Explained</h2>
<pre><code>⁽Π↔
⁽Π  # lambda x: product(x) // treats numbers as a list of digits
 ↔ # repeat the above function until the result doesn't change, collecting intermediate results. 
</code></pre>
"
"223094","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ÞF
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%C3%9EF%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Before you go saying that the online link doesn't match the submission here, that's because the extra <code>,</code> is needed to actually make the output appear online. If you use the offline version, then you will see that the above works just fine. Also, the <code>5</code> flag makes sure that the online interpreter times out after 5 seconds.</p>
<h2>Explained</h2>
<pre><code>ÞF  # Push every Fibonacci number
</code></pre>
<p>And now for the non-trivial version</p>
<h2><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>5</code>, 6 bytes</h2>
<pre><code>⁽+dk≈Ḟ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%E2%81%BD%2Bdk%E2%89%88%E1%B8%9E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Once again, discrepancies between online link and actual version are for the purposes of making it work online.</p>
<h3>Explained</h3>
<pre><code>⁽+dk≈Ḟ
⁽+d     # lambda x, y: x + y
   k≈   # the list [0, 1]
     Ḟ  # Create an infinite sequence based on the function and the initial list.
</code></pre>
<p>Fun fact: the infinite sequence function you see was inspired by the sequence blocks of the golfing language Arn by ZippyMagician.</p>
"
"223296","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 5 bytes</h1>
<pre><code>‡Ė+ḭƒ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%A1%C4%96%2B%E1%B8%AD%C6%92&amp;inputs=%5B4%2C2%2C1%2C3%2C1%2C2%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I added <code>foldr</code> lol.</p>
<h2>Explained</h2>
<pre><code>‡Ė+ḭƒ
‡Ė+    # lambda x, y: 1 / x + y
   ḭ   # reduce input by ↑, going right-to-left
    ƒ  # fractionify the result
</code></pre>
"
"223356","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>d</code>, 5 bytes</h1>
<pre><code>5vτ½⌈
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=d&amp;code=5v%CF%84%C2%BD%E2%8C%88&amp;inputs=37&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of the Jelly answer which is a port of short husk answer.</p>
<h2>Explained</h2>
<pre><code>5vτ½⌈
5vτ   # convert each digit of the input to base 5
   ½  # halve each item in that list (halving vectorises all the way down)
    ⌈ # ceiling each item in that list
      # -d deep sums the list and implicitly outputs
</code></pre>
"
"223364","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>‡∆ṗεẊ1=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%A1%E2%88%86%E1%B9%97%CE%B5%E1%BA%8A1%3D&amp;inputs=48&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very nice and neat answer (flagless too!)</p>
<h2>Explained</h2>
<pre><code>‡∆ṗεẊ1=
‡∆ṗε    # lambda x: abs(x - prev_prime(x))
    Ẋ   # repeat that on the input until it doesn't change
     1= # does that equal 1?
</code></pre>
"
"223451","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, all 35 characters, 243 bytes</h1>
<pre><code>54C
55C
55 1+C
55 2+C
45 3+C
45C
51 5d+C
121C
111 3d+C
5d2e5+C
111C
112C
5 4+2e5d+C
52 41+C
5d2e4+C
5d2e3d+C
5d2e3d+1+C
5d2e4d+C
54 5+C
35 4+C
44 2+dC
115 3+C
45 4+dC
5dD2e+C
5d2e4 5++C
45 1+d2+C
35 3+C
42C
5dddC
41C
45d5+C
43C
55 3+C
34C
124C
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=54C%0A55C%0A55%201%2BC%0A55%202%2BC%0A45%203%2BC%0A45C%0A51%205d%2BC%0A121C%0A111%203d%2BC%0A5d2e5%2BC%0A111C%0A112C%0A5%204%2B2e5d%2BC%0A52%2041%2BC%0A5d2e4%2BC%0A5d2e3d%2BC%0A5d2e3d%2B1%2BC%0A5d2e4d%2BC%0A54%205%2BC%0A35%204%2BC%0A44%202%2BdC%0A115%203%2BC%0A45%204%2BdC%0A5dD2e%2BC%0A5d2e4%205%2B%2BC%0A45%201%2Bd2%2BC%0A35%203%2BC%0A42C%0A5dddC%0A41C%0A45d5%2BC%0A43C%0A55%203%2BC%0A34C%0A124C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The extra character is <code>+</code></p>
"
"223470","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>‡ǐṅẊ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%A1%C7%90%E1%B9%85%E1%BA%8A&amp;inputs=6&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Jelly really do be getting rekt by stack languages though :p</p>
<p><s>This isn't 4 bytes because strings and integers aren't interchangeable like 05ab1e (and by extension Ohm), but that's okay.</s> I added better type cohesion.</p>
<h2>Explained</h2>
<pre><code>‡ǐṅẊ
‡ǐṅ  # lambda x: &quot;&quot;.join(prime_factorisation(x))
   Ẋ # repeat the above on the input until it doesn't change.
</code></pre>
"
"223546","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ÞU†Tİ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%9EU%E2%80%A0T%C4%B0&amp;inputs=%5B2%2C3%2C3%2C5%2C5%2C4%2C3%2C7%2C1%5D%0A%5B1%2C2%2C3%2C4%2C5%2C6%2C7%2C8%2C9%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same as the APL and Jelly answer.</p>
<h2>Explained</h2>
<pre><code>ÞU†Tİ
ÞU    # unique mask over second list
  †   # vectorised not over that
   Tİ # and index the truthy indices into the first list
</code></pre>
"
"223642","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ȧ›∆τ⌈
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C8%A7%E2%80%BA%E2%88%86%CF%84%E2%8C%88&amp;inputs=-2003&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to the 05AB1E answer for providing me with an algorithm to port.</p>
<h2>Explained</h2>
<pre><code>ȧ›∆τ⌈
ȧ›      # abs(input) + 1
  ∆τ    # log_10(↑)
    ⌈   # ceil(↑)
</code></pre>
"
"223687","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>∆K‹ḭ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86K%E2%80%B9%E1%B8%AD&amp;inputs=697&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Porting the jelly answer ftw</p>
<h2>Explained</h2>
<pre><code>∆K‹ḭ
∆K   # sum of proper divisors of input
  ‹  # ↑ - 1
   ḭ # input // ↑ (integer division)
</code></pre>
"
"223813","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>d</code>, 7 bytes</h1>
<pre><code>Ṙ½ÞTRÞT
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=d&amp;code=%E1%B9%98%C2%BD%C3%9ETR%C3%9ET&amp;inputs=ABCDEFGHI&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Porting Jelly is always the best way to do code-golf.</p>
<h2>Explained</h2>
<pre><code>Ṙ½ÞTRÞT
Ṙ         # reversed(input)
 ½        # ↑ split into two halves
  ÞT      # transpose ↑
    R     # reverse each row in ↑ (when neither argument is a function, reduce performs vectorised reverse instead)
     ÞT   # tranpose ↑ and deep sum (flatten then sum) using -d flag
</code></pre>
"
"223884","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 3 bytes</h1>
<pre><code>M$R
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=M%24R&amp;inputs=&amp;header=%CE%BB2%7C-%3B%20%0A2%202N%22%0A%CE%BB%C2%B2%3B&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>[g, [a, b], f]</code>. If reduction was reversible, then this would be 2 bytes.</p>
<h2>Explained</h2>
<pre><code>M$R
M   # map f over [a, b]
 $R # reduce that by g
</code></pre>
"
"223979","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>kH
</code></pre>
<p>Pushes the built-in string <code>Hello, World!</code>, with implicit output.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kH&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"223985","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://github.com/AMiller42/Grok-Language"" rel=""nofollow noreferrer"">Grok</a> <s><sup>10</s></sup> 12 bytes</h1>
<p><em>Edit: In my first version, I forgot that casting to <code>int</code> would remove precision in the Vyxal code. Added +2 bytes to fix it.</em></p>
<pre><code>I√`#:Yp*zq`_
</code></pre>
<p>Vyxal (Square Root):</p>
<pre><code>              # Implicit input
I             # Cast to int
 √            # Square root
  `#:Yp*zq`   # Push string
           _  # Delete string
              # Implicit output
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com/?flags=&amp;code=I%E2%88%9A%60%23%3AYp*zq%60_&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online in Vyxal!</a></p>
<p>Grok (Square):</p>
<pre><code>I√            # Push '√' to the register
  `#          # Skip ‘#’ command
    :         # Take input from STDIN
     Yp       # Duplicate
       *z     # Multiply and output as int
         q    # Quit
          `_  # Never gets executed
</code></pre>
<p><a href=""http://grok.pythonanywhere.com?flags=&amp;code=I%E2%88%9A%60%23%3AYp*zq%60_&amp;inputs=10"" rel=""nofollow noreferrer"">Try it Online in Grok!</a></p>
"
"223992","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆ƈ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86%C6%88&amp;inputs=2%0A100&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another built-in, like 05AB1E, but not quite as concise.
First input is <code>k</code>, second input is <code>n</code>.</p>
"
"224033","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>±
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B1&amp;inputs=-42&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Nothing special, just a built-in, but nobody else had posted it yet, so I figured I might as well.</p>
<h1>No built-in, <s><sup>7</s></sup>2 bytes</h1>
<p><em>Thanks to @Bubbler for saving 5 bytes.</em></p>
<pre><code>ȧ/
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5B1%E2%81%B01%3C%5B%E2%87%A9&amp;inputs=-42&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Does <code>|x| / x</code>. In Vyxal, <code>0 / 0</code> returns <code>0</code> instead of a divide by zero error, so this works.</p>
"
"224058","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>±
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B1&amp;inputs=0&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"224059","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>/ḣǐJṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%2F%E1%B8%A3%C7%90J%E1%B9%85&amp;inputs=.%0Ahello.world&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"224089","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s><sup>11</s></sup> 10 bytes</h1>
<p><em>Thanks to @Razetime for -1 byte by writing <code>199</code> as <code>⁺b</code>.</em></p>
<pre><code>ꜝ⁺b*3ḭ₁N%⌐
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%EA%9C%9D199*3%E1%B8%AD%E2%82%81N%25%E2%8C%90&amp;inputs=16&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Vyxal port of <a href=""https://codegolf.stackexchange.com/a/224040/101522"">@xnor's Python answer</a>, with a bit of extra golfing.</p>
<p>Explanation:</p>
<pre><code>            # Note: 'X' denotes current value.

            # Implicit input
ꜝ           # ( X + 1 ) * -1
 ⁺b*        # X * 199
    3ḭ      # X // 3
      ₁N%   # X % -100
         ⌐  # 1 - X
            # Implicit output
<span class=""math-container"">```</span>
</code></pre>
"
"224123","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20</s> 19 bytes</h1>
<pre><code>I₌I-ƒJ`% + (%/%)`$%
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=I%E2%82%8CI-%C6%92J%60%25%20%2B%20%28%25%2F%25%29%60%24%25&amp;inputs=420.240&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It's convoluted because of the handling of the output format</p>
<h2>Explained (old)</h2>
<pre><code>:I₌₴-ƒ\/j`...`$%,
:I                # int(input)
  ₌₴-             # print(top, end=&quot;&quot;), input - int(input) [gets the fractional part] 
     ƒ            # Turn the decimal into a simplified fraction
      \/j         # Join that on &quot;/&quot;
         `...`    # The string &quot; + (%)&quot; -&gt; this will be used for formatting the output
              $%, # perform string formatting and output the fraction part
</code></pre>
"
"224128","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>vO
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=vO&amp;inputs=%5B1%2C%202%2C%202%2C%201%2C%204%2C%208%2C%201%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wow y'all using unicode in your golfing languages while I'm chilling in the ASCII zone.</p>
<h2>Explained</h2>
<pre><code>vO  # vectorise count over the input
    # essentially, [input.count(n) for n in input]
</code></pre>
"
"224137","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes, 4 distinct characters</h1>
<pre><code>k∨$F
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=k%E2%88%A8%24F&amp;inputs=This%20program%20will%20remove%20VOWELS.%0ASo%20we%20can%20now%20speak%20without%20them.&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Only works with single-line strings. Explanation:</p>
<pre><code>      # Implicit input
k∨    # Constant &quot;aeiouAEIOU&quot;
  $   # Swap top two values
   F  # Remove from second string any characters in first string
      # Implicit output
</code></pre>
"
"224146","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 3 bytes</h1>
<pre><code>ʁ¡Ė
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%CA%81%C2%A1%C4%96&amp;inputs=20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>     # Implicit input
ʁ    # Range [0, N)
 ¡   # Map factorial over all elements
  Ė  # Map inverse over all elements
     # 's' flag: cumulative sum top of stack and output
</code></pre>
"
"224163","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 / 20 bytes</h1>
<p>There's two main schools of thought for interpreting <code>;#</code>:</p>
<ul>
<li>Go through every command and apply it <strong>(Iterative)</strong></li>
<li>Split the program into strings of <code>;</code>, then count and output. <strong>(Split 'n Count)</strong></li>
</ul>
<p>Here's both!</p>
<hr />
<h1>Iterative, 20 bytes</h1>
<pre><code>0$(\;n=ß›\#n=[₇‹%C₴0
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0%24%28%5C%3Bn%3D%C3%9F%E2%80%BA%5C%23n%3D%5B%E2%82%87%E2%80%B9%25C%E2%82%B40&amp;inputs=%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bq%3B%3B%3B%3B%3B%3Bw%3B%3B%3B%3B%3B%3Be%3B%3B%3B%3Br%3B%3B%3B%3B%3B%3B%3B%3Bt%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3By%3B%3B%3B%3B%3B%3B%23%3B%3B%3B%3B%3B%3B%3B%3Bu%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bi%3B%3Bo%3B%3B%3B%3B%3B%3B%3Bp%3B%3B%3B%3B%3B%3B%3Ba%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bs%3B%3B%3B%3B%3B%3B%3Bd%3Bf%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bgg%3B%3B%3B%3B%3B%3B%3B%3B%3Bh%3B%3B%3B%3B%3B%3B%3B%3B%23%3B%3B%3B%3Bjklamp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>                      # Implicit input
0$                    # Initialize accumulator at the bottom of the stack
  (                   # For each command in the program
   \;n=ß              # If command = ';':
        ›             #  Increment accumulator
         \#n=[        # If command = '#':
              ₇‹%     #  Accumulator % 127
                 C    #  Convert accumulator to character
                  ₴   #  Print accumulator w/o newline
                   0  #  Reset accumulator
</code></pre>
<hr />
<h1>Split 'n Count <code>K</code>, <s><sup>14</s></sup> <s><sup>12</s></sup> 10 bytes</h1>
<p><em>-1 byte thanks to @caird coinheringaahing.</em></p>
<p><em>-1 byte by using Map Lambda instead of a for loop.</em></p>
<p><em>-2 bytes by using Keg mode and removing the <code>n</code> I left in from the for loop.</em></p>
<pre><code>35€ƛ59O₇‹%
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=K&amp;code=35%E2%82%AC%C6%9B59O%E2%82%87%E2%80%B9%25&amp;inputs=%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bq%3B%3B%3B%3B%3B%3Bw%3B%3B%3B%3B%3B%3Be%3B%3B%3B%3Br%3B%3B%3B%3B%3B%3B%3B%3Bt%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3By%3B%3B%3B%3B%3B%3B%23%3B%3B%3B%3B%3B%3B%3B%3Bu%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bi%3B%3Bo%3B%3B%3B%3B%3B%3B%3Bp%3B%3B%3B%3B%3B%3B%3Ba%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bs%3B%3B%3B%3B%3B%3B%3Bd%3Bf%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3Bgg%3B%3B%3B%3B%3B%3B%3B%3B%3Bh%3B%3B%3B%3B%3B%3B%3B%3B%23%3B%3B%3B%3Bjklamp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Output is a list of characters.</p>
<p>Explanation:</p>
<pre><code>            # Implicit input; characters are converted to ordinal values
35€         # Split input program at '#'
   ƛ        # For every section of program:
    59O     #   Count ';'
       ₇‹%  #   Modulus 127
            # 'K' flag - ordinal values are converted to characters
</code></pre>
"
"224168","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 1 byte, sum 23</h1>
<pre><code>æ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%A6&amp;inputs=23&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p><code>æ</code> is the built-in primality checker. Vyxal uses its own codepage, in which the character <code>æ</code> is <code>0x17</code>, or <code>23</code>, which is a prime number.</p>
"
"224225","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>¡
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A1&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Built-in factorial.</p>
<hr />
<h1>No built-in, 2 bytes</h1>
<pre><code>ɾΠ
</code></pre>
<p>Explanation:</p>
<pre><code>    # Implicit input
ɾ   # Range [1, N]
 Π  # Reduce by multiplication
    # Implicit output
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%CE%A0&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"224274","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>kB∷
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kB%E2%88%B7&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>kB   # Built-in constant &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;
  ∷  # Second half of the string
     # Implicit output
</code></pre>
<hr />
<h2>Alternate 3 byte solution</h2>
<pre><code>kzṘ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kz%E1%B9%98&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>kz   # Built-in constant &quot;zyxwvutsrqponmlkjihgfedcba&quot;
  Ṙ  # Reverse the string
     # Implicit output
</code></pre>
"
"224277","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>«:L∞I\«ǐ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%3AL%E2%88%9EI%5C%C2%AB%C7%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>«:L∞I\«   # Base-256 compressed &quot;john doe&quot;
       ǐ  # Convert To Title Case
          # Implicit output
</code></pre>
<p>Vyxal doesn't support capital letters in compressed strings, which is why the <code>ǐ</code> command is needed.</p>
"
"224288","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ǒ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C7%91&amp;inputs=2%0A512&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p><em>laughs in stolen jelly built-ins</em></p>
"
"224323","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes, Courtesy of Lyxal</h1>
<pre><code>\hJ≈[\h↔Lkh*|«∧↳
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5ChJ%E2%89%88%5B%5Ch%E2%86%94Lkh*%7C%C2%AB%E2%88%A7%E2%86%B3&amp;inputs=hhh&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 32 bytes</h1>
<pre><code>\hṡ¤=≈['\h=;L`Hello World`*|`err
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5Ch%E1%B9%A1%C2%A4%3D%E2%89%88%5B%27%5Ch%3D%3BL%60Hello%20World%60*%7C%60err&amp;inputs=hh&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"224345","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 22 bytes</h1>
<pre><code>ḢṪ⌐:h⌊⁰h\(=+^t⌊⁰t\)=-ṡ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%E1%B8%A2%E1%B9%AA%E2%8C%90%3Ah%E2%8C%8A%E2%81%B0h%5C%28%3D%2B%5Et%E2%8C%8A%E2%81%B0t%5C%29%3D-%E1%B9%A1&amp;inputs=%22%2815%2C%2025%5D%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I don't really know Vyxal so I suppose this can be golfed more. But the idea here is to get both the numbers and take sum of all integers between them. If the first character is <code>(</code>, then increase the first number by 1, and if the last character is <code>)</code>, then decrease the second number by 1.</p>
<pre><code>ḢṪ⌐     # Remove first and last characters, then split by &quot;,&quot;
:       # Duplicate
h⌊      # Take first element and convert to integer
⁰h\(=+  # Add 1 if the first character of input is equal to &quot;(&quot;
^       # Reverse stack
t⌊      # Get last element and convert to integer
⁰t\)=-  # Subtract 1 if the last character of input is equal to &quot;)&quot;
ṡ       # Inclusive summation

</code></pre>
"
"224373","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>R</code>, 21 bytes, Courtesy of Lyxal and ManishKundu</h1>
<pre><code>«ɽL3Gp↵¢¨Π°ꜝ«½k2℅1=iǐ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=R&amp;code=%C2%AB%C9%BDL3Gp%E2%86%B5%C2%A2%C2%A8%CE%A0%C2%B0%EA%9C%9D%C2%AB%C2%BDk2%E2%84%851%3Di%C7%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>`Min`k2ʀ℅1&gt;[`ec`|`ce`]+`raft`+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60Min%60k2%CA%80%E2%84%851%3E%5B%60ec%60%7C%60ce%60%5D%2B%60raft%60%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>Well someone help me to compress these strings....</s> no no don't compress, compressing this yield larger strings....</p>
"
"224391","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>\*₀*¶+₀*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C*%E2%82%80*%C2%B6%2B%E2%82%80*&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 due to cairdcoinheringaahing</p>
<p>Later I reduced another one</p>
"
"224439","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>33</s> 30 bytes</h1>
<pre><code>1:{›Ȯ?≤|:λ¡²nɾ²/M∑:n¡²ġ/;†^_}Ȯ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=1%3A%7B%E2%80%BA%C8%AE%3F%E2%89%A4%7C%3A%CE%BB%C2%A1%C2%B2n%C9%BE%C2%B2%2FM%E2%88%91%3An%C2%A1%C2%B2%C4%A1%2F%3B%E2%80%A0%5E_%7D%C8%AE&amp;inputs=1077749&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Let us try to maintain a stack with 2 elements <span class=""math-container"">\$n\$</span> and <span class=""math-container"">\$f(n)\$</span> after every step, with <span class=""math-container"">\$f(n)\$</span> being the required numerator.</p>
<pre><code>1:     # Pushes [1, 1] to the stack.
{      # While...
›      # Increment the first value of stack -&gt; [n+1, f(n)]
Ȯ?≤    # While condition: Is the second value of stack less than or equal to the input?
|      # If yes, then...
:      # Duplicate the top value of stack. Now it contains [n+1, n+1, f(n)]
λ      # Lambda function
 ¡²    # Factorial of n, squared.
nɾ²    # Inclusive range [1, n], and square every number.
/M∑    # Divide every time with first argument and return the sum.
:n¡²ġ/ # Duplicate this value, then divide it with it's gcd with factorial n, squared
;      # Return value.
†      # Call the function. Now the stack contains [f(n+1), n+1, f(n)]
^      # Reverse stack -&gt; [f(n), n+1, f(n+1)]
_      # Pop from stack -&gt; [n+1, f(n+1)]
}      # End while
Ȯ      # Print second item of stack.
</code></pre>
<p><em>-3 bytes thanks to Lyxal</em></p>
"
"224456","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>₀ɾ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%C9%BE&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>₀   # 10
 ɾ  # Range [1, N]
    # Implicit output
</code></pre>
"
"224545","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s><sup>8</s></sup> <s><sup>7</s></sup> 6 bytes</h1>
<p><em>Thanks to @Razetime for saving 1 byte due to the <code>⌊</code> command auto-vectorising.</em></p>
<pre><code>½⌊v∑&gt;t
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BD%E2%8C%8Av%E2%88%91%3Et&amp;inputs=%2212345678%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input in the form of <code>&quot;12345678&quot;</code>. Alternatively, the quotes can be left out if the <code>Ṡ</code> flag is used.</p>
<p>I’m gonna be honest, I’m not really sure what the <code>&gt;</code> is doing since <code>(a:string, b:list)</code> isn’t documented for that command, but I was messing with it and found that in this case it returns <code>&lt;1|0&gt;</code> or <code>&lt;1|1&gt;</code>, so I take the last value of the list and that’s the answer.</p>
<p>Explanation:</p>
<pre><code>        # Implicit input
½       # Split the input into two chunks
 ⌊      # Convert both chunks to integers
  v∑    # Sum the digits of each chunk
    &gt;   # Some sort of a&gt;b thing?
     t  # Tail; last item
        # Implicit output
</code></pre>
"
"224555","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>kBklĿ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kBkl%C4%BF&amp;inputs=Programming%20Puzzles%20%26%20Code%20Golf&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>kB     # Constant 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
  kl   # Constant 'ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba'
    Ŀ  # Transliterate a(b -&gt; c)
       # Implicit output
</code></pre>
"
"224600","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>uN‹ß⇧:[,]_⇩
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=uN%E2%80%B9%C3%9F%E2%87%A7%3A%5B%2C%5D_%E2%87%A9&amp;inputs=Hello%2C%20World!&amp;header=&amp;footer="" rel=""noreferrer"">Full Program:</a></p>
<pre><code>             # Implicit input, e.g. &quot;Hello, World!&quot;
uN‹          # Pushes '-1', negates it, and decrements, evaluating to `0`
   ß⇧        # Pops the top of the stack, and if it's truthy, converts the input to UPPERCASE. The top of the stack is '0', so this isn't executed
     :[,]    # Duplicates the top of the stack, and prints it if it is truthy, which it is
         _   # Discards the top of the stack
          ⇩  # Converts the input to lowercase
             # Implicit output is disabled

Output: Hello, World!
</code></pre>
<hr />
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=N%E2%80%B9%C3%9F%E2%87%A7%3A%5B%2C%5D_%E2%87%A9&amp;inputs=Hello%2C%20World!&amp;header=&amp;footer="" rel=""noreferrer"">UPPERCASE PROGRAM:</a></p>
<pre><code>            # Implicit input, e.g. &quot;Hello, World!&quot;
N‹          # Swaps the casing of the input and appends '-', evaluating to 'hELLO, wORLD!-'
  ß⇧        # Pops the top of the stack, and if it's truthy, converts the input to UPPERCASE. The top of the stack is a non-empty string, so this is executed
    :[,]    # Duplicates the top of the stack, and prints it if it is truthy, which it is
        _   # Discards the top of the stack
         ⇩  # Converts the input to lowercase
            # Implicit output is disabled

Output: HELLO, WORLD!
</code></pre>
<hr />
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=u%E2%80%B9%E2%87%A7%3A%5B%2C%5D_%E2%87%A9&amp;inputs=Hello%2C%20World!&amp;header=&amp;footer="" rel=""noreferrer"">lowercase program:</a></p>
<pre><code>           # Implicit input, e.g. &quot;Hello, World!&quot;
u‹         # Pushes '-1' and decrements, evaluating to '-2'
  ⇧        # Performs graded_up() on the top of the stack, evaluating to '0'
   :[,]    # Duplicates the top of the stack, and prints it if it is truthy. '0' is falsey, so it is not executed
       _   # Discards the top of the stack
        ⇩  # Convert the input to lowercase
           # Implicit output

Output: hello, world!
<span class=""math-container"">```</span>
</code></pre>
"
"224603","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>Ǎ[æ[kA|ka
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C7%8D%5B%C3%A6%5BkA%7Cka&amp;inputs=X&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>           # Implicit input
Ǎ[         # If input is a letter:
  æ[       #   If input is capitalized:
    kA     #     Push 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      |    #   Else:
       ka  #     Push 'abcdefghijklmnopqrstuvwxyz'
           # Implicit output
</code></pre>
"
"224611","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 lines, 25 bytes</h1>
<pre><code>`
Hello
,
 Wor
l
d
!`
\
-
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%0AHello%0A%2C%0A%20Wor%0Al%0Ad%0A!%60%0A%5C%0A-&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`        #
Hello    |
,        |
 Wor     | Push 'Hello\n,\n Wor\nl\nd\n!'
l        |
d        |
!`       #
     \   # Push '\n'
      -  # Remove all '\n' from 'Hello\n,\n Wor\nl\nd\n!'
         # Implicit output
</code></pre>
"
"224668","<h1>Day 1. <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 43 bytes</h1>
<pre><code>`λ… ba-a-a-ad λ‹ I be? I'm λ¾ °Ḋ λ⟨ †↲ ₀⅛--
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%CE%BB%E2%80%A6%20ba-a-a-ad%20%CE%BB%E2%80%B9%20I%20be%3F%20I%27m%20%CE%BB%C2%BE%20%C2%B0%E1%B8%8A%20%CE%BB%E2%9F%A8%20%E2%80%A0%E2%86%B2%20%E2%82%80%E2%85%9B--&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong><a href=""https://codegolf.stackexchange.com/a/224566/101522"">Previous Answer</a></strong></p>
<p>Line for tomorrow: <code>If it's all right, then you're all wrong.</code> From <a href=""https://genius.com/The-friendly-indians-i-know-you-know-lyrics"" rel=""nofollow noreferrer""><em>I Know, You Know</em></a>, a.k.a. the <a href=""https://en.wikipedia.org/wiki/Psych"" rel=""nofollow noreferrer""><em>Psych</em></a> theme song, by The Friendly Indians</p>
<hr />
<p>Song so far:</p>
<pre><code>How ba-a-a-ad can I be? I'm just doing what comes naturally--
</code></pre>
"
"224710","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>kAkaĿ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kAka%C4%BF&amp;inputs=%C3%84bC&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>You'll be cackling with laughter when you see this! :p</p>
<p>I lost by one byte but the funny pronunciation of the program is worth it. Simply transliterate the upper-case alphabet with the lower-case alphabet.</p>
"
"224831","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s><sup>6</s></sup> <s><sup>7</s></sup> 3 bytes</h1>
<p><em>Thanks to @hyper-neutrino for helping me to understand what expected output is.</em></p>
<p><em>Thanks to @Lyxal for porting a different answer than I did for -4 bytes.</em></p>
<pre><code>∆ṘĖ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86%E1%B9%98%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>∆Ṙ   # Random float in range [0.0, 1.0)
  Ė  # Reciprocal
     # Implicit output
</code></pre>
"
"224897","<h1 id=""vyxal-9-bytes-ancl""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>kA¦₄ʁ꘍RṘ⁋
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kA%C2%A6%E2%82%84%CA%81%EA%98%8DR%E1%B9%98%E2%81%8B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>could be -1 byte by replacing the <code>⁋</code> at the end with the <code>j</code> flag</p>
<p>-4 bytes from the initial working version thanks to ovs<br />
some golfs were proposed by other people but they broke the answer<br />
-2 bytes thanks to Aaron Miller</p>
<pre><code>kA¦₄ʁ꘍RṘ    Full Program
kA          &quot;ABC...XYZ&quot;
  ¦         &quot;A&quot;, &quot;AB&quot;, &quot;ABC&quot;, ..., &quot;ABC...XYZ&quot;
   ₄        26
    ʁ       0..25
     ꘍      a + &quot; &quot; * b (returns &quot;A&quot;, &quot;AB &quot;, &quot;ABC  &quot;, ...)
      R     Reverse each (&quot;A&quot;, &quot; BA&quot;, &quot;  CBA&quot;, ...)
       Ṙ    Reverse the entire list
        ⁋   Join on newlines
</code></pre>
"
"224928","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>'?ġ1=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%27%3F%C4%A11%3D&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>       # Implicit input
'      # Apply function for n in range [0,input) and filter:
 ?     #   Input
  ġ    #   GCD of input and current number
   1=  #   Equal to 1?
       # Implicit output
</code></pre>
"
"224943","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>I
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=I&amp;inputs=-33.5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Casts input to int, stripping any decimals.</p>
"
"224944","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>#N
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%23N&amp;inputs=42&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=N%23&amp;inputs=42&amp;header=&amp;footer="" rel=""nofollow noreferrer"">!enilnO ti yrT</a></p>
<p><code>#N</code> is a comment, so nothing happens and the input is outputted unchanged.</p>
<p><code>N#</code> negates the input, which is then outputted implicitly.</p>
<p>If you’re not a fan of using comments for something like this, the <code>#</code> can be replaced with any of <code>? , ₴ ⁰</code>, etc.</p>
"
"224948","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>«∧
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%E2%88%A7&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pushes <code>'a'</code> as a compressed string, which is printed automatically.</p>
"
"224980","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>›
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com/?flags=&amp;code=%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Doubled:</p>
<pre><code>››
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com/?flags=&amp;code=%E2%80%BA%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online! Try it Online!</a></p>
<p>Increments the top of the stack. Since the stack is empty, 0 is incremented instead, outputting 1. When doubled, 0 is incremented twice, outputting 2.</p>
"
"224981","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>u1
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com/?flags=&amp;code=u1&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com/?flags=&amp;code=1u&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">!enilnO ti yrT</a></p>
<p><code>1</code> pushes 1, <code>u</code> pushes -1. The last one pushed is automatically printed at the end of execution.</p>
"
"224989","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <del>9</del> 8 bytes</h1>
<pre><code>1{:›1&gt;|½
</code></pre>
<p>LOTM finally gave me a reason to actually try Vyxal, and so far I like it!</p>
<p>-1 byte thanks to Aaron Miller</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=1%7B%3A%E2%80%BA1%3E%7C%C2%BD&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225005","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>12Ḋ⌐₄?11*-?2≤e*
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com/?flags=&amp;code=12%E1%B8%8A%E2%8C%90%E2%82%84?11*-?2%E2%89%A4e*&amp;inputs=2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>12Ḋ       # Is the input divisible by 12
⌐         # Negate that. So stack contains 0 for numbers divisible by 12 and 1 otherwise
₄?11*-    # 26-11*n
?2≤e      # Is the input less than equal to 2?
e         # Take exponent
*         # Multiply the two numbers in the stack and print the result.
</code></pre>
"
"225006","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>12Ḋ⌐₄?11*-∴
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com/"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Port of hyper-neutrino's Python answer</p>
<h2>How it works</h2>
<pre><code>12Ḋ⌐₄?11*-∴ - Program. N is on the stack
12Ḋ         - Is N divisible by 12, 12 | N?
   ⌐        - Logical NOT
    ₄?11    - Push 26, N, 11
        *   - Yield 11×N
         -  - Yield 26 - 11×N
          ∴ - Maximum of (26 - 11 × N) and ¬(12 | N)
</code></pre>
"
"225170","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>⇧N
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%87%A7N&amp;inputs=AbC&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is the same as the 05ab1e answer but shorter because overloads.</p>
<h2>Non-trivial version</h2>
<pre><code>kAkaĿ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=c&amp;code=kAka%C4%BF&amp;inputs=AbC&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Funnily enough, <a href=""https://codegolf.stackexchange.com/a/224710/78850"">I've used this before</a>.</p>
<pre><code>kAka    # Push &quot;ABC...XYZ&quot; and &quot;abc...xyz&quot;
    Ŀ   # Transliterate input with the above strings
</code></pre>
"
"225178","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s><sup>27</s></sup> 25 bytes</h1>
<p><em>Thanks to Underslash for -2 bytes because numbers.</em></p>
<pre><code>»$⇩∪£¼ɾǏ℅yṙ`₆gǏ¦¨λ»kεk×**
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%24%E2%87%A9%E2%88%AA%C2%A3%C2%BC%C9%BE%C7%8F%E2%84%85y%E1%B9%99%60%E2%82%86g%C7%8F%C2%A6%C2%A8%CE%BB%C2%BBk%CE%B5k%C3%97**&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Unfortunately, the compressed form of the number contains a <code>2</code> and a <code>0</code>. This is a different number, multiplied by another number multiplied by another number, to get the target number.</p>
<pre><code>»$⇩∪£¼ɾǏ℅yṙ`₆gǏ¦¨λ»        # Push 11482618231106483731969943632999939453125
                   kε      # Push 32768
                     k×    # 2147483648
                       **  # Multiply all the numbers
                           # Implicit output
</code></pre>
"
"225186","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s><sup>12</s></sup> 11 bytes</h1>
<p><em>-1 byte thanks to @lyxal reminding me about multibyte lambdas.</em></p>
<pre><code>ṘÞTf‡d∑ẇ∑₀Ḋ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%C3%9ETf%E2%80%A1d%E2%88%91%E1%BA%87%E2%88%91%E2%82%80%E1%B8%8A&amp;inputs=1234567812345678&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>             # Implicit input
Ṙ            # Reverse
 ÞT          # Transpose
   f         # Flatten list
    ‡  ẇ     # For every second element:
     d       #   Double
      ∑      #   Sum digits
        ∑    # Sum all elements
         ₀Ḋ  # x % 10 == 0?
             # Implicit output
</code></pre>
"
"225211","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>λ₍∑ΠḊA;ȯt
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%E2%82%8D%E2%88%91%CE%A0%E1%B8%8AA%3B%C8%AFt&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><del>Apparently there's a 10 byte 0-indexed version.</del></p>
<p>-3 bytes from Lyxal.</p>
"
"225238","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>29</s> 26 bytes, times out when n&gt;=200,000 on online interpreter.</h1>
<p>My first ever Vyxal post.
29-&gt;26, adviced by @lyxal.</p>
<pre><code>6ɽ{:L?&lt;|:2*$:3*$:5*∪∪∪}s?Ẏ
</code></pre>
<h2>How it works</h2>
<pre><code># let first hamming numbers are 1 to 6
6ɽ
# while items of they are less than n; do
{:L?&lt;|
# for each item, multiply with those numbers
# and then unify them; done
  :2*$:3*$:5*∪∪∪}
# sort
s
# take first n items
?Ẏ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=6%C9%BD%7B%3AL%3F%3C%7C%3A2*%24%3A3*%24%3A5*%E2%88%AA%E2%88%AA%E2%88%AA%7Ds%3F%E1%BA%8E&amp;inputs=200&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225245","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>kτ‹86400*kḢ3600*+kṀ60*+kṠ+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=k%CF%84%E2%80%B986400*k%E1%B8%A23600*%2Bk%E1%B9%8060*%2Bk%E1%B9%A0%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>For some unknown reason, <code>s</code> flag dosen't work</p>
"
"225281","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>(¯N
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%C2%AFN&amp;inputs=4%0A%5B10%2C%2018%2C%20-12%2C%204%2C%208%2C%20-3%2C%20-5%2C%2067%2C%209%2C%2014%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input like <code>n, [list]</code></p>
"
"225283","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>-1
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=-1&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225285","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>109</s> 84 bytes</h1>
<pre><code>\0⅛\1⅛\2⅛?(¾3n›e(¼_)ƛ0+⅛_nt0=[n›⅛n2+⅛|nt1=[n›⅛|n2+⅛]])ƛ\0`00
`øṙ\1`01
`øṙ\2`10
`øṙ;⁋
</code></pre>
<p>My first Vyxal answer, which is probably why it's so bad.</p>
<p>-25 bytes thanks to lyxal.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C0%E2%85%9B%5C1%E2%85%9B%5C2%E2%85%9B%3F%28%C2%BE3n%E2%80%BAe%28%C2%BC_%29%C6%9B0%2B%E2%85%9B_nt0%3D%5Bn%E2%80%BA%E2%85%9Bn2%2B%E2%85%9B%7Cnt1%3D%5Bn%E2%80%BA%E2%85%9B%7Cn2%2B%E2%85%9B%5D%5D%29%C6%9B%5C0%6000%0A%60%C3%B8%E1%B9%99%5C1%6001%0A%60%C3%B8%E1%B9%99%5C2%6010%0A%60%C3%B8%E1%B9%99%3B%E2%81%8B&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225287","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 39 bytes</h1>
<pre><code>℅‛'s+:→a\ ?'h←a⇩h=;``J℅\ ?'h←a⇩h=;℅++++
</code></pre>
<p>Finally figured out what I'm doing.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%84%85%E2%80%9B%27s%2B%3A%E2%86%92a%5C%20%3F%27h%E2%86%90a%E2%87%A9h%3D%3B%60%60J%E2%84%85%5C%20%3F%27h%E2%86%90a%E2%87%A9h%3D%3B%E2%84%85%2B%2B%2B%2B&amp;inputs=%5B%27Stephanie%27%2C%27Bob%27%2C%27Jim%27%5D%0A%5B%27jolly%27%2C%27buoyant%27%2C%27starry%27%5D%0A%5B%27jam%27%2C%27stone%27%2C%27boat%27%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225289","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>2(?9•??e*)&gt;
</code></pre>
<p>I'm beginning to understand Vyxal.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=2%28%3F9%E2%80%A2%3F%3Fe*%29%3E&amp;inputs=3%0A2%0A1%0A1%0A2%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225292","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>25</s>  10 bytes</h1>
<pre><code>λ?:ɾ℅~=[x+
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%3F%3A%C9%BE%E2%84%85%7E%3D%5Bx%2B&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-15 thanks to Aaron Miller. This is a fully functional program as lambdas are automatically called at the end.</p>
"
"225306","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 91 bytes</h1>
<pre><code>£:0=[¥(n₂[`| | |`|`|   |`],)|1=[¥(ðn*n₂[`\ \ \\`|`\   \\`]+,)|¥(ð¥‹n-*n₂[`/ / /`|`/   /`]+,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A3%3A0%3D%5B%C2%A5%28n%E2%82%82%5B%60%7C%20%7C%20%7C%60%7C%60%7C%20%20%20%7C%60%5D%2C%29%7C1%3D%5B%C2%A5%28%C3%B0n*n%E2%82%82%5B%60%5C%20%5C%20%5C%5C%60%7C%60%5C%20%20%20%5C%5C%60%5D%2B%2C%29%7C%C2%A5%28%C3%B0%C2%A5%E2%80%B9n-*n%E2%82%82%5B%60%2F%20%2F%20%2F%60%7C%60%2F%20%20%20%2F%60%5D%2B%2C&amp;inputs=5%0A-1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A little better.</p>
"
"225345","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>3e⊍
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=3e%E2%8A%8D&amp;inputs=102343&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>An empty set is truthy and a set with items is falsey. If that ain't an acceptable format for output:</p>
<h2>4 bytes</h2>
<pre><code>3e⊍¬
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=3e%E2%8A%8D%C2%AC&amp;inputs=251894&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>3e⊍
3e  # input ^ 3
  ⊍ # symmetric set difference between the above and input
    # ¬ will negate that result, making it either `0` or `1`
</code></pre>
"
"225385","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⌈ƛk∨↔L
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88%C6%9Bk%E2%88%A8%E2%86%94L&amp;inputs=One%20plus%20two%20equals%20three&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>        # Implicit input
⌈       # Split input on ' '
 ƛ      # For each word in input:
  k∨↔   #   Remove all non-vowels
     L  #   Length of resulting string
        # Implicit output
</code></pre>
"
"225394","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>¤\!V
</code></pre>
<pre><code> ¤\!V - Full program
-------
 ¤    - Push empty string to the stack
  \!  - Push exclamation mark to the stack, better than `!`
    V - take implicit input and replace the empty 
        string with the exclamation point
</code></pre>
<p>For an empty input, it will produce <code>!0!</code> because it considers the empty input 0, but I don't believe this can be fixed since taking input plainly returns 0 for &quot;&quot;.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A4%5C!V&amp;inputs=Hello%2C%20World!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225412","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 17 bytes</h1>
<pre><code>ƛꜝ;5ẇRvBkAkd+$İṅ+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%EA%9C%9D%3B5%E1%BA%87RvBkAkd%2B%24%C4%B0%E1%B9%85%2B&amp;inputs=a0RE000000IJmcN&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>My first attempt at golfing in Vyxal.</p>
<h2>Explanation</h2>
<pre><code>ƛꜝ;5ẇRvBkAkd+$İṅ+
ƛ ;                 Map
 ꜝ                    Is uppercase?
   5ẇ               Split into chunks of 5
     R              Reverse each
      v             Vectorize
       B              Convert from binary
        kAkd+       Push uppercase letters joined with digits
             $      Swap
              İ     Index
               ṅ    Join into a string
                +   Append to the original string
</code></pre>
"
"225413","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 11 bytes</h1>
<pre><code>0J0p¯T⁽‹ẇ2ẇ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0J0p%C2%AFT%E2%81%BD%E2%80%B9%E1%BA%872%E1%BA%87&amp;inputs=%5B0%2C0%2C1%2C1%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C1%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C1%2C1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Translation of <a href=""https://codegolf.stackexchange.com/a/214394/98955"">my Jelly answer</a>.</p>
<h2>Explanation</h2>
<pre><code>0J0p¯T⁽‹ẇ2ẇ
0J             Append 0
  0p          Prepend 0
    ¯         Deltas
     T        Truthy indices
      ⁽ ẇ     Apply to even indices
       ‹        Decrement
         2ẇ   Split into chunks of 2
</code></pre>
<p><em>-1 byte thanks to lyxal</em></p>
"
"225423","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>∷$½:N$ṡ∧
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%B7%24%C2%BD%3AN%24%E1%B9%A1%E2%88%A7&amp;inputs=9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>∷$½:N$ṡ∧
∷          Parity
 $         Swap (putting the input on top again)
  ½        Half
   :       Duplicate
    N      Negate
     $     Swap
      ṡ    Range from a to b
       ∧   Logical AND
</code></pre>
"
"225426","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>k/τk/ṘǑǒ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=k%2F%CF%84k%2F%E1%B9%98%C7%91%C7%92&amp;inputsamp;header=%CE%BB&amp;footer=%3Bz"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Fortunately, Vyxal has a remove-substring-until-fixed-point builtin. Unfortunately, it only works on strings.</p>
<pre><code>k/τ         Convert input to base &quot;/\&quot;. (only string constant of length 2)
      Ǒ     Until it is no longer present as a substring, remove
   k/       &quot;/\&quot;
     Ṙ      reversed.
       ǒ    Is the result empty?
</code></pre>
<p>Originally did some fancy dancing with stack rotations in Vyxal <code>r</code>, but it turned out the same length flagless to just use <code>k/</code> twice. I'm not having the best luck putting a solution together without replacement, but it doesn't seem like it could come out shorter.</p>
"
"225442","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>×=[kh|tð=[k×ʀ℅|{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%C3%97%3D%5Bkh%7Ct%C3%B0%3D%5Bk%C3%97%CA%80%E2%84%85%7C%7B&amp;inputs=*&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> The <code>5</code> flag is just so that you don't have to wait as long for it to timeout. Even at the default 60 second timeout, this times out on <code> * </code>, but you can see that it works by replacing <code>k×</code> with a smaller number.</p>
<p>Currently, this beats all other answers.</p>
<p>Explanation:</p>
<pre><code>                  # Implicit input
×=[               # If input = &quot;*&quot;:
   kh             #   Push &quot;Hello World&quot;
     |tð=[        # Else if last character of input = &quot; &quot;:
          k×      #   Push 2147483648
            ʀ     #   Range [0, 2147483648]
             ℅    #   Random integer from range
              |   #     Else:
               {  #       While True:  (Infinite loop)
                  # Implicit output
</code></pre>
"
"225471","<h1>3. <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 0</h1>
<pre><code>`A ƛ‡ commitment's w∷⟇ I'm ʀ¨ of
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60A%20%C6%9B%E2%80%A1%20commitment%27s%20w%E2%88%B7%E2%9F%87%20I%27m%20%CA%80%C2%A8%20of&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225544","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>¬+
</code></pre>
<p>Straightforward answer:</p>
<pre><code>¬  # nots the input (x == 0 ? 1 : 0)
+  # adds it to the input
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AC%2B&amp;inputs=0&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225594","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>35</s> <s>29</s> <s>25</s> 19 bytes</h1>
<pre><code>16(h‛⊍Ṁ⇧$-` '2`Ẋ℅¨…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=16%28h%E2%80%9B%E2%8A%8D%E1%B9%80%E2%87%A7%24-%60%20%272%60%E1%BA%8A%E2%84%85%C2%A8%E2%80%A6&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to Lyxal for -6 bytes.</p>
<pre><code>16(                 # Repeat 16 times (Automatically closed)
   h                # Take first of previous
    ‛⊍Ṁ⇧            # Push `fru`, uppercased
        $           # Swap top two elements on stack
         -          # Remove (So fru loses the first of previous iteration)
          ` '2`     # Push ` '2`
               Ẋ    # Cartesian product
                ℅   # Random choice
                 ¨… # No idea (Can't find any docs)
</code></pre>
<h2>My old version, 25 bytes</h2>
<pre><code>16(‛Ŀ¦⇧'¥≠;℅:£`'2 `℅+⅛)¾Ṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=16%28%E2%80%9B%C4%BF%C2%A6%E2%87%A7%27%C2%A5%E2%89%A0%3B%E2%84%85%3A%C2%A3%60%272%20%60%E2%84%85%2B%E2%85%9B%29%C2%BE%E1%B9%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>16(                   )   # 16 times
   ‛Ŀ¦⇧                   # Push compressed string `fur`, to uppercase
       '  ;               # Filter by...
        ¥≠                # is not equal to register
           ℅              # Random choice
            :£            # Duplicate and push to register
              `'2 `℅      # Random of `'2 `
                    +     # Concatentated
                     ⅛    # Push to global array
                       ¾  # Push global array to stack
                        Ṅ # Join by space
</code></pre>
<p>I know this is a mess. Also this seems to be the only one that compresses even one of the strings.</p>
"
"225610","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>34</s> 32 bytes</h1>
<pre><code>ƛ0€y&quot;ÞT:£⁰(¥J)ṖƛKƛÞTƛṅ;≈;a;a;\.p
</code></pre>
<p>-2 thanks to @Aaron Miller</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%C6%9B0%E2%82%ACy%22%C3%9ET%3A%C2%A3%E2%81%B0%28%C2%A5J%29%E1%B9%96%C6%9BK%C6%9B%C3%9ET%C6%9B%E1%B9%85%3B%E2%89%88%3Ba%3Ba%3B%5C.p&amp;inputs=9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is a port of my 05AB1E answer, with seperating by 0 instead of run length decoding required, and a different behavior when the length of it isn't even. Also, instead of up to N pieces, it's up to N uses of each piece, but all of that shouldn't matter to the limit's uncomputablity. This is my first time golfing in vyxal, so any improvements would be helpful.</p>
<pre><code>ƛ         map each in range to
 0€       split by 0
 y&quot;ÞT     uninterleave and transpose
 :£       save in register
 ⁰(¥J)    merge with itself input times
 Ṗ        take all permutations
 ƛ        and map each to
  K       its prefixes
  ƛ       map each to
   ÞT     it transpose
   ƛṅ;    join each
   ≈      all are equal?
   ;
   a      are any of those 1?
  ;
  a       are any of those 1?
;
\.p       prepend .
implicitly output as a string
</code></pre>
"
"225653","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>4,</s> 3 bytes</h1>
<p>-1 thanks to @Aaron Miller (uses implicit input for the 1s)</p>
<pre><code>[{₴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%5B%7B%E2%82%B4&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225655","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>41</s> <s>22</s> 9 bytes</h1>
<pre><code>≬:‹⋏↔Ṫ‹İ∑
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%86%92f%7B%3A%7C%3A%E2%86%90f%24i%C2%A5%2B%C2%A3%3A%3A0%24-%E2%8B%8F-%7D%C2%A5&amp;inputs=%5B0%2C%206%2C%204%2C%203%2C%2036%2C%201%2C%208%2C%203%2C%2016%2C%205%2C%204%5D%0A3&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>-13 bytes thanks to Razetime.</p>
"
"225685","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20</s> 19 bytes</h1>
<pre><code>{≥|3ʁƛ∆Ṙd⌐;:²∑√:1}/
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%7B%E2%89%A5%7C3%CA%81%C6%9B%E2%88%86%E1%B9%98d%E2%8C%90%3B%3A%C2%B2%E2%88%91%E2%88%9A%3A1%7D%2F&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses the second method.</p>
<h2>Explanation</h2>
<pre><code>{≥|3ʁƛ∆Ṙd⌐;:²∑√:1}/
{                }  While
 ≥                    Greater or equal
  |                 do:
   3ʁ                 [0,1,2]
     ƛ    ;           Map:
      ∆Ṙ                Random number from 0 to 1
        d               Double
         ⌐              Subtract from 1
           :          Duplicate
            ²         Square
             ∑        Sum
              √       Square root
               :      Duplicate
                1     Push 1
                  / Divide [the vector by the length]
</code></pre>
"
"225687","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>Gɾƛ?$c
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=G%C9%BE%C6%9B%3F%24c&amp;inputs=%5B6%2C3%2C5%2C1%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Gɾƛ?$c
G      Maximum
 ɾ     Range
  ƛ    Map:
   ?     Push the input
    $    Swap
     c   Contains?
</code></pre>
"
"225796","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 25 bytes</h1>
<pre><code>₀(‛RD5*ƛ‛+-℅d+;\U‛U'&quot;℅JṄ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%28%E2%80%9BRD5*%C6%9B%E2%80%9B%2B-%E2%84%85d%2B%3B%5CU%E2%80%9BU%27%22%E2%84%85J%E1%B9%84%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>₀(‛RD5*ƛ‛+-℅d+;\U‛U'&quot;℅JṄ,
 (                         For n
₀                          in range(10):
  ‛RD                        Push &quot;RD&quot;
     5*                      Repeat 5 times
       ƛ      ;              Map:
        ‛+-                    Push &quot;+-&quot;
           ℅                   Choose random
            d                  Double
             +                 Concatenate top two
               \U            Push &quot;U&quot;
                 ‛U'         Push &quot;U'&quot;
                    &quot;        Join top two into a pair
                     ℅       Choose random
                      J      Join top two
                       Ṅ     Join with spaces
                        ,    Print
</code></pre>
"
"225798","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>⇩`[a-z]+`$ẎUs
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%87%A9%60%5Ba-z%5D%2B%60%24%E1%BA%8EUs&amp;inputs=%60%22290%28%2679832aAa%28*%26%20*79%20--%3DBBBb%29bbBb%20%28%20x%20%29*d%20-cxaAa_%22%20-%3E%20%5B%22aaa%22%2C%22bbbb%22%2C%22cxaaa%22%2C%22d%22%2C%22x%22%5D%60&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-3 thanks to Razetime.</p>
<p>+1 because I forgot to sort it.</p>
"
"225803","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 82 bytes / 53 chars</h1>
<pre><code>`áéíõúÁÉÍÕÚàêióuÀÊIÓUãeiôuÃEIÔUâeiouÂEIOUÇç`k∨4*‛Cc+Ŀ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%C3%A1%C3%A9%C3%AD%C3%B5%C3%BA%C3%81%C3%89%C3%8D%C3%95%C3%9A%C3%A0%C3%AAi%C3%B3u%C3%80%C3%8AI%C3%93U%C3%A3ei%C3%B4u%C3%83EI%C3%94U%C3%A2eiou%C3%82EIOU%C3%87%C3%A7%60k%E2%88%A84*%E2%80%9BCc%2B%C4%BF&amp;inputs=%60%C3%A1%C3%9A%C3%A0%C3%AAi%C3%B3u%C3%80%C3%8AI%60&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The bad version, I can't figure out how to port any of the good ones.</p>
"
"225855","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>a</code> <s>39</s> 37 bytes</h1>
<p>-2 thanks to @Aaron Miller</p>
<pre><code>ṘėṘƛt`\|/``|/_`Ŀnh$꘍;:ƛ`^ *`$et;g£ƛ¥ȯ
</code></pre>
<p>Really bad answer, id like to fix it;
the program takes in the string, breaks it into chunks, transliterates to the correct characters, and then spends most of the chars trying to fix the spacing.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=a&amp;code=%E1%B9%98%C4%97%E1%B9%98%C6%9Bt%60%5C%7C%2F%60%60%7C%2F_%60%C4%BFnh%24%EA%98%8D%3B%3A%C6%9B%60%5E%20*%60%24et%3Bg%C2%A3%C6%9B%C2%A5%C8%AF&amp;inputs=%20%2F%5C%2F%5C%2F%5C%20%20%20%20%2F%5C%2F%5C%2F%5C%0A%2F%5C%20%20%20%20%20%20%20%20%2F%5C%0A%20%2F%5C%20%20%20%20%20%20%20%20%2F%5C%20%20%2F%5C%2F%5C%0A%20%20%2F%5C%20%20%20%20%20%20%20%20%2F%5C%20%20%20%20%2F%5C%0A%20%20%20%20%20%2F%5C%2F%5C%2F%5C%20%20%20%20%2F%5C%2F%5C%2F%5C&amp;header=&amp;footer=%2C"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225862","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɾĖ∑
</code></pre>
<p>Lame answer, but range -&gt; reciprocal -&gt; sum -&gt; implicit out, same as jelly</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%C4%96%E2%88%91&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 2 bytes</h1>
<pre><code>ɾĖ
</code></pre>
<p>2 Bytes w/ -s from @lyxal, -s sums the stack</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%C9%BE%C4%96&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225886","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ɾ$eDΠ$/∑$Π&quot;:ġ/
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%24eD%CE%A0%24%2F%E2%88%91%24%CE%A0%22%3A%C4%A1%2F&amp;inputs=8%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"225913","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>«_sa}]∷«⇧=`+30 æ§\7`*
</code></pre>
<p>Based on <a href=""https://codegolf.stackexchange.com/a/225302/80050"">@Makonede's 05AB1E answer</a>.</p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB_sa%7D%5D%E2%88%B7%C2%AB%E2%87%A7%3D%60%2B30%20%C3%A6%C2%A7%5C7%60*&amp;inputs=UUDDLRLRBA&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explained:</p>
<pre><code>«_sa}]∷«⇧=`+30 æ§\7`*    
                    *    # Repeat...
          `+30 æ§\7`     # the string '+30 lives␇'... (escape code \7 is BEL)
                         # once if ...
         =               # the (implicit) input equals...
«_sa}]∷«                 # the compressed code...
        ⇧                # in uppercase...
                         # otherwise repeat zero times
</code></pre>
"
"225956","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ƛÞF$i;Π
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C3%9EF%24i%3B%CE%A0&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>r</code>, 6 bytes</h1>
<pre><code>ƛÞFi;Π
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=r&amp;code=%C6%9B%C3%9EFi%3B%CE%A0&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>        # implicit input
ƛ    ;  # Lambda map (1...input inclusive)
 ÞF     # All fibbonacci numbers
   $    # Swap stack
    i   # Item 
      Π # Reduce by product
        # Implicit output
</code></pre>
<p>With r, all functions take arguments in reverse, so <code>$</code> is not needed.</p>
"
"225979","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>«ƛ.←√Fǎ⁰ɾ@=½•
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C6%9B.%E2%86%90%E2%88%9AF%C7%8E%E2%81%B0%C9%BE%40%3D%C2%BD%E2%80%A2&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to AaronMiller</p>
<p>Vyxal forever lads, it has crushed 05AB1E and Jelly I am so proud</p>
"
"225989","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>`:q$+=`:q$+=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aq%24%2B%3D%60%3Aq%24%2B%3D&amp;inputs=%60%3Aq%24%2B%3D%60%3Aq%24%2B%3D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I finished making this, and then realized that it is almost identical to the Vyxal quine that @Lyxal wrote, but with the addition of <code>=</code> to check if the input is equal.</p>
<p>Explanation:</p>
<pre><code>              # Implicit input
`:q$+=`       # Push the string ':q$+='
       :      # Duplicate the string
        q     # Quotify; put backticks around the topmost string
         $    # Swap the top two values on the stack
          +   # Concatenate the two strings
           =  # Check if the input is equal to the string
              # Implicit output
</code></pre>
"
"225994","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>¦Dt½-∩
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A6Dt%C2%BD-%E2%88%A9&amp;inputs=%5B1%2C2%2C3%2C4%5D%2C%5B1%2C2%2C3%2C4%2C5%5D%2C%5B6%2C6%2C12%2C12%2C12%2C11%2C1%2C12%5D%2C%5B2%2C1%2C3%2C4%5D%2C%5B1000000%2C1000001%2C1%5D%2C%5B10%5D%2C%5B1%2C2%2C3%5D%2C%5B1000000%2C1000001%5D%2C%5B1%2C1%5D%2C%5B1%5D%2C%5B42%2C42%5D%2C%5B1%2C2%5D%2C%5B1%2C17%2C9%2C13%2C2%2C7%2C3%5D%2C%5B3%2C1%2C1%5D%2C%5B3%2C1%2C2%5D%2C%5B1%2C2%2C1%2C2%2C1%2C2%5D%2C%5B10%2C20%2C10%5D%2C%5B10%2C20%2C10%2C1%5D&amp;header=%C6%9B&amp;footer=%5B1%7C0%5D%3B"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>As in Jelly, a list is falsy iff it is empty.</p>
<pre><code>¦         Push the cumulative sums
 D        three times.
  t       Take the last one,
   ½      halve it,
    -     subtract it from each of the cumulative sums, 
     ∩    and take the intersection of the differences and the cumulative sums.
</code></pre>
"
"226029","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>Ṫ</code>, =&gt; <a href=""https://github.com/AMiller42/Grok-Language"" rel=""nofollow noreferrer"">Grok</a>, <a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, <a href=""https://esolangs.org/wiki/brainfuck"" rel=""nofollow noreferrer"">brainfuck</a>, <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://www.tcsh.org/"" rel=""nofollow noreferrer"">tcsh</a>, <a href=""https://codegolf.stackexchange.com/questions/121921/make-a-interpreter"">;#</a>, <a href=""https://www.vim.org"" rel=""nofollow noreferrer"">Vim</a>, <a href=""https://github.com/DennisMitchell/jellylanguage"" rel=""nofollow noreferrer"">Jelly</a> - <sup><s>.7778</s> <s>.7755</s> <s>.6719</s></sup> 46 bytes / 8<sup>2</sup> =  .71875</h1>
<pre><code>\I?\Z?\q\+?*‛. ?`,|echo `?\#\;?*`&#15;#dH`?\&#27;¶?
</pre></code>
<p><a href=""http://lyxal.pythonanywhere.com?flags=%E1%B9%AA&amp;code=%5CI%3F%5CZ%3F%5Cq%5C%2B%3F*%E2%80%9B.%20%3F%60%2C%7Cecho%20%60%3F%5C%23%5C%3B%3F*%60%23%0FdH%60%3F%5C%1B%C2%B6%3F&amp;inputs=1%0A2%0A3%0A4%0A5%0A6%0A7%0A8&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Resulting programs:
<a href=""http://grok.pythonanywhere.com?flags=&amp;code=I1Z2q%2B%2B%2B.%204%2C%7Cecho%205%23%3B%3B%3B%3B%3B%3B%23%0FdH7%1B%0A8%0A&amp;inputs="" rel=""nofollow noreferrer"">Grok</a>,
<a href=""https://tio.run/##yy9OTMpM/f/f0zDKqFBbW1tPwUSnJjU5I1/BVNkaDJT5UzzMpbksuP7/BwA"" rel=""nofollow noreferrer"" title=""05AB1E – Try It Online"">05AB1E</a>,
<a href=""https://tio.run/##SypKzMxLK03O/v/f0zDKqFBbW1tPwUSnJjU5I1/BVNkaDJT5UzzMpbksuP7/BwA"" rel=""nofollow noreferrer"" title=""brainfuck – Try It Online"">brainfuck</a>,
<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=I1Z2q%2B%2B%2B.%204%2C%7Cecho%205%23%3B%3B%3B%3B%3B%3B%23%0FdH7%1B%0A8%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Vyxal</a>,
<a href=""https://tio.run/##K0kuzvj/39MwyqhQW1tbT8FEpyY1OSNfwVTZGgyU@VM8zKW5LLj@/wcA"" rel=""nofollow noreferrer"" title=""tcsh – Try It Online"">tcsh</a>,
<a href=""https://tio.run/##K84o@P/f0zDKqFBbW1tPwUSnJjU5I1/BVNkaDJT5UzzMpbksuP7/BwA"" rel=""nofollow noreferrer"" title="";#+ – Try It Online"">;#</a>,
<a href=""https://tio.run/##K/v/39MwyqhQW1tbT8FEpyY1OSNfwVTZGgyU@VM8zKW5LLj@/wcA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Vim</a>,
<a href=""https://tio.run/##y0rNyan8/9/TMMqoUFtbW0/BRKcmNTkjX8FU2RoMlPlTPMyluSy4/v8HAA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Jelly</a></p>
<p>In brainfuck and ;#, the output is a character, as allowed by <a href=""https://codegolf.meta.stackexchange.com/a/4719/101522"">this meta post</a>.</p>
<p>Also, ;# only supports <span class=""math-container"">\$7\$</span>-bit numbers, so any number higher than <span class=""math-container"">\$127\$</span> will be output modulo <span class=""math-container"">\$127\$</span>.</p>
"
"226108","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>26 24 23</s> 20 bytes</h1>
<pre><code>L(DL‹n-ð$*+mðn*$+,1Ǔ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=L%28DL%E2%80%B9n-%C3%B0%24*%2Bm%C3%B0n*%24%2B%2C1%C7%93&amp;inputs=Code%20golf&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to lyxal for -3 bytes</p>
"
"226123","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>42</s> 32 bytes</h1>
<pre><code>`  1
 % %
% 9 %
 % %
  %`7ɾ1+Ṗ℅%
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%20%201%0A%20%25%20%25%0A%25%209%20%25%0A%20%25%20%25%0A%20%20%25%607%C9%BE1%2B%E1%B9%96%E2%84%85%25&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-10 thanks to lyxal.</p>
"
"226132","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 678 bytes</h1>
<pre><code>`We're no strangers to ⟑λ
λß ¬λ λλ «ṫ λ¬ so do I
A ƛ‡ ðʁ's λ⟨ I'm ʀ¨ of
λß wouldn't λẎ λ× λø λ¶ λṁ ⌐ḭ
I λ¾ ₂Ḣ ×↓ λ• λ₴ I'm ∵µ
İ≬ ƛ∵ λ• €ṙ
#@
λ∧ if λ• ×¦ me λ₴ I'm ∵µ
›⌐'t ×↓ me λ•'re ⟑↲ ġ• to λ¡
#
#
 
(Ooh, ⟇∵ λ• up)
(Ooh, ⟇∵ λ• up)
(Ooh)$⟇∵, ∨⋎ ṙƈ ⟇∵
(⟇› λ• up)
(Ooh)$⟇∵, ∨⋎ ṙƈ ⟇∵
(⟇› λ• up)
 
We've ¬λ ƛṖ λṁ λ⟑ so ¬□
λ⌐ »‹'s λ⌈ aching λė
λß're ⟑↲ ∪ǐ to ∨¶ it
•∇ we ∧ɽ ¬λ λ⟨'s λ⌈ ∨µ on
We ¬λ λλ ∧∵ λ¬ we're ṙƈ ∨¯ it
 
I λ¾ ₂Ḣ ×↓ λ• λ₴ I'm ∵µ
İ≬ ƛ∵ λ• €ṙ
#
#
#`\@`
 
We've »² ƛṖ λṁ λ⟑ so ¬□
λ⌐ »‹'s λ⌈ aching λė
λß're ⟑↲ ∪ǐ to ∨¶ it
•∇ we ∧ɽ ¬λ λ⟨'s λ⌈ ∨µ on
We ¬λ λλ ∧∵ λ¬ we're ṙƈ ∨¯ it`V\#` $⟇∵ λ• up$⟇» λ• ∧ċ$÷Ḣ ⟑Ṡ λ¬ ḭ⟇ λ•$ƛ∵ λ• √↓$∨¶ goodbye$×↓ a ṙ↓ λ¬ ṫ» λ•`V\$`
∨꘍ ṙƈ `V
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60We%27re%20no%20strangers%20to%20%E2%9F%91%CE%BB%0A%CE%BB%C3%9F%20%C2%AC%CE%BB%20%CE%BB%CE%BB%20%C2%AB%E1%B9%AB%20%CE%BB%C2%AC%20so%20do%20I%0AA%20%C6%9B%E2%80%A1%20%C3%B0%CA%81%27s%20%CE%BB%E2%9F%A8%20I%27m%20%CA%80%C2%A8%20of%0A%CE%BB%C3%9F%20wouldn%27t%20%CE%BB%E1%BA%8E%20%CE%BB%C3%97%20%CE%BB%C3%B8%20%CE%BB%C2%B6%20%CE%BB%E1%B9%81%20%E2%8C%90%E1%B8%AD%0AI%20%CE%BB%C2%BE%20%E2%82%82%E1%B8%A2%20%C3%97%E2%86%93%20%CE%BB%E2%80%A2%20%CE%BB%E2%82%B4%20I%27m%20%E2%88%B5%C2%B5%0A%C4%B0%E2%89%AC%20%C6%9B%E2%88%B5%20%CE%BB%E2%80%A2%20%E2%82%AC%E1%B9%99%0A%23%40%0A%CE%BB%E2%88%A7%20if%20%CE%BB%E2%80%A2%20%C3%97%C2%A6%20me%20%CE%BB%E2%82%B4%20I%27m%20%E2%88%B5%C2%B5%0A%E2%80%BA%E2%8C%90%27t%20%C3%97%E2%86%93%20me%20%CE%BB%E2%80%A2%27re%20%E2%9F%91%E2%86%B2%20%C4%A1%E2%80%A2%20to%20%CE%BB%C2%A1%0A%23%0A%23%0A%20%0A%28Ooh%2C%20%E2%9F%87%E2%88%B5%20%CE%BB%E2%80%A2%20up%29%0A%28Ooh%2C%20%E2%9F%87%E2%88%B5%20%CE%BB%E2%80%A2%20up%29%0A%28Ooh%29%24%E2%9F%87%E2%88%B5%2C%20%E2%88%A8%E2%8B%8E%20%E1%B9%99%C6%88%20%E2%9F%87%E2%88%B5%0A%28%E2%9F%87%E2%80%BA%20%CE%BB%E2%80%A2%20up%29%0A%28Ooh%29%24%E2%9F%87%E2%88%B5%2C%20%E2%88%A8%E2%8B%8E%20%E1%B9%99%C6%88%20%E2%9F%87%E2%88%B5%0A%28%E2%9F%87%E2%80%BA%20%CE%BB%E2%80%A2%20up%29%0A%20%0AWe%27ve%20%C2%AC%CE%BB%20%C6%9B%E1%B9%96%20%CE%BB%E1%B9%81%20%CE%BB%E2%9F%91%20so%20%C2%AC%E2%96%A1%0A%CE%BB%E2%8C%90%20%C2%BB%E2%80%B9%27s%20%CE%BB%E2%8C%88%20aching%20%CE%BB%C4%97%0A%CE%BB%C3%9F%27re%20%E2%9F%91%E2%86%B2%20%E2%88%AA%C7%90%20to%20%E2%88%A8%C2%B6%20it%0A%E2%80%A2%E2%88%87%20we%20%E2%88%A7%C9%BD%20%C2%AC%CE%BB%20%CE%BB%E2%9F%A8%27s%20%CE%BB%E2%8C%88%20%E2%88%A8%C2%B5%20on%0AWe%20%C2%AC%CE%BB%20%CE%BB%CE%BB%20%E2%88%A7%E2%88%B5%20%CE%BB%C2%AC%20we%27re%20%E1%B9%99%C6%88%20%E2%88%A8%C2%AF%20it%0A%20%0AI%20%CE%BB%C2%BE%20%E2%82%82%E1%B8%A2%20%C3%97%E2%86%93%20%CE%BB%E2%80%A2%20%CE%BB%E2%82%B4%20I%27m%20%E2%88%B5%C2%B5%0A%C4%B0%E2%89%AC%20%C6%9B%E2%88%B5%20%CE%BB%E2%80%A2%20%E2%82%AC%E1%B9%99%0A%23%0A%23%0A%23%60%5C%40%60%0A%20%0AWe%27ve%20%C2%BB%C2%B2%20%C6%9B%E1%B9%96%20%CE%BB%E1%B9%81%20%CE%BB%E2%9F%91%20so%20%C2%AC%E2%96%A1%0A%CE%BB%E2%8C%90%20%C2%BB%E2%80%B9%27s%20%CE%BB%E2%8C%88%20aching%20%CE%BB%C4%97%0A%CE%BB%C3%9F%27re%20%E2%9F%91%E2%86%B2%20%E2%88%AA%C7%90%20to%20%E2%88%A8%C2%B6%20it%0A%E2%80%A2%E2%88%87%20we%20%E2%88%A7%C9%BD%20%C2%AC%CE%BB%20%CE%BB%E2%9F%A8%27s%20%CE%BB%E2%8C%88%20%E2%88%A8%C2%B5%20on%0AWe%20%C2%AC%CE%BB%20%CE%BB%CE%BB%20%E2%88%A7%E2%88%B5%20%CE%BB%C2%AC%20we%27re%20%E1%B9%99%C6%88%20%E2%88%A8%C2%AF%20it%60V%5C%23%60%20%24%E2%9F%87%E2%88%B5%20%CE%BB%E2%80%A2%20up%24%E2%9F%87%C2%BB%20%CE%BB%E2%80%A2%20%E2%88%A7%C4%8B%24%C3%B7%E1%B8%A2%20%E2%9F%91%E1%B9%A0%20%CE%BB%C2%AC%20%E1%B8%AD%E2%9F%87%20%CE%BB%E2%80%A2%24%C6%9B%E2%88%B5%20%CE%BB%E2%80%A2%20%E2%88%9A%E2%86%93%24%E2%88%A8%C2%B6%20goodbye%24%C3%97%E2%86%93%20a%20%E1%B9%99%E2%86%93%20%CE%BB%C2%AC%20%E1%B9%AB%C2%BB%20%CE%BB%E2%80%A2%60V%5C%24%60%0A%E2%88%A8%EA%98%8D%20%E1%B9%99%C6%88%20%60V&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Basic compression; compresses a couple of the main verses separately, then replaces them after decompression.</p>
"
"226136","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>₆25(›D:C$C„›C+$+,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8625%28%E2%80%BAD%3AC%24C%E2%80%9E%E2%80%BAC%2B%24%2B%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₆                 # Push 64 
 25(              # Repeat 25 times
    ›             # Increment (left with last number from last time) [65]
     D:           # Quadruple [65,65,65,65]
       C          # Turn into char ['A',65,65,65]
        $C        # Swap top two of stack and turn next into char ['A','A',65,65]
          „       # Rotate stack right [65,'A','A',65]
           ›C     # Increment and to character ['B','A','A',65]
             +    # Concatenate ['BA','A',65]
              $   # Swap top two ['A','BA',65]
               +  # Concatenate ['ABA',65]
                , # Output, leaving 65 for next iteration
</code></pre>
<p>Note: <code>[a,b,c]</code> or whatever is a visualisation of the stack.</p>
"
"226143","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>L2$&quot;iE₀*`-AViu}`C44+&gt;∑›
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=L2%24%22iE%E2%82%80*%60-AViu%7D%60C44%2B%3E%E2%88%91%E2%80%BA&amp;inputs=1.6.1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226144","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 57 bytes</h1>
<pre><code>2996557859220556162530996767470:`0123456789+:`\\\`\τ+++τ+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=2996557859220556162530996767470%3A%600123456789%2B%3A%60%5C%5C%5C%60%5C%CF%84%2B%2B%2B%CF%84%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The big number at the front is the rest of the program encoded using the key <code>0123456789+:τ\</code> with a backtick (dammit markdown). The rest of the program constructs the key,  decodes this, and concatenates the original number to the result.</p>
"
"226159","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 37 bytes</h1>
<pre><code>ɾ»«Ẏ⅛Ṁß)∞'₌›ṫh⁰ḟ†ṙ←⁰»12τ68+¦0p66+$Fhε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsK7wqvhuo7ihZvhuYDDnyniiJ4n4oKM4oC64bmraOKBsOG4n+KAoOG5meKGkOKBsMK7MTLPhDY4K8KmMHA2NiskRmjOtSIsIiIsIjY3Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226162","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 279 bytes</h1>
<pre><code>«;Jq×L↑yVx₅QȯZ3ẎhȦ¼_ø€ẋ°Q±3₀₈∑hṁ₃ø∧≤∆⌐&gt;ʀ↵₌X⇧ƒ₀₆ḃ₅Ḣ~^9\6↓¾&lt;₆≈Q‡‟ṄBḞUß¼ƈv→⟇ʀ7ė⟑∞~*Ṅ∩ꜝtW₴h⟨p&amp;¥z%₇Jɖ⁋¥(₂⌐⌊mṖ⅛ɾṙ3±żð→Ṙq↳'ḭguIH?TLŻrhNɾwl꘍×ByÞkĿMτI□ǑΠȧ½Ḃ≬jȦ₂ṡ⇧j…0Ȧ₂wyẆ₈≠₂d„⟨&gt;∵↔C7⟇≠∑¤ƈƛiḃṁ₍Q]*꘍ṡḂcu%İ∑lL5∧∴!qÞLOτxÞ≥€ṅQh₅Ṫ°₄B*ṫṘ:NḊεβ⋏ṫẎFpƈc⁰ŀqẏy↓{'Ǒ£ẏŻ@kżoƛg)K1cV⌈»ΠC¼⟩F^ȯ₌«\z‛. V‛  ‛, V¡
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%3BJq%C3%97L%E2%86%91yVx%E2%82%85Q%C8%AFZ3%E1%BA%8Eh%C8%A6%C2%BC_%C3%B8%E2%82%AC%E1%BA%8B%C2%B0Q%C2%B13%E2%82%80%E2%82%88%E2%88%91h%E1%B9%81%E2%82%83%C3%B8%E2%88%A7%E2%89%A4%E2%88%86%E2%8C%90%3E%CA%80%E2%86%B5%E2%82%8CX%E2%87%A7%C6%92%E2%82%80%E2%82%86%E1%B8%83%E2%82%85%E1%B8%A2%7E%5E9%5C6%E2%86%93%C2%BE%3C%E2%82%86%E2%89%88Q%E2%80%A1%E2%80%9F%E1%B9%84B%E1%B8%9EU%C3%9F%C2%BC%C6%88v%E2%86%92%E2%9F%87%CA%807%C4%97%E2%9F%91%E2%88%9E%7E*%E1%B9%84%E2%88%A9%EA%9C%9DtW%E2%82%B4h%E2%9F%A8p%26%C2%A5z%25%E2%82%87J%C9%96%E2%81%8B%C2%A5%28%E2%82%82%E2%8C%90%E2%8C%8Am%E1%B9%96%E2%85%9B%C9%BE%E1%B9%993%C2%B1%C5%BC%C3%B0%E2%86%92%E1%B9%98q%E2%86%B3%27%E1%B8%ADguIH%3FTL%C5%BBrhN%C9%BEwl%EA%98%8D%C3%97By%C3%9Ek%C4%BFM%CF%84I%E2%96%A1%C7%91%CE%A0%C8%A7%C2%BD%E1%B8%82%E2%89%ACj%C8%A6%E2%82%82%E1%B9%A1%E2%87%A7j%E2%80%A60%C8%A6%E2%82%82wy%E1%BA%86%E2%82%88%E2%89%A0%E2%82%82d%E2%80%9E%E2%9F%A8%3E%E2%88%B5%E2%86%94C7%E2%9F%87%E2%89%A0%E2%88%91%C2%A4%C6%88%C6%9Bi%E1%B8%83%E1%B9%81%E2%82%8DQ%5D*%EA%98%8D%E1%B9%A1%E1%B8%82cu%25%C4%B0%E2%88%91lL5%E2%88%A7%E2%88%B4!q%C3%9ELO%CF%84x%C3%9E%E2%89%A5%E2%82%AC%E1%B9%85Qh%E2%82%85%E1%B9%AA%C2%B0%E2%82%84B*%E1%B9%AB%E1%B9%98%3AN%E1%B8%8A%CE%B5%CE%B2%E2%8B%8F%E1%B9%AB%E1%BA%8EFp%C6%88c%E2%81%B0%C5%80q%E1%BA%8Fy%E2%86%93%7B%27%C7%91%C2%A3%E1%BA%8F%C5%BB%40k%C5%BCo%C6%9Bg%29K1cV%E2%8C%88%C2%BB%CE%A0C%C2%BC%E2%9F%A9F%5E%C8%AF%E2%82%8C%C2%AB%5Cz%E2%80%9B.%20V%E2%80%9B%20%20%E2%80%9B%2C%20V%C2%A1&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
Uses Vyxal base-255 encoding, since it can only do lowercase and space, I convert &quot;. &quot; to z and &quot;,&quot; to &quot; &quot;, so when I decompress I can easily add back in the punctuation. Finally, it reintroduces uppercase through the sentence-case operator.</p>
"
"226163","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>∑k¦ε½
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%91k%C2%A6%CE%B5%C2%BD&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>∑     # Sum
 k¦   # 2048
   ε  # Abs. diff.
    ½ # halved
</code></pre>
"
"226164","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 192 bytes</h1>
<pre><code>`λƛ ¬ε Ṫṅ¥ṗXṠ↳ ÷⁋ Ṗ≈sXλƛ ∆ɾ ∧Ġ of λß
Be ¬ẏ λǑX∧… ∞↑Xλƛ W…±o ɽ⁋
₁ḣ¦ḭX∨±∨ḊXż≬ Up λ¬ ↔÷X⟑ɖ ∨Ǐ °↔X←Ġd in λλ ⌐±
USS ⟑«iḊꜝrXArk›ǎXC≥ẋo∩ȧeX⟩ẇ λλ DJX∆↑÷≠X¬⁼ ¢⁋
Ẇ± Ŀʀ□ẊX€∧□Ṅ↳¾X₄ð, ¢…, λ¬ §⋏ ⟑⋏`↵\X/?i?i
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%CE%BB%C6%9B%20%C2%AC%CE%B5%20%E1%B9%AA%E1%B9%85%C2%A5%E1%B9%97X%E1%B9%A0%E2%86%B3%20%C3%B7%E2%81%8B%20%E1%B9%96%E2%89%88sX%CE%BB%C6%9B%20%E2%88%86%C9%BE%20%E2%88%A7%C4%A0%20of%20%CE%BB%C3%9F%0ABe%20%C2%AC%E1%BA%8F%20%CE%BB%C7%91X%E2%88%A7%E2%80%A6%20%E2%88%9E%E2%86%91X%CE%BB%C6%9B%20W%E2%80%A6%C2%B1o%20%C9%BD%E2%81%8B%0A%E2%82%81%E1%B8%A3%C2%A6%E1%B8%ADX%E2%88%A8%C2%B1%E2%88%A8%E1%B8%8AX%C5%BC%E2%89%AC%20Up%20%CE%BB%C2%AC%20%E2%86%94%C3%B7X%E2%9F%91%C9%96%20%E2%88%A8%C7%8F%20%C2%B0%E2%86%94X%E2%86%90%C4%A0d%20in%20%CE%BB%CE%BB%20%E2%8C%90%C2%B1%0AUSS%20%E2%9F%91%C2%ABi%E1%B8%8A%EA%9C%9DrXArk%E2%80%BA%C7%8EXC%E2%89%A5%E1%BA%8Bo%E2%88%A9%C8%A7eX%E2%9F%A9%E1%BA%87%20%CE%BB%CE%BB%20DJX%E2%88%86%E2%86%91%C3%B7%E2%89%A0X%C2%AC%E2%81%BC%20%C2%A2%E2%81%8B%0A%E1%BA%86%C2%B1%20%C4%BF%CA%80%E2%96%A1%E1%BA%8AX%E2%82%AC%E2%88%A7%E2%96%A1%E1%B9%84%E2%86%B3%C2%BEX%E2%82%84%C3%B0%2C%20%C2%A2%E2%80%A6%2C%20%CE%BB%C2%AC%20%C2%A7%E2%8B%8F%20%E2%9F%91%E2%8B%8F%60%E2%86%B5%5CX%2F%3Fi%3Fi&amp;inputs=3%0A1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`...`         # Dictionary-compressed string 
     ↵        # Split on newlines
      \X/     # Split on Xs (vectorised)
         ?i?i # Index input twice
</code></pre>
"
"226173","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, a 194-byte mess</h1>
<pre><code>□⁋↵:ƛL;G:£2+\_*\ +\ $+,L1=[‛&lt; □‛ &gt;++,|□L(n[n›□L=[`\\ `` /`|`| `` |`]|`/ `` \\`]□ni:L¥ε\ *+$++,)]\ ¥2+\-*\ ++,`  ?\\   ^__^
   ?\\  (oo)\_______
?? (__)\\  ?)\\/\\
???||----w |
???||?||
`\?\ 5*V,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%96%A1%E2%81%8B%E2%86%B5%3A%C6%9BL%3BG%3A%C2%A32%2B%5C_*%5C%20%2B%5C%20%24%2B%2CL1%3D%5B%E2%80%9B%3C%20%E2%96%A1%E2%80%9B%20%3E%2B%2B%2C%7C%E2%96%A1L%28n%5Bn%E2%80%BA%E2%96%A1L%3D%5B%60%5C%5C%20%60%60%20%2F%60%7C%60%7C%20%60%60%20%7C%60%5D%7C%60%2F%20%60%60%20%5C%5C%60%5D%E2%96%A1ni%3AL%C2%A5%CE%B5%5C%20*%2B%24%2B%2B%2C%29%5D%5C%20%C2%A52%2B%5C-*%5C%20%2B%2B%2C%60%20%20%3F%5C%5C%20%20%20%5E__%5E%0A%20%20%20%3F%5C%5C%20%20%28oo%29%5C_______%0A%3F%3F%20%28__%29%5C%5C%20%20%3F%29%5C%5C%2F%5C%5C%0A%3F%3F%3F%7C%7C----w%20%7C%0A%3F%3F%3F%7C%7C%3F%7C%7C%0A%60%5C%3F%5C%205*V%2C&amp;inputs=This%20is%20the%20first%20line%20of%20input.%0AThis%20is%20the%20second%20line.%20It%20is%20the%20longest%2C%20so%20the%20bubble%20should%20stretch%20to%20fit%20it.%0AThis%20is%20the%20third%20line.%0AHello%20world!%0A%28%3B%3B%22%27%27%7B%3C%3C%5B%27%22%0A%0A%0A%0AEmpty%20lines%20shouldn%27t%20cause%20any%20problems.&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation tomorrow.</p>
"
"226217","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ebL‹
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ebL%E2%80%B9&amp;inputs=10000&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Translation of @ManishKundu's <a href=""https://codegolf.stackexchange.com/a/226215/98955"">Python answer</a>.</p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""noreferrer"">Jelly</a>, 5 bytes</h1>
<pre><code>*`BL’
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8/18rwcnnUcPM////GxoAAQA"" rel=""noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Ditto.</p>
"
"226218","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>`∧ḭ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%E2%88%A7%E1%B8%AD&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pushes &quot;three&quot; as a dictionary-compressed string and implicitly outputs.</p>
"
"226250","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>`∧ḭ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%E2%88%A7%E1%B8%AD&amp;inputs=3%0A7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Dictionary compression FTW!!!</p>
"
"226251","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 43 bytes</h1>
<pre><code>⌐ƛ⟨⟩n£¥Lʀ(x|n¬₀r(¥CC←x nSṀṅIJ));ḣhẊ'∑k2=   
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%90%C6%9B%E2%9F%A8%E2%9F%A9n%C2%A3%C2%A5L%CA%80%28x%7Cn%C2%AC%E2%82%80r%28%C2%A5CC%E2%86%90x%20nS%E1%B9%80%E1%B9%85IJ%29%29%3B%E1%B8%A3h%E1%BA%8A%27%E2%88%91k2%3D%20%20%20&amp;inputs=%22288%2C711%22&amp;header=&amp;footer=%3BU"" rel=""nofollow noreferrer"">Try it Online!</a> Takes input of the form: <code>&quot;a,b&quot;</code></p>
<p><strong>Explanation:</strong></p>
<pre><code>?⌐ƛ⟨⟩n£¥Lʀ(x|n¬₀r(¥CC←x nSṀṅIJ));ḣhẊ'∑k2= # full program
?⌐                                       # split implicit input on &quot;,&quot;
  ƛ⟨⟩n£¥Lʀ(x|n¬₀r(¥CC←x nSṀṅIJ));         # &quot;insert&quot; lambda map over input
                                ḣh       # unlist them
                                  Ẋ      # cartesian product [a,b]*[c,d]=[[a,c],[a,d],[b,c],[b,d]]
                                   '∑k2  # filter lambda, sum of pair == 10000
</code></pre>
<p>The insert lambda can definitely be improved, but I am having trouble figuring out a way to map it instead of explicitly loop over it.</p>
"
"226252","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>33 32 29</s> 10 bytes</h1>
<pre><code>2(:wJ⁰ÞṪvṪ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=2%28%3AwJ%E2%81%B0%C3%9E%E1%B9%AAv%E1%B9%AA&amp;inputs=%5B%5B1%5D%2C%5B2%5D%2C%5B3%5D%2C%5B4%2C5%5D%5D%0A8&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to lyxal for -23 bytes.</p>
"
"226256","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>0p+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0p%2B&amp;inputs=%5B1%2C2%2C1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>    # Implicit input
0p  # prepend 0
  + # (Implicit input) add (vectorised)
</code></pre>
"
"226258","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>
›#‹

</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%0A%E2%80%BA%23%E2%80%B9%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%BA%23%E2%80%B9%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%BA%23%E2%80%B9%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!Try it Online!Try it Online!Try it Online!Try it Online!</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%0A%E2%80%B9%23%E2%80%BA%0A%0A%E2%80%BA%23%E2%80%B9%0A%0A%E2%80%B9%23%E2%80%BA%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">!enilnO ti yrT</a></p>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%0A%E2%80%B9%23%E2%80%BA%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">!enilnO ti yrTTry it Online!!enilnO ti yrT</a></p>
"
"226285","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes − 8 inversions = score 2</h1>
<pre><code>`NDqp`NDqp
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60NDqp%60NDqp&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226290","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>,<s>95 91</s> 55 bytes</h1>
<pre><code>λ2ẇ«½∇«:Ẋ«∨uOŻN€bMċ∇Dk«⌈Ŀṅ\e/:L‹\e*$ṅ+;Ẋ‛eeo:\erß›\e\-V
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB2%E1%BA%87%C2%AB%C2%BD%E2%88%87%C2%AB%3A%E1%BA%8A%C2%AB%E2%88%A8uO%C5%BBN%E2%82%ACbM%C4%8B%E2%88%87Dk%C2%AB%E2%8C%88%C4%BF%E1%B9%85%5Ce%2F%3AL%E2%80%B9%5Ce*%24%E1%B9%85%2B%3B%E1%BA%8A%E2%80%9Beeo%3A%5Cer%C3%9F%E2%80%BA%5Ce%5C-V&amp;inputs=ii&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Partially ported ovs. Do I win 'Most improved'?</p>
<p>Makes a lot more sense now.</p>
<pre><code>λ                                     ;                 # Lambda
 2ẇ                                                     # Chunks of 2
   «½∇«                                                 # Compressed `ijk`
       :Ẋ                                               # Cartesian square
         «∨uOŻN€bMċ∇Dk«                                 # Compressed string `e k ej ek e i j ei e`
                       ⌈                                # Split by spaces
                        Ŀ                               # Transliterate
                         ṅ                              # Join
                          \e/                           # Split by `e`
                             :                          # Duplicate
                              L‹\e*                     # (Length - 1) es
                                   $ṅ+                  # Prepended (so es are bubbled to start
                                       Ẋ                # Repeat on input until result doesn't change 
                                        ‛eeo            # Get rid of double es
                                            :\erß       # If result is a substring of 'e'
                                                 ›      # Append a 1
                                                  \e\-V # Replace es with -s
</code></pre>
"
"226316","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>kh
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kh&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Built-in that pushes the string <code>Hello World</code>. Since it meets two of the requirements, it is valid, but it's not really obfuscated, is it? How about one that meets all three requirements?</p>
<hr />
<h2>Less trivial, 6 bytes</h2>
<pre><code>`ƈṡ ƛ€
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%C6%88%E1%B9%A1%20%C6%9B%E2%82%AC&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pushes <code>Hello World</code> as a dictionary-compressed string and implicitly outputs. It meets all of the requirements, but it's still a bit boring, no?</p>
<h2>Non-trivial, 7 bytes</h2>
<pre><code>\k⁺∧C+Ė
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5Ck%E2%81%BA%E2%88%A7C%2B%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builds the string <code>kh</code> and evaluates it as Vyxal code. Meets all three requirements, and definitely the most obfuscated of the three programs.</p>
<p>Explanation:</p>
<pre><code>\k       # Push 'k'
  ⁺∧     # Push 104; '⁺' takes the index of the next command in the Vyxal codepage ('∧' is 0x03) and adds 101
    C    # Convert to character; 104 becomes 'h'
     +   # Concatenate; builds the string 'kh'
      Ė  # Evaluate as Vyxal code
         # Implicit output
</code></pre>
"
"226333","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ƛ`‹`¨UL;ṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm2DigLlgwqhVTDvhuYEiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The joys of the <a href=""https://codegolf.stackexchange.com/a/238374/78850"">short dictionary</a>.</p>
<h2>Explained</h2>
<pre><code>ƛ`‹`¨UL;ṁ
ƛ      ;      # over the range [1, input]:
 `‹`          #     push &quot;https://www.google.com&quot; and
    ¨U        #     do a GET request
      L       #     taking the length of the result
        ;ṁ   # take the average of that list
</code></pre>
"
"226338","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>9\*꘍₀(,9n-\0n›*꘍øm
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=9%5C*%EA%98%8D%E2%82%80%28%2C9n-%5C0n%E2%80%BA*%EA%98%8D%C3%B8m&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Fairly well golfed.</p>
<pre><code>9                  # 9
 \*                # '*'  
   ꘍               # ' ' * 9 + '*'
    ₀(             # 10 times
      ,            # output
       9n-         # 9 - (iteration number)
          \0       # String '0'
            n›     # iteration number + 1
              *    # That many 0s
               ꘍   # (9 - (iteration number)) spaces + 0s
                øm # Palindromised
</code></pre>
<p>Tree:</p>
<pre><code>         *
         0         
        000        
       00000       
      0000000      
     000000000     
    00000000000    
   0000000000000   
  000000000000000  
 00000000000000000 
</code></pre>
"
"226387","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>17</s> 16 bytes</h1>
<pre><code>λ88ok2‹o89k2⇩V;Ẋ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB88ok2%E2%80%B9o89k2%E2%87%A9V%3B%E1%BA%8A&amp;inputs=%60888999%60&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Creative input abuse. Takes r as 9 and s as 8.</p>
<pre><code>λ             ;Ẋ # Repeat until input doesn't change
 88o             # Get rid of 88s (`ss`)
    k2‹          # 10000 - 1 = 9999 (=`rrrr`)
       o         # Get rid of those as well
        89       # 89 (`sr`)
          k2⇩    # 10000 - 2 = 9998 (`rrrs`)
             V   # Replace (`sr` with `rrrs`)
</code></pre>
"
"226408","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 661 bytes</h1>
<pre><code>`λƛ »ǔ †₁ of a [ƈ↲:k꘍Ġ꘍τrov-₁µ] ɾṖ is to ⟑Ẇ a ƛ⊍ ∆ė in λλ ×¶½Ḣ ¬⋎ (»⟇ λ⟇ ↓₅ λβ ⌐ƈ λṠ). We λʁ λ‡ ƛ≤ of ƛ‹, λø [Bor←„an ↓₄](ṅ•://¬⋎»₅.⟩β•∵•⅛/∨§/53417/Ġ₴-ǍḂ←„an-↓₃) to [λƛ λŻ≠ŻǍṪg ¬Ġ](ṅ•://¬⋎»₅.⟩β•∵.•⅛/∨§/15395/λ₴-⌐‡-is-λλ-λẎ≠ŻǍṪg-¬Ḟ).



##λ⌐ ʀǓ



λ« ⟇Ṡ is ÷₃, øṄ λ⟇ it ↔ƒ ɽǔ of a ¬∪ ∧□ - λλ ∧□ of λ× ⟇Ṡ. ∵‟, λλ ƛ² «Ċ∧ċ ¬⋎ λ⟇ I am Ȯ» ¬ẋ λṠ.



To ɾ₃ an ĿẎ ¡⁺ꜝµẏḂ in λλ ⟇Ṡ, λλ →æ ∧□ λ• λʁ to ⟑Ẇ λ‹ be ∧½ [λḞ](ṅ•://¬⋎»₅.⟩β•∵.•⅛/Ẋ₁/1f731ea3-0950-4b03-ae95-24fa812a9a28/λ₌-⟑Ḋ).



##C⇧ċ⋏↓¢₌ẏḂs



- λß λ½ λ† ⌐⁰ to λ₇ λ¶ ↔ċ €ƈ λƒ λλ ¬Ḋ.

- λ« ×Ḣ λ⟇ λλ †¯ of λ× ⟇Ṡ is λ† to ∧ẋ λ× ⟇Ṡ ∧□ λ¬ ḟ⋎se it, λė ∆» to ¬↓ it in λ• ƛ¾.

- λ« is [ƈ↲:¬⋎-»₅], so ×¶½Ḣ ¬⋎ in **¨ƈ** ṅ↓!
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%CE%BB%C6%9B%20%C2%BB%C7%94%20%E2%80%A0%E2%82%81%20of%20a%20%5B%C6%88%E2%86%B2%3Ak%EA%98%8D%C4%A0%EA%98%8D%CF%84rov-%E2%82%81%C2%B5%5D%20%C9%BE%E1%B9%96%20is%20to%20%E2%9F%91%E1%BA%86%20a%20%C6%9B%E2%8A%8D%20%E2%88%86%C4%97%20in%20%CE%BB%CE%BB%20%C3%97%C2%B6%C2%BD%E1%B8%A2%20%C2%AC%E2%8B%8E%20%28%C2%BB%E2%9F%87%20%CE%BB%E2%9F%87%20%E2%86%93%E2%82%85%20%CE%BB%CE%B2%20%E2%8C%90%C6%88%20%CE%BB%E1%B9%A0%29.%20We%20%CE%BB%CA%81%20%CE%BB%E2%80%A1%20%C6%9B%E2%89%A4%20of%20%C6%9B%E2%80%B9%2C%20%CE%BB%C3%B8%20%5BBor%E2%86%90%E2%80%9Ean%20%E2%86%93%E2%82%84%5D%28%E1%B9%85%E2%80%A2%3A%2F%2F%C2%AC%E2%8B%8E%C2%BB%E2%82%85.%E2%9F%A9%CE%B2%E2%80%A2%E2%88%B5%E2%80%A2%E2%85%9B%2F%E2%88%A8%C2%A7%2F53417%2F%C4%A0%E2%82%B4-%C7%8D%E1%B8%82%E2%86%90%E2%80%9Ean-%E2%86%93%E2%82%83%29%20to%20%5B%CE%BB%C6%9B%20%CE%BB%C5%BB%E2%89%A0%C5%BB%C7%8D%E1%B9%AAg%20%C2%AC%C4%A0%5D%28%E1%B9%85%E2%80%A2%3A%2F%2F%C2%AC%E2%8B%8E%C2%BB%E2%82%85.%E2%9F%A9%CE%B2%E2%80%A2%E2%88%B5.%E2%80%A2%E2%85%9B%2F%E2%88%A8%C2%A7%2F15395%2F%CE%BB%E2%82%B4-%E2%8C%90%E2%80%A1-is-%CE%BB%CE%BB-%CE%BB%E1%BA%8E%E2%89%A0%C5%BB%C7%8D%E1%B9%AAg-%C2%AC%E1%B8%9E%29.%0A%0A%0A%0A%23%23%CE%BB%E2%8C%90%20%CA%80%C7%93%0A%0A%0A%0A%CE%BB%C2%AB%20%E2%9F%87%E1%B9%A0%20is%20%C3%B7%E2%82%83%2C%20%C3%B8%E1%B9%84%20%CE%BB%E2%9F%87%20it%20%E2%86%94%C6%92%20%C9%BD%C7%94%20of%20a%20%C2%AC%E2%88%AA%20%E2%88%A7%E2%96%A1%20-%20%CE%BB%CE%BB%20%E2%88%A7%E2%96%A1%20of%20%CE%BB%C3%97%20%E2%9F%87%E1%B9%A0.%20%E2%88%B5%E2%80%9F%2C%20%CE%BB%CE%BB%20%C6%9B%C2%B2%20%C2%AB%C4%8A%E2%88%A7%C4%8B%20%C2%AC%E2%8B%8E%20%CE%BB%E2%9F%87%20I%20am%20%C8%AE%C2%BB%20%C2%AC%E1%BA%8B%20%CE%BB%E1%B9%A0.%0A%0A%0A%0ATo%20%C9%BE%E2%82%83%20an%20%C4%BF%E1%BA%8E%20%C2%A1%E2%81%BA%EA%9C%9D%C2%B5%E1%BA%8F%E1%B8%82%20in%20%CE%BB%CE%BB%20%E2%9F%87%E1%B9%A0%2C%20%CE%BB%CE%BB%20%E2%86%92%C3%A6%20%E2%88%A7%E2%96%A1%20%CE%BB%E2%80%A2%20%CE%BB%CA%81%20to%20%E2%9F%91%E1%BA%86%20%CE%BB%E2%80%B9%20be%20%E2%88%A7%C2%BD%20%5B%CE%BB%E1%B8%9E%5D%28%E1%B9%85%E2%80%A2%3A%2F%2F%C2%AC%E2%8B%8E%C2%BB%E2%82%85.%E2%9F%A9%CE%B2%E2%80%A2%E2%88%B5.%E2%80%A2%E2%85%9B%2F%E1%BA%8A%E2%82%81%2F1f731ea3-0950-4b03-ae95-24fa812a9a28%2F%CE%BB%E2%82%8C-%E2%9F%91%E1%B8%8A%29.%0A%0A%0A%0A%23%23C%E2%87%A7%C4%8B%E2%8B%8F%E2%86%93%C2%A2%E2%82%8C%E1%BA%8F%E1%B8%82s%0A%0A%0A%0A-%20%CE%BB%C3%9F%20%CE%BB%C2%BD%20%CE%BB%E2%80%A0%20%E2%8C%90%E2%81%B0%20to%20%CE%BB%E2%82%87%20%CE%BB%C2%B6%20%E2%86%94%C4%8B%20%E2%82%AC%C6%88%20%CE%BB%C6%92%20%CE%BB%CE%BB%20%C2%AC%E1%B8%8A.%0A%0A-%20%CE%BB%C2%AB%20%C3%97%E1%B8%A2%20%CE%BB%E2%9F%87%20%CE%BB%CE%BB%20%E2%80%A0%C2%AF%20of%20%CE%BB%C3%97%20%E2%9F%87%E1%B9%A0%20is%20%CE%BB%E2%80%A0%20to%20%E2%88%A7%E1%BA%8B%20%CE%BB%C3%97%20%E2%9F%87%E1%B9%A0%20%E2%88%A7%E2%96%A1%20%CE%BB%C2%AC%20%E1%B8%9F%E2%8B%8Ese%20it%2C%20%CE%BB%C4%97%20%E2%88%86%C2%BB%20to%20%C2%AC%E2%86%93%20it%20in%20%CE%BB%E2%80%A2%20%C6%9B%C2%BE.%0A%0A-%20%CE%BB%C2%AB%20is%20%5B%C6%88%E2%86%B2%3A%C2%AC%E2%8B%8E-%C2%BB%E2%82%85%5D%2C%20so%20%C3%97%C2%B6%C2%BD%E1%B8%A2%20%C2%AC%E2%8B%8E%20in%20**%C2%A8%C6%88**%20%E1%B9%85%E2%86%93!&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Probably not a winner, but it was fun.</p>
"
"226410","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 38 - 25% = 28.5 bytes</h1>
<pre><code>`?DL4%[|[$:q$+$L4/*`?DL4%[|[$:q$+$L4/*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%3FDL4%25%5B%7C%5B%24%3Aq%24%2B%24L4%2F*%60%3FDL4%25%5B%7C%5B%24%3Aq%24%2B%24L4%2F*&amp;inputs=12345678&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`...`                      # Source code in string
     ?                     # Grab input
      D                    # Triple
       L4%                 # If length is (not) divisible by 4
          [|               # Do nothing, otherwise
            L0&gt;[           # If length is positive
                $          # Swap (to get source-code string)
                 :q$+      # Standard quine - duplicate, uneval, swap, concatenate
                     $     # Swap to get original input
                      L4/  # Length / 4
                         * # (Source code) that many times
</code></pre>
<p>Trying to get the bonus is sadly longer.</p>
"
"226411","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>y$3*J∑₀Ḋ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=y%243*J%E2%88%91%E2%82%80%E1%B8%8A&amp;inputs=%5B2%2C0%2C3%2C7%2C8%2C2%2C4%2C0%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>y        # Uninterleave
 $       # Swap
  3*     # Multiply by 3 (vectorised)
    J    # Join
     ∑   # Sum
      ₀Ḋ # Is divisible by 10?
</code></pre>
"
"226415","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>kzṘ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ka&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I cannot get more shorter than that. Sadly Vyxal is unable to beat Pyth here.</p>
<p>Fix thanks to @AUsername</p>
"
"226416","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>kB½(nn13ǓĿ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kB%C2%BD%28nn13%C7%93%C4%BF&amp;inputs=Hello%2C%20world!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-4 thx to lyxal</p>
"
"226417","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2+7=9 bytes</h1>
<h2>Encoder</h2>
<pre><code>y+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=y%2B&amp;inputs=HloWrdel%20ol!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Decoder</h2>
<pre><code>:½h$½tY
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3A%C2%BDh%24%C2%BDtY&amp;inputs=HloWrdel%20ol!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226419","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ƛ⁰=;Ġ'h;vLst
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%E2%81%B0%3D%3B%C4%A0%27h%3BvLst&amp;inputs=xxx%20xxxxx%20xx%20x%0Ax&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ⁰=;         # Map to - is identical to first input
    Ġ        # Group identical values
     'h;     # Filter by - first item is truthy
        vL   # Map to - length
          s  # Sort
           t # Last item
</code></pre>
"
"226420","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 42 bytes</h1>
<pre><code>slice expected at least 1 arguments, got 0
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=slice%20expected%20at%20least%201%20arguments%2C%20got%200&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226422","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ĠvLG
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C4%A0vLG&amp;inputs=xx%20xx%20xx%20xxxxxxx%20xxxx%20xxx%0Ax&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 bytes thanks to @AUsername</p>
"
"226423","<h1>V for <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes, score 2+5=7</h1>
<pre><code>ka
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ka&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Dunno someone has posted this already</p>
"
"226424","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>:I,⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI6SSzih6ciLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to lyxal.</p>
<p>Note: output is  in spaces + newlines.</p>
"
"226425","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ṗƛṅ;$c
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%97%C6%9B%E1%B9%85%3B%24c&amp;inputs=anna%0Aaa&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226427","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ṖU
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%96U&amp;inputs=%5B1%2C1%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Ṗ  # All permutations of input 
 U # Filtered by unique
</code></pre>
"
"226437","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>7ɾ$⊍?∑N$ǔṫ$
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=7%C9%BE%24%E2%8A%8D%3F%E2%88%91N%24%C7%94%E1%B9%AB%24&amp;inputs=%5B2%2C4%2C7%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226440","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>»æ₁s≥»₄τ?28⋏i?96⋏+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%C3%A6%E2%82%81s%E2%89%A5%C2%BB%E2%82%84%CF%84%3F28%E2%8B%8Fi%3F96%E2%8B%8F%2B&amp;inputs=205&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226442","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 6 bytes</h1>
<pre><code>f⁰Le∑=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9BI%3B%E2%81%B0Le%E2%88%91%3D&amp;inputs=153&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>f      # Map each digit to integer
   e   # (for each) to the power of 
 ⁰L    # Input length
    ∑  # Is sum...
     = # Equal to
       # (Implicit input)?
</code></pre>
<p>-2 thx to lyxal.</p>
"
"226445","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 266 bytes</h1>
<pre><code>kAhkPkekieiJkakiiJkoLddCJkakPkeEiIdHiJkPkfJLCJkakhhLEEiJkoLddCJkakPkeEiIdHiJkahJkakiEiJkzkikeeiJkpkfkoJJLCJkoLddCJkpkPkeEiIiJkpkakoJJLCJkHkPkfJJLCJkzkeEiJkoLddCJkzkeEiJkPkfJLCJkahJkzkeEiJkpkPkeEiIiJkakPkeEiIdHiJkoLddCJkPkfJLCJkakiEiJkakPkeEiIdHiJkiSkohLiJkpkPkeEiIiJ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kAhkPkekieiJkakiiJkoLddCJkakPkeEiIdHiJkPkfJLCJkakhhLEEiJkoLddCJkakPkeEiIdHiJkahJkakiEiJkzkikeeiJkpkfkoJJLCJkoLddCJkpkPkeEiIiJkpkakoJJLCJkHkPkfJJLCJkzkeEiJkoLddCJkzkeEiJkPkfJLCJkahJkzkeEiJkpkPkeEiIiJkakPkeEiIdHiJkoLddCJkPkfJLCJkakiEiJkakPkeEiIdHiJkiSkohLiJkpkPkeEiIiJ&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A real nightmare. This was coded by hand.</p>
"
"226470","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 60 bytes</h1>
<pre><code>«ÞTȮa⟩Ȯ2¬~Zyė∆₂ċ«⇧D3ȯ℅₴7ȯ℅₴6ɾ2+?ḟu=50*?50%+:₀&lt;[\0p]₴2ȯDẊẊ℅ṅ₴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C3%9ET%C8%AEa%E2%9F%A9%C8%AE2%C2%AC%7EZy%C4%97%E2%88%86%E2%82%82%C4%8B%C2%AB%E2%87%A7D3%C8%AF%E2%84%85%E2%82%B47%C8%AF%E2%84%85%E2%82%B46%C9%BE2%2B%3F%E1%B8%9Fu%3D50*%3F50%25%2B%3A%E2%82%80%3C%5B%5C0p%5D%E2%82%B42%C8%AFD%E1%BA%8A%E1%BA%8A%E2%84%85%E1%B9%85%E2%82%B4&amp;inputs=4%0A2005&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It's... not terrible, but still bad.</p>
"
"226475","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>(‛[ ¹*n₀%‛ ]¹*++,)¹‹(‛  n›*‛[ ¹nε‹*p\X+‛  n›*+‛ ]¹nε‹*+,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%E2%80%9B%5B%20%C2%B9*n%E2%82%80%25%E2%80%9B%20%5D%C2%B9*%2B%2B%2C%29%C2%B9%E2%80%B9%28%E2%80%9B%20%20n%E2%80%BA*%E2%80%9B%5B%20%C2%B9n%CE%B5%E2%80%B9*p%5CX%2B%E2%80%9B%20%20n%E2%80%BA*%2B%E2%80%9B%20%5D%C2%B9n%CE%B5%E2%80%B9*%2B%2C&amp;inputs=4%0A4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Its bad I know.</p>
"
"226478","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>0
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Any digit works.</p>
<p>Or, if you think that doesn't count,</p>
<pre><code>\\
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C%5C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>\</code> is a single-character string.</p>
"
"226481","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>C‹3%0€v∑G
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=C%E2%80%B93%250%E2%82%ACv%E2%88%91G&amp;inputs=WwwvWWWWvvwwwwwwwwvWwWw&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the Jelly answer. Update: Bug has been fixed.</p>
<pre><code>C         # To array of charcodes
 ‹        # Decremented
  3%      # Mod 3
    0€    # Split on 0s
      v∑  # Map to sum
        G # Maximum
</code></pre>
<h2>Other approach, 10 bytes</h2>
<pre><code>\W₀V\v/vLG
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5CW%E2%82%80V%5Cv%2FvLG&amp;inputs=WwwvWWWWvvwwwwwwwwvWwWw&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>   V       # Replace...
\W         # 'W'
   V       # With...
  ₀        # 10 (arbitrary 2-byte value)
      /    # Split on...
    \v     # 'v'
       v   # Map each to...
        L  # Length
         G # Maximum
</code></pre>
<p>-2 from this thx to @DLosc.</p>
"
"226493","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 6 bytes</h1>
<pre><code>ẋ??ẋJL
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%BA%8B%3F%3F%E1%BA%8BJL&amp;inputs=4%0A5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I can't get base-1 to work.</p>
<p>-2 thx to lyxal</p>
"
"226496","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>[0&gt;`  -~-
`$[`$|-~-
`+|2]*`  -~-`+↵§|`Ṅƛ on λ¢ λɽ ÷Ḃ! :D
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5B0%3E%60%20%20-%7E-%0A%60%24%5B%60%24%7C-%7E-%0A%60%2B%7C2%5D*%60%20%20-%7E-%60%2B%E2%86%B5%C2%A7%7C%60%E1%B9%84%C6%9B%20on%20%CE%BB%C2%A2%20%CE%BB%C9%BD%20%C3%B7%E1%B8%82!%20%3AD&amp;inputs=-1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226497","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>C</code>, 7 bytes</h1>
<pre><code>ʁd›×*×J
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=C&amp;code=%CA%81d%E2%80%BA%C3%97*%C3%97J&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>ɾ×*§↵vøm:⁋₴h,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%C3%97*%C2%A7%E2%86%B5v%C3%B8m%3A%E2%81%8B%E2%82%B4h%2C&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226499","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 368 bytes</h1>
<pre><code>»æl⟨Ė&quot;†ꜝ¯⅛±ʀ|⟩nǎ@•‛b⇧ǒḞŻḋ⟇P:₇bj⌊Ż↵⌐D:Jẏɖƒ)e⋏&amp;ƈƈ⋎ĖXε4⟇ß„¹≤9=↲tẇ₀†°nẊF°q⋏~kƈxḟ√ẇjaK↔?÷∴4ɽġ⋎?ṅṅ…‹%⅛↵•«⌈0Ǎm ≬Ǎa≠‹E√℅λ'9ø!‟.7¨∴ṗpλ↔3ḋ~€¼↳Ǔ≬⌐p⋎Ȯβε ⁰A:M@ṙR√hŀ⟑$~y?ṫL∩¹W&quot;⌈«½*;⟩↓!j₁½›ȯḢXṀ₆∪ʀ‹≈I∨⁽3Oǔ⟇⁽¬∧0ßṡ₃∵GB÷ɾ‡ḋ5&lt;‛t½«s≬≠꘍‛#‡↑≬Kg`ZµƈÞḂV↑ɾ↑ȯẋ¯⊍CḞ(∵j⌈Ṁ⟇∷⁺ƈġ↓ u₌□⇩ḃ↑↲f⅛:¯J¾ƒl₈€FK≈ĊḢƈεC¹9ΠVG¶Ṡ‟~R∵ĠaBI∆ḃg2eṀ¡Ǒ8µEtṫy+¹₆C3g*/ė¬u
⁽ǐ≠MḊ•T⟇€•sṗSŻjJ₌∴¹Jƛǒ₃uṫż‹↔C∆%ẏ¶⟨⌈&quot;(ṅ∑∆*$Ġ»`#.* -
`τ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%C3%A6l%E2%9F%A8%C4%96%22%E2%80%A0%EA%9C%9D%C2%AF%E2%85%9B%C2%B1%CA%80%7C%E2%9F%A9n%C7%8E%40%E2%80%A2%E2%80%9Bb%E2%87%A7%C7%92%E1%B8%9E%C5%BB%E1%B8%8B%E2%9F%87P%3A%E2%82%87bj%E2%8C%8A%C5%BB%E2%86%B5%E2%8C%90D%3AJ%E1%BA%8F%C9%96%C6%92%29e%E2%8B%8F%26%C6%88%C6%88%E2%8B%8E%C4%96X%CE%B54%E2%9F%87%C3%9F%E2%80%9E%C2%B9%E2%89%A49%3D%E2%86%B2t%E1%BA%87%E2%82%80%E2%80%A0%C2%B0n%E1%BA%8AF%C2%B0q%E2%8B%8F%7Ek%C6%88x%E1%B8%9F%E2%88%9A%E1%BA%87jaK%E2%86%94%3F%C3%B7%E2%88%B44%C9%BD%C4%A1%E2%8B%8E%3F%E1%B9%85%E1%B9%85%E2%80%A6%E2%80%B9%25%E2%85%9B%E2%86%B5%E2%80%A2%C2%AB%E2%8C%880%C7%8Dm%20%E2%89%AC%C7%8Da%E2%89%A0%E2%80%B9E%E2%88%9A%E2%84%85%CE%BB%279%C3%B8!%E2%80%9F.7%C2%A8%E2%88%B4%E1%B9%97p%CE%BB%E2%86%943%E1%B8%8B%7E%E2%82%AC%C2%BC%E2%86%B3%C7%93%E2%89%AC%E2%8C%90p%E2%8B%8E%C8%AE%CE%B2%CE%B5%20%E2%81%B0A%3AM%40%E1%B9%99R%E2%88%9Ah%C5%80%E2%9F%91%24%7Ey%3F%E1%B9%ABL%E2%88%A9%C2%B9W%22%E2%8C%88%C2%AB%C2%BD*%3B%E2%9F%A9%E2%86%93!j%E2%82%81%C2%BD%E2%80%BA%C8%AF%E1%B8%A2X%E1%B9%80%E2%82%86%E2%88%AA%CA%80%E2%80%B9%E2%89%88I%E2%88%A8%E2%81%BD3O%C7%94%E2%9F%87%E2%81%BD%C2%AC%E2%88%A70%C3%9F%E1%B9%A1%E2%82%83%E2%88%B5GB%C3%B7%C9%BE%E2%80%A1%E1%B8%8B5%3C%E2%80%9Bt%C2%BD%C2%ABs%E2%89%AC%E2%89%A0%EA%98%8D%E2%80%9B%23%E2%80%A1%E2%86%91%E2%89%ACKg%60Z%C2%B5%C6%88%C3%9E%E1%B8%82V%E2%86%91%C9%BE%E2%86%91%C8%AF%E1%BA%8B%C2%AF%E2%8A%8DC%E1%B8%9E%28%E2%88%B5j%E2%8C%88%E1%B9%80%E2%9F%87%E2%88%B7%E2%81%BA%C6%88%C4%A1%E2%86%93%20u%E2%82%8C%E2%96%A1%E2%87%A9%E1%B8%83%E2%86%91%E2%86%B2f%E2%85%9B%3A%C2%AFJ%C2%BE%C6%92l%E2%82%88%E2%82%ACFK%E2%89%88%C4%8A%E1%B8%A2%C6%88%CE%B5C%C2%B99%CE%A0VG%C2%B6%E1%B9%A0%E2%80%9F%7ER%E2%88%B5%C4%A0aBI%E2%88%86%E1%B8%83g2e%E1%B9%80%C2%A1%C7%918%C2%B5Et%E1%B9%ABy%2B%C2%B9%E2%82%86C3g*%2F%C4%97%C2%ACu%0A%E2%81%BD%C7%90%E2%89%A0M%E1%B8%8A%E2%80%A2T%E2%9F%87%E2%82%AC%E2%80%A2s%E1%B9%97S%C5%BBjJ%E2%82%8C%E2%88%B4%C2%B9J%C6%9B%C7%92%E2%82%83u%E1%B9%AB%C5%BC%E2%80%B9%E2%86%94C%E2%88%86%25%E1%BA%8F%C2%B6%E2%9F%A8%E2%8C%88%22%28%E1%B9%85%E2%88%91%E2%88%86*%24%C4%A0%C2%BB%60%23.*%20-%0A%60%CF%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Losing to... A lot of stuff.</p>
"
"226500","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 62 bytes</h1>
<pre><code>(⁰nεð*nd⇧\_*+,⁰nε⇩ð*⁰nε₂[\o|⁰‹n=[¤|ð]]‛/,nd\_*‛,\⁰nε₂[|\o+]Wṅ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%E2%81%B0n%CE%B5%C3%B0*nd%E2%87%A7%5C_*%2B%2C%E2%81%B0n%CE%B5%E2%87%A9%C3%B0*%E2%81%B0n%CE%B5%E2%82%82%5B%5Co%7C%E2%81%B0%E2%80%B9n%3D%5B%C2%A4%7C%C3%B0%5D%5D%E2%80%9B%2F%2Cnd%5C_*%E2%80%9B%2C%5C%E2%81%B0n%CE%B5%E2%82%82%5B%7C%5Co%2B%5DW%E1%B9%85%2C&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Many turtles.</p>
"
"226502","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>‛/\5*s6(4(:6*,)Ṙ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%2F%5C5*s6%284%28%3A6*%2C%29%E1%B9%98&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Do not worry, your pillow will be remembered.</p>
<pre><code>‛/\              # String `/\`
   5*            # times 5
     s           # Sort
      6(         # Six times
        4(    )  # Four times
          :      # Duplicate
           6*    # 6 lots
             ,   # Output
               Ṙ # Reverse
</code></pre>
"
"226506","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ƛ\/=&amp;-ð¥*n+,C₂&amp;+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%5C%2F%3D%26-%C3%B0%C2%A5*n%2B%2CC%E2%82%82%26%2B&amp;inputs=%5C%5C%5C%2F%2F%2F%5C%2F%5C%2F%5C%2F%5C%5C%2F%5C%2F%5C%5C%5C%5C%5C%5C%2F%5C%5C%5C%5C%5C%2F%5C%5C%5C%5C%5C%2F%2F%5C%5C%5C%5C%5C%5C%2F%5C%5C%2F%2F%2F%2F%2F%5C%2F%2F%2F%2F%2F%5C%2F%5C%5C%5C%5C%5C%2F%2F%2F%5C%5C%5C%5C%5C%5C%5C%5C%2F%5C%5C%5C%5C%5C%5C&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ                # Map by...
    &amp;-           # Decrement register by 
 \/=             # (is a forward-slash)
      ð¥*        # (register) spaces
         n+,     # prepended to n and outputted
              &amp;+ # Increment register by
            C₂   # (is a backslash)
</code></pre>
"
"226519","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 function and 9 programs</h1>
<p>Functions:</p>
<ol>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%3BM&amp;inputs=%5B0%2C1%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>λ;</code></a> - A lambda that does nothing.</li>
</ol>
<p>Programs:</p>
<ol>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=&amp;inputs=%5B0%2C1%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">The empty program</a> - Nothing happens to the input, so it remains on top of the stack (and gets popped off at the end).</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%23&amp;inputs=10.4&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>#</code></a> - Basically the same as the empty program, except it has an (empty) comment too.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3A&amp;inputs=%5B0%2C1%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>:</code></a> - Duplicate the input. Since we only care about the top of the stack, this can be treated as an identity function even though it leaves trash behind.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=D&amp;inputs=%5B0%2C1%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>D</code></a> - In the same vein as the previous program, this triplicates the input.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=SE&amp;inputs=%5B0%2C1%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>SE</code></a> - Convert to string, then evaluate.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=d%C2%BD&amp;inputs=10.4&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>d½</code></a> - Double, then halve.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%2C&amp;inputs=10.4&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>,</code></a> - Print the input.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A4%24F&amp;inputs=foobarbaz&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>¤$F</code></a> - Finally, an almost non-trivial program! This one pushes the empty string, swaps with the input, then keeps all the characters in the input that aren't in the empty string (which is all of them). It also works with normal lists, but errors.</li>
<li><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%99&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer""><code>ṙ</code></a> - Round an integer.</li>
</ol>
"
"226520","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>4ɾƛS5*fvI;?Jf«⟇½⁰«*Ṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=4%C9%BE%C6%9BS5*fvI%3B%3FJf%C2%AB%E2%9F%87%C2%BD%E2%81%B0%C2%AB*%E1%B9%84&amp;inputs=58&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226521","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>7
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=7&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Somehow the average of this program turns out to be the luckiest number in universe</p>
"
"226529","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>r</code>, 4 bytes</h1>
<p>This is lyxal's solution</p>
<pre><code>‹(⁰e
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=r&amp;code=%E2%80%B9%28%E2%81%B0e&amp;inputs=3%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>‹(⁰e
‹     Decrement b
 (  ) For loop (second parentheses is implicit) using b-1
  ⁰   Push a
   e  And raise it to the power of the accumulator (initially a)
</code></pre>
<h2><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 5 bytes</h2>
<p>Saved 1 byte thanks to lyxal</p>
<pre><code>ʁ•⁽eḭ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CA%81%E2%80%A2%E2%81%BDe%E1%B8%AD&amp;inputs=3%0A%5B3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This one is a worse solution. <code>a</code> is inputted as a singleton list.</p>
<pre><code>ʁ•λe;ḭ
ʁ      Make a range [0,b) (only the length of the range matters (b))
 •     Reshape [a] to that (make a list of b a's)
     ḭ Reduce from the right
  λe;  using exponentiation
</code></pre>
"
"226536","<h1>12. <a href=""https://codegolf.stackexchange.com/users/100411/tail-spark-rabbit-ear"">tail spark rabbit ear</a>, <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kH‛.p+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kH%E2%80%9B.p%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>Explanation</strong></p>
<pre><code>kH       # Hello, World! pre-defined constant
‛        # Two byte string literal
.p       # Capture next two bytes: .p and push to stack
+        # Concatenate top two items on stack
          (implicit output of top of stack)
</code></pre>
<p>Prints <code>Hello, World.p</code>, couldn't waste the big chance and I am winner until now!!!</p>
<p>My first answer, <code>1..&quot;$args&quot;-match&quot;2$&quot;</code></p>
"
"226540","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ʁ+∑›
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CA%81%2B%E2%88%91%E2%80%BA&amp;inputs=9%0A-4&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>An exact port of Bubbler's jelly answer. Takes <code>m</code> as the 0-based index to retrieve and <code>n</code> as the variant</p>
<h2>Explained</h2>
<pre><code>ʁ+∑›
ʁ    # [0 ... m-1]
 +   # ↑ + n (vectorises)
  ∑  # sum(↑)
   › # ↑ + 1 (implicitly output)
</code></pre>
"
"226547","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ɾ(n:+‹)W¦
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%28n%3A%2B%E2%80%B9%29W%C2%A6&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It could be just two bytes if everything is allowed</p>
"
"226548","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>K¾p
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=K%C2%BEp&amp;inputs=%5B4%2C3%2C2%2C1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226551","<h1>Trivial Answers (Community Wiki)</h1>
<p><strong>Edit</strong>: This challenge is closed. Please do not add solutions here; instead, consider creating a CW for trivial solutions on the dupe target, or just post your answer there as there are already many trivial solutions.</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>ǐ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C7%90&amp;inputs=180&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 2 bytes</h1>
<pre><code>Æf
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8//9wW9r///@NDQA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<h1><a href=""https://factorcode.org/"" rel=""nofollow noreferrer"">Factor</a> + <code>math.primes.factors</code>, 7 bytes</h1>
<pre><code>factors
</code></pre>
<p><a href=""https://tio.run/##S0tMLskv@h8a7OnnbqWQm1iSoVdQlJmbWqyXBpYpVihOLSxNzUtOLVYoKEotKakESueVKFhzcVVzKQCBEZg0BpNmYNIQImRkCuFZGEBpQ65ahej/UGP/xwItK1AoLklMztb7DwA"" rel=""nofollow noreferrer"" title=""Factor – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, 1 byte</h1>
<pre><code>Ò
</code></pre>
<p><a href=""https://tio.run/##yy9OTMpM/f//8KT//w0tDAA"" rel=""nofollow noreferrer"" title=""05AB1E – Try It Online"">Try it online!</a></p>
<h1><a href=""http://jsoftware.com/"" rel=""nofollow noreferrer"">J</a>, 2 bytes</h1>
<pre><code>q:
</code></pre>
<p><a href=""https://tio.run/##y/qvpKeepmBrpaCuoKNgoGAFxLp6Cs5BPm7/C63@a3KlJmfkK6QpGFoY/AcA"" rel=""nofollow noreferrer"" title=""J – Try It Online"">Try it online!</a></p>
"
"226552","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ʀǎ:£$vǑ¥Zƛ÷w$ẋ;f
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CA%80%C7%8E%3A%C2%A3%24v%C7%91%C2%A5Z%C6%9B%C3%B7w%24%E1%BA%8B%3Bf&amp;inputs=180&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online at your own risk!</a></p>
<p>It is horrendously slow for large numbers, but it works</p>
<h2>Explained</h2>
<pre><code>ʀǎ:£$vǑ¥Zƛ÷w$ẋ;f
ʀǎ                  # nth prime for each item in the range [0 ... input - 1]
  :£                # put that into the register while leaving it on the stack
    $vǑ             # get the divisbilty of each prime into the input
       ¥Z           # and zip that with the register
        ƛ     ;     # for each item in that zipped list: (each item is: [divisbilty, prime factor])
         ÷w         #      push divisbilty, [prime_factor]
           $ẋ       #      and repeat [prime_factor] divisibility times
               f    # flatten the unholy mess that results from doing the above
</code></pre>
"
"226556","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>ǐ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHkCIsIiIsIjIxNDc0ODM2NDYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just the built-in. But that's boring, so</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> 8 bytes</h2>
<pre><code>K~æ~Ǒ$ẋf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLfsOmfseRJOG6i2YiLCIiLCIyMTQ3NDgzNjQ2Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ʀ~æ~Ǒ$ẋf
ʀ~æ      # From the all numbers in the range [0, input], keep only those that are prime
   ~Ǒ    # Without popping anything, get the multiplicity of each prime divisor - this leaves the stack as [divisors, multiplicities]
     $ẋ  # Swap the two items and repeat each divisor multiplicity times
       f # Flatten and output that   
</code></pre>
"
"226561","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 85 bytes</h1>
<pre><code>«3꘍Ẋʀɖ&gt;¯ɖ\4ȧḊ#⅛F&gt;ẇ#₂⟑†ql~-ṡ²&lt;vŻ%)∆₆U÷↵ʁʀeµṘbD{⇧½⁰ṙ⟩ĊI3≥⁰?λ«16/v℅Ṗ℅4ẇƛ÷W‛  j;⁋⇧‛Q ‛QuV
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB3%EA%98%8D%E1%BA%8A%CA%80%C9%96%3E%C2%AF%C9%96%5C4%C8%A7%E1%B8%8A%23%E2%85%9BF%3E%E1%BA%87%23%E2%82%82%E2%9F%91%E2%80%A0ql%7E-%E1%B9%A1%C2%B2%3Cv%C5%BB%25%29%E2%88%86%E2%82%86U%C3%B7%E2%86%B5%CA%81%CA%80e%C2%B5%E1%B9%98bD%7B%E2%87%A7%C2%BD%E2%81%B0%E1%B9%99%E2%9F%A9%C4%8AI3%E2%89%A5%E2%81%B0%3F%CE%BB%C2%AB16%2Fv%E2%84%85%E1%B9%96%E2%84%854%E1%BA%87%C6%9B%C3%B7W%E2%80%9B%20%20j%3B%E2%81%8B%E2%87%A7%E2%80%9BQ%20%E2%80%9BQuV&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Don't try it Online!</a> Because it breaks the interpreter trying to handle 16! permutations of the dice at once. Would work given enough memory + time though.  <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB3%EA%98%8D%E1%BA%8A%CA%80%C9%96%3E%C2%AF%C9%96%5C4%C8%A7%E1%B8%8A%23%E2%85%9BF%3E%E1%BA%87%23%E2%82%82%E2%9F%91%E2%80%A0ql%7E-%E1%B9%A1%C2%B2%3Cv%C5%BB%25%29%E2%88%86%E2%82%86U%C3%B7%E2%86%B5%CA%81%CA%80e%C2%B5%E1%B9%98bD%7B%E2%87%A7%C2%BD%E2%81%B0%E1%B9%99%E2%9F%A9%C4%8AI3%E2%89%A5%E2%81%B0%3F%CE%BB%C2%AB16%2Fv%E2%84%854%E1%BA%87%C6%9B%C3%B7W%E2%80%9B%20%20j%3B%E2%81%8B%E2%87%A7%E2%80%9BQ%20%E2%80%9BQuV&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try this one that doesn't shuffle online!</a></p>
<pre><code>«...«                           # Compressed string
     16/                        # Into 16 pieces
        v℅                      # Random choice from each
          Ṗ℅                    # Shuffle
            4ẇ                  # Split into four pieces
              ƛ      ;          # Foreach...
               ÷W               # To list of characters
                 ‛  j           # Joined by double spaces 
                      ⁋⇧        # Joined by newlines and uppercased
                        ‛Q ‛QuV # Replace `Q ` with `Qu`
</code></pre>
"
"226570","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>0
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Any digit works.</p>
<p>More interestingly,</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>j</code>, 4 bytes</h1>
<pre><code>2
ʁ↵
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=j&amp;code=2%0A%CA%81%E2%86%B5&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>2   # 2
 ʁ  # Range 0-1
  ↵ # 10 ** n (vectorised)
    # (j flag) joined by newlines
</code></pre>
<p>Using powers of 10.</p>
<p>And finally,</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>3
ɾ×
*⁋,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=3%0A%C9%BE%C3%97%0A*%E2%81%8B%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>3      # 3
 ɾ     # 1...3
  ×*   # That many asterisks, for each
    ⁋  # Joined by newlines
     , # Outputted. 
</code></pre>
<p>Making an asterisk triangle.</p>
"
"226572","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 65 bytes</h1>
<pre><code>›ð*\|+,(⁰nε\/꘍nd›\\꘍+,)×⁰d›-×+:,⁰d(\|‛ o⁰*ð\|+++,),‛ /\_⁰d‹*\\++,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%BA%C3%B0*%5C%7C%2B%2C%28%E2%81%B0n%CE%B5%5C%2F%EA%98%8Dnd%E2%80%BA%5C%5C%EA%98%8D%2B%2C%29%C3%97%E2%81%B0d%E2%80%BA-%C3%97%2B%3A%2C%E2%81%B0d%28%5C%7C%E2%80%9B%20o%E2%81%B0*%C3%B0%5C%7C%2B%2B%2B%2C%29%2C%E2%80%9B%20%2F%5C_%E2%81%B0d%E2%80%B9*%5C%5C%2B%2B%2C&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Slowly constructs the string bit by bit.</p>
"
"226592","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>£Zƛ¥R
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%2B%3B%C2%A3Z%C6%9B%C2%A5R&amp;inputs=%5B1%2C2%2C3%2C4%5D%0A%5B3%2C4%2C5%2C6%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I don't know how to input functions properly in Vyxal, so the Vyxal interpreter link just has the function stuffed with the code.</p>
<pre><code>£Zƛ¥R
£     Set the register to the blackbox function
 Z    Zip the two lists
  ƛ   For each element of that
    R Reduce using
   ¥  The function in the register
</code></pre>
"
"226610","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>14</s> <s>13</s> 11 bytes</h1>
<pre><code>vτR÷+N⁰%Ṙ⁰β
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=v%CF%84R%C3%B7%2BN%E2%81%B0%25%E1%B9%98%E2%81%B0%CE%B2&amp;inputs=%5B2712%2C%20403%5D%0A30&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Takes <code>[x, y]</code> and <code>b</code> and outputs the result.</p>
<p><em>-1 thanks to the power of vectorisation</em></p>
<p><em>and -2 thanks to porting Jelly</em></p>
<h2>Explained (old)</h2>
<pre><code>vτR÷Zv∑N⁰%Ṙ⁰β
vτ             # Convert x and y to base b
  R            # reverse each result
   ÷Z          # zip the digits
               # to each pair of digits ([p, q]):
     v∑N       #     -(p + q)
        ⁰%     #     % b
          Ṙ    # reverse the result of the above map and
           ⁰β  # convert it from base b to base 10
</code></pre>
"
"226622","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 206 bytes</h1>
<pre><code>→a\-51*D:,\|w6ẋfð9*j:,`\ /   *\ /   *      *  (==)
-O-   *-O(==)*  (==)*(====)
/ \\   *(====)*(====)*///// `↵ƛ×/;ƛ£←aƛ¥ni;` |  `j`|  `p` |`+,;_,,?ƛð3*pð3*+;\|j\|p\|+,,`|  H %   `5*?%\|+,`|  L %   `5*?%\|+,,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%86%92a%5C-51*D%3A%2C%5C%7Cw6%E1%BA%8Bf%C3%B09*j%3A%2C%60%5C%20%2F%20%20%20*%5C%20%2F%20%20%20*%20%20%20%20%20%20*%20%20%28%3D%3D%29%0A-O-%20%20%20*-O%28%3D%3D%29*%20%20%28%3D%3D%29*%28%3D%3D%3D%3D%29%0A%2F%20%5C%5C%20%20%20*%28%3D%3D%3D%3D%29*%28%3D%3D%3D%3D%29*%2F%2F%2F%2F%2F%20%60%E2%86%B5%C6%9B%C3%97%2F%3B%C6%9B%C2%A3%E2%86%90a%C6%9B%C2%A5ni%3B%60%20%7C%20%20%60j%60%7C%20%20%60p%60%20%7C%60%2B%2C%3B_%2C%2C%3F%C6%9B%C3%B03*p%C3%B03*%2B%3B%5C%7Cj%5C%7Cp%5C%7C%2B%2C%2C%60%7C%20%20H%20%25%20%20%20%605*%3F%25%5C%7C%2B%2C%60%7C%20%20L%20%25%20%20%20%605*%3F%25%5C%7C%2B%2C%2C&amp;inputs=%5B0%2C3%2C1%2C2%2C3%5D%0A%5B%27MON%27%2C%27TUE%27%2C%27WED%27%2C%27THU%27%2C%27FRI%27%5D%0A%5B98%2C76%2C45%2C32%2C67%5D%0A%5B15%2C35%2C56%2C32%2C43%5D%0A%0A&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A giant mess. Please don't ask.</p>
"
"226624","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>1ẋ≬2ẇṠ↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIx4bqL4omsMuG6h+G5oOKGlCIsIiIsIjEzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>1ẋ      # n 1s
      ↔ # Collect while unique:
  ≬---  # Next three as function
    ẇ   # Cut into chunks of length
   2    # 2
     Ṡ  # Sum each chunk
</code></pre>
"
"226627","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 0.8 bytes</h1>
<pre><code>ɾ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE&amp;inputs=15&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>1-byte builtin. Python's default number type is arbitrary-size integers, so so is Vyxal's. I mean, it won't finish in reasonable time, but if you gave it enough memory and time...</p>
"
"226629","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>(Ṙḣ)WṘ'
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%E1%B9%98%E1%B8%A3%29W%E1%B9%98%27&amp;inputs=%5B1%2C2%2C3%2C4%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226645","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 40 bytes</h1>
<pre><code>4τk…t:„JpfDƛ∷`| `$i;Ṅ,ƛ\|;Ṅ,ƛ½⌊` |`$i;Ṅ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=4%CF%84k%E2%80%A6t%3A%E2%80%9EJpfD%C6%9B%E2%88%B7%60%7C%20%60%24i%3B%E1%B9%84%2C%C6%9B%5C%7C%3B%E1%B9%84%2C%C6%9B%C2%BD%E2%8C%8A%60%20%7C%60%24i%3B%E1%B9%84%2C&amp;inputs=123&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226703","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes, 2 programs.</h1>
<h2>#1</h2>
<pre><code>{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%7B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> Simple forever loop. The <code>5</code> flag makes it terminate after 5 seconds so it doesn't jam up the interpreter.</p>
<h2>#2</h2>
<pre><code>0|{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=0%7C%7B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>  Another simple loop.</p>
<h2>Halting program</h2>
<pre><code>{0|{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%7B0%7C%7B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This works because <code>|</code> is a branch in structure when in a structure, but does nothing when in the main scope. So in the second one, it pushes 0 then executes a forever loop, but in here, it executes a loop containing a forever loop with 0 as the condition, so the inside loop is never run and the program halts.</p>
<p>Note that like TIO, the Vyxal interpreter times out after 60 seconds to avoid breaking, but if that was removed these two would run forever.</p>
"
"226706","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes / 3 programs</h1>
<h2>#1</h2>
<pre><code>`{`{`
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%60%7B%60%7B%60&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>#2</h2>
<pre><code>{`{`
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%7B%60%7B%60&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>#3</h2>
<pre><code>`0|}0|{`{`

</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%600%7C%7D0%7C%7B%60%7B%60%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Concatenated</h2>
<pre><code>`{`{`{`{``0|}0|{`{`
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=5&amp;code=%60%7B%60%7B%60%7B%60%7B%60%600%7C%7D0%7C%7B%60%7B%60&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A quite different approach to what I had before.</p>
<p>With NOPS removed, it becomes:</p>
<pre><code>{        # While...
 {  }    # While
  0      # 0
   |     # Do nothing
     0   # 0
      |  # Do..
       { # Forever loop, never executed
 
</code></pre>
"
"226717","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>\cpṪṪ
</code></pre>
<p>Explanation:</p>
<pre><code>\cpṪṪ   # full program
\c      # c
  p     # prepend using implicit input
   ṪṪ   # remove last two letters
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5Ccp%E1%B9%AA%E1%B9%AA&amp;inputs=stdio.h&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226726","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 progs, 27 bytes, take 3.</h1>
<pre><code>{`{
{1
{2
{3
{4
{5
{6
{7
{8
`L17&lt;|`{
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%7B%60%7B%7B1%7B2%7B3%7B4%7B5%7B6%7B7%7B8%60L17%3C%7C%60%7B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I finally figured out what the others are doing. This basically checks if the string between the backticks' length is 17, and if not loops forever.</p>
<p>No trailing newlines, they're just formatted like this for readability.</p>
<p>Any character except <code>X</code> and <code>|</code> can be used instead of the digits.</p>
"
"226730","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 60 bytes</h1>
<pre><code>ð*\_?*d+,(n-‹ð*\/n?+ð*d++\\+,)(nð*\\?d‹n-n›?=[\_|ð]*d++\/+,)
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0*%5C_%3F*d%2B%2C%28n-%E2%80%B9%C3%B0*%5C%2Fn%3F%2B%C3%B0*d%2B%2B%5C%5C%2B%2C%29%28n%C3%B0*%5C%5C%3Fd%E2%80%B9n-n%E2%80%BA%3F%3D%5B%5C_%7C%C3%B0%5D*d%2B%2B%5C%2F%2B%2C%29&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226801","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>` `[`↔ḃ ₄∩`|`¬꘍»₆`½Ṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%20%60%5B%60%E2%86%94%E1%B8%83%20%E2%82%84%E2%88%A9%60%7C%60%C2%AC%EA%98%8D%C2%BB%E2%82%86%60%C2%BD%E1%B9%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>  and
<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%60%5B%60%E2%86%94%E1%B8%83%E2%82%84%E2%88%A9%60%7C%60%C2%AC%EA%98%8D%C2%BB%E2%82%86%60%C2%BD%E1%B9%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">TryitOnline!</a></p>
<h2>How it works</h2>
<ul>
<li><code>` `</code> is a string with one space, a truthy value. When spaces are removed, it becomes the empty string <code>``</code>, which is falsy.</li>
<li><code>[...|...]</code> is an conditional statement. If the top of the stack is truthy, the first part is executed, otherwise the second part.
<ul>
<li>If true (spaces are not removed): <code>`↔ḃ ₄∩`</code>, the compressed string <code>`Programming Puzzles`</code>, is pushed and output</li>
<li>Otherwise: <code>`¬꘍»₆`</code>, the compressed string <code>`CodeGolf`</code>, is pushed. <code>½</code> splits it into the list <code>⟨`Code`|`Golf`⟩</code>, which is then joined by spaces with <code>Ṅ</code> and implicitly printed.</li>
</ul>
</li>
</ul>
<hr />
<h3><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes, for the new site name</h3>
<p>Additionally, here is a 21-byte solution for the new site name - Code Golf and Coding Challenges:</p>
<pre><code>` `[`¬꘍ »₆`|`⟩₆,→ṗ`⌐Ṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%20%60%5B%60%C2%AC%EA%98%8D%20%C2%BB%E2%82%86%60%7C%60%E2%9F%A9%E2%82%86%2C%E2%86%92%E1%B9%97%60%E2%8C%90%E1%B9%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> and <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%60%5B%60%C2%AC%EA%98%8D%C2%BB%E2%82%86%60%7C%60%E2%9F%A9%E2%82%86%2C%E2%86%92%E1%B9%97%60%E2%8C%90%E1%B9%84&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">TryitOnline!</a></p>
<p>It works similarly, using <code>⌐Ṅ</code> to replace the comma in compressed <code>Coding,Challenges</code> with a space.</p>
"
"226840","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>14</s> 12 bytes</h1>
<pre><code>ɾvτƛ⁰nĠvȯf¹β
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BEv%CF%84%C6%9B%E2%81%B0n%C4%A0v%C8%AFf%C2%B9%CE%B2&amp;inputs=250%0A4%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɾ            # 1...n
 vτ          # Foreach, base convert
   ƛ         # Foreach...
    ⁰        # Strength
     nĠ      # Each one grouped
       vȯ    # Trim each
         f   # Flatten
          ¹β # Convert back
</code></pre>
"
"226855","<h2><a href=""https://github.com/catseye/Befunge-93"" rel=""nofollow noreferrer"">Befunge</a>, <a href=""https://github.com/Adriandmen/05AB1E/tree/fb4a2ce2bce6660e1a680a74dd61b72c945e6c3b"" rel=""nofollow noreferrer"">05AB1E (legacy)</a>, <a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""http://www.red-lang.org/"" rel=""nofollow noreferrer"">Red</a>, <a href=""https://www.python.org/download/releases/1.6.1/"" rel=""nofollow noreferrer"">Python 1</a>, <a href=""https://www.vim.org"" rel=""nofollow noreferrer"">Vim</a>, <a href=""https://www.zsh.org/"" rel=""nofollow noreferrer"">Zsh</a> - 7<sup>1.5</sup> / 114 characters ≈ 0.164 score</h2>
<pre><code>'a;# &quot;egnufeB&quot;\\,,,,,,,@&quot;05AB1E&quot;,q', 2&gt;2
'a;`Vyxal`,Q', 2&gt;2#;echo Zsh
print 'Red quit;' * 0+'Python', 1&gt;0#&lt;0x1B&gt;}dHiVim
</code></pre>
<p>Try it in <a href=""https://tio.run/##S0pNK81LT/3/Xz3RWllBKTU9rzQt1UkpJkYHAhyUDEwdnQxdlXQK1XUUjOyMuIAKE8IqKxJzEnQCIULK1qnJGfkKUcUZXAVFmXklCupBqSkKhaWZJdbqCloKBtrqAZUlGfl5QNWGdgbK0rUpHplhmbn//wMA"" rel=""nofollow noreferrer"">Befunge!</a> <a href=""https://tio.run/##MzBNTDJM/f9fPdFaWUEpNT2vNC3VSSkmRgcCHJQMTB2dDF2VdArVdRSM7Iy4gAoTwiorEnMSdAIhQsrWqckZ@QpRxRlcBUWZeSUK6kGpKQqFpZkl1uoKWgoG2uoBlSUZ@XlA1YZ2BsrStSkemWGZuf//AwA"" rel=""nofollow noreferrer"">05AB1E!</a> <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%27a%3B%23%20%22egnufeB%22%5C%5C%2C%2C%2C%2C%2C%2C%2C%40%2205AB1E%22%2Cq%27%2C%202%3E2%0A%27a%3B%60Vyxal%60%2CQ%27%2C%202%3E2%23%3Becho%20Zsh%0Aprint%20%27Red%20quit%3B%27%20*%200%2B%27Python%27%2C%201%3E0%23%1B%7DdHiVim&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Vyxal!</a> <a href=""https://tio.run/##K0pN@R@UmhId@1890VpZQSk1Pa80LdVJKSZGBwIclAxMHZ0MXZV0CtV1FIzsjLiAChPCKisScxJ0AiFCytapyRn5ClHFGVwFRZl5JQrqQCMVCkszS6zVFbQUDLTVAypLMvLzgKoN7QyUpWtTPDLDMnP//wcA"" rel=""nofollow noreferrer"">Red!</a> <a href=""https://tio.run/##K6gsycjPM/z/Xz3RWllBKTU9rzQt1UkpJkYHAhyUDEwdnQxdlXQK1XUUjOyMuIAKE8IqKxJzEnQCIULK1qnJGfkKUcUZXAVFmXklCupBqSkKhaWZJdbqCloKBtrqAWBbgKoN7QyUpWtTPDLDMnP//wcA"" rel=""nofollow noreferrer"">Python!</a> <a href=""https://tio.run/##K/v/Xz3RWllBKTU9rzQt1UkpJkYHAhyUDEwdnQxdlXQK1XUUjOyMuIAKE8IqKxJzEnQCIULK1qnJGfkKUcUZXAVFmXklCupBqSkKhaWZJdbqCloKBtrqAZUlGfl5QNWGdgbK0rUpHplhmbn//wMA"" rel=""nofollow noreferrer"">Vim!</a> <a href=""https://tio.run/##qyrO@P9fPdFaWUEpNT2vNC3VSSkmRgcCHJQMTB2dDF2VdArVdRSM7Iy4gAoTwiorEnMSdAIhQsrWqckZ@QpRxRlcBUWZeSUK6kGpKQqFpZkl1uoKWgoG2uoBlSUZ@XlA1YZ2BsrStSkemWGZuf//AwA"" rel=""nofollow noreferrer"">Zsh!</a></p>
"
"226861","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kr$Gḟ›
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kr%24G%E1%B8%9F%E2%80%BA&amp;inputs=codegolf&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"226878","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 7 bytes</h1>
<pre><code>Ṙṫ:‟€vp
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%E1%B9%AB%3A%E2%80%9F%E2%82%ACvp&amp;inputs=%5B7%2C%201%2C%205%2C%207%2C%204%2C%202%5D%20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"227899","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 127 bytes</h1>
<pre><code>½⌊:\+4-*\++,3(:\|4꘍*\|+,)?ɾ'∷n⁰≠∧;ƛS:₃[0p]`| `pð+;ṅ\|+,?½⌈:\+4-*\++,3(:\|4꘍*\|+,)?ɾ'₂n⁰=n∷∧∨;ƛS:₃[0p]`| `pð+;ṅ\|+,?½⌈:\+4-*\++,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BD%E2%8C%8A%3A%5C%2B4-*%5C%2B%2B%2C3%28%3A%5C%7C4%EA%98%8D*%5C%7C%2B%2C%29%3F%C9%BE%27%E2%88%B7n%E2%81%B0%E2%89%A0%E2%88%A7%3B%C6%9BS%3A%E2%82%83%5B0p%5D%60%7C%20%60p%C3%B0%2B%3B%E1%B9%85%5C%7C%2B%2C%3F%C2%BD%E2%8C%88%3A%5C%2B4-*%5C%2B%2B%2C3%28%3A%5C%7C4%EA%98%8D*%5C%7C%2B%2C%29%3F%C9%BE%27%E2%82%82n%E2%81%B0%3Dn%E2%88%B7%E2%88%A7%E2%88%A8%3B%C6%9BS%3A%E2%82%83%5B0p%5D%60%7C%20%60p%C3%B0%2B%3B%E1%B9%85%5C%7C%2B%2C%3F%C2%BD%E2%8C%88%3A%5C%2B4-*%5C%2B%2B%2C&amp;inputs=17&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is horrible.</p>
"
"227902","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>£`GCM`ƛ¥*?(:,);\G?*?(:,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A3%60GCM%60%C6%9B%C2%A5*%3F%28%3A%2C%29%3B%5CG%3F*%3F%28%3A%2C&amp;inputs=17%0A3%0A2%0A1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Oof.</p>
"
"228902","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 69 bytes</h1>
<pre><code>›\_?*꘍,(nε\/꘍₴nd⁰+\\꘍,)\{₴3*\}꘍₴3+\=*0+,(n›\\꘍₴nε‹d+n›⁰=` _`$i$*₴\/,)
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%BA%5C_%3F*%EA%98%8D%2C%28n%CE%B5%5C%2F%EA%98%8D%E2%82%B4nd%E2%81%B0%2B%5C%5C%EA%98%8D%2C%29%5C%7B%E2%82%B43*%5C%7D%EA%98%8D%E2%82%B43%2B%5C%3D*0%2B%2C%28n%E2%80%BA%5C%5C%EA%98%8D%E2%82%B4n%CE%B5%E2%80%B9d%2Bn%E2%80%BA%E2%81%B0%3D%60%20_%60%24i%24*%E2%82%B4%5C%2F%2C%29&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Unfortunate bytecount...</p>
"
"228903","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 59 bytes</h1>
<pre><code>k/₴3*⇧\_*k/+,›(n`\ \\`꘍₴nεd+n⁰=` _`$i*₴`/ /`,)›\\꘍₴⇧\_*\/+,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=k%2F%E2%82%B43*%E2%87%A7%5C_*k%2F%2B%2C%E2%80%BA%28n%60%5C%20%5C%5C%60%EA%98%8D%E2%82%B4n%CE%B5d%2Bn%E2%81%B0%3D%60%20_%60%24i*%E2%82%B4%60%2F%20%2F%60%2C%29%E2%80%BA%5C%5C%EA%98%8D%E2%82%B4%E2%87%A7%5C_*%5C%2F%2B%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"228904","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 35 bytes</h1>
<pre><code>(5⁰*¤-,`)===)`⁰*:,`(===(`⁰*,,)5*¤-,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%285%E2%81%B0*%C2%A4-%2C%60%29%3D%3D%3D%29%60%E2%81%B0*%3A%2C%60%28%3D%3D%3D%28%60%E2%81%B0*%2C%2C%295*%C2%A4-%2C&amp;inputs=2%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses magic :P</p>
"
"228905","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>ð₴d\_*,\/₴d\\꘍,›(n\\꘍₴nεd\/꘍,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0%E2%82%B4d%5C_*%2C%5C%2F%E2%82%B4d%5C%5C%EA%98%8D%2C%E2%80%BA%28n%5C%5C%EA%98%8D%E2%82%B4n%CE%B5d%5C%2F%EA%98%8D%2C&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>=== The top ===
ð₴d\_*,
ð       # ' '
 ₴      # Print without newline
  d     # (implicit input) doubled
   \_*  # That many underscores
      , # Output with newline
=== Line 2 ===
\/₴d\\꘍,
\/       # Forward slash
  ₴      # Print without newline
   d     # (implicit input) doubled
    \\꘍  # That many spaces, plus a backslash
       , # Output with newline
=== The rest ===
›(             # (implicit input) incremented times do...
  n            # Iteration number...
   \\꘍         # ...spaces plus a backslash
      ₴        # Print without newline
       nε      # Difference of iteration number and (implicit input)
         d.    # Doubled
          \/꘍  # That many spaces, plus a forward slash
             , # Output with newline
</code></pre>
"
"228908","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>Ld(n⁰n⁰Ldεwi꘍⁰Ln-꘍øm,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=Ld%28n%E2%81%B0n%E2%81%B0Ld%CE%B5wi%EA%98%8D%E2%81%B0Ln-%EA%98%8D%C3%B8m%2C&amp;inputs=Hello&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This was interesting. <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=Ld%28n%E2%81%B0n%E2%81%B0Ld%CE%B5wi%EA%98%8D%E2%81%B0Ln%CE%B5%EA%98%8D%C3%B8m%2C&amp;inputs=Hello&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Here</a>'s a bugged version.</p>
<pre><code>Ld(                   # Length * 2 times do...
   n                  # Iteration number...
            ꘍         # Spaces, plus...
    ⁰                 # Input string...
          wi          # Sliced to first...
         ε            # Absolute difference of...
     n                # Iteration number...
         ε            # And...
        d             # Double...
      ⁰L              # The original string's length...
                ꘍     # Plus...
               -      # Difference of...
            ⁰L        # Original string's length
               -      # And...
              n       # Iteration number
                ꘍     # Spaces. 
                 øm   # Palindromised
                   ,  # And outputted. 
</code></pre>
"
"228911","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 108 bytes</h1>
<pre><code>`274`ƛI\o꘍,;_ð\_₀*+,\/₀꘍`\__`+,\|3꘍\J6꘍\|ðd\\Wṅ,\|4꘍\A5꘍`| `m++,\|5꘍\V4꘍`| `m++,\|6꘍\A3꘍`|__/`++,\\\_₀*\/++,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60274%60%C6%9BI%5Co%EA%98%8D%2C%3B_%C3%B0%5C_%E2%82%80*%2B%2C%5C%2F%E2%82%80%EA%98%8D%60%5C__%60%2B%2C%5C%7C3%EA%98%8D%5CJ6%EA%98%8D%5C%7C%C3%B0d%5C%5CW%E1%B9%85%2C%5C%7C4%EA%98%8D%5CA5%EA%98%8D%60%7C%20%60m%2B%2B%2C%5C%7C5%EA%98%8D%5CV4%EA%98%8D%60%7C%20%60m%2B%2B%2C%5C%7C6%EA%98%8D%5CA3%EA%98%8D%60%7C__%2F%60%2B%2B%2C%5C%5C%5C_%E2%82%80*%5C%2F%2B%2B%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"228915","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>₀τƛ¥₂ßd&amp;›₀τ∑;∑₀Ḋ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%CF%84%C6%9B%C2%A5%E2%82%82%C3%9Fd%26%E2%80%BA%E2%82%80%CF%84%E2%88%91%3B%E2%88%91%E2%82%80%E1%B8%8A&amp;inputs=49927398716&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₀τ               # Digits...
  ƛ         ;    # Map
   ¥₂            # If register is even
     ßd          # Double
       &amp;›        # Increment register
         ₀τ      # Digits...
           ∑     # Sum
             ∑   # Sum of all...
              ₀Ḋ # is divisible by 10?
</code></pre>
"
"228916","<h1 id=""vyxal-10-3-bytes-7gxu""><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 3 bytes</h1>
<pre><code>b∑₂
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=b%E2%88%91%E2%82%82&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>b∑  # Sum of binary digits
  ₂ # Is even?
</code></pre>
"
"228924","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>/⌈*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%2F%E2%8C%88*&amp;inputs=5%0A12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"228928","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>⇩ḂkaḂĿ=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%87%A9%E1%B8%82ka%E1%B8%82%C4%BF%3D&amp;inputs=wizard&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⇩       # Lowercase input
 Ḃ      # Duplicate and reverse
     Ŀ  # Transliterate by...
  kaḂ   # lowercase alphabet and backwards lowercase alphabet
      = # is it equal to the original?
</code></pre>
"
"228930","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ḣ$£¥€ƛ¥p
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B8%A3%24%C2%A3%C2%A5%E2%82%AC%C6%9B%C2%A5p&amp;inputs=%5B7%2C%201%2C%205%2C%207%2C%204%2C%202%5D%20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is possible in 8 bytes Imao</p>
"
"229021","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>kr↔zṄ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwia3LihpR64bmEIiwiIiwiQWJcbkFiY1xuQWJjZFxuRT9oP1xuQmx1cnJ5IHZpc2lvblxuV2UncmUgIzEhXG5JJ20gYW4gZXhhbXBsZSFcblRoaXMgaXMgX25vdF8gbGVnaWJsZVxuKGEqYipjKSs1Xi14XG4/P2FfJSwxIT16I0AiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>kr↔   # Remove non-alphanumeric
   z  # Get chunks of length 2
    Ṅ # Join with spaces
</code></pre>
"
"229028","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>₀ɾ*
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%C9%BE*&amp;inputs=20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>10-range-product-by-input</p>
"
"229090","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>₂ḭ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%82%E1%B8%AD&amp;inputs=42&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>-1 thanks to Aaron Miller</p>
<pre><code>₂  # Is_even(n) (Vyxal has no booleans, only 0 and 1)
 ḭ # Integer division (ordinary division doesn't error on 0)
</code></pre>
"
"229101","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 38 bytes</h1>
<pre><code>«÷c4w«?hḟ:u=[`un`|4%«⟑Ẇf:«2ẇ`Ġ⟨`p$i]?+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C3%B7c4w%C2%AB%3Fh%E1%B8%9F%3Au%3D%5B%60un%60%7C4%25%C2%AB%E2%9F%91%E1%BA%86f%3A%C2%AB2%E1%BA%87%60%C4%A0%E2%9F%A8%60p%24i%5D%3F%2B&amp;inputs=honest&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Messy.</p>
"
"229150","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>\//Dh⟨\p8*|\8|\8⟩JḂv⇧J≠⅛hDs«4cð↔Ṗ«≠⅛ƛ\b=;T∑₂⅛«ƈʁ«:„↔≠⅛¾a
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C%2F%2FDh%E2%9F%A8%5Cp8*%7C%5C8%7C%5C8%E2%9F%A9J%E1%B8%82v%E2%87%A7J%E2%89%A0%E2%85%9BhDs%C2%AB4c%C3%B0%E2%86%94%E1%B9%96%C2%AB%E2%89%A0%E2%85%9B%C6%9B%5Cb%3D%3BT%E2%88%91%E2%82%82%E2%85%9B%C2%AB%C6%88%CA%81%C2%AB%3A%E2%80%9E%E2%86%94%E2%89%A0%E2%85%9B%C2%BEa&amp;inputs=rnbqkbnr%2Fpppppppp%2F8%2F8%2F8%2F8%2FPPPPPPPP%2FRNBQKBNR&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>\//Dh⟨\p8*|\8|\8⟩JḂv⇧J≠⅛ # Part 1 - is the board a mirror?
\//                      # Split on slashes
   D                     # 3 copies
    h                    # the first (black pieces)
     ⟨\p8*|\8|\8⟩J       # Prepended to eight pawns and two empty ranks
                  Ḃ      # Duplicate and get reverse
                   v⇧    # Uppercase all pieces in the revers
                     J   # Joined
                      ≠  # Is not equal to original?  
                       ⅛ # Push to global array
hDs«4cð↔Ṗ«≠⅛ # Part 2 - are all the pieces here?
h            # First element
 D           # Tripled for future use
  s          # Sorted
          ≠  # Is not equal to
   «4cð↔Ṗ«   # Compressed string `bbknnqrr`?
           ⅛ # Push to global array
ƛ\b=;T∑₂⅛ # Part 3 - are the bishops on opposite color squares?
ƛ   ;     # Map to
 \b=      # Is a b?
     T∑   # Sum of truthy indices
       ₂  # Is even?
        ⅛ # Push to global array
«ƈʁ«:„↔≠⅛ # Part 4 - is the king between the rooks?
«ƈʁ«      # Compressed `rkr`
    :„    # Duplicate and put on bottom of stack
      ↔   # Remove characters that aren't `rkr`
       ≠  # Doesn't equal rkr?
        ⅛ # Push to global array
¾a # Part 5 - is everything in global array falsy?
¾  # Global array
 a # are any truthy?
</code></pre>
<p>What. A. Mess. Return 0 for valid and 1 for not.</p>
<p>-1 thanks to @cairdcoinheringaahing.</p>
"
"229162","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>∷
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%B7&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>0 for even,  1 for odd.</p>
<p>Alternatively,</p>
<pre><code>₂
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%82&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>1 for even, 0 for odd.</p>
"
"229164","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes, a-f</h1>
<pre><code>kzt
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=kzt&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>\b
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5Cb%0A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>‛cch
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9Bcch&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₁C
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%81C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>«ƛ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C6%9B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`f
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60f&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So, there are only a few ways to get strings in Vyxal:</p>
<p>String literals:</p>
<pre><code>\. , ‛.. , `...\`
</code></pre>
<p>chr(x)  - <code>...C</code></p>
<p>compressed string literals - <code>«...«</code></p>
<p>And deriving from a constant (<code>k...</code>).</p>
<p>That's all we can really do :P</p>
"
"229190","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>9ʀƛn9ɾevtU
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=9%CA%80%C6%9Bn9%C9%BEevtU&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229198","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 76 bytes</h1>
<pre><code>«ƛṙǐȮ:ȮGɽ≬₅⋎¶∧⊍€ƈ₄β›ɽġΠ↑∷×rv₇ṡḢ18[τ/nḞnε₴ɖ¯«ǐð\j`∞Ǔ`Wṅ⌈℅«⟑ṫrUḊ&lt;↑5ß«$`for`⁰WṄ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C6%9B%E1%B9%99%C7%90%C8%AE%3A%C8%AEG%C9%BD%E2%89%AC%E2%82%85%E2%8B%8E%C2%B6%E2%88%A7%E2%8A%8D%E2%82%AC%C6%88%E2%82%84%CE%B2%E2%80%BA%C9%BD%C4%A1%CE%A0%E2%86%91%E2%88%B7%C3%97rv%E2%82%87%E1%B9%A1%E1%B8%A218%5B%CF%84%2Fn%E1%B8%9En%CE%B5%E2%82%B4%C9%96%C2%AF%C2%AB%C7%90%C3%B0%5Cj%60%E2%88%9E%C7%93%60W%E1%B9%85%E2%8C%88%E2%84%85%C2%AB%E2%9F%91%E1%B9%ABrU%E1%B8%8A%3C%E2%86%915%C3%9F%C2%AB%24%60for%60%E2%81%B0W%E1%B9%84&amp;inputs=Wasif&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wanna have a cup of jQuery? :P</p>
"
"229242","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>£ḢṪṘƛ\a=[&amp;h|&amp;Ḣ];¥
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A3%E1%B8%A2%E1%B9%AA%E1%B9%98%C6%9B%5Ca%3D%5B%26h%7C%26%E1%B8%A2%5D%3B%C2%A5&amp;inputs=%5B%5B1%2C%5B3%2C5%2C8%5D%2C5%5D%2C2%2C3%5D%0Acaddadar&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess :P</p>
"
"229245","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>⌊=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%8A%3D&amp;inputs=2.3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌊  # Floor
 = # Is equal to original?
</code></pre>
"
"229246","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 108 bytes</h1>
<blockquote class=""spoiler"">
<p><code><code>¬⋎ »₅</code>⇧<code> &amp; ⟩₆ →ṗ: In ¬¾'s ɾṖ, λ•'ll be •₇ to ⟑Ẇ λλ ∧ṫ ƛ² ¬∪ AND ¦Ṡy AND ¶⊍ing ʁ꘍ ƛṅ...! λ∆ λ• »₅ers €æ?</code>+Cṅ</code>
Needed to optimize the string little to compress it well</p>
</blockquote>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%C2%AC%E2%8B%8E%20%C2%BB%E2%82%85%60%E2%87%A7%60%20%26%20%E2%9F%A9%E2%82%86%20%E2%86%92%E1%B9%97%3A%20In%20%C2%AC%C2%BE%27s%20%C9%BE%E1%B9%96%2C%20%CE%BB%E2%80%A2%27ll%20be%20%E2%80%A2%E2%82%87%20to%20%E2%9F%91%E1%BA%86%20%CE%BB%CE%BB%20%E2%88%A7%E1%B9%AB%20%C6%9B%C2%B2%20%C2%AC%E2%88%AA%20AND%20%C2%A6%E1%B9%A0y%20AND%20%C2%B6%E2%8A%8Ding%20%CA%81%EA%98%8D%20%C6%9B%E1%B9%85...!%20%CE%BB%E2%88%86%20%CE%BB%E2%80%A2%20%C2%BB%E2%82%85ers%20%E2%82%AC%C3%A6%3F%60%2BC%E1%B9%85&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229247","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes</h1>
<pre><code>0⅛3?(:½⌊¾$ḟu=[½⌊|3*]:⅛
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0%E2%85%9B3%3F%28%3A%C2%BD%E2%8C%8A%C2%BE%24%E1%B8%9Fu%3D%5B%C2%BD%E2%8C%8A%7C3*%5D%3A%E2%85%9B&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>1-indexed.</p>
<pre><code>0⅛                     # Push 0 to glob. arr. 
  3                    # Push 3
   ?(                  # Iteration times
             [     ]   # If...
     :½⌊               # Top of stack, halved and floored
        ¾$ḟu=          # Is in global array?
              ½⌊       # Halved and floored
                |      # Else
                 3*    # Tripled
                    :⅛ # And pushed to glob. arr. 
</code></pre>
"
"229248","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>b0PṪt⌐
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiMFDhuap04oyQIiwiIiwiMjEzNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>b      # Convert to binary
 0P    # Strip zeroes
   Ṫt  # Second-to-last item
     ⌐ # The NOT of that
</code></pre>
"
"229258","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 34 bytes</h1>
<pre><code>ð₴-0∴`\|/`Ẏ,(\(₴¹n-&gt;\)-2↳3¹+n+⁰&lt;-,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0%E2%82%B4-0%E2%88%B4%60%5C%7C%2F%60%E1%BA%8E%2C%28%5C%28%E2%82%B4%C2%B9n-%3E%5C%29-2%E2%86%B33%C2%B9%2Bn%2B%E2%81%B0%3C-%2C&amp;inputs=3%0A7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ð₴                                 # Output a space
  -                                # Difference
   0∴                              # or 0 if diff. is negative
     `\|/`                         # String literal
          Ẏ,                       # First (max(N - H, 0)) letters
            (                      # Height times do...
             \(₴                   # Output a (
                ¹n-                # The difference of (iteration number) and (height)
                   &gt;               # Is greater than (N)
                    \)-            # That many -s before a )
                       2↳          # Justified to the right, so space if not empty
                         3¹+       # 3 + (Height)
                            n+     # Plus iteration number
                              ⁰&lt;   # Is less than (N)
                                -  # That many -s appended to the previous string
                                 , # Output with trailing newline.
</code></pre>
"
"229307","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>`-/o`f$vOḣ$½p0pṘ¯
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60-%2Fo%60f%24vO%E1%B8%A3%24%C2%BDp0p%E1%B9%98%C2%AF&amp;inputs=%2F-o-%5C%20%20%20%20%20%2F-o-%5C%20%20%20%20%20%20%20%20%20%20%20%20%2F-o-%5C%2F-o-%5C%20%20%20o%20%2Fo%5C%2Fo%5C%20%20%20%20%2F-o-%5Co%20%2F-o-%5C%20%20%20%20%20%20%20%2Fo%5C%2F-o-%5C&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229323","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 64 bytes</h1>
<pre><code>ƛI⁼[h\-dpømð5*:‟W|ƛ`|--`pøm;:L2=[÷`|   `øm$W]];DvhṄ,ƛ1i;\-j,vtṄ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9BI%E2%81%BC%5Bh%5C-dp%C3%B8m%C3%B05*%3A%E2%80%9FW%7C%C6%9B%60%7C--%60p%C3%B8m%3B%3AL2%3D%5B%C3%B7%60%7C%20%20%20%60%C3%B8m%24W%5D%5D%3BDvh%E1%B9%84%2C%C6%9B1i%3B%5C-j%2Cvt%E1%B9%84%2C&amp;inputs=%5B1%2C%5B2%2C3%5D%5D&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
"
"229324","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 27 bytes</h1>
<pre><code>`/\\`*,ɾṘƛ\/*fṄ;:ƛ\\p;$YṪ⁋,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%2F%5C%5C%60*%2C%C9%BE%E1%B9%98%C6%9B%5C%2F*f%E1%B9%84%3B%3A%C6%9B%5C%5Cp%3B%24Y%E1%B9%AA%E2%81%8B%2C&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`/\\`                       # '/\'
     *,                     # Input times
       ɾṘ                   # n...1
         ƛ     ;            # Map...
          \/*               # That many slashes
             fṄ             # Joined by spaces
                :           # Duplicate
                 ƛ\\p;      # Prepend a backslash to each
                      $Y    # Swap and interleave
                        Ṫ   # Cut off last
                         ⁋, # Joined by newlines
</code></pre>
"
"229368","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>\.€t
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C.%E2%82%ACt&amp;inputs=agent.000&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> (<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C.%E2%82%ACt&amp;inputs=hi.txt%0Alol%0Acarrot.meme%0Awhat..is..this..file%0A.bashrc%0AT00M%40n3KaPZ.h0wC%5B%5Dh%0Aagent.000&amp;header=%40f%3A1%7C&amp;footer=%2C%3B%0A%0A%E2%96%A1%28n%20%40f%3B%29"" rel=""nofollow noreferrer"">Test cases!</a>)</p>
<p>Splits on spaces and outputs the tail.</p>
"
"229372","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 89 bytes</h1>
<pre><code>20τƛ¶3*,¬[ð19-…\|4꘍4*\|+…,\|19-\|+,\|19꘍\|+…,,]5ḋ£ð4-ðd+`|  `mð+&quot;mƛ¥*t,;n5ḭ(32\|15꘍-m3/⁋,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=20%CF%84%C6%9B%C2%B63*%2C%C2%AC%5B%C3%B019-%E2%80%A6%5C%7C4%EA%98%8D4*%5C%7C%2B%E2%80%A6%2C%5C%7C19-%5C%7C%2B%2C%5C%7C19%EA%98%8D%5C%7C%2B%E2%80%A6%2C%2C%5D5%E1%B8%8B%C2%A3%C3%B04-%C3%B0d%2B%60%7C%20%20%60m%C3%B0%2B%22m%C6%9B%C2%A5*t%2C%3Bn5%E1%B8%AD%2832%5C%7C15%EA%98%8D-m3%2F%E2%81%8B%2C&amp;inputs=20&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs a <em>lot</em> of extra newlines.</p>
"
"229387","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>1p-Ṫv¬ṅ\16*:0+$V
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=1p-%E1%B9%AAv%C2%AC%E1%B9%85%5C16*%3A0%2B%24V&amp;inputs=%5B1%2C1%2C1%2C1%2C1%2C1%2C0%2C0%2C0%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>1p               # Prepend a 1
  -              # Differences - truthy if unchanged, falsy if changed
   Ṫ             # Get rid of last
    v¬           # Vectorised not
      ṅ          # Joined
       \16*      # Six ones
           :     # Duplicate
            0+   # Append a 0 to the first
              $  # Swap
               V # Replace
</code></pre>
<p>Takes the difference of the list with a 1 prepended and the list itself, NOTted, to get the values. Then spend the remaining 10 bytes on doing the bit stuffing.</p>
"
"229423","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>ɾƛnS:I*fvI⁰ɾnȯJ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%C6%9BnS%3AI*fvI%E2%81%B0%C9%BEn%C8%AFJ&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wish if we had maximum table....</p>
"
"229462","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ƛ£⁰ƛ¥∴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C2%A3%E2%81%B0%C6%9B%C2%A5%E2%88%B4&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> Returns an array of arrays</p>
<pre><code>ƛ      # (1...input) Map...
 £     # Push to register
  ⁰ƛ   # (1...input) Map...
    ¥  # Register
     ∴ # Maximum of the two
</code></pre>
<p>Or, for grid output, 10 bytes:</p>
<pre><code>ƛ£⁰ƛ¥∴;Ṅ;⁋
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C2%A3%E2%81%B0%C6%9B%C2%A5%E2%88%B4%3B%E1%B9%84%3B%E2%81%8B&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ       ;  # (1...input) Map...
 £         # Push to register
  ⁰ƛ  ;    # (1...input) Map...
    ¥      # Push register
     ∴     # Max
       Ṅ   # Joined by spaces
         ⁋ # Joined by newlines.
</code></pre>
"
"229465","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>ð\#3*+2/2(ƛøm;øm)ƛƛ?*;ṅ;ƛ?(,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0%5C%233*%2B2%2F2%28%C6%9B%C3%B8m%3B%C3%B8m%29%C6%9B%C6%9B%3F*%3B%E1%B9%85%3B%C6%9B%3F%28%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>What. A. Mess.</p>
"
"229473","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 76 bytes</h1>
<pre><code>4*:×꘍,(¹4*n-‹\/꘍nd›\\꘍+,)¹8*›¤-?(…\|7꘍¹*\|+…\|:2꘍2-ømṪ¹*$+…»ŀ»‛ |τ¹*\|+,,,),
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=4*%3A%C3%97%EA%98%8D%2C%28%C2%B94*n-%E2%80%B9%5C%2F%EA%98%8Dnd%E2%80%BA%5C%5C%EA%98%8D%2B%2C%29%C2%B98*%E2%80%BA%C2%A4-%3F%28%E2%80%A6%5C%7C7%EA%98%8D%C2%B9*%5C%7C%2B%E2%80%A6%5C%7C%3A2%EA%98%8D2-%C3%B8m%E1%B9%AA%C2%B9*%24%2B%E2%80%A6%C2%BB%C5%80%C2%BB%E2%80%9B%20%7C%CF%84%C2%B9*%5C%7C%2B%2C%2C%2C%29%2C&amp;inputs=2%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A. Mess.</p>
"
"229474","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 42 bytes</h1>
<pre><code>»∆nµOḢrċ:f=¢×⁽Ti∴%β‡zwøÞ»ð?+τ18/ƛƛ⁰*;ṅm¹(…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%E2%88%86n%C2%B5O%E1%B8%A2r%C4%8B%3Af%3D%C2%A2%C3%97%E2%81%BDTi%E2%88%B4%25%CE%B2%E2%80%A1zw%C3%B8%C3%9E%C2%BB%C3%B0%3F%2B%CF%8418%2F%C6%9B%C6%9B%E2%81%B0*%3B%E1%B9%85m%C2%B9%28%E2%80%A6&amp;inputs=%25%0A2%0A4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>»...»                  # Compressed integer representation
        τ              # Decompress using...
     ð?+               # Space and input char
         18/           # Divide into 18 pieces
            ƛ          # Foreach...
             ƛ  ;      # Foreach character
              ⁰*       # Repeat as necesarry
                 ṅ     # Join 
                  m    # Palindromise
                   ¹(… # Print (input) times             
</code></pre>
"
"229475","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 214 bytes</h1>
<pre><code>3\r꘍41\t꘍+,2\/꘍43\\꘍+,1\:꘍2꘍13\_6*꘍d5\:꘍Wṅ,1\/꘍3꘍11\|\#3*+m꘍d4\\꘍Wṅ,\|5꘍\_7*`   |###`m3꘍øm2\|꘍Wṅ,\|5꘍\#\&quot;6*`   |###`m3꘍øm2\|꘍Wṅ,1\\꘍4\#꘍ð6*`   |###`m3꘍øm1\/꘍Wṅ,1\:꘍4\&quot;꘍₀\&quot;6*3꘍꘍d2\:꘍Wṅ,2\\꘍43\/꘍+,3\L꘍20\#₀*꘍11\j꘍++,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=3%5Cr%EA%98%8D41%5Ct%EA%98%8D%2B%2C2%5C%2F%EA%98%8D43%5C%5C%EA%98%8D%2B%2C1%5C%3A%EA%98%8D2%EA%98%8D13%5C_6*%EA%98%8Dd5%5C%3A%EA%98%8DW%E1%B9%85%2C1%5C%2F%EA%98%8D3%EA%98%8D11%5C%7C%5C%233*%2Bm%EA%98%8Dd4%5C%5C%EA%98%8DW%E1%B9%85%2C%5C%7C5%EA%98%8D%5C_7*%60%20%20%20%7C%23%23%23%60m3%EA%98%8D%C3%B8m2%5C%7C%EA%98%8DW%E1%B9%85%2C%5C%7C5%EA%98%8D%5C%23%5C%226*%60%20%20%20%7C%23%23%23%60m3%EA%98%8D%C3%B8m2%5C%7C%EA%98%8DW%E1%B9%85%2C1%5C%5C%EA%98%8D4%5C%23%EA%98%8D%C3%B06*%60%20%20%20%7C%23%23%23%60m3%EA%98%8D%C3%B8m1%5C%2F%EA%98%8DW%E1%B9%85%2C1%5C%3A%EA%98%8D4%5C%22%EA%98%8D%E2%82%80%5C%226*3%EA%98%8D%EA%98%8Dd2%5C%3A%EA%98%8DW%E1%B9%85%2C2%5C%5C%EA%98%8D43%5C%2F%EA%98%8D%2B%2C3%5CL%EA%98%8D20%5C%23%E2%82%80*%EA%98%8D11%5Cj%EA%98%8D%2B%2B%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A hardcoding mess.</p>
"
"229477","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes</h1>
<pre><code>Ṫƛ¥n꘍⁰L‹↲$+&amp;›;$Jvømøm⁋
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%AA%C6%9B%C2%A5n%EA%98%8D%E2%81%B0L%E2%80%B9%E2%86%B2%24%2B%26%E2%80%BA%3B%24Jv%C3%B8m%C3%B8m%E2%81%8B&amp;inputs=Hello&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Ṫ                      # String[:-1] 
 ƛ           ;         # Map...
  ¥n꘍                  # Prepend (register) spaces
     ⁰L‹↲              # Justify to the left by correct spacing
         $+            # Append the correct letter
           &amp;›          # Increment the register
              $J       # Append the input value
                vøm    # Palindromise each
                   øm  # Palindromise
                     ⁋ # Join by newlines
</code></pre>
"
"229478","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>L:£(&amp;‹¥\/꘍,)□Ḣ⁋,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=L%3A%C2%A3%28%26%E2%80%B9%C2%A5%5C%2F%EA%98%8D%2C%29%E2%96%A1%E1%B8%A2%E2%81%8B%2C&amp;inputs=----%0A%7C%20%20%7C%0A%7C__%7C&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229479","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes</h1>
<pre><code>[⁰(×⁰*,)|¹ƛ×*¹↳øm;⁰ßṘ⁋
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5B%E2%81%B0%28%C3%97%E2%81%B0*%2C%29%7C%C2%B9%C6%9B%C3%97*%C2%B9%E2%86%B3%C3%B8m%3B%E2%81%B0%C3%9F%E1%B9%98%E2%81%8B&amp;inputs=0%0A5%0A1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>[                      # If truthy (square) then...
 ⁰(    )               # (size) times
   ×⁰*,                # Print (size) asterisks
        |              # Else...
         ¹ƛ      ;     # Map input to...
           ×*          # That many asterisks
             ¹↳        # Right-justified to triangulate
               øm      # Palindromise
                  ⁰ßṘ  # If (input), reverse
                     ⁋ # Join by newlines
</code></pre>
"
"229519","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>\16*:0+V1$(nɽß¬…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C16*%3A0%2BV1%24%28n%C9%BD%C3%9F%C2%AC%E2%80%A6&amp;inputs=%2711111111%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>\16*             # Six ones
    :0+          # Duplicate and append a 0
       V         # Replace in input
        1$       # Starting with a one
          (      # Iterating through the string
             ß¬  # Flip if...
           nɽ    # It's a 1
               … # Print without popping
</code></pre>
<p>Returns 1 for J and 0 for K. <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%5C16*%3A0%2BV1%24%28n%C9%BD%C3%9F%C2%AC%3A%60KJ%60%24i%E2%82%B4&amp;inputs=%2711111111%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Here</a>'s a version that does JKs.</p>
"
"229535","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>₀
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>literal 10.</p>
"
"229548","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 34 bytes</h1>
<pre><code>Ṙ&quot;vÞDƛh∑;??øTJv∑$Mƛf≈;a?fDU≠$∆²AWΠ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%22v%C3%9ED%C6%9Bh%E2%88%91%3B%3F%3F%C3%B8TJv%E2%88%91%24M%C6%9Bf%E2%89%88%3Ba%3FfDU%E2%89%A0%24%E2%88%86%C2%B2AW%CE%A0&amp;inputs=%5B%5B841%2C%201%2C%202209%5D%2C%20%5B1681%2C%201369%2C%201%5D%2C%20%5B529%2C%201681%2C%20841%5D%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Bug fixes make it even messier.</p>
"
"229555","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>[{1₴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=0%5B%7B1%E2%82%B4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">0Try it Online!</a><br />
<a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=1%5B%7B1%E2%82%B4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">1Try it Online!</a></p>
<pre><code>[       If the top of the stack is truthy (i.e. 1):
 {      Repeat forever:
  1₴    Print 1
</code></pre>
"
"229613","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>(\|n*\++⁰n--øm,)\|*ð+øm¶+⁰d›-,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%5C%7Cn*%5C%2B%2B%E2%81%B0n--%C3%B8m%2C%29%5C%7C*%C3%B0%2B%C3%B8m%C2%B6%2B%E2%81%B0d%E2%80%BA-%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>(              )               # Input times...
 \|n*                          # (iteration number) |s
     \++                       # With a plus appended
        ⁰n--                   # And (input - iteration number) minuses
            øm,                # Palindromed and outputted
                \|*            # Input |s
                   ð+          # Plus a space
                     øm        # Palindromised
                       ¶+      # Plus a newline
                         ⁰d›   # (2(iteration number) + 1)
                            -, # Minuses appended, and outputted
</code></pre>
"
"229615","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>(‛+on¬i:⁰-p,⁰(\|:⁰꘍p,))\o:⁰-p,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%E2%80%9B%2Bon%C2%ACi%3A%E2%81%B0-p%2C%E2%81%B0%28%5C%7C%3A%E2%81%B0%EA%98%8Dp%2C%29%29%5Co%3A%E2%81%B0-p%2C&amp;inputs=3%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>(                     )        # Length times...
 ‛+on¬i                        # If first iteration, o, else +
       :                       # Duplicate
        ⁰-                     # add (size) minuses
          p,                   # Add the o/+ and print
            ⁰(       )         # Size times
              \|               # A pipe character
                :              # Duplicate
                 ⁰꘍            # Add (size) spaces
                   p,          # Add the pipe and print
                       \o:     # Push two os
                          ⁰-   # Add (size) minuses
                            p, # Add the o and print
</code></pre>
"
"229617","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 67 bytes</h1>
<pre><code>ȧ=[‹`\_/`*\|:„+p,‹3*\_*\|:„+p,|N3*⇩:\_*ðp,ð*\|:„+p,ȧ`\_/`*ḢṪ\|:„+p,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C8%A7%3D%5B%E2%80%B9%60%5C_%2F%60*%5C%7C%3A%E2%80%9E%2Bp%2C%E2%80%B93*%5C_*%5C%7C%3A%E2%80%9E%2Bp%2C%7CN3*%E2%87%A9%3A%5C_*%C3%B0p%2C%C3%B0*%5C%7C%3A%E2%80%9E%2Bp%2C%C8%A7%60%5C_%2F%60*%E1%B8%A2%E1%B9%AA%5C%7C%3A%E2%80%9E%2Bp%2C&amp;inputs=-4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Oof.</p>
"
"229640","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 27 programs</h1>
<pre><code>⁼
⇧
3
4
5
⟨ð|¤|×⟩ṖL
7
8
9
₀
11
6 6+
⁺D√
‛xx‛xx‛xx‛xJJJJ‛JJ‛JJ‛JJ‛JJJJJ꘍‛xx‛xJ꘍↲
›››››››››››››››
k&quot;
222222⌊2•⌊
₈₈₈₈₈₈₈₈₈₈₈₈₈₈₈₈₈₈!
`YyyYY``yY`β
=↵d
»⌐
⇩⇩⇩⇩⇩⇩⇩⇩⇩⇩⇩ȧ
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹N
EEE¡
??c??c??c??c??cṠ²
₄
\lC½½
</code></pre>
<p>Magic tricks.</p>
<p>+1 thanks to Aaron Miller</p>
"
"229654","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes (n=1)</h1>
<pre><code>∴:∷›
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%B4%3A%E2%88%B7%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same approach as <a href=""https://codegolf.stackexchange.com/a/215224/98955"">my Jelly answer</a>, but much more aesthetic.</p>
<pre><code>∴:∷›
∴    Pop a, b; push max(a,b)
 :   Duplicate
  ∷  Parity
   › Increment
</code></pre>
"
"229689","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>15</s> 9 bytes</h1>
<pre><code>₌⇧⇩⇧$⇧∵d+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8C%E2%87%A7%E2%87%A9%E2%87%A7%24%E2%87%A7%E2%88%B5d%2B&amp;inputs=%5B0%2C1%2C1%2C0%2C0%2C1%2C0%2C1%2C1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Me when APL port</p>
<h2>Explained</h2>
<pre><code>₌⇧⇩⇧$⇧∵d+
₌⇧⇩       # grade up input, grade down input
   ⇧$⇧    # grade each of those up
      ∵d  # 2 * the minimum of those two lists
        + # added to the input   
</code></pre>
"
"229699","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>∆Ṙl
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86%E1%B9%98l&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I  think this has a <span class=""math-container"">\$\frac{1}{2^{19937}}\$</span> chance of not erroring, but I'm not sure - Vyxal is written in Python, so it's whatever chance python's PRNG has of returning 0.</p>
"
"229700","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>+₇S₇S₇S++
</code></pre>
<p>This is not fully in the spirit of the challenge (because it repeats the output), but it the code itself doesn't repeat which is nice.</p>
<h5>Mini-explanation:</h5>
<pre><code>₇S computes &quot;128&quot;, so ₇S₇S₇S pushes three strings to the stack
+ is concat, so ++ at the end concats all three together, while the beginning one is ignored
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%2B%E2%82%87S%E2%82%87S%E2%82%87S%2B%2B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229703","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⌈'&amp;›¥æ;Ṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88%27%26%E2%80%BA%C2%A5%C3%A6%3B%E1%B9%84&amp;inputs=Please%20read%20primes%20elephant%20help%20you%20me%20like%20cold&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌈        # Split on spaces
 '    ;  # Filter by 
  &amp;›     # Increment register
    ¥æ   # Register prime?
       Ṅ # Join on spaces
</code></pre>
"
"229704","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>` *!`\!øṙ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%20*!%60%5C!%C3%B8%E1%B9%99&amp;inputs=%20%20%20!%20!%20a%20%20!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another one ports the regex</p>
"
"229786","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>⁽¯↔vh
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%81%BD%C2%AF%E2%86%94vh&amp;inputs=%5B1%2C%203%2C%209%2C%2027%2C%2081%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Me when very many yes.</p>
"
"229829","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>(:₴Ṙ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%3A%E2%82%B4%E1%B9%98&amp;inputs=%2242%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I was looking through old Keg answers of mine and saw that I could improve on my score here with its improvement language.</p>
<h2>Explained</h2>
<pre><code>(:₴Ṙ
(    # for each character in the input:
 :₴  #     print the top of the stack without a newline, preserving it. For the first iteration, this will be the original input. 
   Ṙ #     reverse the top of the stack. This achieves the string reversing effect, as it alternates the direction of the string each iteration
</code></pre>
"
"229843","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>2</strike> 1 byte</h1>
<p><sup>-1 byte thanks to <a href=""https://codegolf.stackexchange.com/users/99035/underslash"">Underslash</a></sup></p>
<pre><code>₴
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%B4&amp;inputs=I%27m%20a%20cat&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"229853","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ʁ?²›↔'₌ḢṪZ:U⁼;tṅ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%CA%81%3F%C2%B2%E2%80%BA%E2%86%94%27%E2%82%8C%E1%B8%A2%E1%B9%AAZ%3AU%E2%81%BC%3Bv%E1%B9%85t&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Sorry about that. I wayyyy misinterpreted the question.</p>
<h5>Explanation:</h5>
<pre><code>ʁ?²›↔'₌ḢṪZ:U⁼;tṅ    # main program

ʁ                   # range 0 to n-1
 ?²›                # base^2 + 1
    ↔               # combination w/ replacement
     '₌ḢṪZ:U⁼;      # filter lambda
      ₌ḢṪ           # a[1:], a[:-1]
         Z          # zip
          :U⁼       # check if the zip is unique
              tṅ    # tail joined by &quot;&quot;          
</code></pre>
<p>This is really slow, so it will only finish for n &lt;= 3 probably, but it works in theory.</p>
"
"229884","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>:ÞTJv∑s2Nȯ1?&quot;⁼
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3A%C3%9ETJv%E2%88%91s2N%C8%AF1%3F%22%E2%81%BC&amp;inputsamp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another stealing of the python answer.</p>
<h2>Explained</h2>
<pre><code>:ÞTJv∑s2Nȯ1?&quot;⁼
:ÞTJ           # merge the input list with itself transposed.
    v∑s        # sort the list that results from getting the sum of each item
       2Nȯ     # take the last two items of that list
          1?&quot;⁼ # and check for equality with the list [1, second_input]   
</code></pre>
"
"229888","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>:∑$v∑Js¯Nt›=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3A%E2%88%91%24v%E2%88%91Js%C2%AFNt%E2%80%BA%3D&amp;inputsamp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yay! Beating Lyxal by 1 byte with a different approach!!!</p>
<p>-1 byte from @Lyxal himself thanks</p>
"
"229934","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 101 bytes</h1>
<pre><code>‛_oƛ` (`pøṀ22↳,;\/:3-øṀp20↳₴ð,₀`/ | `꘍3\|꘍m+,9`*  /\---/\ `꘍,12‛~~꘍3\~꘍m+,`...&quot;`:₴`λɾ λ• mo⋎Þ ¬¾?`₴Ṙ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B_o%C6%9B%60%20%28%60p%C3%B8%E1%B9%8022%E2%86%B3%2C%3B%5C%2F%3A3-%C3%B8%E1%B9%80p20%E2%86%B3%E2%82%B4%C3%B0%2C%E2%82%80%60%2F%20%7C%20%60%EA%98%8D3%5C%7C%EA%98%8Dm%2B%2C9%60*%20%20%2F%5C---%2F%5C%20%60%EA%98%8D%2C12%E2%80%9B%7E%7E%EA%98%8D3%5C%7E%EA%98%8Dm%2B%2C%60...%22%60%3A%E2%82%B4%60%CE%BB%C9%BE%20%CE%BB%E2%80%A2%20mo%E2%8B%8E%C3%9E%20%C2%AC%C2%BE%3F%60%E2%82%B4%E1%B9%98%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses some form of compression.</p>
"
"229939","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 128 bytes</h1>
<pre><code>d(\/n꘍⁰3*↳øṀ,)(⁰n+\\꘍⁰d‹n- n⁰‹=[\_|ð]*+øṀ,)8*(⁰d\|꘍⁰‹꘍m,)d(\/n꘍⁰d↳\|+⁰‹꘍øṀ,)(\/⁰d↲\|+n⁰‹=[\_|ð]⁰‹*+øṀ,)d(\/n꘍⁰d‹↳:L⁰d≠[\/p]⁰꘍øṀ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=d%28%5C%2Fn%EA%98%8D%E2%81%B03*%E2%86%B3%C3%B8%E1%B9%80%2C%29%28%E2%81%B0n%2B%5C%5C%EA%98%8D%E2%81%B0d%E2%80%B9n-%20n%E2%81%B0%E2%80%B9%3D%5B%5C_%7C%C3%B0%5D*%2B%C3%B8%E1%B9%80%2C%298*%28%E2%81%B0d%5C%7C%EA%98%8D%E2%81%B0%E2%80%B9%EA%98%8Dm%2C%29d%28%5C%2Fn%EA%98%8D%E2%81%B0d%E2%86%B3%5C%7C%2B%E2%81%B0%E2%80%B9%EA%98%8D%C3%B8%E1%B9%80%2C%29%28%5C%2F%E2%81%B0d%E2%86%B2%5C%7C%2Bn%E2%81%B0%E2%80%B9%3D%5B%5C_%7C%C3%B0%5D%E2%81%B0%E2%80%B9*%2B%C3%B8%E1%B9%80%2C%29d%28%5C%2Fn%EA%98%8D%E2%81%B0d%E2%80%B9%E2%86%B3%3AL%E2%81%B0d%E2%89%A0%5B%5C%2Fp%5D%E2%81%B0%EA%98%8D%C3%B8%E1%B9%80%2C&amp;inputs=2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Generates the rocket bit by bit.</p>
"
"229949","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 52 bytes</h1>
<pre><code>(x|`+--`*\++,2(⁰(n←x+₂[`|  `|`|##`]₴)\|,))`+--`*\++,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28x%7C%60%2B--%60*%5C%2B%2B%2C2%28%E2%81%B0%28n%E2%86%90x%2B%E2%82%82%5B%60%7C%20%20%60%7C%60%7C%23%23%60%5D%E2%82%B4%29%5C%7C%2C%29%29%60%2B--%60*%5C%2B%2B%2C&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A.  Big. Mess.</p>
"
"230014","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>₀%:4&lt;?₀ḭċ∧*4«∨¦İk√«/$i+
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%25%3A4%3C%3F%E2%82%80%E1%B8%AD%C4%8B%E2%88%A7*4%C2%AB%E2%88%A8%C2%A6%C4%B0k%E2%88%9A%C2%AB%2F%24i%2B&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h5>Explanation:</h5>
<pre><code>₀%:4&lt;?₀ḭċ∧*4«∨¦İk√«/$i+    # full program

₀%:                         # push input mod 10 twice
   4&lt;                       # less than 4
     ?₀ḭ                    # input floor div 10
        ċ                   # != 1
         ∧*                 # and both bools, then multiply by initial mod 10
            4«∨¦İk√«/       # &quot;thstndrd&quot; split into 4 parts
                      $i    # indexed by input mod 10
                        +   # concat
</code></pre>
"
"230015","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes, score 81040998233</h1>
<pre><code>`\`\\v\ḟ6\β`vḟ6β
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%3F%60%3F%5C%60%5C%5Cv%5C%E1%B8%9F7%5C%CE%B2%60v%E1%B8%9F7%CE%B2&amp;inputs=%3F%60%3F%5C%60%5C%5Cv%5C%E1%B8%9F7%5C%CE%B2%60v%E1%B8%9F7%CE%B2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>There may be better languages to do this, but the idea is simple.</p>
<p>The other answers reduce the codepoints mod <em>n</em> where <em>n</em> is the smallest number that will yield unique codepoints. But that's rarely an efficient encoding. You usually end up with lots of numbers unused. Eg. your program becomes <em>[6,3,9,7,2]</em> rather than <em>[0,1,2,3,4]</em>.</p>
<p>This just packs every symbol used into a list, and for each symbol in the program, gets its index in the list. So you're guaranteed to get the lowest numbers you can: <em>[0..n]</em>. In addition, the symbols in the list are in the order they appear in the program, because we want the lower numbers to show up first. In every base, <em>[0,1,2,3]</em> is a much smaller number than <em>[3,2,1,0]</em>. Finally, I used 6 unique symbols, so I converted it to base 6.</p>
<p><strong>Example execution with <code>v6ḟ</code> as input:</strong></p>
<pre><code>               # Implicit input                          -&gt; &quot;v6ḟ&quot;
`\`\\v\ḟ6\β`   # This is just the string &quot;`\vḟ6β&quot; [1]    -&gt; &quot;v6ḟ&quot;, &quot;`\vḟ6β&quot;
vḟ             # Vectorized find index in list           -&gt; [2,4,3]
6β             # Convert list to base 6                  -&gt; 99
               # Implicit output
</code></pre>
<p>[1]: Unfortunately for this challenge, non-ASCII characters have an  (really cool) encoding scheme in strings. So in order to have them interpreted literally, all the non-ASCII characters in the string are escaped, which adds many orders of magnitude to the score.</p>
"
"230057","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>∞››'Ǐ'›4Ḋ;÷*=
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%9E%E2%80%BA%E2%80%BA%27%C7%8F%27%E2%80%BA4%E1%B8%8A%3B%C3%B7*%3D&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Prints infinitely.</p>
<pre><code>∞››           # Positive integers (except 1)
   '          # Filtered by
    Ǐ         # Prime factors
     '   ;    # Filtered by
      ›       # Incremented 
       4Ḋ     # Is divisible by 4?
          ÷   # Push all to the stack separately
           *  # Product of the top two
            = # Is equal to (implicit input / another factor)
</code></pre>
<p>Let's go through the outcomes after ÷.</p>
<p>Case 1: 1 factor left. This gets multiplied by the original number, and since it's not 1, it can never equal the original number.</p>
<p>Case 2: 2 factors left. These two get multiplied together, and if it's the same as the original, it will be outputted.</p>
<p>Case 3: 3+ factors left. The top two will be multiplied, but can't equal the third because it's a prime.</p>
"
"230058","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɽ%∑
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BD%25%E2%88%91&amp;inputs=14&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 2 bytes</h1>
<pre><code>ɽ%
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%C9%BD%25&amp;inputs=14&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230069","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 280 bytes</h1>
<pre><code>d5+\.꘍,d5+\|꘍,(n-d:£\.꘍3n+\]꘍\#nd›*\[3n+\.꘍Ṡ,¥›\\꘍ndd7+\_*\/Ṡ,)\.?3+꘍\]\#?d›*\[?3+\.꘍Ṡ,ð\\?›\_*\]?2-1∴\#*\.?d‹5∵-\.?2-1∴\#*\[?›\_*\/Ṡ,3&lt;[⟨0|⟨3⟩|⟨2|1⟩⟩$i|3/⌊d2w$ẋf`013`?3%iIJ';]\_*Ṅðpð+ð\|Vðdp:£3?∵꘍øm,¥3?∵\_*+øm,4&lt;[3+|d]\#*:£ðdp\/\_?d‹5∵*\\¥Ṡ,¥L›\|꘍\_?d‹5∵⇧*\|Ṡ,¥L\/꘍\_?d‹5∵4+*\\Ṡ,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=d5%2B%5C.%EA%98%8D%2Cd5%2B%5C%7C%EA%98%8D%2C%28n-d%3A%C2%A3%5C.%EA%98%8D3n%2B%5C%5D%EA%98%8D%5C%23nd%E2%80%BA*%5C%5B3n%2B%5C.%EA%98%8D%E1%B9%A0%2C%C2%A5%E2%80%BA%5C%5C%EA%98%8Dndd7%2B%5C_*%5C%2F%E1%B9%A0%2C%29%5C.%3F3%2B%EA%98%8D%5C%5D%5C%23%3Fd%E2%80%BA*%5C%5B%3F3%2B%5C.%EA%98%8D%E1%B9%A0%2C%C3%B0%5C%5C%3F%E2%80%BA%5C_*%5C%5D%3F2-1%E2%88%B4%5C%23*%5C.%3Fd%E2%80%B95%E2%88%B5-%5C.%3F2-1%E2%88%B4%5C%23*%5C%5B%3F%E2%80%BA%5C_*%5C%2F%E1%B9%A0%2C3%3C%5B%E2%9F%A80%7C%E2%9F%A83%E2%9F%A9%7C%E2%9F%A82%7C1%E2%9F%A9%E2%9F%A9%24i%7C3%2F%E2%8C%8Ad2w%24%E1%BA%8Bf%60013%60%3F3%25iIJ%27%3B%5D%5C_*%E1%B9%84%C3%B0p%C3%B0%2B%C3%B0%5C%7CV%C3%B0dp%3A%C2%A33%3F%E2%88%B5%EA%98%8D%C3%B8m%2C%C2%A53%3F%E2%88%B5%5C_*%2B%C3%B8m%2C4%3C%5B3%2B%7Cd%5D%5C%23*%3A%C2%A3%C3%B0dp%5C%2F%5C_%3Fd%E2%80%B95%E2%88%B5*%5C%5C%C2%A5%E1%B9%A0%2C%C2%A5L%E2%80%BA%5C%7C%EA%98%8D%5C_%3Fd%E2%80%B95%E2%88%B5%E2%87%A7*%5C%7C%E1%B9%A0%2C%C2%A5L%5C%2F%EA%98%8D%5C_%3Fd%E2%80%B95%E2%88%B54%2B*%5C%5C%E1%B9%A0%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
No, I'm not explaining this.</p>
"
"230074","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 78 bytes</h1>
<pre><code>‛ _m*ðp,‛/ øṀ*ðp,` /\\`w$ẋf⁋¶\/V\|p‛ |+…Ṙ…£`\/\\`w$ẋfṄðpǔð₴…ð₴ǔ,¥Ḃ,,`\__/`*ðp,
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%20_m*%C3%B0p%2C%E2%80%9B%2F%20%C3%B8%E1%B9%80*%C3%B0p%2C%60%20%2F%5C%5C%60w%24%E1%BA%8Bf%E2%81%8B%C2%B6%5C%2FV%5C%7Cp%E2%80%9B%20%7C%2B%E2%80%A6%E1%B9%98%E2%80%A6%C2%A3%60%5C%2F%5C%5C%60w%24%E1%BA%8Bf%E1%B9%84%C3%B0p%C7%94%C3%B0%E2%82%B4%E2%80%A6%C3%B0%E2%82%B4%C7%94%2C%C2%A5%E1%B8%82%2C%2C%60%5C__%2F%60*%C3%B0p%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builds it incrementally. <a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%20_m*%C3%B0p%2C%E2%80%9B%2F%20%C3%B8%E1%B9%80*%C3%B0p%2C%60%20%2F%5C%5C%60w%24%E1%BA%8Bf%E2%81%8B%C2%B6%5C%2FV%5C%7Cp%E2%80%9B%20%7C%2B%E2%80%A6%E1%B9%98%E2%80%A6%C2%A3%28%60%5C%2F%5C%5C%60w%24%E1%BA%8Bf%E1%B9%84%C3%B0p%C7%94%C3%B0%E2%82%B4%E2%80%A6%C3%B0%E2%82%B4%C7%94%2C%C2%A5%E1%B8%82%2C%2C%29%60%5C__%2F%60*%C3%B0p%2C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Here</a>'s a cool version that makes it a square.</p>
"
"230075","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 45 bytes</h1>
<pre><code>ȧDk/ðp*ð+⅛\/w$‹ẋf\Op\OJṄððdV⅛k\ðp*⅛¾?0&lt;ßÞTvṅ⁋
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%C8%A7Dk%2F%C3%B0p*%C3%B0%2B%E2%85%9B%5C%2Fw%24%E2%80%B9%E1%BA%8Bf%5COp%5COJ%E1%B9%84%C3%B0%C3%B0dV%E2%85%9Bk%5C%C3%B0p*%E2%85%9B%C2%BE%3F0%3C%C3%9F%C3%9ETv%E1%B9%85%E2%81%8B&amp;inputs=-5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Transposing the input yields the vertical version :)</p>
"
"230077","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 46 bytes</h1>
<pre><code>(\\n›↳⁰↲\|\/n›↲⁰↳Ṡ,)\O-?-,(\/n›↲⁰↳\|\\n›↳⁰↲Ṡ,)
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%28%5C%5Cn%E2%80%BA%E2%86%B3%E2%81%B0%E2%86%B2%5C%7C%5C%2Fn%E2%80%BA%E2%86%B2%E2%81%B0%E2%86%B3%E1%B9%A0%2C%29%5CO-%3F-%2C%28%5C%2Fn%E2%80%BA%E2%86%B2%E2%81%B0%E2%86%B3%5C%7C%5C%5Cn%E2%80%BA%E2%86%B3%E2%81%B0%E2%86%B2%E1%B9%A0%2C%29&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess that I can't be bothered fixing, at least for now.</p>
"
"230113","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 122 bytes</h1>
<pre><code>H   H  AAAAA  L      FFFFF
H   H  A   A  L      F
HHHHH  AAAAA  L      FFFFF
H   H  A   A  L      F
H   H  A   A  LLLLL  ½
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=H%20%20%20H%20%20AAAAA%20%20L%20%20%20%20%20%20FFFFF%0AH%20%20%20H%20%20A%20%20%20A%20%20L%20%20%20%20%20%20F%0AHHHHH%20%20AAAAA%20%20L%20%20%20%20%20%20FFFFF%0AH%20%20%20H%20%20A%20%20%20A%20%20L%20%20%20%20%20%20F%0AH%20%20%20H%20%20A%20%20%20A%20%20LLLLL%20%20%C2%BD&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>You asked for half, so I've given you half in more ways than 1 (/2).</p>
<p>This relies on the fact that most things here are NOPS and that getting the length of a number works.</p>
<p>The real work comes when we get to the <code>L</code>s in the bottom row: the first <code>L</code> is passed, 0, which has length 1. The next 4 <code>L</code>s all return 1 because the length of 1 is 1. The <code>½</code> then divides that 1 by 2.</p>
"
"230142","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>`\d+[NP]`λṫC₃`- ==`½$i$I*½h;øṙ:L\_*…¤…,$,¤,…
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=%60%5Cd%2B%5BNP%5D%60%CE%BB%E1%B9%ABC%E2%82%83%60-%20%3D%3D%60%C2%BD%24i%24I*%C2%BDh%3B%C3%B8%E1%B9%99%3AL%5C_*%E2%80%A6%C2%A4%E2%80%A6%2C%24%2C%C2%A4%2C%E2%80%A6&amp;inputs=4N4P9N7P1N1P2N2P&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses regex.</p>
"
"230152","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Mƛ÷†
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=M%C6%9B%C3%B7%E2%80%A0&amp;inputs=&amp;header=5%20%CE%BB10*%3B%20%E2%81%BD%C2%BD%22%E2%81%BDNJ&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A full program that takes <code>number</code> then <code>functions</code>.</p>
<h2>Explained</h2>
<pre><code>Mƛ÷†
M    # [[number, fn] for fn in functions]
 ƛ   # to each pair:
  ÷† #     apply the function to the stack
</code></pre>
<p>Takes input in the header because that's how to input functions</p>
"
"230283","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>v∑¯
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=v%E2%88%91%C2%AF&amp;inputs=%5B%5B4%2C6%2C1%2C6%2C3%2C5%2C2%5D%2C%20%5B3%2C6%2C2%2C5%2C4%2C6%5D%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very epic port of the python answer. Takes original and missing in a list.</p>
<h2>Explained</h2>
<pre><code>v∑¯
v∑  # sum of each list
  ¯ # and deltas
</code></pre>
"
"230285","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 43 bytes</h1>
<pre><code>`7 8 9 0
 4 5 6
  2 3
   1`?⌈(nt\OV)‛\d\.øṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%607%208%209%200%0A%204%205%206%0A%20%202%203%0A%20%20%201%60%3F%E2%8C%88%28nt%5COV%29%E2%80%9B%5Cd%5C.%C3%B8%E1%B9%99&amp;inputs=%271%202%203%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Nothing clever, just a simple substitution.</p>
"
"230488","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>«⟑Eƈ↓Z↔⁺τ¾ꜝdB_ḣC«3/ƛṄ¥$꘍&amp;›⇧,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%E2%9F%91E%C6%88%E2%86%93Z%E2%86%94%E2%81%BA%CF%84%C2%BE%EA%9C%9DdB_%E1%B8%A3C%C2%AB3%2F%C6%9B%E1%B9%84%C2%A5%24%EA%98%8D%26%E2%80%BA%E2%87%A7%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yes, I stole @isaacg's grid.</p>
<pre><code>«...«            # Compressed string 'qapmfrlzuinkshxjgtcvewy ' (Note trailing space)
     3/          # Into 3 pieces
       ƛ         # Map...
        Ṅ        # Join by spaces
         ¥$꘍     # Prepend (register) spaces
            &amp;›   # Increment register
              ⇧, # Output as uppercase.
</code></pre>
"
"230491","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>[-‹\|*₴+\/*,|-\\*₴+\|*,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%5B-%E2%80%B9%5C%7C*%E2%82%B4%2B%5C%2F*%2C%7C-%5C%5C*%E2%82%B4%2B%5C%7C*%2C&amp;inputs=0%0A3%0A6&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230510","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 87 bytes</h1>
<pre><code>k§2vẎṄ,4ȯI:£3&lt;?4ẎIεD4/⌊‟₁/⌊N‟:400/⌊»∧+ż↵`»8τv‹¥Ẏt2Ṡ7%7ε¤w$ẋf»∇ė{»4τ¥Ẏt28+ɾJ7ẇƛƛS2↳;Ṅ;⁋,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%C2%A72v%E1%BA%8E%E1%B9%84%2C4%C8%AFI%3A%C2%A33%3C%3F4%E1%BA%8EI%CE%B5D4%2F%E2%8C%8A%E2%80%9F%E2%82%81%2F%E2%8C%8AN%E2%80%9F%3A400%2F%E2%8C%8A%C2%BB%E2%88%A7%2B%C5%BC%E2%86%B5%60%C2%BB8%CF%84v%E2%80%B9%C2%A5%E1%BA%8Et2%E1%B9%A07%257%CE%B5%C2%A4w%24%E1%BA%8Bf%C2%BB%E2%88%87%C4%97%7B%C2%BB4%CF%84%C2%A5%E1%BA%8Et28%2B%C9%BEJ7%E1%BA%87%C6%9B%C6%9BS2%E2%86%B3%3B%E1%B9%84%3B%E2%81%8B%2C&amp;inputs=%27201312%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-7 thanks to lyxal.</p>
<pre><code>=== Part 1: Header ===
k§      # Monday to Sunday
  2vẎ   # Get first two letters of each
     Ṅ, # Join by spaces
=== Part 2: What day does it start? ===
4ȯI                                          # Last two (month) as integer
   :£                                        # Store a copy to register
     3&lt;?4ẎIε                                 # Decrement the year if the month is Jan or Feb 
            D                                # Calculate:
             4/⌊‟                            # floor(y/4)
                 ₁/⌊N‟                       # -floor(y/100)
                      :                      # y
                       400/⌊                 # And floor(y/400)
                            »...»8τv‹        # Compressed list of the days (mod 7) at the start of each month
                                     ¥Ẏt     # Get the correct item
                                        2    # Add 2 (1 because first day of month, 1 because it ends on Sunday)
                                         Ṡ7% # Take the sum of the whole thing, mod 7.
=== Part 3: Get the whole month ===
7ε                     # Difference from 7
  ¤w$ẋf                # Copies of the empty string
       »...»4τ         # Compressed list of days in each month, -28
              ¥Ẏt      # Get the correct item
                 28+   # Add 28
                    ɾ  # Make a range out of that
                     J # Add on the empty strings
=== Part 4: Format nicely ===
7ẇ           # Divide into chunks of 7
  ƛ      ;   # Foreach...
   ƛ   ;     # For each item...
    S        # Stringify
     2↳      # Align
        Ṅ    # Join by spaces
          ⁋, # Output joined by newlines
</code></pre>
"
"230514","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 60 bytes</h1>
<pre><code>\|/DvLG⇧D\=*\/p\\+,„h⋏\|pǏ,:\|$-Ǐ,‹£Ḣƛ¥↲ðp\|pǏ,;¥›\=*\\p\/+,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%5C%7C%2FDvLG%E2%87%A7D%5C%3D*%5C%2Fp%5C%5C%2B%2C%E2%80%9Eh%E2%8B%8F%5C%7Cp%C7%8F%2C%3A%5C%7C%24-%C7%8F%2C%E2%80%B9%C2%A3%E1%B8%A2%C6%9B%C2%A5%E2%86%B2%C3%B0p%5C%7Cp%C7%8F%2C%3B%C2%A5%E2%80%BA%5C%3D*%5C%5Cp%5C%2F%2B%2C&amp;inputs=1234567890%7C12345%7C1234567890123%7Cpie%7Cpotato%7Cunicorn&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Longer than I'd like...</p>
"
"230517","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 38 bytes</h1>
<pre><code>3`|% |%%`-3/ømvøm⁋»∧⁰¾×O↓»b7ẇ℅ƛ‛o $i;%
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=3%60%7C%25%20%7C%25%25%60-3%2F%C3%B8mv%C3%B8m%E2%81%8B%C2%BB%E2%88%A7%E2%81%B0%C2%BE%C3%97O%E2%86%93%C2%BBb7%E1%BA%87%E2%84%85%C6%9B%E2%80%9Bo%20%24i%3B%25&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>=== Part 1: Construct the dice ===
         -         # Prepend...
3                  # Literal
         -         # Minuses to...
 `|% |%%`          # Literal
          3/       # Into 3 pieces
            ømvøm  # Quad palindromise
                 ⁋ # Newline joined
=== Part 2: Roll the dice ===
»...»             # Compressed base-2 integer containing bits for each
     b            # To bits
      7ẇ℅         # Choose a random group of 7
         ƛ     ;  # Map...
          ‛o $i   # o or space depending on if its truthy
                % # Format above with this
</code></pre>
"
"230520","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>‛X *½h:(…Ṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9BX%20*%C2%BDh%3A%28%E2%80%A6%E1%B9%98&amp;inputs=8&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A little long...</p>
"
"230521","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>λD→a?+:£ṡƛ¥ġn←aġ+2&gt;;A;ṅ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BBD%E2%86%92a%3F%2B%3A%C2%A3%E1%B9%A1%C6%9B%C2%A5%C4%A1n%E2%86%90a%C4%A1%2B2%3E%3BA%3B%E1%B9%85&amp;inputs=16&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 byte thanks to @cairdcoinheringaahing</p>
"
"230522","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>λ?+₌ṡ&quot;Ẋvġ2ẇ‹v∑Π;ṅ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%3F%2B%E2%82%8C%E1%B9%A1%22%E1%BA%8Av%C4%A12%E1%BA%87%E2%80%B9v%E2%88%91%CE%A0%3B%E1%B9%85&amp;inputs=16&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-3 bytes thanks to lyxal</p>
<p>Using the same approach as my Jelly answer.</p>
<hr />
<p>You can find a more in-depth walk-through and explanation of my solution on my YouTube channel <a href=""https://www.youtube.com/watch?v=ipuMUs0IOmg"" rel=""nofollow noreferrer"">here</a>. However, the explanation there is outdated.</p>
<hr />
<pre><code>λ?+₌ṡ&quot;Ẋvġ2ẇ‹v∑Π;ṅ       Full Program; start with `k` on the stack and as the input
λ?+₌ṡ&quot;Ẋvġ2ẇ‹v∑Π;ṅ       Function: given `a`:
 ?                      Push the input, `k`
  +                     Sum with `a`: `a + k`
   ₌ṡ&quot;                  In parallel, apply inclusive range and pair
                        The TOS is now [a, a + k]
                        The second element is [a, a + 1, a + 2, ..., a + k]
      Ẋ                 Cartesian Product
       vġ               GCD of each pair
         2ẇ             Slice into blocks of length 2
           ‹            Decrement
            v∑          Sum of each pair
              Π         Product

                  ṅ     Find the first integer satisfying this
</code></pre>
"
"230525","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 9 bytes</h1>
<p>-2 bytes through auto-vectorizing</p>
<pre><code>ð*×+ðÞṪṘ⁋
</code></pre>
<pre><code>ð*            # vectorised n spaces
  ×+          # append &quot;*&quot;
     ðÞṪ      # transpose with space as filler
        Ṙ⁋    # reverse and join by newline
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C3%B0*%C3%97%2B%3B%C3%B0%C3%9E%E1%B9%AA%E1%B9%98%E2%81%8B&amp;inputs=%5B1%2C%200%2C%200%2C%201%2C%202%2C%204%2C%202%2C%200%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230531","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>×꘍R§
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%97%EA%98%8DR%C2%A7&amp;inputs=%5B1%2C%200%2C%200%2C%201%2C%202%2C%204%2C%202%2C%200%5D&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>That's right, it's flagless.</p>
<h2>Explained</h2>
<pre><code>×꘍    # [(n * &quot; &quot;) + &quot;*&quot; for n in input]
  R   # [x[::-1] for x in ^]
   §  # vertically join (rotate) ^
</code></pre>
<p>Using the <code>L</code> flag would make it 3 bytes.</p>
"
"230597","<p>In the spirit of @Kevin Cruijssen's <a href=""https://codegolf.stackexchange.com/a/187447/99035"">answer</a>:</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes (flexible I/O)</h1>
<pre><code>₌htṡF'∷
</code></pre>
<pre><code>₌ht      # push head and tail of input
   ṡ     # range(a, b + 1)
    F    # filter by elements not in input
     '∷  # filter by odds
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%8Cht%E1%B9%A1F%27%E2%88%B7&amp;inputs=%5B4%2C%207%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes (exact I/O)</h1>
<pre><code>⌈vI:₌htṡF'∷;\,j
</code></pre>
<p>Same principles, but <code>⌈vI:</code> takes input as a space separated list, and <code>\,j</code> formats the list to be comma separated.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88vI%3A%E2%82%8Cht%E1%B9%A1F%27%E2%88%B7%3B%5C%2Cj&amp;inputs=%604%20100%60&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230602","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>Hj</code>, <strike>25</strike> <strike>19</strike> 12 bytes</h1>
<p><em>-6 bytes thanks to <a href=""https://codegolf.stackexchange.com/users/101522/aaroneous-miller"">Aaron</a><br />
-7 bytes thanks to <a href=""https://codegolf.stackexchange.com/users/78850/lyxal"">lyxal</a></em></p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%81%C6%9B%E2%82%83kf*n%E2%82%85kb*%2B%E2%88%B4%3B%E2%81%8B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Flagless 15 bytes</a><br />
Longer than lyxal's answer, but uses a different technique</p>
<pre><code>ƛ₃kf*n₅kb*+∴               stack is preset to a 100 because of the `H` flag

ƛ                          lambda map with variable n
 ₃                         push 1 if n%3 == 0 (we'll call the return a)
  kf                       push constant Fizz to the stack
    *                      push a*kF
     n                     push n
      ₅                    push 1 if n%5 == 0 (we'll call it b)
       kb                  push Buzz to the stack
         *                 push b*kB
          +                add last two elements of the stack &quot;&quot;/Fizz/Buzz
           ∴               push the maximum of n and &quot;&quot;/Fizz/Buzz/FizzBuzz

Vyxal prints out the last element of the stack by default (the `j` flag joins the list with new lines)
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com/?flags=Hj&amp;code=%C6%9B%E2%82%83kf%2An%E2%82%85kb%2A%2B%E2%88%B4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230618","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>⌈ṘṄ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88%E1%B9%98%E1%B9%84&amp;inputs=%22This%20is%20a%20test%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"230728","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>»∇ė{»4τ28+¦0p?‹i+
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%BB%E2%88%87%C4%97%7B%C2%BB4%CF%8428%2B%C2%A60p%3F%E2%80%B9i%2B&amp;inputs=12%0A31&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
Works now, and -2.</p>
"
"230740","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ǍAḂ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHjUHhuILigbwiLCIiLCJEZW5uaXMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Ǎ    # Non-alphabet chars removed
 A   # Vowel mask (1 for vowel, 0 for not)
  Ḃ⁼ # Is equal to its reverse?
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal/releases/tag/v2.4.1"" rel=""nofollow noreferrer"">Vyxal 2.4.1</a>, 7 bytes</h1>
<pre><code>Ǎk∨vcḂ⁼
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C7%8Dk%E2%88%A8vc%E1%B8%82%E2%81%BC&amp;inputs=eoiurhejweiei&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-6 thanks to lyxal<br />
-1 thanks to Underslash</p>
"
"230763","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>‹bṅ0₀V
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%B9b%E1%B9%850%E2%82%80V&amp;inputs=6&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
Xnor port. -2 thanks to Aaron Miller.</p>
"
"230774","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>₀~εrΠ?↵/⌐
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%80%7E%CE%B5r%CE%A0%3F%E2%86%B5%2F%E2%8C%90&amp;inputs=9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Me and the boys on our way to port Lynn's Haskell answer be like.</p>
<h2>Explained</h2>
<pre><code>₀~εrΠ?↵/⌐
₀~εr       # the range (10 - input, 10]
    Π      # the product of that
       /   # divided by
     ?↵    # 10 ** input
        ⌐  # 1 - that
</code></pre>
"
"230867","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>∆K∆K=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86K%E2%88%86K%3D&amp;inputs=220&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pretty much identical to my Jelly answer.</p>
<p>Explanation:</p>
<pre><code>       # Implicit input
∆K     # Sum of proper divisors
  ∆K   # Sum of proper divisors
    =  # Equal to input?
</code></pre>
"
"230892","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16 13</s> 12 bytes</h1>
<pre><code>k•`[;,`Y∑:ǔĿ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%E2%80%A2%60%5B%3B%2C%60Y%E2%88%91%3A%C7%94%C4%BF&amp;inputs=s%5B%5B%3Br&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>k•           # Qwerty keyboard (array of rows)
  `[;,`Y     # Interleave with `[;,`
        ∑    # Concatenate all of that
         :ǔĿ # Shift each character 1 right relative to this in the input.
</code></pre>
"
"230901","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>f`:'. `f⁺↑b2ẇĿ2ẇÞT÷ḣ„ṫ$„p‟JWÞT⁺↑b2ẇ`:'. `fĿ∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=f%60%3A%27.%20%60f%E2%81%BA%E2%86%91b2%E1%BA%87%C4%BF2%E1%BA%87%C3%9ET%C3%B7%E1%B8%A3%E2%80%9E%E1%B9%AB%24%E2%80%9Ep%E2%80%9FJW%C3%9ET%E2%81%BA%E2%86%91b2%E1%BA%87%60%3A%27.%20%60f%C4%BF%E2%88%91&amp;inputs=%27%3A..%3A%5C%27.%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yuck.</p>
"
"230925","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ǎU'Ḃ=nḢ∧
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C7%8EU%27%E1%B8%82%3Dn%E1%B8%A2%E2%88%A7&amp;inputs=%2712223%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ǎ        # All substrings
 U       # Uniquified
  '      # Filtered by...
   Ḃ=    # Is palindromic
       ∧ # And...
     nḢ  # Is 2+ letters
</code></pre>
"
"230935","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>Ṙ₅½⌈ẇv∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%E2%82%85%C2%BD%E2%8C%88%E1%BA%87v%E2%88%91&amp;inputs=%5B1%2C2%2C3%2C4%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to lyxal</p>
"
"230989","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 37 bytes</h1>
<pre><code>$ṗḢƛ:λ₌*ġḭ;R:¹÷$‹$&quot;$ḭ:²+½$*÷-$Lu$e*;∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%24%E1%B9%97%E1%B8%A2%C6%9B%3A%CE%BB%E2%82%8C*%C4%A1%E1%B8%AD%3BR%3A%C2%B9%C3%B7%24%E2%80%B9%24%22%24%E1%B8%AD%3A%C2%B2%2B%C2%BD%24*%C3%B7-%24Lu%24e*%3B%E2%88%91&amp;inputs=%5B300%2C%20600%5D%0A%5B3%2C%205%2C%207%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is extremely messy. In case it wasn't clear, I am terrible with stack-based languages.</p>
"
"230992","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>-*∑+c
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=-*%E2%88%91%2Bc&amp;inputs=%5B1%2C%2025%2C%2062%2C%2067%5D%0A%5B15%2C%2015%2C%2034%2C%2025%5D%0A%5B5%2C%201%2C%200%2C%200%5D%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Inputs: attacks, growths, hits, heads</p>
<h2>Explanation</h2>
<p><code>-</code> subtract: growths - attacks<br />
<code>*</code> multiply: that * hits<br />
<code>∑</code> sum<br />
<code>+</code> add: that + heads<br />
<code>c</code> contains: is it in attacks?</p>
"
"231008","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>µ¥Ǔ&amp;›₀β;=';L
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B5%C2%A5%C7%93%26%E2%80%BA%E2%82%80%CE%B2%3B%3D%27%3BL&amp;inputs=%5B8%2C49%2C73%2C102%2C259%2C762%2C2782%2C3383%2C9217%2C37846%2C89487%2C7471788%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>µ      ;     # Sort by...
 ¥           # Register
  Ǔ          # Shift right by
   &amp;›        # Increment register
     ₀β      # Cast to int
        =';L # Find those where they're equal
</code></pre>
"
"231009","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>ẇD:L½:£⌈Ẏvs⅛_¥⌈ȯvsvṘ⅛¾f
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%BA%87D%3AL%C2%BD%3A%C2%A3%E2%8C%88%E1%BA%8Evs%E2%85%9B_%C2%A5%E2%8C%88%C8%AFvsv%E1%B9%98%E2%85%9B%C2%BEf&amp;inputs=2%0A%5B1%2C2%2C3%2C4%2C6%2C5%2C7%2C8%2C9%2C10%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A big mess.</p>
"
"231066","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>λĠvL&amp;›Dƛ2&gt;;A$Ḣ∧[x|u£];†h2=[¥|u
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%C4%A0vL%26%E2%80%BAD%C6%9B2%3E%3BA%24%E1%B8%A2%E2%88%A7%5Bx%7Cu%C2%A3%5D%3B%E2%80%A0h2%3D%5B%C2%A5%7Cu&amp;inputs=%5B2%2C2%2C1%2C1%2C2%2C1%2C2%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A big mess.</p>
"
"231067","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>≈[1J|g₌ḟ›Ȧ  # main program
</code></pre>
<pre><code>≈           # all elements in input are equal
 [1J|g₌ḟ›Ȧ  # main if statement
  1J        # if true, append 1 to input
     g₌ḟ›Ȧ  # if false...
     g      # get the minimum
      ₌ḟ›   # push the index of the min and the increment of the min
         Ȧ  # set that index to the increment
            # implicit output
</code></pre>
<p>I came up with this independently but surprisingly it was pretty similar in structure to @AaronMiller's answer.
<a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%89%88%5B1J%7Cg%E2%82%8C%E1%B8%9F%E2%80%BA%C8%A6&amp;inputs=%5B5%2C%202%2C%203%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231124","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>÷ʀ℅$19r℅&quot;:∑⁰$-:£4ḭw3ẋf:∑¥$-Wf
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B7%CA%80%E2%84%85%2419r%E2%84%85%22%3A%E2%88%91%E2%81%B0%24-%3A%C2%A34%E1%B8%ADw3%E1%BA%8Bf%3A%E2%88%91%C2%A5%24-Wf&amp;inputs=%5B10%2C15%5D%0A75&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231128","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>`:qp*`:qp*
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aqp*%60%3Aqp*&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it True!</a>
<a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aqp*%60%3Aqp*&amp;inputs=0&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it False!</a></p>
"
"231131","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>0+∩₍gG  # main program
</code></pre>
<pre><code>0+      # add 0 to each element of input if number, else append 0
  ∩     # take the set intersection
   ₍    # apply the following two operations on top of stack and wrap
    gG  # min and max
        # implicit output
</code></pre>
<p>It may be possible to take this down a byte if there is a command that only affects strings but not numbers. I couldn't find one after some basic searching, but its possible a single command exists that does that.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=0%2B%E2%88%A9%E2%82%8DgG&amp;inputs=%5B5%2C%204%2C%202%2C%20%22Hello%22%2C%201%2C%2010%2C%20%2222%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231137","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>dh-
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=dh-&amp;inputs=%5B1%2C3%2C4%2C2%2C8%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Dennis port</p>
<pre><code>   
d   # Double the array
 h  # Take the first
  - # Subtract
</code></pre>
<p>Or, by implementing the original spec,</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> 2.5, 5 bytes</h1>
<pre><code>¯?hp¦
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AF%3Fhp%C2%A6&amp;inputs=%5B1%2C3%2C4%2C2%2C8%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¯     # Deltas (negated, this is a bug, and will be fixed, that is why it's 2.5)
 ?hp  # Prepend the first item of input
    ¦ # Take the cumulative sum
</code></pre>
"
"231138","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>k∨:½ƛǓ;∑Ŀ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%E2%88%A8%3A%C2%BD%C6%9B%C7%93%3B%E2%88%91%C4%BF&amp;inputs=Programming%20Puzzles%20And%20Code%20Golf&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Basic transliteration.</p>
"
"231139","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ʁǎ²₍‹›vΠ:ġḭ  # main program
</code></pre>
<pre><code>ʁ            # range 0 to input
 ǎ²          # ith prime, sqaured
   ₍‹›       # push the increment and decrement of that list wrapped
      vΠ     # take the product of both lists
        :ġ   # duplicate, get the gcd
          ḭ  # divide both numbers by the gcd, print implicitly
</code></pre>
<p>I don't think the strategy of 1-2/p^2-1 works in Vyxal because it would just end with a floating point number rather than a fraction, but feel free to prove me wrong. (If it did work, it would be a literal translation from Dennis' M answer, but with a byte shaved off for the nth primes, coming out to 8)</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CA%81%C7%8E%C2%B2%E2%82%8D%E2%80%B9%E2%80%BAv%CE%A0%3A%C4%A1%E1%B8%AD&amp;inputs=15&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231142","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ǐ3v∴Π
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C7%903v%E2%88%B4%CE%A0&amp;inputs=12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ǐ    # Prime factors
  v∴ # Take max of each and...
 3   # 3
Π    # Take product
</code></pre>
"
"231147","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 49 bytes</h1>
<pre><code>λ`⟇∴ ɾ⟩ °√ ×ŀ ⟇↵ ¯Ǔ⋏ġ Vio⟇» ←√`⌈℅:` ¦ø`+,‛←√≠[x|¤
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%60%E2%9F%87%E2%88%B4%20%C9%BE%E2%9F%A9%20%C2%B0%E2%88%9A%20%C3%97%C5%80%20%E2%9F%87%E2%86%B5%20%C2%AF%C7%93%E2%8B%8F%C4%A1%20Vio%E2%9F%87%C2%BB%20%E2%86%90%E2%88%9A%60%E2%8C%88%E2%84%85%3A%60%20%C2%A6%C3%B8%60%2B%2C%E2%80%9B%E2%86%90%E2%88%9A%E2%89%A0%5Bx%7C%C2%A4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231149","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> <s>12</s> 8 bytes</h1>
<pre><code>(n:Ǎ[∇pp
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%28n%3A%C7%8D%5B%E2%88%87pp&amp;inputs=123ab&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-5 thanks to @AUsername</em></p>
<p><em>and -1 to an extra golf on that golf</em></p>
<p><em>but then another -4 from A Username</em></p>
<p>The irony here is that using the <code>r</code> flag makes this way too long.</p>
<h2>Explained</h2>
<pre><code>(n:Ǎ[∇pp
(              # for each character in the input:
 n:Ǎ           #     remove all letters from that character - if this is a letter, it will leave an empty string. Otherwise, it will leave it as-is.
    [          #     if the result isn't empty:
     ∇         #          rotate the top three items
      pp       #          and double prepend
</code></pre>
"
"231152","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ȧL
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C8%A7L&amp;inputs=-20000&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> L # Length of...
ȧ  # Absolute value of...
   # Implicit input
</code></pre>
"
"231171","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>kPs5ȯ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kPs5%C8%AF&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 byte thanks to @AaronMiller</p>
"
"231208","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>λ?neSUL₀=;ṅ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%3FneSUL%E2%82%80%3D%3B%E1%B9%85&amp;inputs=2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>λ               ;ṅ                # First truthy integer n where  
  ?ne                              # When raised to input^n
        SUL₀=                   # Length of unique digits is 10
</code></pre>
"
"231209","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>/70/ṙ›\**
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%2F70%2F%E1%B9%99%E2%80%BA%5C**&amp;inputs=1%0A306&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231216","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Ċ't1=;f1JΠ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C4%8A%27t1%3D%3Bf1J%CE%A0&amp;inputs=%5B7%2C7%2C7%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231217","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>'f∑∆²
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%27f%E2%88%91%E2%88%86%C2%B2&amp;inputs=%5B22228%2C4%2C113125%2C22345%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>'        # Keep elements in input list
 f∑      # Whose sum of digits is
   ∆²    # A perfect square
</code></pre>
"
"231218","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>:√I:‟/+½
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%3A%E2%88%9AI%3A%E2%80%9F%2F%2B%C2%BD&amp;inputs=2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>For <code>n=2</code></p>
<pre><code>:        # Dup -&gt; [2,2]
√        # Square root -&gt; [2,√2]
I        # Round -&gt; [2,1]
:        # Dup -&gt; [2,1,1]
‟        # Rotate stack right -&gt; [1,2,1]
/        # Divide -&gt; [1,2]
+        # Add -&gt; 3
½        # Halve -&gt; 1.5
</code></pre>
"
"231223","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>19βN9%‹
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=19%CE%B2N9%25%E2%80%B9&amp;inputs=%3F0023&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231224","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λ?+≈;ṅ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%3F%2B%E2%89%88%3B%E1%B9%85&amp;inputs=113&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231252","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>*d⇩√3+⌊
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=*d%E2%87%A9%E2%88%9A3%2B%E2%8C%8A&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Shameless port of xnor's answer</p>
<pre><code>*       # Square
 d      # Double
  ⇩     # Subtract 2
   √    # Square root
    3+  # Add 3
      ⌊ # Floor
</code></pre>
"
"231281","<h1 id=""vyxal-9-bytes-vb23""><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>[ɾ?(⁽*r)t
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%5B%C9%BE%3F%28%E2%81%BD*r%29t&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to @AUsername</p>
"
"231319","<h1 id=""vyxal-13-bytes-2rt5""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>ƛ1⋎*›rṘ;fU?‹i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B1%E2%8B%8E*%E2%80%BAr%E1%B9%98%3BfU%3F%E2%80%B9i&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Messy port</p>
"
"231323","<h1 id=""vyxal-17-bytes-httpscodegolf.stackexchange.comquestions63369stack-exchange-vote-simulator-cracked-because-i-misread-the-challenge-a9fk""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes, <a href=""https://codegolf.stackexchange.com/questions/63369/stack-exchange-vote-simulator"">Stack Exchange Vote Simulator</a>, <a href=""https://codegolf.stackexchange.com/a/231330/100664"">Cracked</a> because I misread the challenge</h1>
<pre><code>C⁽꘍R:£80&gt;[¥₁-±N|0
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C%E2%81%BD%EA%98%8DR%3A%C2%A380%3E%5B%C2%A5%E2%82%81-%C2%B1N%7C0&amp;inputs=%27%5Evv%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>
<s>Just to start things off. I feel this will get cracked very easily though.</s></p>
<p>I misread the challenge. My intended crack was an empty string - Vyxal barfs on reducing empty lists/strings.</p>
<p>Input is a string of <code>^v</code>.</p>
<p>Here's an explanation:</p>
<pre><code>C                 # Charcodes
   R              # Reduced by...
 ⁽꘍               # Bitwise xor
    :£            # Store a copy to register
      80&gt;[        # If it's over 80
          ¥₁-     # Subtract 100
             ±N   # Get the sign negated
               |0 # Else return 0.
</code></pre>
<p>Hint: The bug's in Vyxal itself, not my code.</p>
"
"231328","<h1 id=""vyxal-2-bytes-w39a""><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>y=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=y%3D&amp;inputs=HHeelllloo&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Look ma, no Unicode!</p>
"
"231341","<h1 id=""vyxal-4-bytes-httpscodegolf.stackexchange.comquestions11155shortest-code-to-determine-if-a-string-is-a-palindrome-cracked-by-a-username-yqcn""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes,  <a href=""https://codegolf.stackexchange.com/questions/11155/shortest-code-to-determine-if-a-string-is-a-palindrome"">Shortest code to determine if a string is a palindrome</a>, cracked by <a href=""https://codegolf.stackexchange.com/questions/231321/it-almost-works-cops-thread#comment530154_231341"">A username</a></h1>
<pre><code>Ǎ⇩Ḃ=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C7%8D%E2%87%A9%E1%B8%82%3D&amp;inputs=Helloolleh&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns <code>1</code> for palindromes and <code>0</code> for non-palindromes.</p>
<p>The challenge states that numbers affect palindrominess, but as A username pointed out, this ignores numbers.</p>
"
"231347","<h1 id=""vyxal-4-bytes-least-common-multiple-0x64""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes, <a href=""https://codegolf.stackexchange.com/questions/94999/least-common-multiple"">Least common multiple</a></h1>
<pre><code>Π?ġ/
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%A0%3F%C4%A1%2F&amp;inputs=%5B56%2C122%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Cracking it should be easy, so no Hints</p>
"
"231352","<h1 id=""vyxal-40-bytes-httpscodegolf.stackexchange.comquestions77263find-the-first-word-starting-with-each-letter-cracked-by-elitedamyth-4rt4""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 40 bytes, <a href=""https://codegolf.stackexchange.com/questions/77263/find-the-first-word-starting-with-each-letter"">Find the first word starting with each letter</a>, <a href=""https://codegolf.stackexchange.com/a/231355/100664"">cracked by EliteDaMyth</a></h1>
<pre><code>kBð\_9ɾṅṠ↔⌈:£ƛh⇩⅛¥ƛh⇩;¼ḟ¥$i=[|¤;;';ðvp∑Ṫ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kB%C3%B0%5C_9%C9%BE%E1%B9%85%E1%B9%A0%E2%86%94%E2%8C%88%3A%C2%A3%C6%9Bh%E2%87%A9%E2%85%9B%C2%A5%C6%9Bh%E2%87%A9%3B%C2%BC%E1%B8%9F%C2%A5%24i%3D%5B%7C%C2%A4%3B%3B%27%3B%C3%B0vp%E2%88%91%E1%B9%AA&amp;inputs=Ferulas%20flourish%20in%20gorgeous%20gardens.&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I made this while navigating various random bugs. It should work on the current implementation of Vyxal, but may not in the future.</p>
<p>My intended crack: Anything involving zeroes. <code>kBð\_9ɾṅṠ</code> assembles a string, and here's how it works:</p>
<pre><code>kB        # Push lowercase + uppercase alphabet
  ð       # Push space
   \_     # Push underscore
     9ɾṅ  # Push 1-9 - no 0!
        Ṡ # Concatenate all
</code></pre>
<p>Then everything not in that is removed, including zeroes.</p>
"
"231379","<h1 id=""vyxal-6-bytes-jlkf""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kr↔⇩Ḃ=  #
</code></pre>
<pre><code>kr      # push the upper and lowercase alphabet
  ↔⇩    # remove all chars in input that are not in that, and lowercase
    Ḃ   # push a and a.reverse()
     =  # equal?
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kB%E2%86%94%E2%87%A9%E1%B8%82%3D&amp;inputs=Eva%2C%20can%20I%20stab%20bats%20in%20a%20cave%3F&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231401","<h1 id=""vyxal-30-bytes-6lq1""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>(n₃[¹\_*,|7\|꘍¹*⁰ǔǔn3ḭ∷[4ǔ]¹Ẏ,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%28n%E2%82%83%5B%C2%B9%5C_*%2C%7C7%5C%7C%EA%98%8D%C2%B9*%E2%81%B0%C7%94%C7%94n3%E1%B8%AD%E2%88%B7%5B4%C7%94%5D%C2%B9%E1%BA%8E%2C&amp;inputs=10%0A44%0A1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A big mess.</p>
<pre><code>(                              # (height) times (to make each row)
 n₃[                           # If the iteration is divisible by 3 (flat row) then...
    ¹\_*,                      # (width) underscores
         |                     # Else (part of a brick)...
          7\|꘍                 # Prepend seven spaces to an underscore
              ¹*               # Repeat (width) times
                ⁰ǔǔ            # Cycle by (offset), then cycle once more
                   n3ḭ∷[  ]    # If it's an offset row
                        4ǔ     # Cycle once more
                           ¹Ẏ, # Trim to the correct length and print.
</code></pre>
"
"231402","<h1 id=""vyxal-13-bytes-1eta""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>∞›*'S₀S↔=;h$/
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%9E%E2%80%BA*%27S%E2%82%80S%E2%86%94%3D%3Bh%24%2F&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>∞›*           # All multpiles of n
   '     ;    # Filtered by
    S₀S↔      # When you remove all the digits except 0 and 1
        =     # Does it equal itself?
          h   # Get the first item for which this happens
           $/ # Divide by n
</code></pre>
"
"231408","<h1 id=""vyxal-48-bytes-43r9""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 48 bytes</h1>
<pre><code>`÷Ċ ₈Ȧ Mummy ∆ƛpa ∆ƛma`⌈` Ẏ꘍`+ƛ3(` doo`6*+,)\!+,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%C3%B7%C4%8A%20%E2%82%88%C8%A6%20Mummy%20%E2%88%86%C6%9Bpa%20%E2%88%86%C6%9Bma%60%E2%8C%88%60%20%E1%BA%8E%EA%98%8D%60%2B%C6%9B3%28%60%20doo%606*%2B%2C%29%5C!%2B%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess.</p>
<pre><code>`...`⌈                         # Names, split on newlines
      `...`+                   # Append ' Shark' to each
            ƛ                  # Foreach...
             3(          )     # Three times
               ` doo`6*+,      # Append six doos and output
                          \!+, # Append a ! and output
</code></pre>
"
"231411","<h1 id=""vyxal-7-bytes-cracked-by-shaggy-35re""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes, <a href=""https://codegolf.stackexchange.com/a/231412/100664"">Cracked</a> by <a href=""https://codegolf.stackexchange.com/users/58974/shaggy"">Shaggy</a></h1>
<pre><code>kaka[|←
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kaka%5B%7C%E2%86%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses a quite obscure hack. Should print <code>z</code> if changed correctly.</p>
<p>Shaggy found exactly my intended solution - <code>kaka(|←</code>.</p>
<p>The 'obscure hack' I mentioned is Vyxal's 'ghost variable'. Vyxal's variables are referenced by <code>→name</code> and <code>←name</code>, but you can give one no name.</p>
<p><code>(...)</code> is Vyxal's loop construct, but you can add a variable name with <code>(name|...)</code> and that variable will contain the current iteration. This also works with no name, so <code>(|...)</code> sets the ghost variable to whichever iteration, then <code>←</code> gets the current iteration number. Vyxal's structures autocomplete, so <code>(|...</code> without a closing paren is fine.</p>
<p>You're iterating over <code>ka</code>, which is the lowercase alphabet, so at the end the stack looks like <code>a , b, c... z</code>. Finally, Vyxal's implicit output takes care of the rest, returning the <code>z</code>.</p>
"
"231413","<h1 id=""vyxal-5-bytes-cracked-by-pxeger-qhuf""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes, <a href=""https://codegolf.stackexchange.com/questions/231410/which-character-to-change-robbers/231414#231414"">Cracked by pxeger</a></h1>
<pre><code>lyoal
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=lyoal&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Take two.</p>
<p>Should output <code>name 'this_function' is not defined</code> and nothing else.</p>
<p>May not work in future versions of Vyxal as this is a bug that must be destroyed.</p>
<p>My intended solution was <code>lyxal</code>, which rickrolls you but first outputs the intended text, as you can see in <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=lyxal%23&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">this version</a>, which adds a NOP.</p>
<p>I then realised <code>lyoax</code> works as well.</p>
<p>So yeah, interesting puzzle.</p>
"
"231414","<h1 id=""vyxal-cracks-a-usernames-second-answer-5-bytes-wqkj""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, cracks <a href=""https://codegolf.stackexchange.com/a/231413"">A username's second answer</a> 5 bytes</h1>
<pre><code>lyoax
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=lyoax&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231416","<h1 id=""vyxal-20-bytes-cracked-by-aaron-miller-caa6""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes, <a href=""https://codegolf.stackexchange.com/a/231420/78850"">cracked by Aaron Miller</a></h1>
<pre><code>`Ẇ₁¹kḢ`:∧λf⇧\#¯ḣ⌐ƒż1
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%E1%BA%86%E2%82%81%C2%B9k%E1%B8%A2%60%3A%E2%88%A7%CE%BBf%E2%87%A7%5C%23%C2%AF%E1%B8%A3%E2%8C%90%C6%92%C5%BC1&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Alright. My turn.</p>
<p>You need to make this epic lambda output <code>who is joe joe mama</code>.</p>
<hr />
<p>If you thought that the lambda actually did anything, then you were wrong. The first string in the program is to act as a distraction, as the answer is that everything after the <code>:</code> is the compressed version of the output string.</p>
"
"231443","<h1 id=""vyxal-24-bytes-cracked-by-aaron-miller-bkbu""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes, <a href=""https://codegolf.stackexchange.com/questions/231410/which-character-to-change-robbers/231444#231444"">Cracked</a> by Aaron   Miller.</h1>
<pre><code>kH:`string`D‟‟Ẋf∑vd∑qĖ₁Ẏ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kH%3A%60string%60D%E2%80%9F%E2%80%9F%E1%BA%8Af%E2%88%91vd%E2%88%91q%C4%96%E2%82%81%E1%BA%8E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Output should be</p>
<pre><code>HH\`\`HHmorningHHoccupationalHH\`\`ee\`\`eemorningeeoccupationalee\`\`ll\`\`llmorninglloccupationall
</code></pre>
<p>A mess.</p>
"
"231444","<h1 id=""vyxal-24-bytes-cracks-a-usernames-answer-4sph""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes, <a href=""https://codegolf.stackexchange.com/a/231443/101522"">cracks A username’s answer</a></h1>
<pre><code>kHø`string`D‟‟Ẋf∑vd∑qĖ₁Ẏ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kH%C3%B8%60string%60D%E2%80%9F%E2%80%9F%E1%BA%8Af%E2%88%91vd%E2%88%91q%C4%96%E2%82%81%E1%BA%8E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231481","<h1 id=""vyxal-34-bytes-safe-fdi9""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 34 bytes (safe)</h1>
<pre><code>u₁7₌I&quot;
∑C$3Ǎ⇧
*C₍⇧⇩+
Ė_&quot;v⇩÷
CĖ›½½∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=u%E2%82%817%E2%82%8CI%22%0A%E2%88%91C%243%C7%8D%E2%87%A7%0A*C%E2%82%8D%E2%87%A7%E2%87%A9%2B%0A%C4%96_%22v%E2%87%A9%C3%B7%0AC%C4%96%E2%80%BA%C2%BD%C2%BD%E2%88%91&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Solution should output <code>29</code>.</p>
<p>Solution:</p>
<blockquote class=""spoiler"">
<p><pre><code>u₁7₌I&quot;
∑C$3Ǎ⇧
*C₍⇧⇩+
Ė_&quot;v⇩÷øCĖ›½½∑</code></pre></p>
</blockquote>
<p>Explanation:</p>
<blockquote class=""spoiler"">
<p>Replaces the last newline with <code>ø</code>, which causes the string to be wrapped in <code>»</code>, which is the delimiter for compressed numbers. The string is then decompressed by executing it as Vyxal code with the <code>Ė</code> command, then it is incremented, halved twice, and the digits are added together, equaling 29.</p>
</blockquote>
"
"231500","<h1 id=""vyxal-4-bytes-zxwl""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>C÷꘍C
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C%C3%B7%EA%98%8DC&amp;inputs=%5B%22test%22%2C%20%22%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Because Vyxal auto-pads lol.</p>
<h2 id=""explained-f4fb"">Explained</h2>
<pre><code>C÷꘍C
C     # convert each character in each string to it's ordinal value
 ÷꘍   # bitwise xor each item
   C  # and convert the result back to characters
</code></pre>
<p>Alternatively, using Keg mode:</p>
<h3 id=""vyxal-k-1-byte-vvr4""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>K</code>, 1 byte</h3>
<pre><code>꘍
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=K&amp;code=%EA%98%8D&amp;inputs=%22lowercase%22%0A%229%3F%27%20%20%20%20%20%20%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231502","<h1 id=""vyxal-21-7-bytes-oin5""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>21</s> 7 bytes</h1>
<pre><code>⌈E∑ƒ\/j
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88E%E2%88%91%C6%92%5C%2Fj&amp;inputs=5%203%2F5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No rational numbers here...</p>
<p>-14 thanks to lyxal.</p>
<p>Or, if I can take it in a <em>very</em> specific form:</p>
<h1 id=""vyxal-4-bytes-lg4z""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>*+$&quot;
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=*%2B%24%22&amp;inputs=3%0A1%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Input as <code>denominator,number,numerator</code>.</p>
"
"231511","<h1 id=""vyxal-15-bytes-cracked-by-lyxal-8fw0""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes, <a href=""https://codegolf.stackexchange.com/a/231514/100664"">Cracked by lyxal</a></h1>
<pre><code>
«Wi«»Wi»`Wi`Wi
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%0A%C2%ABWi%C2%AB%C2%BBWi%C2%BB%60Wi%60Wi&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No bans, do what you want. Note that silently erroring at compile-time (Nothing appears in the 'output' box) counts as an error - even the empty program outputs 0...</p>
<p>My intended solution was prepending a <code>[</code> to just make sure the code isn't run.</p>
"
"231513","<h1 id=""vyxal-12-bytes-v6am""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ƛ?ÞTvṁ-²∑√;≈
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%3F%C3%9ETv%E1%B9%81-%C2%B2%E2%88%91%E2%88%9A%3B%E2%89%88&amp;inputs=%5B%5B0%2C0%5D%2C%5B0%2C1%5D%2C%5B1%2C1%5D%2C%5B1%2C0%5D%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ         ;  # Map to...
 ?           # Input
  ÞT         # Transposed
    vṁ       # Take the average of each (center)
      -      # Get the x and y distances to the center
       ²∑√   # Pythagoras to get abs. dist. to center
           ≈ # Are all equal?
</code></pre>
"
"231559","<h1 id=""vyxal-7-bytes-zhs2""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ÞS'∑¬;t  # main program
</code></pre>
<pre><code>ÞS       # sublists
  '∑¬;   # filter
   ∑¬    # by the negated sum
      t  # take the tail
</code></pre>
<p>Similar to @hyper-neutrino's answer.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%9ES%27%E2%88%91%C2%AC%3Bt&amp;inputs=%5B-86%2C14%2C-36%2C21%2C26%2C-2%2C-51%2C-11%2C38%2C28%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231581","<h1 id=""vyxal-r-3-bytes-qym4""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>r</code>, 3 bytes</h1>
<pre><code>yṘJ
</code></pre>
<p>Uninterleave, reverse the second argument, merge b + a. Requires the r flag because there's no way to merge to my knowledge the other way around in one command.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=r&amp;code=y%E1%B9%98J&amp;inputs=%5B%22a%22%2C%22b%22%2C%22c%22%2C%22d%22%2C%22e%22%2C%22f%22%2C%22g%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>And flagless from @AaronMiller if the input is taken as a string:</p>
<h1 id=""vyxal-3-bytes-1oge""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>yṘp
</code></pre>
<p>Instead of J to merge, it prepends the element.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=y%E1%B9%98p&amp;inputs=udlnuemp&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231722","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20 16</s> 15 bytes</h1>
<pre><code>bƛṅS7↳vċ†;f¯ȧ1p
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=b%C6%9B%E1%B9%85S7%E2%86%B3v%C4%8B%E2%80%A0%3Bf%C2%AF%C8%A71p&amp;inputs=H%23&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess. -4 thanks to Aaron Miller. -1 thanks to lyxal.</p>
"
"231725","<h1 id=""vyxal-95-bytes-ficm""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 95 bytes</h1>
<pre><code>`λƛ e⋏ṫ⟑⌈-←¾ λ□ a λṙ λ⟑ ≥⁋.
λƛ ∵‹⟑⌈-←¾ λ□ a λṙ λ⟑ ×ė.
λƛ ƛ»-ʁḢ λ½ a λṙ to ÷Ḣ
a ↔Ŀized τ⟇.
`₁½½*
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%CE%BB%C6%9B%20e%E2%8B%8F%E1%B9%AB%E2%9F%91%E2%8C%88-%E2%86%90%C2%BE%20%CE%BB%E2%96%A1%20a%20%CE%BB%E1%B9%99%20%CE%BB%E2%9F%91%20%E2%89%A5%E2%81%8B.%0A%CE%BB%C6%9B%20%E2%88%B5%E2%80%B9%E2%9F%91%E2%8C%88-%E2%86%90%C2%BE%20%CE%BB%E2%96%A1%20a%20%CE%BB%E1%B9%99%20%CE%BB%E2%9F%91%20%C3%97%C4%97.%0A%CE%BB%C6%9B%20%C6%9B%C2%BB-%CA%81%E1%B8%A2%20%CE%BB%C2%BD%20a%20%CE%BB%E1%B9%99%20to%20%C3%B7%E1%B8%A2%0Aa%20%E2%86%94%C4%BFized%20%CF%84%E2%9F%87.%0A%60%E2%82%81%C2%BD%C2%BD*&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`...`     # Dictionary compressed string
     ₁½½  # 100 / 2 / 2 = 25
        * # That many times
</code></pre>
"
"231745","<h1 id=""vyxal-14-bytes-cracked-by-aaron-miller-4qq1""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes, <a href=""https://codegolf.stackexchange.com/a/231899/100664"">Cracked by Aaron Miller</a></h1>
<pre><code>‛ø»:K:Ẋf∑$βS2Ẏ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%C3%B8%C2%BB%3AK%3A%E1%BA%8Af%E2%88%91%24%CE%B2S2%E1%BA%8E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Should output 14.</p>
<p>My intended solution was:</p>
<pre><code>»ø»:K:Ẋf∑$βS2Ẏ
</code></pre>
<p>I'm quite surprised that changing the <em>word</em>  worked, my intention was changing it to a <em>number</em>, where the output would be 1412 before slicing.</p>
"
"231750","<h1 id=""vyxal-7-bytes-1twa""><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ƛ₇ƛ₀℅;B
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%E2%82%87%C6%9B%E2%82%80%E2%84%85%3BB&amp;inputs=5&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>ƛ       # Map...
 ₇ƛ  ;  # Map 128 to...
   ₀℅   # Random choice from digits of 10
      B # Convert to base 10
</code></pre>
<p>Or if it's allowed not to complete within the lifetime of the universe, 5 bytes:</p>
<pre><code>ƛ₇Eʁ℅
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%E2%82%87E%CA%81%E2%84%85&amp;inputs=5&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>ƛ     # Map...
 ₇E   # 2 ** 128
   ʁ  # Range (0...x)
    ℅ # Choose a random item
</code></pre>
<p>It's trying to generate a 2<sup>128</sup>-item array, do you think it's gonna finish any time soon?</p>
"
"231755","<h1 id=""vyxal-21-bytes-ijet""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>₇E(nk6τ₅32ε\0*p4ẇ\:j,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%82%87E%28nk6%CF%84%E2%82%8532%CE%B5%5C0*p4%E1%BA%87%5C%3Aj%2C&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ugh, we really need a zfill builtin.</p>
"
"231756","<h1 id=""vyxal-3-bytes-8wcp""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>{›…
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%E2%80%BA%E2%80%A6&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>{   # Forever...
 ›  # Increment
  … # Print without popping
</code></pre>
"
"231767","<h1 id=""vyxal-vyxal-r-62-49-bytes-rw4x""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, Vyxal <code>r</code>, <s><sup>62</s></sup> 49 bytes</h1>
<p><em>-13 bytes because I really overcomplicated this :/</em></p>
<pre><code>‛₴ŀ`₴ŀ r`&quot;`λ« ƛ¾ wṠǒ't «ḭ in %, it λ¨ €₇ λ⟑ %!`$%
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=r&amp;code=%E2%80%9B%E2%82%B4%C5%80%60%E2%82%B4%C5%80%20r%60%22%60%CE%BB%C2%AB%20%C6%9B%C2%BE%20w%E1%B9%A0%C7%92%27t%20%C2%AB%E1%B8%AD%20in%20%25%2C%20it%20%CE%BB%C2%A8%20%E2%82%AC%E2%82%87%20%CE%BB%E2%9F%91%20%25!%60%24%25&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>‛₴ŀ                # Push &quot;Vyxal&quot;
   `₴ŀ r`          # Push &quot;Vyxal r&quot;
         &quot;         # Join top two values
          `...`    # Push target string with &quot;%&quot; where the names should go
               $   # Swap top two values (does nothing with &quot;r&quot; flag)
                %  # Insert &quot;Vyxal&quot; and &quot;Vyxal r&quot; in the string where the &quot;%&quot; are
</code></pre>
"
"231805","<h1 id=""vyxal-s-5-bytes-gs5w""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 5 bytes</h1>
<pre><code>ɾǐƛ5O  # main program
</code></pre>
<pre><code>ɾ      # range over input
 ǐ     # take the prime factors of each number
  ƛ5O  # for each value, count the 5s
-s     # sum top of stack
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=s&amp;code=%C9%BE%C7%90%C6%9B5O&amp;inputs=2016&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1 id=""vyxal-3-bytes-vb45""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¡5Ǒ
</code></pre>
<p>This one uses the same approach as caird coinheringaahing's answer</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A15%C7%91&amp;inputs=2016&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1 id=""vyxal-l-3-bytes-for-inputs-4-5epu""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, 3 bytes (for inputs &gt; 4)</h1>
<pre><code>¡Ġt
</code></pre>
<p>Approach by Lyxal, takes the factorial of the input, groups by consecutive, then gets the length of the tail using the -l flag.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=l&amp;code=%C2%A1%C4%A0t&amp;inputs=100&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"231863","<h1 id=""vyxal-7-bytes-rhlh""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ȧ4*?±-⇧
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C8%A74*%3F%C2%B1-%E2%87%A7&amp;inputs=%5B-1%2C%202%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Oh yes, jelly port. Very fun.</p>
<p><code>⟨0|1⟩</code> for second integer being yes, <code>⟨1|0⟩</code> for first integer being yes.</p>
<h2 id=""explained-hoo1"">Explained</h2>
<pre><code>ȧ4*?±-⇧
ȧ4*     # 4 * abs(input) [vectorised] # call this x
   ?±   # sign_of(input) [vectorised - &lt;0 = -1, =0 = 0, &gt;0 = 1] # call this y
     -  # x - y [vectorised element-wise] # call this z
      ⇧ # indexes of z in an order such that they would arrange z to be sorted ascending
</code></pre>
"
"231889","<h1 id=""vyxal-5-bytes-bosq""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>²?Ḣ+⇧
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B2%3F%E1%B8%A2%2B%E2%87%A7&amp;inputs=%5B-1%2C%202%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as a list and returns [1,0] for first being bigger, [0,1] for second being bigger.</p>
<pre><code>²     # [x^2, y^2]
 ?Ḣ   # [y]
   +  # [x^2+y, y^2]
    ⇧ # Grade up
</code></pre>
"
"231899","<h1 id=""vyxal-14-bytes-cracks-a-usernames-answer-w2ql""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes, cracks <a href=""https://codegolf.stackexchange.com/a/231745/101522"">A username's answer</a></h1>
<pre><code>‛⟑»:K:Ẋf∑$βS2Ẏ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%E2%9F%91%C2%BB%3AK%3A%E1%BA%8Af%E2%88%91%24%CE%B2S2%E1%BA%8E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Probably not the intended solution, but this simply changes the compressed string from <code>iraq</code> to <code>hours</code>. The string itself doesn't matter, what matters is that it is a string made of 5 different characters. In fact, if you could change 2 characters, you could change it to <code>Vyxal</code> (<code>₴ŀ</code>) and <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%E2%82%B4%C5%80%3AK%3A%E1%BA%8Af%E2%88%91%24%CE%B2S2%E1%BA%8E&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">it would still work</a>.</p>
"
"231914","<h1 id=""vyxal-12-bytes-68oj""><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>30:(kɽ℅+:×꘍,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=30%3A%28k%C9%BD%E2%84%85%2B%3A%C3%97%EA%98%8D%2C&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>30:          # Push 30 twice
   (         # Iterate over one copy (30 times)
       +     # Increment the number on the stack (initially 30) by...
      ℅      # A random choice from
    kɽ       # [-1, 0, 1]
        :    # Duplicate
         ×꘍  # Prepend that many spaces to an asterisk
           , # And output, leaving the number on the stack
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=j&amp;code=30%3A%C6%9B3%CA%81%E2%80%B9%E2%84%85%3B%C2%A6%2B%C3%97%EA%98%8D&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">An alternative</a></p>
"
"231916","<h1 id=""vyxal-6-bytes-b43f""><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>C∑⇧11%
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C%E2%88%91%E2%87%A711%25&amp;inputs=threw&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Cjam port.</p>
"
"231932","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 9 bytes</h1>
<p><em>-2 thanks to A username</em></p>
<pre><code>⁺ed404∴ɾƛ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%81%BAed404%E2%88%B4%C9%BE%C6%9B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⁺ed404∴ɾƛ
⁺e          # Push 202
  d         # Double ^ to get 404
   404      # Push 404 again
      ∴     # Take the maximum
               # If bytes are removed from either of the 404s, this ensures the intact one is pushed
               # If ∴ is removed, 404 is still at the top of the stack so it doesn't matter
       ɾ    # range(1, n+1)
        ƛ   # Map
               # If it's a number (ɾ removed), range(1, n+1) is used
               # Otherwise (it's a range), nothing happens here
</code></pre>
"
"232973","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Ėe
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C4%96e&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The <code>e</code>s are coming!</p>
<pre><code> e # x to the power of
Ė  # 1/x
</code></pre>
"
"233032","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>RÞTR
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=R%C3%9ETR&amp;inputs=%5B%5B9%2C6%2C3%5D%2C%5B8%2C5%2C2%5D%2C%5B7%2C4%2C1%5D%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>R    # Vectorised reverse
 ÞT  # Transpose
   R # Vectorised reverse
</code></pre>
"
"233066","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>9ʀṖƛ?İ;U
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=9%CA%80%E1%B9%96%C6%9B%3F%C4%B0%3BU&amp;inputs=%5B1%2C2%2C2%2C3%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Will time out. (But work in theory, because taking 0..n (n&lt;9) permutations finish properly in time)</p>
<pre><code>9ʀṖ                     # 0..9 permutations
       ƛ                  # For each
             ?İ          #  Index with input
                ;U      # Close and remove duplicates
</code></pre>
"
"233131","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kPs5ȯ↔
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kPs5%C8%AF%E2%86%94&amp;inputs=%22regegfer%5Cn%C3%98%C3%B8%CF%80%E2%88%91wodwef2342%CB%86%CF%80%E2%88%86%C3%B8iy%5Cnn%C2%BA%C3%A7%C3%9Ffiwu9few09wf%C2%AB%5B%5C%5Cwe.%3B.%5B%3B%5D.we%5Cn24%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Fixed thanks to Aaron Miller. Why does the printable ascii builtin contain unprintables?</p>
"
"233181","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>{:k[øo|Ǔ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%3Ak%5B%C3%B8o%7C%C7%93&amp;inputs=%27%5D%5D%5D%5B%5D%5B%5D%5B%5B%5B%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes as a string of <code>[]</code>.</p>
<pre><code>{        # While...
    øo   # Removing until no change...
  k[     # The string `[]`
 :       # From the top of stack
    øo   # Eventually yields a truthy value (i.e. non-balanced)
      |Ǔ # Rotate left.
</code></pre>
"
"233185","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 83 bytes</h1>
<pre><code>1 9&quot;£{`λḭ ƛ» ∧ḭ ⟇¯ ×² ß• ⌐≤ ƈḞ ∵‹ ¢Ṗ Ẇ„ ⟨ǐ t¥ẏ⟑⌈ ⟇¯⟑⌈ Ṡ□ ⌐≤⟑⌈ e⋏ṫ⟑⌈ ←⊍λḭ`⌈¥‹İṅC¯ȧ…£
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=1%209%22%C2%A3%7B%60%CE%BB%E1%B8%AD%20%C6%9B%C2%BB%20%E2%88%A7%E1%B8%AD%20%E2%9F%87%C2%AF%20%C3%97%C2%B2%20%C3%9F%E2%80%A2%20%E2%8C%90%E2%89%A4%20%C6%88%E1%B8%9E%20%E2%88%B5%E2%80%B9%20%C2%A2%E1%B9%96%20%E1%BA%86%E2%80%9E%20%E2%9F%A8%C7%90%20t%C2%A5%E1%BA%8F%E2%9F%91%E2%8C%88%20%E2%9F%87%C2%AF%E2%9F%91%E2%8C%88%20%E1%B9%A0%E2%96%A1%20%E2%8C%90%E2%89%A4%E2%9F%91%E2%8C%88%20e%E2%8B%8F%E1%B9%AB%E2%9F%91%E2%8C%88%20%E2%86%90%E2%8A%8D%CE%BB%E1%B8%AD%60%E2%8C%88%C2%A5%E2%80%B9%C4%B0%E1%B9%85C%C2%AF%C8%A7%E2%80%A6%C2%A3&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the values infinitely</p>
"
"233186","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ɾ•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKAoiIsIiIsIlsyLDQsM11cbls0LDUsMSwyLDYsMSw3LDksNl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>If generators weren't so broken, it'd just be <code>vɾ•</code> and flagless.</s> Thank goodness for Vyxal 2.8 lol.</p>
<h2>Explained</h2>
<pre><code>ɾ•
ɾ    # vectorise range for each item in the shape list
•   # and mold that to the shape list
</code></pre>
<p>So essentially, a port of hyper's jelly</p>
"
"233229","<h1><a href=""https://github.com/chunkybanana/javastack"" rel=""nofollow noreferrer"">Javastack</a> , 1 byte</h1>
<pre><code>1
</code></pre>
<h1><a href=""https://github.com/vyxal/vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<p>Vyxal pads the stack with 0s when there's no input, so the list includes but is not limited to...</p>
<ul>
<li><code>›</code> - 0 incremented</li>
<li><code>ċ</code> - 0 != 1</li>
<li><code>≥</code> - 0 &gt;= 0</li>
<li><code>≤</code> - 0 &lt;= 0</li>
<li><code>=</code> - 0 == 0</li>
<li><code>¬</code> - !0</li>
<li><code>₃</code> - 0 % 3 == 0</li>
<li><code>₂</code> - 0 % 2 == 0</li>
<li><code>₅</code> - 0 % 5 == 0</li>
<li><code>L</code> - len(str(0))</li>
<li><code>⌐</code> - 1 - 0</li>
<li><code>e</code> - 0 ** 0</li>
<li><code>ż</code>, if I can output in a singleton list</li>
</ul>
"
"233269","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>∑5*‹ʁ7%⊍Ḣ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%915*%E2%80%B9%CA%817%25%E2%8A%8D%E1%B8%A2&amp;inputs=%5B0%2C1%2C2%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Porting Pyth saves two bytes.</p>
"
"233283","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ƛ¹Ḋ⁰*∑∴,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C2%B9%E1%B8%8A%E2%81%B0*%E2%88%91%E2%88%B4%2C&amp;inputs=100%0A%5B3%2C%205%2C%207%5D%0A%5B%22Fizz%22%2C%20%22Buzz%22%2C%20%22Joe%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Since y'all complaining about flags, I'll give you a tie with jelly.</p>
<p>Expects <code>L</code>imit, <code>D</code>ivisors, <code>S</code>trings</p>
<h2>Explained</h2>
<pre><code>ƛ¹Ḋ⁰*∑∴,
ƛ        # for each n in the range [1, L]:
 ¹Ḋ      #     Push n % D == 0 (epicly vectorised)
   ⁰*    #     Push ^ * S (which is vectorised python string multiplication) 
     ∑∴  #     Push max(sum(^), n)
       , #     and print ^ with a newline
</code></pre>
<p>This would be 7 with the <code>j</code> flag </p>
"
"233344","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ƛ²√Ṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C2%B2%E2%88%9A%E1%B9%98&amp;inputs=123&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs as a list of what I think are strings.</p>
<pre><code>ƛ    # 1..n mapped to...
 ²√  # Cast to float with √(x^2)
   Ṙ # Reverse
</code></pre>
"
"233365","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>+¹$r'¹Ėe:I≠
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%2B%C2%B9%24r%27%C2%B9%C4%96e%3AI%E2%89%A0&amp;inputs=2%0A12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>+¹$r        # Input range
'¹Ėe         # r-th root of each item in range
:I≠           # Filter roots with no fractional part
</code></pre>
"
"233408","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 9 bytes</h1>
<pre><code>(nH₂[w|⁰J
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B8%A2%28nH%E2%82%82%5Bw%7CJ&amp;inputs=car%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wow, using hexadecimal conversion actually helped save a byte. Exits with an error, but outputs the required list wrapped in a list.</p>
<h2>Explained</h2>
<pre class=""lang-py prettyprint-override""><code>(nH₂[w|⁰J
(          # for each character `n` in the remnants:
 nH        #     convert to hexadecimal
   ₂       #     is that divisible by 2?
    [      #     if so:
     w     #         wrap the TOS in a list ([TOS])
      |    #     else:
       ⁰J  #         join the TOS and the next input
</code></pre>
"
"233438","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>∞'KḢḢ;Ẏ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%9E%27K%E1%B8%A2%E1%B8%A2%3B%E1%BA%8E&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>∞       # The set of all positive integers
 '   ;  # Filtered by...
  K     # The list of factors of n
   ḢḢ   # Has length &gt; 2
      Ẏ # Get first n
</code></pre>
<p>Using a isprime builtin doesn't actually save any bytes as 1 and 0 are considered nonprime.</p>
"
"233439","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>'bĊvtJ₅3=$væA∧
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%27b%C4%8AvtJ%E2%82%853%3D%24v%C3%A6A%E2%88%A7&amp;inputs=100&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>'              # (implicitly convert to range), then filter by...
 b             # Binary representation
  Ċ            # Count the amount of each value in a (1 &amp; 0 only)
   vt          # Get the counts
     J         # Join the current number to each of those
      ₅        # Duplicate and get length
       3=      # Is it equal to 3?
         $     # Swap
          væA  # Are all prime?
             ∧ # Are both true?
</code></pre>
"
"233479","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>⌈ƛk∨↔LẎ;∑Ṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%8C%88%C6%9Bk%E2%88%A8%E2%86%94L%E1%BA%8E%3B%E2%88%91%E1%B9%98&amp;inputs=Hello%20World&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌈          # Split on spaces
 ƛ     ;   # Map...
    ↔      # Remove characters not in...
  k∨       # 'aeiouAEIOU'
     L     # Get the length of that
      Ẏ    # Get that many characters of the original string
        ∑  # Concatenate all of them
         Ṙ # Reverse the whole thing
</code></pre>
"
"233480","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Ġv¦f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEoHbCpmYiLCIiLCJbMCwxLDEsMSwwLDEsMSwwLDAsMCwxLDEsMSwxLDEsMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-6 thanks to Lyxal.</p>
<pre><code>Ġ    # Group consecutive identical elements
 v¦  # Take the cumulative sum of each
   f # Flatten the result
</code></pre>
"
"233482","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>{:Ḃ≠|Ḃ+
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%3A%E1%B8%82%E2%89%A0%7C%E1%B8%82%2B&amp;inputs=89&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>{       # While...
 :Ḃ≠    # It's not a palindrome
    |   # Do...
     Ḃ+ # Concatenate to its reverse
</code></pre>
"
"233484","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>{Ḃ≠|m:
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%E1%B8%82%E2%89%A0%7Cm%3A&amp;inputs=5280&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Wooo cursed behaviour for numbers ftw.</p>
<h2>Explained</h2>
<pre><code>{Ḃ≠|m:
{Ḃ≠|      # while t.o.s[::-1] != tos:
    m     #     mirror the tos (that is, add the reverse of the number to the number)
     :    #     and duplicate the tos so that the while loop condition has a value to work on.
</code></pre>
"
"233499","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɽ›ṅSs1p
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BD%E2%80%BA%E1%B9%85Ss1p&amp;inputs=12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɽ›      # 2...n
  ṅS    # Join
    s   # Sort
     1p # Prepend a 1
</code></pre>
"
"233500","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λfge;Ẋ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BBfge%3B%E1%BA%8A&amp;inputs=9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>λ   ;Ẋ # While result changes...
 f     # Convert to digitlist
  g    # Take minimum
   e   # Number to power of that
</code></pre>
"
"233501","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>C:½›₃[√⌈₂ßṘ⁋|₃ßṘ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C%3A%C2%BD%E2%80%BA%E2%82%83%5B%E2%88%9A%E2%8C%88%E2%82%82%C3%9F%E1%B9%98%E2%81%8B%7C%E2%82%83%C3%9F%E1%B9%98&amp;inputs=%3E%0AHello&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>C:               # Get charcode, dupe for later use
  ½›₃[           # If C/2 + 1 %  3 == 0 (`^v`)...
      √⌈₂        # Is ceil(√C) is even?
         ßṘ      # If so, reverse
           ⁋     # Join by newlines
            |    # Else...
             ₃   # Is C divisible by 3?
              ßṘ # If so, reverse
</code></pre>
"
"233502","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>(ðpǏ3lƛC÷∇꘍⋎:₇⇩&gt;[32];C∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%28%C3%B0p%C7%8F3l%C6%9BC%C3%B7%E2%88%87%EA%98%8D%E2%8B%8E%3A%E2%82%87%E2%87%A9%3E%5B32%5D%3BC%E2%88%91&amp;inputs=1%0AHello%2C%20world!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>(                       # N times..
 ðpǏ                    # Enclose in spaces
    3l                  # Get overlapping substrings of length 3
      ƛ             ;   # Map...
       C÷               # Iterate out charcodes
         ∇꘍⋎            # XOROR
            :₇⇩&gt;[  ]    # If greater than 126  
                 32     # Push 32
                     C∑ # Stringify and concatenate
</code></pre>
"
"233514","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>yRY
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=yRY&amp;inputs=%5B%27abc%27%2C%27def%27%2C%27ghi%27%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Look ma, no Unicode!</p>
<pre><code>y   # Uninterleave
 R  # Vectorised reverse
  Y # Interleave
</code></pre>
"
"233549","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>Ṙ∆Ŀ?Ḃġ/
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%E2%88%86%C4%BF%3F%E1%B8%82%C4%A1%2F&amp;inputs=17&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Ṙ       # Reverse
 ∆Ŀ     # LCM with that
   ?    # Take input
    Ḃ   # Dupe-reverse
     ġ  # GCD
      / # Quoitent
</code></pre>
<p>Would be <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%98%E2%82%8C%E2%88%86%C4%BF%C4%A1%2F&amp;inputs=17&amp;header=&amp;footer="" rel=""nofollow noreferrer"">5 bytes</a> if parallel apply worked with digraphs.</p>
"
"233550","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 27 bytes</h1>
<pre><code>ṫ$:[`λ¬ `pJ:Ḣ₃[÷ð$Ṡ|‛, j]|_
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%AB%24%3A%5B%60%CE%BB%C2%AC%20%60pJ%3A%E1%B8%A2%E2%82%83%5B%C3%B7%C3%B0%24%E1%B9%A0%7C%E2%80%9B%2C%20j%5D%7C_&amp;inputs=%5B1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṫ                           # Tail extract (x[:-1], x[-1] )
 $:[                        # If length &gt; 1
    `λ¬ `p                  # Prepend a 'and '
          J                 # Merge
           :Ḣ₃[             # If length = 2
               ÷ð$Ṡ         # Add in a space and join
                   |    ]   # Else...
                    ‛, j    # Join by ', '
                         |_ # Else pop
</code></pre>
"
"233551","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>`NBM`KṘ(n/₅‹n+¨…_∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60NBM%60K%E1%B9%98%28n%2F%E2%82%85%E2%80%B9n%2B%C2%A8%E2%80%A6_%E2%88%91&amp;inputs=NBMN&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`NBM`              # 'NBM'
     K             # Substrings
      Ṙ(           # Iterate over
        n/         # Split current string by current substring of NBM
          ₅‹       # Duplicate and decrement length
            np¨…_  # Prepend current substring of NBM and output with a trailing space
                 ∑ # Concatenate for next iteration
</code></pre>
"
"233619","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 39 bytes</h1>
<pre><code>ƛ£k•ƛ¥v=;:vaThD£ɾ0p∑4/∇iTh+¥&quot;;÷∆d19.05*
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C2%A3k%E2%80%A2%C6%9B%C2%A5v%3D%3B%3AvaThD%C2%A3%C9%BE0p%E2%88%914%2F%E2%88%87iTh%2B%C2%A5%22%3B%C3%B7%E2%88%86d19.05*&amp;inputs=%27qb%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a> -2 thanks to pxeger. +2 because of a bug</p>
<p>Ugh, what a mess.</p>
<p>Vyxal has several bugs right now, so the find command isn't working, among other things.</p>
<p>Takes a two-char string of lowercase letters.</p>
<pre><code>ƛ                          ;            # Map...
 £                                      # Store to register
  k•ƛ   ;                               # Map rows of qwerty keyboard to...
     ¥v=                                # Is equal to register (current value)
         :                              # Duplicate this
          va                            # Foreach, check if any are true
            Th                          # Find the only truthy index - this is the correct keyboard row
              D£                        # Duplicate and store a copy to register 
                ɾ0p∑4/                  # Horizontal offset of this row - nth triangle number/4 (There's probably a better way to do this, `0p` because Vyxal)
                      ∇                 # Shift, putting a copy of the  row number above the list of indices on the stack
                       i                # Index this into the list of indices
                        Th+             # Find the index of the key and add to previously calculated horizontal offset
                           ¥&quot;           # Pair with vertical offset
                              ÷         # Iterate onto the stack
                               ∆d       # Pythagoras' Theorem
                                 19.05  # Multiply by 19.05
</code></pre>
"
"233661","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>÷^!‹(…∇+
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B7%5E!%E2%80%B9%28%E2%80%A6%E2%88%87%2B&amp;inputs=%5B1%2C%20-1%2C%201%2C%20-1%2C%201%2C%20-1%2C%201%2C%20-1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Woo using a stack based language to solve a stack based problem. Outputs each item on a newline. <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B7%5E!%E2%80%B9%28%3A%E2%85%9B%E2%88%87%2B%29%C2%BE&amp;inputs=%5B1%2C%202%2C%203%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">11 bytes to output as list</a>: <code>÷^!‹(:⅛∇+)¾</code></p>
<p>Also, look ma, no letters (and flags)! Funnily enough, I don't think there's any flag combination that would get this under 8 bytes.</p>
<h2>Explained</h2>
<pre><code>÷^!‹(…∇+
÷        # Push every item of the input onto the stack
 ^       # and reverse the stack to make the list indicative of the stack (Ṙ÷ achieves the same thing, but we're going 100% symbolic)
  !‹     # Push len(stack) - 1
    (    # and that many times:
     …   #    print the top of the stack without popping
      ∇  #    perform rot. Fun fact: I added rot to vyxal after seeing forth/factor as LoTM
       + #    add the top two items
</code></pre>
"
"233757","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>17SǏ⌊0»¹∇ḃF2»*»∷J∇Y.ḊṖ¼ḭ¦]uy»S4ẇṫ½Y⌊$oḢJCṅĖǐ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=17S%C7%8F%E2%8C%8A0%C2%BB%C2%B9%E2%88%87%E1%B8%83F2%C2%BB*%C2%BB%E2%88%B7J%E2%88%87Y.%E1%B8%8A%E1%B9%96%C2%BC%E1%B8%AD%C2%A6%5Duy%C2%BBS4%E1%BA%87%E1%B9%AB%C2%BDY%E2%8C%8A%24o%E1%B8%A2JC%E1%B9%85%C4%96%C7%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"233762","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes</h1>
<pre><code>hkdc¬:[kr\_+?F¬?h\_=ß½
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=hkdc%C2%AC%3A%5Bkr%5C_%2B%3FF%C2%AC%3Fh%5C_%3D%C3%9F%C2%BD&amp;inputs=_test_&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess.</p>
"
"233787","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>K~/Z's⁼
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%7E%2FZ%27s%E2%81%BC&amp;inputs=4096&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>(not anymore) messy.</p>
"
"233793","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>{|n÷£$•⌈(¥†⅛)¾nhβ:nṪt&gt;nh(¼_)}
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%7Cn%C3%B7%C2%A3%24%E2%80%A2%E2%8C%88%28%C2%A5%E2%80%A0%E2%85%9B%29%C2%BEnh%CE%B2%3An%E1%B9%AAt%3Enh%28%C2%BC_%29%7D&amp;inputs=&amp;header=%CE%BB1%7C&amp;footer=%3B%E2%86%92f%20%E2%9F%A85%7C12%7C%CE%BB0%7C5%CA%81%E2%84%85%3B%E2%9F%A9%20%E2%86%90f%20%0A"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is a whole bunch of yucky stuff that is lowkey disturbing. I really need to make functions nicer to deal with in the rewrite.</p>
<p>A lambda submission, that takes a single argument, <code>[n, m, f]</code>.</p>
<h2>Explained</h2>
<pre><code>{|n÷£$•⌈(¥†⅛)¾nhβ:nṪt&gt;nh(¼_)}
{|                             # while the top of the lambda stack is truthy:
  n÷                           #   push all the contents of the input onto the stack
    £                          #   and place &quot;f&quot; into the register.
     $•⌈                       #   push ceil(log_n(m))
        (¥†⅛)                  #   and that many times, push the result of f() onto the global array
             ¾                 #   push the global array, containing ceil(log_n(m)) numbers
              nhβ              #   and convert from base n
                 :nṪt&gt;         #   push ^ &gt; m
                      nh(¼_)   #   and clear the global array
                            }  # close the while loop (we need this because lambda submission)
</code></pre>
"
"233800","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>sf₅ɾ⁼
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=sf%E2%82%85%C9%BE%E2%81%BC&amp;inputs=%5B%5B3%2C4%5D%2C%5B1%2C2%5D%2C%5B5%2C6%5D%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>s     # Sort
 f    # Flatten
  ₅ɾ  # 1...a.length
    ⁼ # Is equal?
</code></pre>
"
"233850","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ẏƛ?k∨v↔T-ȧg
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%BA%8F%C6%9B%3Fk%E2%88%A8v%E2%86%94T-%C8%A7g&amp;inputs=asrajg&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Independently rediscovered Jonathan Allan's method.</p>
<pre><code>ẏ           # Range 0...a.length - 1
 ƛ          # Map...
     v↔     # Listifiy and remove characters not in...
   k∨       # Vowels
  ?         # From input
       T    # Truthy indices (indices of vowels in input)
        -   # Subtract (distances)
         ȧ  # Absolute value these (absolute distances)
          g # Minimum of these (closest value)
</code></pre>
"
"233903","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>λkḂ2ẇk&lt;J(no);Ẋ¬
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BBk%E1%B8%822%E1%BA%87k%3CJ%28no%29%3B%E1%BA%8A%C2%AC&amp;inputs=%28%29%5B%5D%5B%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>λ           ;Ẋ  # While result changes
        (  )    # For each of
 kḂ2ẇk&lt;J        # Pairs of brackets
         no     # Remove it
              ¬ # If something remains, it's unbalanced.
</code></pre>
"
"233918","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 25 bytes, score 46368</h1>
<pre><code>LṄvṖ⁽JḭUƛvɾ:?f$•;'ƛḂ≠;A;L
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=L%E1%B9%84v%E1%B9%96%E2%81%BDJ%E1%B8%ADU%C6%9Bv%C9%BE%3A%3Ff%24%E2%80%A2%3B%27%C6%9B%E1%B8%82%E2%89%A0%3BA%3BL&amp;inputs=abaaba&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-3 thanks to Aaron Miller.</p>
<p>A big mess. Part of the code <a href=""https://codegolf.stackexchange.com/a/233186/100664"">shamelessly stolen from Lyxal</a>.</p>
<pre><code>L                         # Length
 ṄvṖ                      # All permutations of partitions
    ⁽Jḭ                   # Flatten by 1 level
       U                  # Uniquify
        ƛ       ;         # Foreach
         vɾ:?f$•          # Mold input to those pieces (see above link)
                 '     ;L # Number of values where
                  ƛḂ≠;A   # All aren't palindromes. 
</code></pre>
"
"233954","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>∞'£ɾ3ḋ'Ǔ*∑¥=;ḃ;?i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%9E%27%C2%A3%C9%BE3%E1%B8%8B%27%C7%93*%E2%88%91%C2%A5%3D%3B%E1%B8%83%3B%3Fi&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Warning: This will <em>not work</em> for n ≥ 7. It's just too slow.</p>
<pre><code>∞'            ;?i # Get the nth number where...
             ḃ    # None of
   ɾ3ḋ'     ;     # The ways you can choose 3 numbers less than n
       Ǔ*∑        # Have ab+ac+bc...
  £       ¥=      # Equal n
</code></pre>
"
"235035","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10.5! bytes</h1>
<pre><code>`ƛ⁋Ṗ⊍ Crꜝ∞ ƛ€!`kh\!+←
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%C6%9B%E2%81%8B%E1%B9%96%E2%8A%8D%20Cr%EA%9C%9D%E2%88%9E%20%C6%9B%E2%82%AC!%60kh%5C!%2B%E2%86%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`...`        # Push 'Goodbye Cruel World!' as a compressed string
     kh\!+,  # Push 'Hello World!', which will be implicitly output even though the program errors.      
           ← # Crash by accessing a nonexistent variable, Vyxal logs the stack on erroring
</code></pre>
"
"235039","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ṗ'∑₀=;vLg
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%97%27%E2%88%91%E2%82%80%3D%3BvLg&amp;inputs=%5B1%2C5%2C7%2C3%2C7%2C3%2C6%2C3%2C2%2C6%2C3%5D%0A10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṗ         # Powerset
 '   ;    # Filtered by
  ∑₀=     # Sublists that sum to input
      vL  # Get length of each
        g # Minimum
</code></pre>
"
"235096","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>K'∆²;t₍/√
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%27%E2%88%86%C2%B2%3Bt%E2%82%8D%E2%88%9A%2F&amp;inputs=50&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very cool and good. Outputs as <code>[constant, surd]</code></p>
<h2>Explained</h2>
<pre><code>K'∆²;t₍√/
K        # from the factors of the input, 
 '∆²;    # keep only square numbers
     t   # and keep the last.
      ₍√/ # Push [sqrt(^), input / ^]
</code></pre>
"
"235112","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>0p\:€⌊Z÷÷:£≥J∑24%¥&quot;
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=0p%5C%3A%E2%82%AC%E2%8C%8AZ%C3%B7%C3%B7%3A%C2%A3%E2%89%A5J%E2%88%9124%25%C2%A5%22&amp;inputs=%601%2Bxx%3A15%60%0A%E2%9F%A812%7C30%E2%9F%A9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235121","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>«¬`«Ė
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%AB%C2%AC%60%C2%AB%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>«¬`«  # (not at all) compressed string 'kr' (constant for alphanumeric values)
    Ė # Evaluate
</code></pre>
"
"235162","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<p>The try it link has the <code>5</code> flag to prevent it from freezing up forever.</p>
<pre><code>{\A₴
</code></pre>
<h2>Explanation</h2>
<pre><code>{    - While loop
 \A  - Push &quot;A&quot;
   ₴ - Print without newline
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=5&amp;code=%7B%5CA%E2%82%B4&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235164","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<p>No flags used.</p>
<pre><code>9 99J₴9
</code></pre>
<h2>Explanation</h2>
<pre><code>9        - Push 9
  99     - Push 99
    J₴   - Concatenate and print
      9  - Pushes another 9, but it never gets used.
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=9%2099J%E2%82%B49&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235200","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>bṘ8ẇṘRvBC
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=s&amp;code=b%E1%B9%988%E1%BA%87%E1%B9%98RvBC&amp;inputs=469569899237030134113125&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-6 thanks to @emanresuA</em></p>
<p>Well frick. I got played.</p>
"
"235201","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>₈τC
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=s&amp;code=%E2%82%88%CF%84C&amp;inputs=0x636f6f6c2c206e696365&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code> τ  # Convert to base...
₈   # 256
  C # Get charcodes
</code></pre>
"
"235231","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 49 bytes</h1>
<pre><code>`⌊ẇ ₃¼ Roos≠∴ •∞ Ḣ⟩ ₀⌊ Ox ṗȦ ₈Ė ėɾ Ċṅ ½√`⌈kD⌊12%i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%E2%8C%8A%E1%BA%87%20%E2%82%83%C2%BC%20Roos%E2%89%A0%E2%88%B4%20%E2%80%A2%E2%88%9E%20%E1%B8%A2%E2%9F%A9%20%E2%82%80%E2%8C%8A%20Ox%20%E1%B9%97%C8%A6%20%E2%82%88%C4%96%20%C4%97%C9%BE%20%C4%8A%E1%B9%85%20%C2%BD%E2%88%9A%60%E2%8C%88kD%E2%8C%8A12%25i&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`...`         # Compressed  string of names
     ⌈        # Split on spaces
      kD⌊     # Current year
         12%  # Modulo 12
            i # Index into list of names
</code></pre>
"
"235237","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>¦
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A6&amp;inputs=Among%20Us&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>But that's boring, so here's something a bit more interesting:</p>
<h2>6 bytes</h2>
<pre><code>żƛw?$i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C5%BC%C6%9Bw%3F%24i&amp;inputs=Among%20Us&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>żƛw?$i  
        # Implicit input of string
żƛ      # Over each integer n in range(1, len(input) + 1):
   ?    #   input[
  w $i  #         :n] (python indexing)
        # Implicitly print the result of the above.
</code></pre>
"
"235266","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>UṖƛ∑⁰$c;A
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=U%E1%B9%96%C6%9B%E2%88%91%E2%81%B0%24c%3BA&amp;inputs=%27123121321%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess.</p>
"
"235285","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>λ₌+*5/-;dR
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BB%E2%82%8C%2B*5%2F-%3BdR&amp;inputs=%5B5%2C1%2C1%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>port of 05AB1E answer’s formula</p>
<p>and also, wholesomely rekted by lyxal with 5 bytes saved</p>
"
"235293","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>{
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235318","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>4</strike> 2 bytes</h1>
<pre><code>2•
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=2%E2%80%A2&amp;inputs=Double%20speak!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Removed implicit input and output. Thanks @emanresu A</p>
<p>Doesn't beat <code>Y</code> but works nonetheless.</p>
"
"235326","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>`\d!+`1øṙ\!\¬VṘĖ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%5Cd!%2B%601%C3%B8%E1%B9%99%5C!%5C%C2%ACV%E1%B9%98%C4%96&amp;inputs=!!0&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>We do a little regex.</p>
<h2>Explained</h2>
<pre class=""lang-js prettyprint-override""><code>`\d!+`1øṙ\!\¬VṘĖ
`\d!+`            # The string &quot;\\d!+&quot; ( a regex that matches the digit followed by !)
      1øṙ         # and replace it with &quot;1&quot; (because 0! = 1! = 1)
         \!\¬V    # replace any remaining &quot;!&quot; with &quot;¬&quot; (not)
              ṘĖ  # then reverse and evaluate
</code></pre>
"
"235335","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>b›3β
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=b%E2%80%BA3%CE%B2&amp;inputs=9&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>b    # Binary
 ›   # Increment
  3β # From base 3
</code></pre>
"
"235357","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>4kA*s⁋
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=4kA*s%E2%81%8B&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>4      - Literal
 kA    - Uppercase alphabet
   *   - Multiplication
    s  - Sort
     ⁋ - Join by newlines
</code></pre>
"
"235404","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>`:qpq`:qpq
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aqpq%60%3Aqpq&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>V</code></h1>
<pre><code>`\`:qpq\`:qpq`
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=V&amp;code=%60%5C%60%3Aqpq%5C%60%3Aqpq%60&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The <code>V</code> flag does nothing, the first is a quine that unevaluates itself, and the second is a string.</p>
<p>Or...</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>DrV</code>, 16 bytes</h1>
<pre><code>`q\`:Ė\`p1→ip`:Ė
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=DrV&amp;code=%60q%5C%60%3A%C4%96%5C%60p1%E2%86%92ip%60%3A%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>Dr</code></h1>
<pre><code>0`q\`:Ė\`p1→ip`:Ė
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=Dr&amp;code=0%60q%5C%60%3A%C4%96%5C%60p1%E2%86%92ip%60%3A%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The 0 at the start is a NOP - Vyxal pads the stack with 0s anyway, so the two programs are functionally identical.</p>
<pre><code>`q\`:Ė\`p    `:Ė # Standard eval quine
         1→ip    # If `V` (single-char variable names) is off, this stores 1 to the variable ip.
                 # If it's on, this stores 1 to the variable i and prepends a 0 to the current program.
</code></pre>
"
"235409","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>`:qpq`:qpq
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%3Aqpq%60%3Aqpq&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This outputs</p>
<pre><code>`\`:qpq\`:qpq`
</code></pre>
<p>Which outputs the original code.</p>
<p>The first is a quine that unevaluates itself, and the second is a string.</p>
"
"235495","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ÞTvsÞT
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%9ETvs%C3%9ET&amp;inputs=%5B%5B1%2C0%2C1%2C1%2C0%2C1%2C0%5D%2C%5B0%2C0%2C0%2C1%2C0%2C0%2C0%5D%2C%5B1%2C0%2C1%2C1%2C1%2C1%2C1%5D%2C%5B0%2C1%2C1%2C0%2C1%2C1%2C0%5D%2C%5B1%2C1%2C0%2C1%2C0%2C0%2C1%5D%5D&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>There's probably something cleverer / shorter.</p>
<pre><code>ÞT     # Transpose
  vs   # Sort each
    ÞT # Transpose
</code></pre>
"
"235515","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>Cṅb₅∷[0J]B`ACGT`τ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C%E1%B9%85b%E2%82%85%E2%88%B7%5B0J%5DB%60ACGT%60%CF%84&amp;inputs=%7D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess.</p>
<pre><code>C                 # Charcodes
 ṅ                # Concatenated
  b               # To binary
   ₅∷[  ]         # If length is odd
      0J          # Append a 0
         B        # To base10
          `ACGT`τ # Convert to custom base `ACGT` (convert to base4, replace 0-3 with corresponding item of &quot;ACGT&quot;)
</code></pre>
"
"235516","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆²
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%86%C2%B2&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builtin.</p>
"
"235517","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ʀƛʀƈs;f$i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CA%80%C6%9B%CA%80%C6%88s%3Bf%24i&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No efficiency at all. 0-indexed.</p>
<pre><code>ʀ         # 0...n
 ƛ   ;    # Mapped to...
  ʀ       # 0...n
   ƈ      # Binomial coefficient with n, vectorised
    s     # Sort these
      f   # Flatten
       $i # Index input into this.
</code></pre>
"
"235570","<h1>9 langs, score 7.090470.</h1>
<h2><a href=""https://esolangs.org/wiki/Deadfish%7E"" rel=""noreferrer"">Deadfish~</a>, 10000001377 bytes</h2>
<pre><code>{{i}}iic{i}dciiic{{d}iii}ddddc{iiiiii}iiiiic{dddd}ddddc{d}dddc{i}ic{iiii}iiiiiic{dddd}dddddc{d}dcdcc{i}ic{iiii}iiiiiic{dddddd}ddccddcdc{iiiiii}dc{dddd}iic{iiii}ddc{i}iicdciiiiicddddcdddc{d}iiic{ddddd}dddddc{iiiiii}iiciiic{d}iic{dddddd}ddcdcdcddddc{iiiiii}iiiic{i}iicddcc{d}iic{i}dciiiiiic{{d}ii}iiiciic{ii}ddc{iiii}c{dddddd}icdc{iiiii}iic{ii}iciic{d}iciiiiiciiiiiic{{d}iii}ddddddcddddddcic{iiiiii}iiiic{i}iicddcc{d}iic{i}dciiiiiic{{d}ii}ddc{i}dddc{d}ic{{i}ddd}c{i}dciiic{{d}ii}ddc{{i}ddd}iiic{{d}iii}dddc{{i}ddd}iiiciiiiic{{d}ii}iic{{i}dd}iic{dd}iiic{i}iiic{d}iiicddc{dddddd}dc{i}dcdccc{d}iiic{iiiii}iic{ddd}ddddc{ddd}iiic{{i}dd}ciic{d}iciiiiiciiiiiic{{d}iii}ddddddcddddddc{iiiiii}iic{ddddd}icdddddc{iiiii}iiiic{ddddd}ddc{iiiiii}iiic{dddddd}iic{d}ic{iiiii}iiiiiic{ii}iiiic{dd}ddddc{i}ic{dddddd}iic{d}iiiciicdddc{iiiii}iiiiic{ddddd}ddddciiiiic{iiiii}dc{ddddd}ddc{iiiii}iic{dddddd}dc{{i}ddd}ciiiiic{d}dc{i}dc{i}dc{dd}iiicic{{d}iii}ic{iii}ddc{iiiii}iiiiicic{d}ddddddciiiiiciiiiiic{dddddd}dddddc{iiiiii}ddc{dddd}ddc{iii}iiiic{ddddd}ddc{iiiii}iic{i}dciiiiiciiiiiic{{d}ii}ddddc{{i}dd}dddc{d}ddc{i}ddciiiiic{{d}iii}cic{{i}dd}iic{d}dciiiiicdcdc{{d}iii}dddddc{iiiii}iicc{dddddd}iic{{i}dd}ddciiiiicdcdc{{d}ii}dddciiiiic{{i}ddd}iiiiiic{dd}ddc{ddddd}iic{iiiii}ddc{ddddd}iiciiic{iiiii}dddccdcc{dddddd}iic{i}dddc{ii}ddc{iiiiii}iiiiiic{ddd}ic{ddddd}ddc{d}c{i}dddcddciiciiiiiicc{iii}iiiicccccc
</code></pre>
<p><a href=""https://deadfish.surge.sh/#WlZFjXu+9z/Nz7Dd14+q3AeDdVfVbr6tz24PA3VX1Vuvtbc9uDwN1VX1tWtwH26q83B9bnmsDVWq3XjdVX1VuA8w3Xm6qr61rVW4Dw3PNW3Xm59gN3XnjG4+twfuqq9rcDzcexuvYGA3dePqq1VWbgPDc81bdebn2A3defW59W69u59X7n2G7rz63c+rxu68fVu59XjA3deebufXm6vG543XjVuqq+3PtbbrxuB5uq+q3VeN3Pr8br2BgN3Xj6qtVVuA83VV7VVuB4bqq+twHjdVV5uvbgeBuPDdX1W57dVV5uvGNVuB4N1VfVYG4H26qvrcDzdVV9u59X4G6+3Ptz7dXjN3Xj24fW4HgzdfVVgYDdVV9VbgPrdVfW4eG6qvrcDzc+wMBu68+q3c+vq3X1ufWBu68fm7n15uvsDWt3Xj6q3A826qrzdz6+sDWt3Xn1YG7n1eBur63VV5uB9bqq8w3A+ra26qrzc+rcfW4DwN1Xt1VfW6/c+rVjAbcPDbbYA="" rel=""noreferrer"">Try it online!</a></p>

<p>With <span class=""math-container"">\$10^{10}\$</span> <code>h</code> at the end.</p>
<h2><a href=""https://esolangs.org/wiki/HQ9%2B"" rel=""noreferrer"">HQ9+</a>, 192 bytes</h2>
<pre><code>for(i=0;i&lt;100;i++)(c=console.log)('#comment');c('[print(&quot;#comment&quot;) for i in range(1000)]; print(&quot;`/*`,k1(`x`k1*,)`*/`,`#include &lt;stdio.h&gt;`,`int main(){puts(\\&quot;puts %q[+[+.]]\\&quot;);}`,&quot;)')//QQQQQQ
</code></pre>
<p><a href=""https://dso.surge.sh/#hq9+"" rel=""noreferrer"">Try it online!</a> (code will need to be pasted in)</p>
<p>Note: Extraneous content has been simplified in the below snippets, and removed from the TIOs - if you add it back it'll work fine.</p>
<h2><a href=""https://nodejs.org"" rel=""noreferrer"">JavaScript (Node.js)</a>, 1164 bytes</h2>

<pre class=""lang-javascript prettyprint-override""><code>for(i=0;i&lt;100;i++)(c=console.log)('#comment');c('[print(&quot;#comment&quot;) for i in range(1000)]; print(&quot;`/*`,k1(`x`k1*,)`*/`,`#include &lt;stdio.h&gt;`,`int main(){puts(\\&quot;puts %q[+[+.]]\\&quot;);}`,&quot;)')//QQQQQQ
</code></pre>
<p>Repeated 6 times.</p>
<p><a href=""https://tio.run/##NYzbDoIwEER/pYEYdgG5PBf8B5@BpKRUXYEWoRgT47djNToPM8nJyVzbe7vImSa716ZT23YyM1CZcSryzHUUIchSGr2YQSWDOSMEvjTjqLQNkEsIqmkmbcH7Uw@Z@2DESLO51WcF7ijDhrOfKNJQxH0O4iH6PIxRhKmIhU9aDmunWLHYjkxyOTjofDa2pAGf02oXqGvvs2x3q6IqSprGAeQvEXsYYJoev9m2Nw"" rel=""noreferrer"" title=""JavaScript (Node.js) – Try It Online"">Try it online!</a></p>
<h2><a href=""https://docs.python.org/3/"" rel=""noreferrer"">Python 3</a>, 1033 bytes</h2>

<pre class=""lang-python prettyprint-override""><code>#comment 
[print(&quot;#comment&quot;) for i in range(1000)]; print(&quot;`/*`,k1(`x`k1*,)`*/`,`#include &lt;stdio.h&gt;`,`int main(){puts(\&quot;puts %q[+[+.]]\&quot;);}`,&quot;)
</code></pre>
<p><a href=""https://tio.run/##LcrtCoIwFIDhWzlMgm0OP@in0o3o4IhaDtvZmhOK6NqXQb9eeHn8Ky6Ozil1PhiKnGWjs3amyARcXQADhiAMdJt5XVWV0A38IZYS1VpzfOJaSyVQlqgwMzTe92mGdouTccVyOebhwQ6GuHj7PW68Z7/A6dHlXV5o3TPRfFAxkdIX"" rel=""noreferrer"" title=""Python 3 – Try It Online"">Try it online!</a></p>
<p>The <code>#comment</code> is repeated 100 times.</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9081 bytes</h2>
<pre class=""lang-python prettyprint-override""><code>#comment
`/*`,k1(`x`k1*,)`*/`,`#include &lt;stdio.h&gt;`,`int main(){puts(&quot;puts %q[+[+.]]&quot;);}`,
</code></pre>
<p>The <code>#comment</code> is repeated 1000 times.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%2F*%60%2Ck1%28%60x%60k1*%2C%29%60*%2F%60%2C%60%23include%20%3Cstdio.h%3E%60%2C%60int%20main%28%29%7Bputs%28%22puts%20%25q%5B%2B%5B%2B.%5D%5D%22%29%3B%7D%60%2C&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<h2><a href=""https://gcc.gnu.org/"" rel=""noreferrer"">C (gcc)</a>, 914699 bytes</h2>

<pre class=""lang-c prettyprint-override""><code>/*x*/
#include &lt;stdio.h&gt;
int main(){puts(&quot;puts %q[+[+.]]&quot;);}
</code></pre>
<p><a href=""https://tio.run/##S9ZNT07@/185My85pzQlVcGmuCQlM18vw44rM69EITcxM09Ds7qgtKRYQwlEKqgWRmtHa@vFxippWtf@/w8A"" rel=""noreferrer"" title=""C (gcc) – Try It Online"">Try it online!</a></p>
<p>The <code>x</code> is actually 1000 newline-separated copies of 1000 more <code>x</code>.</p>
<h2><a href=""https://www.ruby-lang.org/"" rel=""noreferrer"">Ruby</a>, 14 bytes</h2>

<pre class=""lang-ruby prettyprint-override""><code>puts %q[+[+.]]
</code></pre>
<p><a href=""https://tio.run/##KypNqvz/v6C0pFhBtTBaO1pbLzb2/38A"" rel=""noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<h2><a href=""https://github.com/TryItOnline/brainfuck"" rel=""noreferrer"">brainfuck</a>, 5 bytes</h2>
<pre class=""lang-ruby prettyprint-override""><code>+[+.]
</code></pre>
<p><a href=""https://tio.run/##SypKzMxLK03O/v9fO1pbL/b/fwA"" rel=""noreferrer"" title=""brainfuck – Try It Online"">Try it online!</a></p>
<h2><a href=""https://php.net/"" rel=""noreferrer"">PHP</a>, 382 bytes</h2>

<pre class=""lang-php prettyprint-override""><code>&#2;&#3;&#4;&#5;&#6;&#7;&#8;&#9;
&#11;&#12;
&#14;&#15;&#16;&#17;&#18;&#19;&#20;&#21;&#22;&#23;&#24;&#25;&#26;&#27;&#28;&#29;&#30;&#31; !""#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~&#127;&#128;&#129;&#130;&#131;&#132;&#133;&#134;&#135;&#136;&#137;&#138;&#139;&#140;&#141;&#142;&#143;&#144;&#145;&#146;&#147;&#148;&#149;&#150;&#151;&#152;&#153;&#154;&#155;&#156;&#157;&#158;&#159; ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ
</code></pre>
<p><a href=""https://tio.run/##BcGJNxMAAAdgT6WSp6LDleTsoCRnSIdUChWVlEqO0GGlkNvM7osdZhg2ZuZmmLne@/3@sPk@Qb3A6/U9cvSY3/ETJ/1PBfgHnj5zNij43PkLF0NCw8IjLkVejroSHRMbF59w9dr1G4lJN28l3065k5qWnpGZdTc7J/de3v0HDx/lPy548vRZ4fMXRcUlL1@9Li178/Zd@fuKDx8rP33@UvW1uqa27lt9Q@P3Hz9/NQl@/2n@@6@lte1/e0dnV3cPetEHIfohwgDEkEAKGeRQQAkV1NBAi0EMQQc9DDBiGCaMwIxRjGEcFkxEYQpW2DCNGdgxCwfm4MQ8FrCIJSxjBatYwzpc2MAmtuDGNjzYwS72sI8D9rKPQvZTxAGKKaGUMsqpoJIqqqmhloMcoo56GmjkME0coZmjHOM4LZzgJKdopY3TnKGds3Rwjk7Oc4GLXOIyV7jKNa7TxQ1ucotubtPDHe5yj/s88PF6DwE"" rel=""noreferrer"" title=""PHP – Try It Online"">Try it online!</a></p>
<p><s>No idea what my score is.</s> Thanks to @ovs for calculating my score.</p>
"
"235633","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ɾṘ3(vɾf)Ṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%E1%B9%983%28v%C9%BEf%29%E1%B9%98&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235658","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>K'2lv∑⁰vca¬;tL
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%272lv%E2%88%91%E2%81%B0vca%C2%AC%3BtL&amp;inputs=hello%0Agolodbye&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A bit messy.</p>
<pre><code>K              # Substrings
 '         ;   # Filtered by...
         a¬    # None of...
  2lv∑         # Substrings of length 2
       vc      # Are contained in...
      ⁰        # The second input
            t  # Get the last (and longest) element
             L # Get its length
</code></pre>
"
"235662","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ƛɾƈ;f?O
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%C9%BE%C6%88%3Bf%3FO&amp;inputs=6&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Basically, just generate Pascal's triangle (sans the first row of just <code>1</code>) and get the count. Flagless just for Redwolf. </p>
<h2>Explained</h2>
<pre><code>ƛɾƈ;f?O
ƛ  ;     # for each n in the range [1, input]:
 ɾƈ      #   n c x for x in range [1, n] - ʀƈ also works if you want the full row for some reason.
    f    # flatten that
     ?O  # and get the count of the input in that
</code></pre>
"
"235679","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>:⇧+kL$Ŀ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%3A%E2%87%A7%2BkL%24%C4%BF&amp;inputs=hnvwyajzpuetroifqkxmblgcsd%0AHello%2C%20World!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>:⇧+kL$Ŀ
:⇧+      # append the uppercase version of the input to the input
   kL    # push a-zA-Z
     $   # swap those
      Ŀ  # and transĿiterate the message
</code></pre>
"
"235740","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>30</s> 20 bytes</h1>
<pre><code>$(n[¥↳£¹|‹]:×*¹↳¥ßṘ,
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%24%28n%5B%C2%A5%E2%86%B3%C2%A3%C2%B9%7C%E2%80%B9%5D%3A%C3%97*%C2%B9%E2%86%B3%C2%A5%C3%9F%E1%B9%98%2C&amp;inputs=5%0A%5B0%2C%200%2C%200%2C%201%2C%200%2C%200%2C%200%2C%201%2C%200%2C%200%2C%200%2C%200%2C%200%2C%201%2C%200%2C%201%2C%200%2C%200%2C%200%2C%200%2C%200%2C%201%2C%200%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It's slightly satisfying using two different overloads of the same element.</p>
<pre><code>$(                   # Iterating over the list of instructions
  n[                 # If it's truthy (refill)
    ¥↳               # Bitshift the current value by the register
                     # Iff the register is 0, and the current value is 1, the result is truthy.
      £              # Store this to the register
       ¹             # Refill, pushing original input
        |‹]          # Otherwise decrement (take a pill)
           :         # Duplicate
            ×*       # Get that many asterisks
              ¹↳     # Align
                ¥ßṘ  # If the register is truthy (we're taking pills from the left) reverse
                   , # Print.
</code></pre>
<p>Older version, where I was  a big brain and tried to store the whole box:</p>
<pre><code>1£ƛ1;?(n[:T¥ßṘt0Ȧ|:a¬¥¬∨£ƛ1;]…
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=1%C2%A3%C6%9B1%3B%3F%28n%5B%3AT%C2%A5%C3%9F%E1%B9%98t0%C8%A6%7C%3Aa%C2%AC%C2%A5%C2%AC%E2%88%A8%C2%A3%C6%9B1%3B%5D%E2%80%A6&amp;inputs=5%0A%5B1%2C%201%2C%201%2C%200%2C%201%2C%201%2C%201%2C%200%2C%201%2C%201%2C%201%2C%201%2C%201%2C%200%2C%201%2C%200%2C%201%2C%201%2C%201%2C%201%2C%201%2C%200%2C%201%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>1£                             # Store 1 to register (direction)
  ƛ1;                          # Array of length n, filled with 1
     ?(n                       # For each item in the list of refills...
        [                      # If it's truthy (Take pill)
         :T                    # Get the truthy indices
           ¥ßṘ                 # Reverse if direction is left
              t                # Get the last one (first empty pos if left, last if right0)
               0Ȧ              # Assign 0 to this index
                 |          ]  # Else (Refill)
                        £      # Set the register (direction) to...
                  :a¬          # Whether the current array is all falsy
                       ∨       # Logical or with...
                     ¥¬        # The opposite current value of the register
                               # If any values are truthy, the register (direction) flips
                               # Otherwise, it becomes 1 (left)

                         ƛ1;   # Refill (fill with 1s)
                             … # Whichever action we took, print the current array
</code></pre>
"
"235756","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 159, <a href=""https://codegolf.stackexchange.com/a/235769/101522"">cracked by Aaron</a></h1>
<pre><code>,₴…‹›⟇+*/-d↵EǍ½ƒɖ1234567890ø∆e₈₇∞₆₄JpiẎȯhtḢṪḣṫ¡Þ₀₁C!¬⇧İN⇩Ż÷«»`;¥£¾¼⅛%→←&quot;ẋ¤ȦFȧ⌐m⊍g≬\ṡ∷‡⁽⟨|⟩‟„$∇_yǏRq꘍₍₌Π⁺βτʀʁɾɽ¨żẏ?¹⁰²ǔǓǒǑǐǎꜝ₂₃₅&amp;ẇŀl↑↓∴∵O¢ṙṗṖ¦†AVG↲↳⋏⋎Ṅ⁋×λ√⌈⌊:ḊD
</code></pre>
<p>My turn.</p>
"
"235769","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1318498 bytes, cracks <a href=""https://codegolf.stackexchange.com/a/235756/101522"">lyxal's answer</a></h1>
<p>Sample:</p>
<pre><code>uuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεkP'bfBuuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuε=)kP'bfBuuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuε=)Wf‛  jĖ‛  j‛  o
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=uu%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5kP%27bfBuu%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5%3D%29kP%27bfBuu%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5%3D%29Wf%E2%80%9B%20%20j%C4%96%E2%80%9B%20%20j%E2%80%9B%20%20o&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Generator:</p>
<pre><code>`,₴…‹›⟇+*/-d↵EǍ½ƒɖ1234567890ø∆e₈₇∞₆₄JpiẎȯhtḢṪḣṫ¡Þ₀₁C!¬⇧İN⇩Ż÷«»\`;¥£¾¼⅛%→←&quot;ẋ¤ȦFȧ⌐m⊍g≬\ṡ∷‡⁽⟨|⟩‟„$∇_yǏRq꘍₍₌Π⁺βτʀʁɾɽ¨żẏ?¹⁰²ǔǓǒǑǐǎꜝ₂₃₅&amp;ẇŀl↑↓∴∵O¢ṙṗṖ¦†AVG↲↳⋏⋎Ṅ⁋×λ√⌈⌊:ḊD` # This is the full string to print
ḣ$C›‛uε*\up`kP'bfBu`120‛uε*+‛=)++              # The first character needs to be handled differently
$ƛC›‛uε*\ip`kP'bfBu`75‛uε*+‛=)++;∑+            # Here's the rest of the characters
`kP'bfBu`68‛uε*+‛=)++                          # Change the numbers to characters at the end
`Wf`+\‛+`  jĖ`+\‛+`  j`+\‛+`  o`+              # Join everything by spaces and execute, then pretty-print
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=D&amp;code=%60%2C%E2%82%B4%E2%80%A6%E2%80%B9%E2%80%BA%E2%9F%87%2B*%2F-d%E2%86%B5E%C7%8D%C2%BD%C6%92%C9%961234567890%C3%B8%E2%88%86e%E2%82%88%E2%82%87%E2%88%9E%E2%82%86%E2%82%84Jpi%E1%BA%8E%C8%AFht%E1%B8%A2%E1%B9%AA%E1%B8%A3%E1%B9%AB%C2%A1%C3%9E%E2%82%80%E2%82%81C!%C2%AC%E2%87%A7%C4%B0N%E2%87%A9%C5%BB%C3%B7%C2%AB%C2%BB%5C%60%3B%C2%A5%C2%A3%C2%BE%C2%BC%E2%85%9B%25%E2%86%92%E2%86%90%22%E1%BA%8B%C2%A4%C8%A6F%C8%A7%E2%8C%90m%E2%8A%8Dg%E2%89%AC%5C%E1%B9%A1%E2%88%B7%E2%80%A1%E2%81%BD%E2%9F%A8%7C%E2%9F%A9%E2%80%9F%E2%80%9E%24%E2%88%87_y%C7%8FRq%EA%98%8D%E2%82%8D%E2%82%8C%CE%A0%E2%81%BA%CE%B2%CF%84%CA%80%CA%81%C9%BE%C9%BD%C2%A8%C5%BC%E1%BA%8F%3F%C2%B9%E2%81%B0%C2%B2%C7%94%C7%93%C7%92%C7%91%C7%90%C7%8E%EA%9C%9D%E2%82%82%E2%82%83%E2%82%85%26%E1%BA%87%C5%80l%E2%86%91%E2%86%93%E2%88%B4%E2%88%B5O%C2%A2%E1%B9%99%E1%B9%97%E1%B9%96%C2%A6%E2%80%A0AVG%E2%86%B2%E2%86%B3%E2%8B%8F%E2%8B%8E%E1%B9%84%E2%81%8B%C3%97%CE%BB%E2%88%9A%E2%8C%88%E2%8C%8A%3A%E1%B8%8AD%60%20%23%20This%20is%20the%20full%20string%20to%20print%0A%E1%B8%A3%24C%E2%80%BA%E2%80%9Bu%CE%B5*%5Cup%60kP%27bfBu%60120%E2%80%9Bu%CE%B5*%2B%E2%80%9B%3D%29%2B%2B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20The%20first%20character%20needs%20to%20be%20handled%20differently%0A%24%C6%9BC%E2%80%BA%E2%80%9Bu%CE%B5*%5Cip%60kP%27bfBu%6075%E2%80%9Bu%CE%B5*%2B%E2%80%9B%3D%29%2B%2B%3B%E2%88%91%2B%20%20%20%20%20%20%20%20%20%20%20%20%23%20Here%27s%20the%20rest%20of%20the%20characters%0A%60kP%27bfBu%6068%E2%80%9Bu%CE%B5*%2B%E2%80%9B%3D%29%2B%2B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Change%20the%20numbers%20to%20characters%20at%20the%20end%0A%60Wf%60%2B%5C%E2%80%9B%2B%60%20%20j%C4%96%60%2B%5C%E2%80%9B%2B%60%20%20j%60%2B%5C%E2%80%9B%2B%60%20%20o%60%2B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Join%20everything%20by%20spaces%20and%20execute%2C%20then%20pretty-print&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"235775","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 220, cracked by <a href=""https://codegolf.stackexchange.com/a/235780/100664"">EmanresuA</a></h1>
<pre><code>,₴…‹›⟇+*/-d↵EǍ½ƒɖ1234567890ø∆e₈₇∞₆₄JpiẎȯhtḢṪḣṫ¡Þ₀₁C!¬⇧İN⇩Ż÷«»`;¥£¾¼⅛%→←&quot;ẋ¤ȦFȧ⌐m⊍g≬\ṡ∷‡⁽⟨|⟩‟„$∇_yǏRq꘍₍₌Π⁺βτʀʁɾɽ¨żẏ?¹⁰²ǔǓǒǑǐǎꜝ₂₃₅&amp;ẇŀl↑↓∴∵O¢ṙṗṖ¦†AVG↲↳⋏⋎Ṅ⁋×λ√⌈⌊:ḊDabcjnsvwxzBHIKMQSTUWXYZ)}]([{&lt;&gt;ḂĊḞĠĿṀȮṠẆẊ℅@°•ß€↔æƈ ¯±≠⁼≥≤=ḃ∩∪
</code></pre>
<p>More.</p>
"
"235780","<h1><a href=""https://github.com/lyxal/vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1606416 bytes, cracks <a href=""https://codegolf.stackexchange.com/a/235775/100664"">lyxal's answer</a></h1>
<p>Sample:</p>
<pre><code>εuεuεuεuuεuεuεuεuε\‛§εḭĖuuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuεuuεuεuεuεuε\‛§εḭĖĖuuε
</code></pre>
<p><a href=""https://gist.githubusercontent.com/chunkybanana/b530d254c8599ccf5ede516f62e92da4/raw/39983fedfbb0258f683edde6df0cdd10317a7cc1/t.txt"" rel=""nofollow noreferrer"">Full code</a></p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=D&amp;code=C%C6%9B%E2%80%BA%60u%CE%B5%60*%5Cup%60uu%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5%5C%E2%80%9B%C2%A7%CE%B5%E1%B8%AD%C4%96%60%2B%3B%E2%88%91%60W%E2%88%91%60C%C6%9B%E2%80%BA%60u%CE%B5%60*%5Cup%60uu%CE%B5u%CE%B5u%CE%B5u%CE%B5u%CE%B5%5C%E2%80%9B%C2%A7%CE%B5%E1%B8%AD%C4%96%C4%96%60%2B%3B%E2%88%91%2B&amp;inputs=%2C%E2%82%B4%E2%80%A6%E2%80%B9%E2%80%BA%E2%9F%87%2B*%2F-d%E2%86%B5E%C7%8D%C2%BD%C6%92%C9%961234567890%C3%B8%E2%88%86e%E2%82%88%E2%82%87%E2%88%9E%E2%82%86%E2%82%84Jpi%E1%BA%8E%C8%AFht%E1%B8%A2%E1%B9%AA%E1%B8%A3%E1%B9%AB%C2%A1%C3%9E%E2%82%80%E2%82%81C!%C2%AC%E2%87%A7%C4%B0N%E2%87%A9%C5%BB%C3%B7%C2%AB%C2%BB%60%3B%C2%A5%C2%A3%C2%BE%C2%BC%E2%85%9B%25%E2%86%92%E2%86%90%22%E1%BA%8B%C2%A4%C8%A6F%C8%A7%E2%8C%90m%E2%8A%8Dg%E2%89%AC%5C%E1%B9%A1%E2%88%B7%E2%80%A1%E2%81%BD%E2%9F%A8%7C%E2%9F%A9%E2%80%9F%E2%80%9E%24%E2%88%87_y%C7%8FRq%EA%98%8D%E2%82%8D%E2%82%8C%CE%A0%E2%81%BA%CE%B2%CF%84%CA%80%CA%81%C9%BE%C9%BD%C2%A8%C5%BC%E1%BA%8F%3F%C2%B9%E2%81%B0%C2%B2%C7%94%C7%93%C7%92%C7%91%C7%90%C7%8E%EA%9C%9D%E2%82%82%E2%82%83%E2%82%85%26%E1%BA%87%C5%80l%E2%86%91%E2%86%93%E2%88%B4%E2%88%B5O%C2%A2%E1%B9%99%E1%B9%97%E1%B9%96%C2%A6%E2%80%A0AVG%E2%86%B2%E2%86%B3%E2%8B%8F%E2%8B%8E%E1%B9%84%E2%81%8B%C3%97%CE%BB%E2%88%9A%E2%8C%88%E2%8C%8A%3A%E1%B8%8ADabcjnsvwxzBHIKMQSTUWXYZ%29%7D%5D%28%5B%7B%3C%3E%E1%B8%82%C4%8A%E1%B8%9E%C4%A0%C4%BF%E1%B9%80%C8%AE%E1%B9%A0%E1%BA%86%E1%BA%8A%E2%84%85%40%C2%B0%E2%80%A2%C3%9F%E2%82%AC%E2%86%94%C3%A6%C6%88%20%C2%AF%C2%B1%E2%89%A0%E2%81%BC%E2%89%A5%E2%89%A4%3D%E1%B8%83%E2%88%A9%E2%88%AA&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Generator program</a></p>
"
"235786","<h1><a href=""https://github.com/lyxal/vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9942694705621871183448638796  bytes, cracks <a href=""https://codegolf.stackexchange.com/a/235781/100664"">lyxal's answer</a></h1>
<p>Sample:</p>
<pre><code>kPkPkPL‛∧∑ĖokPkPkPL‛∧∑ĖokPL‛∧∑ĖokPkPkPL‛∧∑ĖokPkPkPL‛∧∑ĖokPL‛∧∑ĖokPL‛∧∑ĖokPkPkPL‛∧∑ĖokPkPkPL‛∧∑ĖokPL‛∧∑ĖokPkPkPL‛∧∑ĖokPkPkPL‛∧∑ĖokPL‛∧∑ĖokPL‛∧∑ĖokPL‛∧∑ĖokPL‛∧∑Ė
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPkPkPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96okPL%E2%80%9B%E2%88%A7%E2%88%91%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is a purely theoretical program, as there is no way to run it at all.</p>
<p>So, basically with the snippet <code>kPL‛∧∑Ė</code> (explanation below), we can get the fourth character of a string.</p>
<pre><code>  L     # Length of
kP      # Printable ASCII (not actually, length = 100)
      Ė # Evaluate the code snippet
   ‛∧∑  # &quot;Big&quot; (Compressed)
        
B   # Convert from binary - 100 -&gt; 4
 i  # Index into string
  g # Get minimum (useless)
</code></pre>
<p>We can remove characters with the <code>o</code> command. For example, <code>kPkPkPL‛∧∑Ėo</code> gives us printable ASCII without a 4, meaning the fourth character of this is now <code>5</code>. We can remove this and a 4 from another copy of printable ascii, making the fourth character 6. Continuing this, we can get any character in the printable ascii range, but getting the next character costs double (+8) the cost of the previous.</p>
<p>This makes the overhead for <code>C</code> (ord -&gt; char) <code>171798691832</code> bytes. The overhead for <code>-</code>, meanwhile, is <code>11805916207174113034232</code> bytes.</p>
<p>The evaluated code is going to look something like <code>uu-u-u-u-u-u-u-u-u-u-u-u-u-…</code>, because I'm lazy. We then tack on a <code>C</code> at the end of each, add a <code>W</code> at the end, and sum that with <code>∑</code>, which we can directly call.</p>
<p>A calculation of the length can be found <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9BC2%2B11805916207174113034233*%E2%80%BA171798691832%2B%3B%E2%88%91180143985094819833%2B&amp;inputs=%E1%B8%9F%E1%B9%99IcK%C4%A1%E2%82%B4%E2%80%A6%E2%80%B9%E2%80%BA%2B*%2F-d%E2%86%B5%C7%8D%C2%BD%C6%92%C9%96%C3%B8%E2%88%86%E2%82%88%E2%82%87%E2%88%9E%E2%82%86%E2%82%84Ji%E1%BA%8E%C8%AFht42069%E1%B8%A2%E1%B9%AA%E1%B8%A3%E1%B9%AB%C2%A1%C3%9E%E2%82%80%E2%82%81C!%C2%AC%E2%87%A7%C4%B0NeVERg%C8%AE%E1%B9%84naG%E1%B8%AD%E2%9F%87%C4%97yOU%E2%8A%8Dp%E2%87%A9%C5%BB%C3%B7%C2%AB%C2%BB%E2%8C%90m%E2%89%AC%5C%E1%B9%A1%E2%88%B7%E2%80%A1%E2%81%BD%E2%9F%A8%7C%E2%9F%A9%E2%80%9F%E2%80%9E%24%E2%88%87_%C7%8Fq%EA%98%8D%E2%82%8D%E2%82%8C%CE%A0%E2%81%BA%CE%B2%CF%84%CA%80%CA%81%C9%BE%C9%BD%C2%A8%C5%BC%E1%BA%8F%3F%C2%B9%E2%81%B0%C2%B2%C7%94%C7%93%C7%92%C7%91%C7%90%C7%8E%EA%9C%9D%E2%82%82%E2%82%83%E2%82%85%26%E1%BA%87%C5%80l%E2%86%91%E2%86%93%E2%88%B4%E2%88%B5%C2%A2%60%3B%C2%A5%C2%A3%C2%BEF%C2%BC%E2%85%9B%25%E2%86%92%E2%86%90%22%E1%BA%8B%C2%A4%E1%B8%8A%CE%B5%E2%82%ACZ%C8%A7%E1%B9%97%E1%B9%96%C2%A6%E2%80%A0A%E2%86%B2%E2%86%B3%E2%8B%8F%E2%8B%8E%E2%81%8B%C3%97%CE%BB%E2%88%9A%E2%8C%88%E2%8C%8A%3ADbjvwxz%2CBHMQSTWXY%29%7D%5D%28%5B%7B%3C%3E%E1%B8%82%C4%8A%E1%B8%9E%C4%BF%E1%B9%80%E1%B9%A0%E1%BA%86%E1%BA%8A%E2%84%85%40%C2%B0%E2%80%A2%C3%9F%E2%86%94%C3%A6%C6%88%C2%A7%E2%89%88%C2%B5%C2%AF%C2%B1%E2%89%A0%E2%81%BC%E2%89%A5%E2%89%A4%3D%E1%B8%83%E2%88%A9s%E2%88%AA%C4%A0%E1%B9%81%C8%A6%27%C4%8B%E1%B8%8B%E1%B9%8513578&amp;header=&amp;footer="" rel=""nofollow noreferrer"">here</a>. A calculator of the overhead for a single printable ascii calculator can be found <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kP%24v%3DTh5-12%24%28d8%2B%29&amp;inputs=C&amp;header=&amp;footer="" rel=""nofollow noreferrer"">here</a>.</p>
"
"235811","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>smy
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=smy&amp;inputs=%5B8%2C%209%2C%206%2C%204%2C%207%2C%2010%2C%205%2C%207%2C%208%5D&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Look ma, no Unicode!</p>
<pre><code>s   # Sort
 m  # Mirror, appending the reverse
  y # Push every second item, and the rest.
</code></pre>
"
"235823","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>I÷Ṙ+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJJw7fhuZgrIiwiIiwiWzEsIDIsIDMsIDQsIDUsIDYsIDddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>I    # Halve the list
 ÷   # Push each half
  Ṙ  # Reverse the second half
   + # Add them together (vectorising)
</code></pre>
"
"235996","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ɾ:eΠ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%3Ae%CE%A0&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Obligatory answer</p>
<pre><code>ɾ              # Range
:              # Dup
e             # Power
Π            # Product
</code></pre>
"
"236051","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2513525 bytes, <a href=""https://codegolf.stackexchange.com/a/235787/101522"">cracks lyxal's answer</a></h1>
<p>Samplez:</p>
<pre><code>ðḃðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZðḃZf∑k^ṘðḃðḃZðḃZf∑kv‛ouoṘkv‛ouoð¶rðḃZðḃZfṘZf∑ṘĖZf∑ðḃoZf∑ĖĖ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;codef%E2%88%91k%5E%E1%B9%98%C3%B0%E1%B8%83%C3%B0%E1%B8%83Z%C3%B0%E1%B8%83Zf%E2%88%91kv%E2%80%9Bouo%E1%B9%98kv%E2%80%9Bouo%C3%B0%C2%B6r%C3%B0%E1%B8%83Z%C3%B0%E1%B8%83Zf%E1%B9%98Zf%E2%88%91%E1%B9%98%C4%96Zf%E2%88%91%C3%B0%E1%B8%83oZf%E2%88%91%C4%96%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">ez</a></p>
<p>Generator:</p>
<pre><code>`ḟṙIcKġ₴…‹›+*/-d↵Ǎ½ƒɖø∆₈₇∞₆₄JiẎȯht42069ḢṪḣṫ¡Þ₀₁C!¬⇧İNeVERgȮṄnaGḭ⟇ėyOU⊍p⇩Ż÷«»⌐m≬\ṡ∷‡⁽⟨|⟩‟„$∇_Ǐq꘍₍₌Π⁺βτʀʁɾɽ¨żẏ?¹⁰²ǔǓǒǑǐǎꜝ₂₃₅&amp;ẇŀl↑↓∴∵¢\`;¥£¾F¼⅛%→←&quot;ẋ¤Ḋε€ṗṖ¦†A↲↳⋏⋎⁋×λ√⌈⌊:Dbjwxz,BHMQSTXY)}]([{&lt;&gt;ḂĊḞĿṀṠẆẊ℅@°•ß↔æƈ§≈µ¯±≠⁼≥≤=∩s∪ĠṁȦ'ċḋṅ13578ȧ`
ƛ‛ðḃ$C‹`ðḃZ`*+`f∑k^ṘðḃðḃZðḃZf∑kv‛ouoṘkv‛ouoð¶rðḃZðḃZfṘZf∑ṘĖZf∑ðḃoZf∑ĖĖ`+;∑‛W∑+
</code></pre>
"
"236056","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>kṡ+{:kṡ&gt;|
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%E1%B9%A1%2B%7B%3Ak%E1%B9%A1%3E%7C&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>For accuracy, use the offline interpreter, dowloadable via the link in the header.</p>
<pre><code>kṡ        # Push current epoch, in seconds
  +       # Added to input
   {    | # Until
     kṡ   # Current epoch
    :  &gt;  # Is greater than this
   {    | # Loop
</code></pre>
"
"236064","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 25 bytes</h1>
<pre><code>24ʁ60ʁẊƛƛS2↳ð0V;\:j;:?ḟ›i
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=24%CA%8160%CA%81%E1%BA%8A%C6%9B%C6%9BS2%E2%86%B3%C3%B00V%3B%5C%3Aj%3B%3A%3F%E1%B8%9F%E2%80%BAi&amp;inputs=%2723%3A59%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>What a mess. Handling 0-padding, <em>and</em> some slightly cursed vectorising, was a pain.</p>
<pre><code>24ʁ                       # 0...23
   60ʁ                    # 0...59
      Ẋ                   # Cartesian product
       ƛ           ;      # Map...
        ƛ      ;          # Map...
         S                # Stringify
          2↳              # pad left to length 2 (with spaces, we really need zfill)
            ð0V           # Replace spaces with zeroes
                \:j       # Join by colons
                     ?ḟ   # Find input in this
                       ›  # Increment
                    :   i # Index into this
</code></pre>
"
"236087","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29261004498<i>69</i>4<i>420</i> bytes, <a href=""https://codegolf.stackexchange.com/a/236060/101522"">cracks'd lYXAL;s anser</a></h1>
<p>This solution has two main parts to it: Generating arbitrary numbers, and converting those numbers into characters.</p>
<hr />
<h2>Arbitrary numbers:</h2>
<pre><code>uAuAuuArv∨v∧∑
</code></pre>
<p>Explanation:</p>
<pre><code>     uA        # Push 1
    u  r       # Cast to range [-1..n)
uAuA    v∨v∧   # Change all numbers in range to 1
            ∑  # Sum
</code></pre>
<p>Continue wrapping with <code>uAuAu  rv∨v∧∑</code> to increment.</p>
<p>Example: <a href=""https://lyxal.pythonanywhere.com?flags=D&amp;code=uAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuAuAuuArv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91rv%E2%88%A8v%E2%88%A7%E2%88%91&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<hr />
<h2>Numbers to characters:</h2>
<pre><code>k^k^kAPP‛A.‛..PokfPĖ
</code></pre>
<p>Explanation:</p>
<pre><code>  k^                  # Push hex digits
    kAP               # Strip `ABCDEF` to get `0123456789`
k^     P              # Strip `0123456789` to get `ABCDEF`
        ‛A.‛..P       # Remove `.` from `A.`
               o      # Strip `A` to get `BCDEF`
                kfP   # Strip `Fizz` to get `BCDE`
                   Ė  # Execute `BCDE`
</code></pre>
<pre><code>B     # Convert from binary
 C    # Convert to char
  D   # Triplicate
   E  # Execute as Python (Does nothing)
</code></pre>
<p>Example: <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=1000101%20k%5Ek%5EkAPP%E2%80%9BA.%E2%80%9B..PokfP%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<hr />
<h3>Extra</h3>
<p>This program takes a character and returns the number of bytes required to print it: <a href=""https://lyxal.pythonanywhere.com?flags=D&amp;code=Cb%E1%B9%8511*22%2B&amp;inputs=%22!%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"236110","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29401143 bytes, <a href=""https://codegolf.stackexchange.com/a/236107/101522"">lyxal get cracked on</a></h1>
<p>The backbone of this solution is the generation of arbitrary negative numbers, allowing for indexing to get all the commands we need.</p>
<hr />
<h2>How negative numbers?</h2>
<pre><code>u     # Push -1
 .o   # Remove `0.5` Does nothing except convert to string
   Ė  # Execute
</code></pre>
<p>We can decrement to any number by stringing many of these snippets together into a series.</p>
<p>Essentially, this executes <code>subtract</code>, then pushes <code>1</code>. The <code>1</code> is used for the next subtraction in the series. This means we need to get rid of the first subtraction in a series and the last <code>1</code> in a series.</p>
<h3>Subtraction no</h3>
<p>To remove the first subtraction:</p>
<pre><code>k□∑∑k□∑∑
</code></pre>
<p>This just pushes a couple of <code>0</code>s, so the first subtraction is just <code>0-0</code>.</p>
<h3>1 no</h3>
<p>To remove the last <code>1</code>:</p>
<pre><code>uPĖ
</code></pre>
<p>This uses <code>-1</code> to turn <code>1</code> into an empty string, which is then executed to remove it.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%E2%96%A1%E2%88%91%E2%88%91kok%E2%96%A1%E2%88%91%E2%88%91k%E2%96%A1%E2%88%91%E2%88%91u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96u.o%C4%96uP%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Why negative numbers tho?</h2>
<p>How do arbitrary negative numbers help us? Vyxal uses the same indexing as Python, so we can use negative numbers to index into stuff. However, to index into something, we need <code>i</code>. We don't have that command available to us, but it is in a couple of the builtins, specifically <code>Fizz</code> and <code>aeiou</code>, which we can make use of:</p>
<pre><code>  kv              # Push `aeiou`
    ‛ouo          # Remove `ou`, giving us `aei`
        kfP       # Remove `Fizz`, giving us `ae`
kv         P      # Remove from `aeiou`, giving us `iou`
            ‛ouo  # Remove `ou`, giving us `i`
</code></pre>
<p>Now that we have <code>i</code> and any negative number, we can index into our builtins to get useful stuff. For example, we can index into <code>01234567</code> to get <code>1</code>, and we can index into printable ASCII to get <code>+</code> and <code>C</code>. We can use the <code>1+</code> over and over to increment a number, then use <code>C</code> to convert it to a character. (Yes, I know I could just push <code>-1</code> and use <code>-</code> instead of <code>+</code>, which would be a lot shorter, but that's not as fun.)</p>
<p>Once we have the pieces, namely arbitrary negative numbers and indexing, creating a solution becomes trivial. Here's an example for printing <code>!</code>: <a href=""https://gist.github.com/AMiller42/5aa2726468f1acc64ae6129a9c2bc532"" rel=""nofollow noreferrer"">apparently the link was too long so here's a gist of the program that you can copy into the interpreter.</a></p>
"
"236163","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 239993933 bytes, <a href=""https://codegolf.stackexchange.com/a/236125/101522"">lyxal get cracked on</a></h1>
<p>The backbone of this solution is the generation of arbitrary negative numbers, allowing for indexing to get all the commands we need.</p>
<hr />
<h2>How negative numbers?</h2>
<pre><code>u      # Push -1
 koo   # Remove `01234567` Does nothing except convert to string
    Ė  # Execute
</code></pre>
<p>We can decrement to any number by stringing many of these snippets together into a series.</p>
<p>Essentially, this executes <code>subtract</code>, then pushes <code>1</code>. The <code>1</code> is used for the next subtraction in the series. This means we need to get rid of the first subtraction in a series and the last <code>1</code> in a series.</p>
<h3>Subtraction no</h3>
<p>To remove the first subtraction:</p>
<pre><code>uu
</code></pre>
<p>This just pushes a couple of <code>-1</code>s, so the first subtraction is just <code>-1 - -1</code>.</p>
<h3>1 no</h3>
<p>To remove the last <code>1</code>:</p>
<pre><code>uPĖ
</code></pre>
<p>This uses <code>-1</code> to turn <code>1</code> into an empty string, which is then executed to remove it.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=uuukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96ukoo%C4%96uP%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Why negative numbers tho?</h2>
<p>How do arbitrary negative numbers help us? Vyxal uses the same indexing as Python, so we can use negative numbers to index into stuff. However, to index into something, we need <code>i</code>. We don't have that command available to us, but it is in the builtin <code>aeiou</code>, which we can make use of:</p>
<pre><code>kv                               # Push `aeiou`
  uuukooĖukooĖukooĖukooĖ         # Push -3 and 1
                        kv       # Push `aeiou`
                          ‛ouo   # Remove `ou` to get `aei`
                              Ė  # Execute
</code></pre>
<p>Now that we have <code>i</code> and any negative number, we can index into our builtins to get useful stuff. For example, we can index into <code>01234567</code> to get <code>1</code>, and we can index into printable ASCII to get <code>+</code> and <code>C</code>. We can use the <code>1+</code> over and over to increment a number, then use <code>C</code> to convert it to a character. (Yes, I know I could just push <code>-1</code> and use <code>-</code> instead of <code>+</code>, which would be a lot shorter, but that's not as fun.)</p>
<p>Once we have the pieces, namely arbitrary negative numbers and indexing, creating a solution becomes trivial. Here's an example for printing <code>!</code>: <a href=""https://gist.github.com/AMiller42/548393cc13f74d77717ba63c64d3979b"" rel=""nofollow noreferrer"">apparently the link was too long so here's a gist of the program that you can copy into the interpreter wait hold on didn't we already do all of this for the last cop</a></p>
"
"236206","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>⁽∑Ẋ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%81%BD%E2%88%91%E1%BA%8A&amp;inputs=15&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⁽ Ẋ # Until the result converges...
 ∑  # Sum digits
</code></pre>
"
"236222","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 464251237 bytes' ,lyx<a href=""https://codegolf.stackexchange.com/a/236125/101522"">al </a>c<a href=""https://codegolf.stackexchange.com/a/236125/101522"">ra</a>k<a href=""https://youtu.be/dQw4w9WgXcQ"" rel=""nofollow noreferrer"">c</a><a href=""https://codegolf.stackexchange.com/a/236125/101522"">s </a><a href=""https://youtu.be/dQw4w9WgXcQ"" rel=""nofollow noreferrer"">a</a><a href=""https://codegolf.stackexchange.com/a/236125/101522"">nser</a></h1>
<p>Hey look, more negative numbers and indexing into printable ascii!</p>
<hr />
<h2>How negative numbers?</h2>
<pre><code>kokoĖPĖkokoĖPĖkoĖĖkPkPkPkPkoPkoĖĖPPPPPkokoĖPĖkokoĖPĖkoĖĖkPkPkoPkoĖĖPPPĖkoPPkPkPkPkPkoPkoĖĖPPPPPĖ
</code></pre>
<p>We can decrement to any number by stringing many of these snippets together into a series.</p>
<p>This is pretty much the same as emanresu A's way of getting negative numbers, but modified so as not to use 1.</p>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=koko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkPkPkoPko%C4%96%C4%96PPPPPkoko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkoPko%C4%96%C4%96PPP%C4%96koPPkPkPkPkPkoPko%C4%96%C4%96PPPPP%C4%96%0Akoko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkPkPkoPko%C4%96%C4%96PPPPPkoko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkoPko%C4%96%C4%96PPP%C4%96koPPkPkPkPkPkoPko%C4%96%C4%96PPPPP%C4%96%0Akoko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkPkPkoPko%C4%96%C4%96PPPPPkoko%C4%96P%C4%96koko%C4%96P%C4%96ko%C4%96%C4%96kPkPkoPko%C4%96%C4%96PPP%C4%96koPPkPkPkPkPkoPko%C4%96%C4%96PPPPP%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Why negative numbers tho?</h2>
<p>Just like before, we can make use of the negative numbers by indexing into printable ascii. This time, the only builtin that has <code>i</code> in it is printable ascii, but getting the <code>i</code> from there would probably be difficult, and I'm lazy, so I took the easy way out: <code>inf</code>. It turns out, Vyxal is really cursed, so we can do a bit of magic and shenanigans with some floats and casting numbers to iterables and generate a float so absurdly large that it just becomes <code>inf</code>. That can be cast to a string and executed to let us index.</p>
<pre><code>ko           # Push `01234567`
  Ė          # Execute, gives us 1234567
   Ė         # Reciprocal
    Ė        # Reciprocal, gives us 1234567.0
     s       # Sort, gives us inf
      koP    # Strip 01234567, casts to string
         Ė   # Execute
          o  # Remove the extra 0 that was pushed
</code></pre>
<p>Now that we have <code>i</code> and any negative number, we can index into our builtins to get useful stuff. For example, we can index into <code>01234567</code> to get <code>1</code>, and we can index into printable ASCII to get <code>+</code> and <code>C</code>. We can use the <code>1+</code> over and over to increment a number, then use <code>C</code> to convert it to a character. (Yes, I know I could just push <code>-1</code> and use <code>-</code> instead of <code>+</code>, which would be a lot shorter, but that's not as fun.)</p>
<p>Once we have the pieces, namely arbitrary negative numbers and indexing, creating a solution becomes trivial. Here's an example for printing <code>!</code>: <a href=""https://gist.github.com/AMiller42/47791b20905d5a302232b87c5ae2ff28"" rel=""nofollow noreferrer"">apparently the link was too long so here's a gist of the program that you can copy into the interpreter wow can you believe im using the same joke twice thats crazy also you wont actually be able to run it online since its too long so youll have to run it offline</a></p>
"
"236282","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3407394222061762112 bytes, <a href=""https://codegolf.stackexchange.com/a/236232/101522"">ccrks lllxal' [hopes and dreams]</a></h1>
<p>HEY EVERY!! IT'S 3VERY BUDDY'S FAVORITE [[number 1 rated cracker 1997]]</p>
<pre><code>klkW₆Ė₆₆₆ĖĖssVĖ₆VkWVkW₆Ė₆₆₆ĖĖssVĖ₆VkWVkW₆Ė₆₆₆ĖĖssVĖ₆VkWVkW₆Ė₆₆₆ĖĖssVĖ₆VkWVkW₆Ė₆₆₆ĖĖssVĖ₆VkWV₆kl₆₆₆₆ĖĖssVĖ₆VĖ₆₆₆ĖĖssVĖ₆V
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com/?flags=&amp;code=klkW%E2%82%86%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86VkWVkW%E2%82%86%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86VkWVkW%E2%82%86%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86VkWVkW%E2%82%86%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86VkWVkW%E2%82%86%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86VkWV%E2%82%86kl%E2%82%86%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86V%C4%96%E2%82%86%E2%82%864%C4%96%C4%96ssV%C4%96%E2%82%86V&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online! Yeah I know there're 4's in there, [DEAL] with it.</a></p>
<p>The backbone of this solution is our good friend [inf].</p>
<p>We can use [inf] to index into builtins and get some [sweet commands] to execute. To get the [inf], we just exploit some [Classic Vyxal Jankness] with the <code>s</code> command:</p>
<pre><code>       V  # Replace every...
 ₆        #  `64` in...
₆         #  `64` with...
  ₆ĖĖ     #   64.0
     s    #   jankness
      s   #   jankness
</code></pre>
<p>Executing the [inf] puts some [unwanted garbage] on the stack, so we remove it by removing it:</p>
<pre><code>₆V  # Remove the [unwanted garbage]
</code></pre>
<p>Now that we can index, we can get <code>h</code> from [[Hyperlink Blocked]]. (Yes, this is unnecessary because it's the same as the [inf] indexing we used to get it, but you can shut up you [little slime].)</p>
<p>We can also do things like replace the <code>h</code> in [tHe AlPhAbEt] with [[Hyperlink Blocked]] repeatedly to change the length and [inf] index to get other characters, like <code>o</code> or <code>C</code>:</p>
<pre><code>klkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWVkWkW₆Ė₆₆4ĖĖssVĖ₆VĖkWV₆kl₆₆₆4ĖĖssVĖ₆VĖ₆₆4ĖĖssVĖ₆V
</code></pre>
<p>^<code>o</code> <code>C</code>v</p>
<pre><code>klkW₆Ė₆₆4ĖĖssVĖ₆VkWVkW₆Ė₆₆4ĖĖssVĖ₆VkWVkW₆Ė₆₆4ĖĖssVĖ₆VkWVkW₆Ė₆₆4ĖĖssVĖ₆VkWVkW₆Ė₆₆4ĖĖssVĖ₆VkWV₆kl₆₆₆4ĖĖssVĖ₆VĖ₆₆4ĖĖssVĖ₆V
</code></pre>
<p>The last thing we need is [numbers] [numbers] [numbers] to get the characters to print. That is simple, because we can [numbers] with <code>urL</code>. <code>urL</code> is easy because <code>o</code>:</p>
<pre><code>klklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohoklklhoklklhohoklklhoklklhohohoklklhoklklhohoklklhoklklhohohohohohohohohoho
</code></pre>
<p>I don't need to explain this, since anyone with a [$4.99] life can understand how it works.</p>
<p>The <code>hohoho</code> is made with the [Classic Vyxal Jankness] showed before, and it lets us do what we want to get [numbers] to get [characters] to be a</p>
<p>[[BIG SHOT!!!]]</p>
<p>[[BIG SHOT!!!!]]</p>
<p>[[BIG SHOT!!!!!]]</p>
"
"236299","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 102953210 bytes, <a href=""https://codegolf.stackexchange.com/a/236284/101522"">makes lyxal very sad</a></h1>
<p>Y'all'dn't've given me those deltas.</p>
<pre><code>kl¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯s¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯℅
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=kl%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AFs%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%C2%AF%E2%84%85&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So it turns out that using <code>deltas</code> on a string or a list of characters will just remove the last character if all the characters are different. Removing a bunch of stuff, sorting, then removing a bunch of stuff will allow us to get any uppercase letter we want from <code>kl</code>. That gives us <code>C</code>, so we just need to figure out how to increment.</p>
<p>My first thought was using <code>urL</code>, but the delta trick only lets us get uppercase letters. Then I realized that we could use <code>s</code> to get a range, then join stuff to it and get the length to get any number we want. <code>J</code>oin and <code>L</code>ength are both uppercase letters, so that's perfect.</p>
<pre><code>s      # Sort; casts the number to a range
 kl    # Push UPPERCASElowercase reversed alphabet
   J   # Join
    L  # Length
</code></pre>
<p>Doing this over and over will increment the number over and over, and we can push a 7 to start using <code>k℅L</code>, since we just need the starting number to be less than 10 (<code>\n</code>).</p>
<p>From here, it's just a straightforward <code>increment to target, convert to char</code>, and we've got our crack!</p>
<p>Here's an example printing <code>!</code>: <a href=""https://gist.github.com/AMiller42/6b590c35a33c28410ca7c02b49a031ae"" rel=""nofollow noreferrer"">wow even this comparatively short program is too long to include here as a link</a></p>
"
"236315","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>İṘZ(n÷Ȧ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C4%B0%E1%B9%98Z%28n%C3%B7%C8%A6&amp;inputs=%5B3%2C7%5D%0A%5B1%2C2%2C3%2C4%2C5%2C6%2C7%2C8%2C9%2C10%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This could almost certainly be a bit smaller, but I got smol brain and can't think of a good way to swap values.</p>
<p>Explanation:</p>
<pre><code>İ        # Get the values at the indexes
 Ṙ       # Reverse the values
  Z      # Zip the values with the new indexes
   (n    # For each value/index pair:
     ÷   #  Split the value/index
      Ȧ  #  Put the value at that index
</code></pre>
"
"236381","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes</h1>
<pre><code>ɾ:vɾZƛ÷v&quot;;f2ẇ'²∑⁰²=;vJ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%3Av%C9%BEZ%C6%9B%C3%B7v%22%3Bf2%E1%BA%87%27%C2%B2%E2%88%91%E2%81%B0%C2%B2%3D%3BvJ&amp;inputs=5&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>What a horrible mess. I'm sure there's so many shorter ways of doing this...</p>
"
"236383","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 17 bytes</h1>
<pre><code>²Ṅ'Ḣ₃;'∆²A;:[√⌊vJ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B2%E1%B9%84%27%E1%B8%A2%E2%82%83%3B%27%E2%88%86%C2%B2A%3B%3A%5B%E2%88%9A%E2%8C%8AvJ&amp;inputs=7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It times out for inputs greater than 7, but the algorithm works. I can't wait to be outgolfed by anyone with greater mathematical knowledge lol ;p</p>
<p><em>-1 thanks to @EmanresuA and their tip from <a href=""https://codegolf.stackexchange.com/a/235486/78850"">here</a></em> </p>
<h2>Explained</h2>
<pre><code>²Ṅ'Ḣ₃;'∆²A;:[√⌊vJ
²Ṅ                   # from all the integer partitions of the input squared,
  'Ḣ₃;               # only keep those where the length is 2. And from those,
      '∆²A;          # only keep those where all numbers are perfect squares.
           :[        # If that isn't empty,
             √⌊vJ    # get the square root of each item, and append the hypotenuse to each sublist.
</code></pre>
"
"236384","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <sup><s>11</s></sup> 10 bytes</h1>
<pre><code>ɾ2ḋvp'²ḣ∑=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE2%E1%B8%8Bvp%27%C2%B2%E1%B8%A3%E2%88%91%3D&amp;inputs=25&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p><em>-1 byte thanks to @lyxal</em></p>
<p>Thanks for the offer @lyxal, but nah, I don't need flags.</p>
<pre><code>ɾ2ḋvp'²ḣ∑=    Full program, input: n, the hypotenuse
ɾ             1..n
 2ḋ           All pairs (2-combinations) without replacement
   vp         Prepend n to each pair
     '        Filter those which satisfy...
      ²         Square each number
       ḣ∑=      Does the sum of last two equal the first?
</code></pre>
<hr />
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>ɾ:Ẋ's=*²∑⁰²=;vJ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%3A%E1%BA%8A%27s%3D*%C2%B2%E2%88%91%E2%81%B0%C2%B2%3D%3BvJ&amp;inputs=25&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>Kinda port of my own <a href=""https://codegolf.stackexchange.com/a/236382/78410"">Jelly answer</a>, using filter instead of &quot;truthy n-D indices&quot;.</p>
<pre><code>ɾ:Ẋ's=*²∑⁰²=;vJ   Full program, input: n, the hypotenuse
ɾ:Ẋ               All pairs between 1..n and 1..n
   '        ;     Filter the pairs where...
    s=*             it is sorted and
       ²∑⁰²=        the sum of square is equal to n squared
             vJ   Append n to each pair
</code></pre>
"
"236409","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5228096860937807017 bytes, <a href=""https://codegolf.stackexchange.com/a/236339/101522"">beats lyxal</a></h1>
<p>...Who says I need <code>inf</code> to win?</p>
<pre><code>klkl₃₃kl₃₃kWsĖ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=klkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This ended up being really complicated, until I realized I was an idiot.</p>
<p>At first, I had a really big thing to get the last letter of a string, then I realized that that was stupid and I was stupid and Vyxal is stupid and I'm stupid, and I could remove a part of it completely, which would allow me to remove another part of it, golfing the solution by 8.5 exabytes.</p>
<p>So it turns out all I needed to do was get the last letter of <code>kl</code>, then use <code>/</code> and some things to remove it from <code>kl</code>, then get the last letter of that and remove it from that, etc. to get any letter command I wanted.</p>
<p>Getting the last letter turned out to be simple:</p>
<pre><code>kl₃₃          # Push 1
    kl₃₃      # Push 1
        kW    # Push `https://`
          s   # Sort
           Ė  # Execute
</code></pre>
<p>^ (This is the part that I overcomplicated. If you're curious, I talked a bit about it in <a href=""https://chat.stackexchange.com/transcript/message/59389732#59389732"">chat</a>.)</p>
<p>Being able to get the last letter of a string allowed me to get <code>az/t</code> from the builtins. As it turns out, <code>/</code> would end up being very handy. I was able to get the last letter of a builtin, e.g. <code>a</code> from <code>kl</code>, and then split the builtin on that letter, which would give me a list of that builin minus the letter, and an empty string. Then I could sort the list and get the last element, which would be the builtin without the removed letter.</p>
<pre><code>klklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖklklkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖkl₃₃kl₃₃kWsĖkWkl₃₃kl₃₃kWsĖĖskl₃₃kl₃₃kWsĖ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96klklkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96kWkl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96%C4%96skl%E2%82%83%E2%82%83kl%E2%82%83%E2%82%83kWs%C4%96&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This allowed me to create an exponentially growing program to get any letter from the builtin, which allowed me to increment using the same methods I've used before. It also allowed me to get <code>C</code> to convert the numbers to characters.</p>
<p>The entire program is pretty much just a bunch of <code>kl₃₃kl₃₃kWsĖ</code> repeated over and over, with some other stuff sprinkled in.</p>
<p>Here's an example printing <code>!</code>: <a href=""https://youtu.be/dQw4w9WgXcQ"" rel=""nofollow noreferrer"">wow this program is just absolutely too long there's no way im going to be able to even put it in a gist but here you go</a></p>
"
"236453","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>∑UṖ'→?µ←:₃[nL|β];?⁼;h
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%88%91U%E1%B9%96%27%E2%86%92%3F%C2%B5%E2%86%90%3A%E2%82%83%5BnL%7C%CE%B2%5D%3B%3F%E2%81%BC%3Bh&amp;inputs=%5B%27147%27%2C%20%27172%27%2C%20%27120%27%2C%20%2704%27%2C%20%2707%27%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs a single possible alphabet. Times out for inputs with larger alphabets because it checks all permutations of the character set of the input. Exits with an error if falsey.</p>
<p>14 if <code>a aa aaa aaaaa aaaa</code> wasn't falsey. Much shorter if base conversion wasn't so janky.</p>
<h2>Explained (in theory if base conversion wasn't so janky)</h2>
<pre><code>∑UṖ'→?µ←ðpβ;?⁼;h
∑U                # Get all unique characters of the input
  Ṗ               # and then all permutations of that.
   '              # From that, keep only items (n) where
    →?µ←ðp;       #    the input sorted by conversion to bijective base n with a space prepended to make everything non-zero
            ?⁼   #    equals the original input (⁼ is non-vectorising equals)
              ;h # and get the first from that
</code></pre>
<p>I actually got to use <a href=""https://codegolf.stackexchange.com/a/231288/78850"">the ghost variable</a> and variable scoping for once.</p>
"
"236542","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>λb†Bæ;ȯ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BBb%E2%80%A0B%C3%A6%3B%C8%AF&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a number n and returns the first n numbers.</p>
<pre><code>λ    ;ȯ # First n numbers where...
 b      # Binary
  †     # Vectorised logical not (Vyxal uses 1/0 for booleans)
   B    # When converted back to a number
    æ   # Is prime?
</code></pre>
"
"236604","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>λbṅ11c¬;ȯtbṘ1J
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CE%BBb%E1%B9%8511c%C2%AC%3B%C8%AFtb%E1%B9%981J&amp;inputs=65&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Ethertyte's answer.</p>
<pre><code>λ      ;ȯt     # Nth integer where...
 bṅ            # Binary
   11c¬        # Doesn't contain 11
          bṘ   # Get the binary of that, reversed
            1J # Append a 1
</code></pre>
"
"236655","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>÷!‹(øb+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDtyHigLkow7hiKyIsIiIsImFiYyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>÷       # Push each to the stack
 !‹(    # (input-1) times... 
    øb  # Parenthesise what's currently on the stack
      + # and append it
</code></pre>
"
"236674","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>RṀ</code>, 7 bytes</h1>
<pre><code>+{₀℅¬|›
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=R%E1%B9%80&amp;code=%2B%7B%E2%82%80%E2%84%85%C2%AC%7C%E2%80%BA&amp;inputs=1%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>+{₀ʁ℅¬|›
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%2B%7B%E2%82%80%CA%81%E2%84%85%C2%AC%7C%E2%80%BA&amp;inputs=1%0A2&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>+        # Add the two (implicitly input) numbers
 {       # While...
    ℅    # Random choice of...
   ʁ     # range 0 to...     (Unnecessary in flagged version)
  ₀      # 10 (exclusive)
     ¬   # Is 0
      |› # Increment
</code></pre>
"
"236760","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes</h1>
<pre><code>:±+ʁ:±†vǔd$ʁ:v+∷+2(ṘømÞT
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCI6wrEryoE6wrHigKB2x5RkJMqBOnYr4oi3KzIo4bmYw7htw55UIiwiKSB24bmE4oGLIiwiIiwiMlxuNCJd"" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>-3 bytes thanks to lyxal<br />
-1 byte thanks to Unrelated String</p>
<pre><code>:±+ʁ:±†vǔd$ʁ:v+∷+2(ṘømÞT     Full Program; take in order b, a
:                            duplicate b
 ±                           sign
  +                          add (0 if b is 0, otherwise b+1)
   ʁ                         range (0..x-1)
    :                        duplicate
     ±                       sign ([0, 1, 1, ..., 1] of length 0 / b+1)
      †                      logical NOT - [1, 0, 0, ..., 0]
       vǔ                    vectorized rotate; identity matrix of size 0 / b+1
         d                   double; [2, 0, 0], [0, 2, 0], [0, 0, 2]
          $                  swap a to TOS
           ʁ                 range; 0..a-1
            :                duplicate
             v+              add each; addition table; [2, 3, 4], [3, 4, 5], [4, 5, 6]
               ∷             parity; checkerboard of size a with 0 in top-left
                +            add the two matrices together
                  2(....)    repeat twice
                    Ṙ        reverse (flip vertical)
                     øm      palindromize (reflect vertical; do not copy middle)
                       ÞT    transpose
</code></pre>
"
"236810","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>L‹k(*sY
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=L%E2%80%B9k%28*sY&amp;inputs=foobar&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Get gamed on @emanresuA</p>
<h2>Explained</h2>
<pre><code>L‹k(*sY
L‹      # Push the length of the input, but decremented
  k(    # Push &quot;()&quot;
    *   # and repeat it ↑↑ times
     s  # sort that
      Y # and interleave it with the input
</code></pre>
"
"236854","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>τL
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%CF%84L&amp;inputs=4%0A1200&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simplest method</p>
<p><code>τ</code> does the base conversion, and <code>L</code> gives the length.</p>
"
"236890","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 55 bytes</h1>
<pre><code>####‛‛#
‛⟑ǒ#¬⟑#
‛¬ẋ#ẋǒ#
#######
#ǒẋ#ẋ¬‛
#⟑¬#ǒ⟑‛
#‛‛####
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%23%23%23%23%E2%80%9B%E2%80%9B%23%0A%E2%80%9B%E2%9F%91%C7%92%23%C2%AC%E2%9F%91%23%0A%E2%80%9B%C2%AC%E1%BA%8B%23%E1%BA%8B%C7%92%23%0A%23%23%23%23%23%23%23%0A%23%C7%92%E1%BA%8B%23%E1%BA%8B%C2%AC%E2%80%9B%0A%23%E2%9F%91%C2%AC%23%C7%92%E2%9F%91%E2%80%9B%0A%23%E2%80%9B%E2%80%9B%23%23%23%23&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a> | <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%23%E2%80%9B%E2%80%9B%23%23%23%23%0A%23%E2%9F%91%C2%AC%23%C7%92%E2%9F%91%E2%80%9B%0A%23%C7%92%E1%BA%8B%23%E1%BA%8B%C2%AC%E2%80%9B%0A%23%23%23%23%23%23%23%0A%E2%80%9B%C2%AC%E1%BA%8B%23%E1%BA%8B%C7%92%23%0A%E2%80%9B%E2%9F%91%C7%92%23%C2%AC%E2%9F%91%23%0A%23%23%23%23%E2%80%9B%E2%80%9B%23&amp;inputs=&amp;header=&amp;footer="" rel=""noreferrer"">Try it flipped</a></p>
<p>The code is rotationally symetrical.</p>
"
"236900","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ǎƛṖ;fU'⁰≠
</code></pre>
<h2>Explanation</h2>
<pre><code>&lt;implicit input&gt;
ǎ                 - Get substrings
 ƛṖ;              - Map over substrings: Get permutations
    f             - Flatten it
     U            - Uniquify, remove all duplicates
      '⁰≠         - Filter lambda: Keep all elements that don't equal input
&lt;implicit output&gt;
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C7%8E%C6%9B%E1%B9%96%3BfU%27%E2%81%B0%E2%89%A0&amp;inputs=Abcde&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"236924","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 3 bytes</h1>
<pre><code>3•y
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=3%E2%80%A2y&amp;inputs=abcde&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>3•  # Repeat each character three times
  y # Get every other character
</code></pre>
"
"236938","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>(søeRf∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%28s%C3%B8eRf%E2%88%91&amp;inputs=10%0A%271%27&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>(       # k times...
 s      # Sort 
  øe    # Run length encode
    R   # Reverse each
     f  # Flatten
      ∑ # Sum
</code></pre>
"
"236944","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>İǓZ(n÷Ȧ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C4%B0%C7%93Z%28n%C3%B7%C8%A6&amp;inputs=%5B0%2C2%2C5%5D%0A%5B1%2C2%2C3%2C4%2C5%2C6%2C7%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>İ       # Get the elements at those indices
 Ǔ      # Rotate
  Z     # Zip with the indices
   (n   # Foreach
     ÷Ȧ # Assign that index to that value
</code></pre>
"
"237021","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ṖvKf↔
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%96vKf%E2%86%94&amp;inputs=roomt%0A%5B%22as%22%2C%20%22to%22%2C%20%22too%22%2C%20%22or%22%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This has to be the first time I've found a use for <code>K</code> on strings lol</p>
<h2>Explained</h2>
<pre><code>ṖvKf↔
Ṗ      # All permutations of the input word
 vK    # and get the divisors (substrings that split the string into more than once piece - idk how this actually makes this work)
   f   # flatten that
    ↔  # remove words from the input list that aren't in ^
</code></pre>
"
"237065","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>%21+S⁰*∷
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%2521%2BS%E2%81%B0*%E2%88%B7&amp;inputs=2%0A3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 thanks to emanresuA</em></p>
<p>Haha 05ab1e porting goes brrrr. When v2.6.0pre2 drops later this week, this'll be 7 bytes:</p>
<pre><code>%21+⁰ẋ∷
</code></pre>
<h2>Explained (old)</h2>
<pre><code>%21+S⁰*⁰ȯ # Full program, takes arity, length
%         # Push length mod arity,
 21+      # add 21 to that,
    S     # and cast to string. (This value will be called x)
     ⁰    # Push the length,
      *   # and repeat x that many times. (This value will be called y)
       ⁰  # Push the length again,
        ȯ # and push y[length:]
</code></pre>
"
"237087","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>2ẇRf
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=2%E1%BA%87Rf&amp;inputs=%5B1%2C2%2C3%2C4%2C5%2C6%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>2ẇ   # Split list into groups of two
  R  # Reverse each group
   f # Flatten
</code></pre>
"
"237177","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ɾ²Þ×'∑?=;tṘ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%C2%B2%C3%9E%C3%97%27%E2%88%91%3F%3D%3Bt%E1%B9%98&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"237245","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>¡›
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A1%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the Jelly answer.</p>
<pre><code>   # (implicit zero)
¡  # Factorial
 › # Incremented
</code></pre>
<p>Doubled (<a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%A1%C2%A1%E2%80%BA%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>):</p>
<pre><code>¡    # 0 factorial = 1
 ¡   # 1 factorial = 1
  ›› # Incremented twice = 3
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ðL›
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0L%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ð   # Space character
 L  # Length
  › # Incremented
</code></pre>
<p>Doubled (<a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%B0%C3%B0LL%E2%80%BA%E2%80%BA&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a>)</p>
<pre><code>ðð     # Space character (one's a nop)
  LL   # Length twice (one's a nop)
    ›› # Incremented twice
</code></pre>
"
"237247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes, score 141</h1>
<pre><code>`¤∞ ∵⁽ In A DoṖ₃, Ṙ↳!
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%C2%A4%E2%88%9E%20%E2%88%B5%E2%81%BD%20In%20A%20Do%E1%B9%96%E2%82%83%2C%20%E1%B9%98%E2%86%B3!&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A compressed string.</p>
<p>Despite various attempts, I haven't found anything better than this :P</p>
<p>The score is 108 if you count the Unicode holy characters (<code>¤∞ṖṘ</code>) as holy.</p>
"
"237259","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ṄµL;'∆²A;Rh
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%84%C2%B5L%3B%27%E2%88%86%C2%B2A%3BRh&amp;inputs=7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Ṅ           # Integer partitions
 µL;        # Sorted by length
    '   ;   # Filtered by...
       A    # All...
     ∆²     # Are square
          h # Get first (And therefore shortest)
         R  # Reversed
</code></pre>
"
"237309","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> <s>11</s> 10 bytes</h1>
<pre><code>KḂZƛṅL;?Lc
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%E1%B8%82Z%C6%9B%E1%B9%85L%3B%3FLc&amp;inputs=28&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Hmm yes <s>Jelly</s> 05AB1E porting goes brr. Outputs <code>0</code> for digit small, <code>1</code> for everything else.</p>
<h2>Explained</h2>
<pre><code>KḂZƛṅL;?Lc
K            # factors_of(input)
 Ḃ           # that, and that reversed 
  Z          # zip those two -&gt; pairs of factors that have product = input
   ƛṅL;      # join each on spaces and take lengths
       ?L    # input length
         c   # is in that list?
</code></pre>
"
"237362","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ka`a`kH
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=ka%60a%60kH&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pretty straightforward: The <code>kH</code> at the end is a builtin for <code>Hello, World!</code>, and that's the only thing that gets implicitly printed.</p>
<h4>With characters removed:</h4>
<pre><code>k``H
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%60%60H&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This makes use of a quirk in Vyxal where you can put a string in the middle of a constant diagraph, and the constant will be pushed after the string, making this equivalent to <code>``kH</code>, which pushes the same builtin as before and prints it.</p>
"
"237374","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, -8 bytes <sup>(2-10 bytes)</sup></h1>
<p>Not the most original method, but it's short.</p>
<pre><code>{,
</code></pre>
<h2>Explanation</h2>
<pre><code>{         - While non-zero
 ,        - Print implicit input
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%7B%2C&amp;inputs=aeugh&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"237379","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 9 bytes</h1>
<pre><code>ẏƛ¹n~i⁰pȦ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%BA%8F%C6%9B%C2%B9n%7Ei%E2%81%B0p%C8%A6&amp;inputs=%5B%5B1%2C2%5D%2C%5B3%2C4%5D%2C%5B5%5D%2C%5B%5D%5D%0A7&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>I'm sure Aaron or Emanresu will come along and outgolf me with better use of stack/context, but for now, gaming.</s> Turns out I did that.</p>
<h2>Explained</h2>
<pre><code>ẏƛ¹n~i⁰pȦ   # Full program, takes the nested lists (A) and then the integer (n)
ẏ           # Push the range [0, len(A))
 ƛ          # and to each item I:
  ¹n~i      #     push A[I] without popping the top two items on the stack
      ⁰p    #     prepend n to that
        Ȧ   #     and A[I] = that
</code></pre>
"
"237405","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 - 160 = -157 bytes</h1>
<pre><code>ɾṅ∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C9%BE%E1%B9%85%E2%88%91&amp;inputs=55*96-12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Gaming. Use <code>**</code> for pow. This works because all input is auto evaluated</p>
"
"237409","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>`HHeelllloo,,  WWoorrlldd!!`√
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60HHeelllloo%2C%2C%20%20WWoorrlldd!!%60%E2%88%9A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`Hello, World!√
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60Hello%2C%20World!%E2%88%9A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Without using the <code>kH</code> builtin, which returns &quot;Hello, World!&quot;</p>
<pre><code>`HHeelllloo,,  WWoorrlldd!!`  # String
                            √ # Get every second character
</code></pre>
<pre><code>`Hello, World!  # String (unterminated)
              √ # Ignored due to parsing bug
</code></pre>
"
"237410","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 33 bytes</h1>
<pre><code>\` ð`HHeelllloo,,  WWoorrlldd!!`√
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%5C%60%20%C3%B0%60HHeelllloo%2C%2C%20%20WWoorrlldd!!%60%E2%88%9A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`ðHello, World!`
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%C3%B0Hello%2C%20World!%60&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>\ `Hello, World!√
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%5C%20%60Hello%2C%20World!%E2%88%9A&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>These all exploit the bug/feature that single special characters in strings are ignored during parsing.</p>
<pre><code>\`                                # Push a backtick (useless)
   ð                              # Push a space (useless)
    `HHeelllloo,,  WWoorrlldd!!`  # String literal
                                √ # Get every second character
</code></pre>
<pre><code>` Hello, World!` # String literal
 ð               # Single non-ascii character (ignored)
</code></pre>
<pre><code>\                 # Push a space
  `Hello, World!  # String literal (unterminated)
                √ # Single non-ascii character - ignored
</code></pre>
"
"237413","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, -18 bytes</h1>
<pre><code>2∨6*¤꘍₴
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=2%E2%88%A86*%C2%A4%EA%98%8D%E2%82%B4&amp;inputs=3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>2∨      # n || 2
  6*    # times 6
    ¤꘍  # spaces
      ₴ # Without a trailing newline
</code></pre>
<h1>Polyglot, 1 byte</h1>
<pre><code>0
</code></pre>
<p>In Vyxal, <a href=""https://tio.run/##yy9OTMpM/f/f4P9/AA"" rel=""nofollow noreferrer"">05AB1E</a>, <a href=""https://tio.run/##y9bNS8/7/9/g/38A"" rel=""nofollow noreferrer"">K</a>, (edit in more), prints 0 with a trailing newline.</p>
"
"237415","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes, score 38</h1>
<pre><code>‛ƛ⁋`øø, ×ŀ ⋎Ė!`&quot;Ṅ2•
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%C6%9B%E2%81%8B%60%C3%B8%C3%B8%2C%20%C3%97%C5%80%20%E2%8B%8E%C4%96!%60%22%E1%B9%842%E2%80%A2&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>‛ƛ⁋                 # Compressed string
   `øø, ×ŀ ⋎Ė!`     # Compressed string
               &quot;Ṅ   # Pair and join by spaces
                 2• # Double each character
</code></pre>
"
"237420","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>‹
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%B9&amp;inputs=1&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs 0 for truthy and something else for falsy.</p>
<p>Port of the other answers, decrements.</p>
"
"237426","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>k(↔k(øo[tkd\(+$ck($i|\(
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=k%28%E2%86%94k%28%C3%B8o%5Btkd%5C%28%2B%24ck%28%24i%7C%5C%28&amp;inputs=%27%281%2B%282%2F%27&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>k(↔                     # When you remove all but `()` from the input
   k(øo                 # Then remove that until there is no change
       [                # Is there nothing left?
                     \( # If so, opening bracket
                    |   # Else...
        t               # Is the last character of the input...
              $c        # Contained in...
         kd\(+          # Digits + `(`?
                k($i    # Index that into `()`
</code></pre>
"
"237430","<h1><a href=""https://github.com/Vyxal/Vyxal/releases/tag/v2.6.0pre1"" rel=""nofollow noreferrer"">Vyxal 2.6.0pre1</a> , 6 bytes</h1>
<pre><code>K~Ḣ'AA
</code></pre>
<p>No TIO link yet.</p>
<pre><code>K      # Substrings
 ~Ḣ    # Filtered by a[:1] exists (len(a) &gt; 1)
   '   # Filtered by...
     A # All...
    A  # Are vowels.
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>K'Ḣ;'kv↔=
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=K%27%E1%B8%A2%3B%27kv%E2%86%94%3D&amp;inputs=abeoic&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>K         # Substrings
 ' ;      # Filtered by...
  Ḣ       # a[1:] is nonempty
    '     # Filter again by...
       ↔  # Removing everything but...
     kv   # Vowels
        = # Leaves it identical to the original.
</code></pre>
"
"237432","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>‛()$vO≈9ʀ\)J?tc∨
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%9B%28%29%24vO%E2%89%889%CA%80%5C%29J%3Ftc%E2%88%A8&amp;inputs=%27%281%2B%27&amp;header=&amp;footer="" rel=""noreferrer"">Try it Online!</a></p>
<p>0 for <code>(</code> and 1 for <code>)</code></p>
"
"237451","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 31 bytes (safe)</h1>
<pre><code>I.dI:⅛kF*×u⅛Ė.SṪḢ42f÷₍+*Π¾J∑Cøṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=I.dI%3A%E2%85%9BkF*%C3%97u%E2%85%9B%C4%96.S%E1%B9%AA%E1%B8%A242f%C3%B7%E2%82%8D%2B*%CE%A0%C2%BEJ%E2%88%91C%C3%B8%E1%B9%99&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Flag: <code>EEEEEEEEEEEEEEEEEEEEEEEE</code> Flag should be printed to STDOUT.</p>
<p>Under the original specifications for this cop, okie had a clever crack <a href=""https://codegolf.stackexchange.com/a/237565/101522"">here</a>, but that was an unintentional crack, so a couple clarifications are in order.</p>
<ul>
<li><p>The input will not contain any subset of the flag.</p>
</li>
<li><p>The program should not return any errors.</p>
</li>
</ul>
<blockquote class=""spoiler"">
<p> Intended Solution: <code>21⅛3</code> <a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=I.dI%3A%E2%85%9BkF*%C3%97u%E2%85%9B%C4%96.S%E1%B9%AA%E1%B8%A242f%C3%B7%E2%82%8D%2B*%CE%A0%C2%BEJ%E2%88%91C%C3%B8%E1%B9%99&amp;inputs=21%E2%85%9B3&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a><br><br>Before execution, Vyxal attempts to execute the input and see what it returns. The reason for this is to allow you to do things like input a list in Vyxal format, and it will work as intended. This also allows you to put Vyxal code in the input, but normally it will just get captured as a string. For example, and input of <code>69d:e</code> would just input the string <code>69d:e</code>.<br><br>However, if you put a number at the end of that input, it only captures that number as input, and discards all of the code leading up to it. For example, an input of <code>69d:e2</code> would input the number <code>2</code>, and discard the <code>69d:e</code>.<br><br>In the discarded code, trying to assign variables and functions doesn't do anything, nor does assigning to the global register, since those are in a different scope from the main program. However, the global array is global, and persists after the input execution. In the solution, <code>21⅛3</code> pushes <code>21</code> to the global array, then inputs <code>3</code>.<br><br>Now let's go through the program step-by-step.<br><br><code>.dI:⅛</code> - Push 1 to the global array and to the stack<br><br><code>kF*</code> - Multiply <code>FizzBuzz</code> by the 1 on the stack<br><br><code>u⅛</code> - Push -1 to the global array<br><br><code>×  Ė</code> - Multiply the <code>FizzBuzz</code> by the inputted 3 to get <code>FizzBuzzFizzBuzzFizzBuzz</code><br><br><code>.SṪḢ</code> - Push <code>.</code><br><br><code>42f÷₍+*Π</code> - Push 48<br><br><code>¾J∑</code> - Concatenate the global array and the 48 and add. We used the input to push 21 to the global array, so this comes out to 69.<br><br><code>C</code> - Convert to character to get <code>E</code><br><br><code>øṙ</code> - Regex replace: In string <code>FizzBuzzFizzBuzzFizzBuzz</code>, replace with <code>E</code> anything matching the regex <code>.</code></p>
</blockquote>
"
"237547","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>ḭ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B8%AD&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Because I forgot to make integer division account for division by 0.</p>
<h2>Better Explanation</h2>
<p>Okay so normal division (<code>/</code>) accounts for division by 0 - it just always returns 0 (which has helpful uses for code golf). This is done in the overloads internally:</p>
<pre class=""lang-py prettyprint-override""><code>​def​ ​divide​(​lhs​, ​rhs​): 
 ​    ​types​ ​=​ ​vy_type​(​lhs​), ​vy_type​(​rhs​) 
  
 ​    ​def​ ​handle_numbers​(​lhs​, ​rhs​): 
 ​        ​if​ ​rhs​ ​==​ ​0​: 
 ​            ​return​ ​0 
 ​        ​normal​, ​int_div​ ​=​ ​lhs​ ​/​ ​rhs​, ​lhs​ ​//​ ​rhs 
 ​        ​return​ [​normal​, ​int_div​][​normal​ ​==​ ​int_div​] 
  
 ​    ​return​ { 
 ​        (​Number​, ​Number​): ​lambda​: ​handle_numbers​(​lhs​, ​rhs​),
</code></pre>
<p>That's taken directly from the vyxal source code btw.</p>
<p>Now the problem is that I never actually special cased division by 0 in the overloads for integer division:</p>
<pre class=""lang-py prettyprint-override""><code> 
 ​def​ ​integer_divide​(​lhs​, ​rhs​): 
 ​    ​types​ ​=​ ​vy_type​(​lhs​), ​vy_type​(​rhs​) 
 ​    ​return​ { 
 ​        (​Number​, ​Number​): ​lambda​: ​lhs​ ​//​ ​rhs​,
</code></pre>
<p>As you can see, it just straight up tries to do python integer division without accounting for the special case normal division handles.</p>
<p>Also, just for clarification, if there aren't any inputs provided to a vyxal program, <code>0</code> is implicitly used.</p>
<h2>Alternate solutions</h2>
<pre><code>°
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C2%B0&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>How you gonna push the function reference of an undefined function?</p>
<pre><code>←
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%86%90&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same thing with variables</p>
"
"237566","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ƛ[Ḣx+
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%5B%E1%B8%A2x%2B&amp;inputs=%5B%27laser%27%2C%27bat%27%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>(IMO) this is a really neat recursive solution. Port of my JS answer that came out really nicely.</p>
<pre><code>ƛ     # Foreach value as n
 [    # If truthy (Not empty string)
   x  # Call this function (The function we're mapping with)
  Ḣ   # With n[1:] - remove first character
    + # Appended to the result
</code></pre>
<p>The &quot;concatenation of suffixes&quot; approach doesn't do any better:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ƛṘ¦∑Ṙ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C6%9B%E1%B9%98%C2%A6%E2%88%91%E1%B9%98&amp;inputs=%5B%27laser%27%2C%27bat%27%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ     # Map...
 Ṙ    # Reverse
  ¦   # Cumulative sums (prefixes)
   ∑  # Concatenated
    Ṙ # Reversed
</code></pre>
"
"237586","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>Ḣ0J≈?¯ȧ:19∩⊍¬?Ḃ⁼Wa
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B8%A20J%E2%89%88%3F%C2%AF%C8%A7%3A19%E2%88%A9%E2%8A%8D%C2%AC%3F%E1%B8%82%E2%81%BCWa&amp;inputs=1234567890&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>0</code> can still go frick itself.</p>
<h2>Explained</h2>
<pre><code>Ḣ0J≈?¯ȧ:19∩⊍¬?Ḃ⁼Wa
Ḣ0J≈               # Test 1: Is the input[1:] all 0's? (not why I hate 0 btw)
    ?¯ȧ:19∩⊍¬      # Test 2: Is the differences between all numbers either 1 or 9? (this is why I hate 0)
             ?Ḃ⁼   # Test 3: Is the input a palindrome?
                Wa # Did any of the tests pass? For some reason the -G flag doesn't work here to save 2 bytes. /shrug
</code></pre>
"
"237659","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>t$et
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=t%24et&amp;inputs=12345%0A12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No one said it had to be efficient, and the rules forbid only calculating <span class=""math-container"">\$A^B\$</span>, not <span class=""math-container"">\$A[-1]^B\$</span>.</p>
<pre><code>   t # Last digit of...
t    # Last digit of A
  e  # To the power of
 ?   # B
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=t%244%25et&amp;inputs=12345%0A12&amp;header=&amp;footer="" rel=""nofollow noreferrer"">More efficient version</a></p>
"
"237660","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes, <a href=""https://codegolf.stackexchange.com/a/237661/100664"">Cracked by lyxal</a></h1>
<pre><code>`25/n:([|eĖĖ
</code></pre>
<p>Have fun!</p>
"
"237663","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>`25/$n:([|tėĖĖ
</code></pre>
<p>On to round 2!</p>
"
"237666","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>‹Eʁµb∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E2%80%B9E%CA%81%C2%B5b%E2%88%91&amp;inputs=4&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  ʁ    # 0...
‹E     # 2 ** (n-1)
   µ   # Sorted by
    b  # binary
     ∑ # Summed
</code></pre>
"
"237701","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 6 bytes</h1>
<pre><code>ÞSḢƛ∑₂
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=s&amp;code=%C3%9ES%E1%B8%A2%C6%9B%E2%88%91%E2%82%82&amp;inputs=%5B8%2C%205%2C%209%2C%204%2C%205%2C%201%2C%200%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to Lyxal for this version.</p>
<pre><code>ÞS     # Sublists
  Ḣ    # Remove the empty list at the start
   ƛ   # Map to...
    ∑₂ # Even sum?
       # (s flag) sum of all
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ÞS'∑₂;L‹
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%C3%9ES%27%E2%88%91%E2%82%82%3BL%E2%80%B9&amp;inputs=%5B8%2C%205%2C%209%2C%204%2C%205%2C%201%2C%200%5D&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ÞS       # Sublists (Including empty array :( )
  '  ;   # Filtered by...
   ∑     # Sum...
    ₂    # Is even
      L‹ # Length of this -1 (Because empty array)
</code></pre>
"
"237710","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>36</s> 27 bytes</h1>
<pre><code>ṫ/ƛ\:/ƛ⌐ƛ\-/k≈•⌊÷ṡ;f;÷Ẋ;f2ẇ
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%E1%B9%AB%2F%C6%9B%5C%3A%2F%C6%9B%E2%8C%90%C6%9B%5C-%2Fk%E2%89%88%E2%80%A2%E2%8C%8A%C3%B7%E1%B9%A1%3Bf%3B%C3%B7%E1%BA%8A%3Bf2%E1%BA%87&amp;inputs=%221-2%2C5%3A10-12%2F0%3A1-3%2F%22&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-9 thanks to Kevin</em></p>
<p>With colour:</p>
<p><a href=""https://i.stack.imgur.com/IOnO4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IOnO4.png"" alt=""enter image description here"" /></a></p>
<h2>Explained</h2>
<pre><code>ṫ/ƛ\:/ƛ⌐ƛ\-/k≈•⌊÷ṡ;f;÷Ẋ;f2ẇ
ṫ/                           # Split the input string on its last character (&quot;/&quot;) - returns groups
  ƛ                          # To each group G:
   \:/                       #   Split G on &quot;:&quot; - returns sets
      ƛ                      #   To each set S:
       ⌐                     #     Split S on commas - returns values
        ƛ                    #     To each value V:
         \-/                 #       Split V on &quot;-&quot; - returns items in range
            k≈•              #       Mold that to the shape of [0, 1] - honestly idk what this does, but it works and it's genius. (it seems to make it so that each list is of length 2, even if it's a single item list)
              ⌊÷ṡ            #       Generate an inclusive range between the two numbers
                 ;           #     End map over each V
                  f          #     and flatten that - returns a flat list of all numbers to cartesian product
                   ;         #   End map over each S
                    ÷Ẋ       #   Cartesian product of the sets
                      ;      # End map over each G
                       f2ẇ   # flatten and place back into pairs
</code></pre>
"
"237836","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>⌈ƛA∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIjGm0HiiJEiLCIiLCJUaGlzIGlzIHRoZSBmaXJzdCB0ZXN0IGNhc2UiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌈    # Split on spaces
 ƛ   # Map...
  A  # Vowel mask (1 for vowel, 0 for not)
   ∑ # Sum
</code></pre>
"
"237837","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kv*kV*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrdiprVioiLCIiLCJUaGlzIGlzIHRoZSBmaXJzdCB0ZXN0IGNhc2UiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  *    # Ring translate by
kv     # Lowercase vowels
     * # Ring translate by
   kV  # Uppercase vowels
</code></pre>
"
"237901","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ẏṖ℅Ih⁽N¨M
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/huZbihIVJaOKBvU7CqE0iLCIiLCJzdHJpbmciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>ẏ         # List of [0..len(input))
 Ṗ℅       # Random permutation
   Ih     # First half of the list
     ⁽N¨M # Toggle case of the indexes in the list
</code></pre>
<p>There is actually a dedicated builtin for <code>Random Permutation</code>, which is faster, but there is a bug in it, so we have to get every permutation and choose a random one.</p>
"
"237937","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ǎ?żvef‛ß¦c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHjj/FvHZlZuKAm8OfwqZjIiwiIiwibm4uaS5jLmVlISEhIl0="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>ǎ          # Substrings
   v       # Each...
    e      # Get every nth character for each of...
 ?ż        # 1...input length
     f     # flattened
         c # Includes
      ‛ß¦  # Compressed string 'nice'
</code></pre>
"
"237970","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>żḂ*Þ•
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCLFvOG4girDnuKAoiIsIiIsIiIsIlsyNy41MCwgMjUuMDAsIDUuMDAsIDcwLjAwLCA2NS4wMCwgMjUuMDAsIDUwMC4wMCwgNC4yNSwgMjg5LjY1LCAzMTguMjYsIDEwMC44MywgMTAwLjEzXSJd"" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>Vyxal is able to do the times-reverse thing more efficiently than Jelly (because you need the <code>$</code> for chaining in Jelly, and Vyxal has a bifurcate command), but unfortunately it does not have 1-byte dot product like Jelly does, so the byte save gets canceled out.</p>
<p>Unfortunately (for me), caird+pxeger have found a 4-byter. I mean, I could pretty trivially get one by cheating:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 4 bytes</h1>
<pre><code>żḂ**
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCLFvOG4gioqIiwiIiwicyIsIlsyNy41MCwgMjUuMDAsIDUuMDAsIDcwLjAwLCA2NS4wMCwgMjUuMDAsIDUwMC4wMCwgNC4yNSwgMjg5LjY1LCAzMTguMjYsIDEwMC44MywgMTAwLjEzXSJd"" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>but I'll try to figure something out.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ÞSf∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlNm4oiRIiwiIiwiWzI3LjUwLCAyNS4wMCwgNS4wMCwgNzAuMDAsIDY1LjAwLCAyNS4wMCwgNTAwLjAwLCA0LjI1LCAyODkuNjUsIDMxOC4yNiwgMTAwLjgzLCAxMDAuMTNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>4 bytes by porting the same solution (ovs's) that everyone else is. Thanks to lyxal for finding this.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>d</code>, 2 bytes</h1>
<pre><code>ÞS
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJkIiwiIiwiw55TIiwiIiwiWzI3LjUwLCAyNS4wMCwgNS4wMCwgNzAuMDAsIDY1LjAwLCAyNS4wMCwgNTAwLjAwLCA0LjI1LCAyODkuNjUsIDMxOC4yNiwgMTAwLjgzLCAxMDAuMTNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Flag abuse for the win. Credit to Aaroneous Miller.</p>
"
"238077","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>ṖvøṖÞf'L⁰=;'Ṡ≈;vhƛ₍LΠwJ;↓Ṫ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZZ2w7jhuZbDnmYnTOKBsD07J+G5oOKJiDt2aMab4oKNTM6gd0o74oaT4bmqIiwiIiwiWzEsIDIsIDMsIDRdXG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This was horrible to make. Vyxal is horridly cursed sometimes...</p>
<p>Note: Almost all sort-related functions are broken.</p>
<p><span class=""math-container"">\$O\left(n! \cdot 2^n\right)\$</span> complexity I think, so can't run any testcases.</p>
<pre><code>Ṗ                          # All permutations
 vøṖ                       # All partitions of these
    Þf                     # Flatten by 1 layer to get all partitions of permutations
      '   ;                # Filter by...
       L⁰=                 # Length is equal to input
           '  ;            # Filter by
            Ṡ≈             # Sums are all same
               vh          # Get first of each
                 ƛ     ;   # Map to...
                  ₍LΠ      # [length, product]
                     wJ    # Appended to original
                        ↓  # Minimum by last item ([length, product])
                         Ṫ # Remove the last of this.
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZZ2w7jhuZbDnmYnTOKBsD07J+G5oOKJiDvCtWjigo1MzqA7aCIsIiIsIlsxLCAyLCAzLCA0XVxuMiJd"" rel=""nofollow noreferrer"">22 byte version if sorting worked</a></p>
"
"238187","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>λ›⁰ʀnÞẊƛż›e∑;?c;ṅ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu+KAuuKBsMqAbsOe4bqKxpvFvOKAumXiiJE7P2M74bmF4oC6IiwiIiwiMjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Vyxal has become bugless at last.</p>
"
"238216","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>C₆-∑₁=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oKGLeKIkeKCgT0iLCIiLCJCVVpaWSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of the GS2 answer. Requires input to be uppercase (7 bytes for lowercase)</p>
<h2>Explained</h2>
<pre><code>C₆-∑₁=  # Full program - takes single string S
C       # push [ord(char) for char in S]
 ₆-     # and subtract 64 from each
   ∑    # and get the sum of that.
    ₁=  # does that equal 100? 
</code></pre>
"
"238221","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>24</s>,  18 bytes</h1>
<pre><code>₌≬k+iE₍ht‛(]f=+÷rΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuaAiLCIiLCLigoziiaxrK2lF4oKNaHTigJsoXWY9K8O3cs6gIiwiIiwiKDIsIDVdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>I'm actually really proud of this answer, because it uses the new modifier parsing of 2.6.</p>
<p>With syntax highlighting:</p>
<p><a href=""https://i.stack.imgur.com/PPx1y.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/PPx1y.png"" alt=""syntax highlighted version"" /></a></p>
<h2>Explained</h2>
<pre class=""lang-py prettyprint-override""><code>₌≬k+iE₍ht‛(]f=+÷rΠ
₌                  # Apply the following to the same stack:
 ≬                 #   The next 3 elements as a single lambda, taking argument n:
  k+iE             #     eval(n[1:-1]) - the two numbers separated by a comma
₌                  #   and
      ₍ht          #   [n[0], n[-1]] - the range brackets
         ‛(]f=     # Does the first bracket equal &quot;(&quot; and does the last bracket equal &quot;]&quot; - this determines how much to offset the range; because the two numbers in the original input will be passed to Vyxal's range function which acts like python's range() function
              +    # add those offsets: an exclusive range start means the first number needs to be incremented because range() includes the first argument. an inclusive range start means the last number needs to be incremented because range() stops before the last argument.
               ÷r  # push the range between the two numbers + their offsets
                 Π # and take the product
</code></pre>
"
"238243","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <sup><s>18</s></sup> <sup><s>17</s></sup> 16 bytes</h1>
<pre><code>‛ɾ∷«W≤ḂΠǔ«½ǐ℅&quot;Ṅ₴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJvJvuKIt8KrV+KJpOG4gs6gx5TCq8K9x5DihIVcIuG5hOKCtCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>‛ɾ∷               # &quot;Joe&quot;
   «W≤ḂΠǔ«        # &quot;bidenmama&quot;
          ½       # Split in half
           ǐ      # Title Case
            ℅     # Random choice
             &quot;    # Wrap with &quot;Joe&quot;
              Ṅ   # Join by space
               ₴  # Print without newline
</code></pre>
<p>If trailing newlines were allowed, this could be <sup><s>14</s></sup> 13 bytes: <a href=""https://vyxal.pythonanywhere.com/#WyLhuaEiLCIiLCLigJvJvuKIt8KrV+KJpOG4gs6gx5TCq8K9x5DihIUiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"238307","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>≬E?≥ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaxFP+KJpeG5hSIsIiIsIjE1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Quite literally returns the first number where 2**n &gt;= input</p>
"
"238402","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ẏǒʀÞṁvs
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/HksqAw57huYF2cyIsIiIsIls1LCA5LCAtMiwgOCwgLTYsIDQsIDUsIDksIDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm way late to the party, but who cares when the program looks like it spells something with heavy skamtebord vibes.</p>
<h2>Explained</h2>
<pre><code>ẏǒʀÞṁvs
ẏ       # The range [0...len(input)]
 ǒ      # modulo each by 3 to get the chunk sizes
  ʀ     # cast each to range [0...n] for shape
   Þṁ   # mold the input to that, without repeating elements
     vs # sort each sublist 
</code></pre>
"
"238404","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>vL:‹$¦∷*a
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ2TDrigLkkwqbiiLcqYSIsIiIsIltcIk5FXCIsIFwiU0VcIiwgXCJTV1wiLCBcIk5XXCIsIFwiTlwiLCBcIkVcIiwgXCJTXCIsIFwiV1wiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>There's got to be a better way to do this. Outputs reversed - 1 for invalid, 0 for valid,</p>
<pre><code>vL        # Lengths
     ¦∷   # Cumulative sums modulo 2, tracking when on a square and when not  
    $  *  # Multiplied by
  :‹      # Those same lengths decremented
          # Each one is only true when on a square *and* trying to move diagonally
          # Which is invalid    
        a # Are any true? If so, there's an invalid one somewhere.
</code></pre>
"
"238410","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>λf⌐ṘKṠ₍tg1=A;ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu2bijJDhuZhL4bmg4oKNdGcxPUE7yK90IiwiIiwiMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Mmm yes apl porting. Outputs nth fully matched number 0 indexed</p>
"
"238413","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>λfḂ⌐¦ḂKv↓1=Π;ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu2bhuILijJDCpuG4gkt24oaTMT3OoDvIryIsIiIsIjEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes an integer <code>n</code> and returns first <code>n</code> elements of the sequence.</p>
<p>-1 thanks to @lyxal</p>
"
"238452","<h1><a href=""https://vyxal.pythonanywhere.com/"" rel=""nofollow noreferrer"">Vyxal</a>, 148 bytes, cracked by emanresuA</h1>
<pre><code>START
#IMPORT `\EMPTY\`
#IMPORT `\COMPLEX\`
#IMPORT &lt;LINEBREAK&gt;
`\REGEX\`
REGEX-REPLACE[COMPLEX-MATH[`0 100(1+:,)`], EMPTY-STRING, EMPTY-STRING]
END
</code></pre>
<p>This is probably most crazy code.</p>
"
"238483","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>C:12%⋏ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDOjEyJeKLj+G5hSIsIiIsIifigbbigbXigbXCs+KBtSciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Lynn's answer thanks to steffan.</p>
"
"238535","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>Ǎ⇩sĊvtṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHjeKHqXPEinZ04bmFIiwiIiwiYWNmenpBIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>Ǎ⇩sĊvtṅ
Ǎ       # keep only letters of the alphabet
 ⇩      # and convert to lowercase
  sĊ    # sort that and get the counts of each letter - this returns [[letter, count of letter] for each letter
    vtṅ # join the counts of letters on &quot;&quot;
</code></pre>
"
"238599","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ṘB$BrḢƛb?L∆Z
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZhCJEJy4biixptiP0ziiIZaIiwiIiwiJzAxMDAnIl0="" rel=""nofollow noreferrer"">Try it Online!</a>
Outputs as a list of lists of bits.</p>
<pre><code>ṘB           # x reversed as an integer
  $B         # x as an integer
    rḢ       # Exclusive range
      ƛ      # Map...
       b     # convert to binary
          ∆Z # Zfill to...
        ?L   # Input length
</code></pre>
"
"238609","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ẏ↵ṘZvƒẋf¦
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/ihrXhuZhadsaS4bqLZsKmIiwiIiwiMjA5NSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Jelly porting fun</p>
"
"239624","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 10 bytes</h1>
<pre><code>8:Ẋ18vβ⁺=+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI4OuG6ijE4ds6y4oG6PSsiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>I actually didn't port anything for once lol</s> 05ab1e porting go brrr.</p>
<h2>Explained</h2>
<pre><code>8:Ẋ18vβ⁺=+
8:Ẋ        # The cartesian product of the range(1, 9) and range(1, 9)
   18vβ    # convert each pair from arbitrary base 18
       ⁺=+ # add 162 to each (128 + the index of `=` in the vyxal codepage)
</code></pre>
<h2>11 bytes</h2>
<pre><code>8ƛ₀*9ɾM18vβ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI4xpvigoAqOcm+TTE4ds6yIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>8ƛ₀*9ɾM18vβ
8ƛ          # For each item n in the range [1, 8]:
  ₀*        #   Mulitply n by 10
    9ɾM     #   [[n * 10, x] for x in range(1, 10)]
       18vβ #   and convert each from arbitrary base 18 to base 10
</code></pre>
"
"239659","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>120</s> 113 bytes</h1>
<pre><code>3∵£\.\|?›ƛ⇧\.$꘍\[+\#n*+\\\_n›d*+&quot;;f÷?⇧Ẏ\]+?⇩1∴\#*+\.+¥-`|__`?:3&gt;[d‹|⇧]Ẏ‛_|+¥꘍:ð\_VȮȧL‹\#*\/+‛|/fJ2ʀ¥+\_*+÷WvøMøĊ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIz4oi1wqNcXC5cXHw/4oC6xpvih6dcXC4k6piNXFxbK1xcI24qK1xcXFxcXF9u4oC6ZCorXCI7ZsO3P+KHp+G6jlxcXSs/4oepMeKItFxcIyorXFwuK8KlLWB8X19gPzozPltk4oC5fOKHp13huo7igJtffCvCpeqYjTrDsFxcX1bIrsinTOKAuVxcIypcXC8r4oCbfC9mSjLKgMKlK1xcXyorw7dXdsO4TcO4xIrigYsiLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Posting this as a separate answer because it's so golfed, and uses the latest version of Vyxal.</p>
<h2>Explanation</h2>
<pre><code>----------------- TOP ------------
3∵£                                  # Store min(input, 3) into the register for later use 
   \.\|                              # Push a . and a |
       ?›ƛ                       ;   # Map 1...input+1 to
          ⇧\.$꘍                      # That+2 spaces after a dot
               \[+                   # Append a [
                  \#n*+              # Append that many #
                         \_n›d*      # That+1 underscores
                       \\      +&quot;    # Appended to a \ and paired with the previous
                                  f÷ # All of that flattened and each pushed to the stack
------------------- Doorway ------------------
?⇧Ẏ                                            # To the last of what was pushed in the previous, take the first input+2 characters
   \]+                                         # Append a ]
      ?⇩1∴\#*+                                 # Append min(input-2,1) hashes 
              \.+                              # Append a .
                 ¥-                            # Append min(input,3) -
                        ?:3&gt;[d‹|⇧]             # Input*2-1 if input&gt;3 else input+2
                   `|__`          Ẏ            # Repeat '|__' to that length
                                   ‛_|+        # Append '_|'
                                       ¥꘍      # Append min(input,3) spaces
                                         :ð\_V # Make a copy, and replace spaces with underscores 

---------- Entrance ------------
ȮȧL‹\#*\/+
ȮȧL                      # Length of top part of doorway with whitespace removed
   ‹\#*\/+               # That-1 #, plus a /
          ‛|/fJ          # Append ['|','/']
               2ʀ¥+      # [a,a+a,a+2] where a = min(3,input)
                   \_*+  # That many underscores appended to each of previous
                       ÷ # Iterate out those on the stack

- Final magic bit -
W       # Get the stack
 vøM    # Palindromise each, mirroring brackets
    øĊ  # Center each
      ⁋ # Join on newlines
</code></pre>
"
"239672","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆d
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIZkIiwiIiwiNywgNCwgM1xuMTcsIDYsIDIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Laughs in built-in. Generalised euclidian distance do be like that sometimes.</p>
"
"239678","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20</s> 15 bytes</h1>
<pre><code>f:ʀĠ•ƛḣv⇩$⇧p;f∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmOsqAxKDigKLGm+G4o3bih6kk4oencDtm4oiRIiwiIiwiWW91cmUgYS1uRXJkIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Or, if that's too long:</p>
<h2>1 byte</h2>
<pre><code>ǐ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHkCIsIiIsIllvdXJlIGEtbkVyZCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>f:ʀĠ•ƛḣv⇩$⇧p;f∑
f:               # Push two copies of the letters of the input
  ʀ              # is each letter in the first copy in the alphabet?
   Ġ             # group that on consecutive elements - this has the effect of grouping words.
    •            # reshape the other copy of the letters to have the same shape as that
     ƛ           # to each sublist L:
      ḣv⇩        #     push L[0] and [lower(x) for x in L[1:]] - on single length strings this just leaves L[0] on the stack.
         $⇧p     #     uppercase L[0] and prepend it to the other list
            ;    # close map
             f∑  # deep flatten and summate to get a single string - the `d` flag would save 3 bytes here by removing this pair and allowing structure autocompletion to save a byte.      
</code></pre>
"
"239784","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>:C₌sL:‹£%Ṙ(:¥n&quot;İn¥&quot;$Z÷→÷Ȧ←÷Ȧ&amp;‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI6Q+KCjHNMOuKAucKjJeG5mCg6wqVuXCLEsG7CpVwiJFrDt+KGksO3yKbihpDDt8imJuKAuSIsIiIsImVBaWVzIGEudHVyZWwgdmVlLnN0IGhucncgLnYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>What a mess of 30 bytes. Probably gonna be outgolfed by better stack control.</p>
<h2>Explained</h2>
<pre><code>:C₌sL:‹£%Ṙ(:¥n&quot;İn¥&quot;$Z÷→÷Ȧ←÷Ȧ&amp;‹
:                              # Push two copies of the input string
 C                             # and get the character code of each letter in the second copy
  ₌sL                          # push that sorted and it's length (parallel apply)
     :‹£                       # place the length of the string - 1 into the register - this will keep track of the nth character we're getting
        %Ṙ                     # reverse the list of each character code modulo the length of the string - this gets us our modulo indices (A[n])
          (                    # for each index n in that list:
           :                   #   The top of the stack is the first copy of the input string from earlier - we want to preserve this because we're modifying it with assignment, so make another copy to extract characters from
            ¥n&quot;İ               #  that string's (register)th and nth character
                n¥&quot;            #  push the list [n, register]
                   $Z          #  and then push zipped([n, register], [(register)th char, nth char]) - this allows us to create a list of [index to assign, character to assign]
                     ÷→        #  Place the last pair into the ghost variable for a bit, as we need to focus on the first pair of assignment.
                       ÷Ȧ      #  string[n] = (register)th char
                         ←÷Ȧ   #  string[register] = nth char
                            &amp;‹ #  Increment the register to swap the next character position.
                               # After all that, the final string is implicitly printed.
</code></pre>
"
"239794","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>K'?~•f⁼;₃
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLJz9+4oCiZuKBvDvigoMiLCIiLCJbXCJhXCIsIFwiYlwiLCBcImJcIiwgXCJhXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ah yes, the limitations of type overloading. Returns <code>0</code> for Truthy inputs and <code>1</code> for Falsey inputs.</p>
<h2>Explained</h2>
<pre><code>K'?~•f⁼;₃  # Takes input as a list of characters
K          # Prefixes of the input
 '         # Keep items where:
  ?~•      #   The item molded to the shape of the input
     f⁼    #   is the same as the input (i.e. non-vectorised equality)
       ;   # Close filter.
        ₃  # Is the length of the list 1? For falsey inputs, the resulting list will just contain the input meaning it doesn't have any truthy prefixes.
</code></pre>
"
"239834","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>vǏΠ'Þu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ2x4/OoCfDnnUiLCIiLCJbMjQsMjUsMjYsMjcsMjhdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Similar to ovs' answer. Outputs a list of lists of primes.</p>
<pre><code>vǏ     # Prime factors of each
  Π    # Cartesian product
   '   # Filter by
    Þu # All unique
</code></pre>
"
"239845","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>λSǎ⌊Uæ∑?=næ∧;ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu1PHjuKMilXDpuKIkT89bsOm4oinO+G5hSIsIiIsIjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input 1-indexed.</p>
<pre><code>λ           ;ṅ # First positive integer where...
         næ    # Number is prime
           ∧   # And...
 Sǎ⌊U          # Unique substrings of number, as numbers
     æ∑        # Have a count of primes
       ?=      # Equal to the input?
</code></pre>
"
"239863","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <del>29</del> <del>27</del> <del>25</del> 23 bytes</h1>
<pre><code>2(⌈ƛƛ:×c[¶1V];Ṅ;∩vṅ)∑¶↔
</code></pre>
<p>Split on wall, check if any spilt contain light, replace it with 1, transpose, do it again, check sum.</p>
<p>outputs empty string for false, dots otherwise.</p>
<p>-2 by @lyxal (pog)</p>
<p>-2 by @lyxal again (1 minute after first one)</p>
<p>-2 by ... yep still @lyxal</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyKOKMiMabxps6w5djW8K2MVZdO+G5hDviiKl24bmFKeKIkcK24oaUIiwiIiwiWycgICAgIFxcbiAgICcsICcgKlxcblxcblxcbipcXG5cXG5cXG4nLCAnICBcXG4gICAgKlxcbicsICcgXFxuKlxcblxcbiAgICAnXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLilqHGm1xcI1xcIFZcXExcXCpWXFwuwrZWO2Z3XFwlJCUiLCIiLCIjIyMjIy4jIyNcbiNMLi4uTC4uLlxuIyMuIyMjI0wuXG4jLkwuLiMjIyMiXQ=="" rel=""nofollow noreferrer"">translate the input</a></p>
"
"239933","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>∆Ċ:∆Kv∆Q
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIbEijriiIZLduKIhlEiLCIiLCJbMiwzLC0zNiwxMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The power of <strong>actual symbolic algebra</strong>.</p>
<h2>Explained</h2>
<pre><code>∆Ċ:∆Kv∆Q
∆Ċ        # Convert the list of coefficients into an expression that looks like a*x**n + b*x**(n-1) ... + z
  :       # Push a second copy of that
   ∆K     # Get the stationary points of that (returns x values)
     v∆Q  # and sub those x-values into the original equation
</code></pre>
"
"239947","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>k4'æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrNCfDpiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>k4   # 1m
  '  # 1...^ filtered by
   æ # is prime?
</code></pre>
"
"239978","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>C96-kr⁰Ẏ$vτ∑
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=C96-kr%E2%81%B0%E1%BA%8E%24v%CF%84%E2%88%91&amp;inputs=undiscoverability%0A8&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A bit messy but it works.</p>
<pre><code>C            #  Charcodes
 96-         # -96
    kr⁰Ẏ     # 0-9a-zA-Z sliced to input length
        $vτ  # Convert each to that base
           ∑ # Sum the result
</code></pre>
"
"239997","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ṄƛbṠs:ż⁼;∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYTGm2LhuaBzOsW84oG8O+KIkSIsIiIsIjE0Il0="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>Ṅ          # Integer partitions
 ƛ      ;  # Map...
  bṠ       # Sums of binary
    s      # Sorted
       ⁼   # Equal to
     :ż    # 1..length?
         ∑ # Sum (count valid)
</code></pre>
"
"240002","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ż-ȧZ⁽tṡfyĠ•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvC3Ip1rigb104bmhZnnEoOKAoiIsIiIsIls1LCA2LCA4LCAzLCA5LCA0LCAyLCAxLCA3XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The pains of not having tons of array focused built-ins</p>
<h2>Explained</h2>
<pre><code>ż-ȧZ⁽tṡfyĠ•
ż           # The range [1, len(input)]
 -ȧ         # and the absolute difference with the input
   Z        # Zip those together
    ⁽tṡ     # and sort that by tail - this is a work around way to group one list by the results of a function applied to it
       fy   # flatten and uninterleave this - this pushes the original list and the absolute differences but sorted
         Ġ  # group the indexes on consecutive items
          • # and mold the other list to the shape of that.
</code></pre>
"
"240056","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>ƛ?=TḂZ;UÞfµh;vt?Ṙ$İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGmz89VOG4glo7VcOeZsK1aDt2dD/huZgkxLAiLCIiLCJbMSwgMiwgMywgNCwgMiwgMSwgMywgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A clumsy port of Jonathan Allan's answer.</p>
<pre><code>ƛ     ;             # Map input to...
 ?=T                # Indices of that element
    ḂZ              # Zipped with its reverse
       UÞf          # Uniquify and flatten to a list of [index, pair index] pairs
          µh;       # Sort by first item
             vt     # Get second item of each
                  İ # Use those to index into
               ?Ṙ$  # Input reversed
</code></pre>
"
"240074","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 25 bytes</h1>
<pre><code>ʁ?(₅‹₍℅℅~İṁ£(n¥Ȧ)):₌₍GgṁW
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgT8o4oKF4oC54oKN4oSF4oSFfsSw4bmBwqMobsKlyKYpKTrigozigo1HZ+G5gVciLCIiLCI3XG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>25 bytes of fun. Takes <code>length</code> then <code>generations</code> and outputs <code>[list, [Max, Min], average]</code>. Can be <a href=""https://vyxal.pythonanywhere.com/#WyJXIiwiIiwiyoE/KOKCheKAueKCjeKEheKEhX7EsOG5gcKjKG7CpcimKSk64oKM4oKNR2fhuYEiLCIiLCI3XG4zIl0="" rel=""nofollow noreferrer"">24 bytes with the <code>W</code> flag</a></p>
<h2>Explained</h2>
<pre><code>ʁ?(₅‹₍℅℅~İṁ£(n¥Ȧ)):₌₍GgṁW
ʁ                          # The range [0, length) - this will be the list we modify
 ?(                        # (generation) times:
   ₅‹                      #   push the top of the stack, and its length + 1
     ₍℅℅                   #   choose two random items from the range [0, length) and place them into a list
        ~İ                 #   without popping anything, get the item at each randomly chosen index from the top list - this leaves [list, indexes, items] on the stack
          ṁ£               #   place the average of those two items into the register
            (...)          #   for each index i in the indexes list:
             n¥Ȧ           #      list[i] = register (the mean)
                 )         # close the main for loop
                  :        # now the top of the stack is the list with all the replaced items. We duplicate it so we can extract the juicy info from it
                   ₌₍Ggṁ   # Push a list of [max, min] and push the mean of that list
                        W  # Wrap everything into a single list and implicitly print
</code></pre>
"
"240097","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¬[1
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCrFsxIiwiIiwiMTIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code># implict input
 ¬  # logical not
  [1  # 1 if truthy else the original input
# implict output
</code></pre>
"
"240110","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Π'?ẏ+?ḊA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOoCc/4bqPKz/huIpBIiwiIiwiWzEsMiwzLDQsNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs an empty list as falsy and a list with items as truthy, taking holes as 1.</p>
<pre><code>Π        # Absolute value of product
 '       # Range 1...n filtered by
  ?ẏ+    # Add 0...input length to that
      ḊA # All divisible by
     ?   # Input   
</code></pre>
"
"240150","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>‛[]↔øβ¬[°*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJtbXeKGlMO4zrLCrFvCsCoiLCIiLCJhYltjY2RdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The joys of having a balanced-bracket digraph.</p>
<h2>Explained</h2>
<pre><code>‛[]↔øβ¬[°*
‛[]↔       # remove all non &quot;[]&quot; from the input
    øβ¬    # are the brackets unbalanced?
       [°* # if so, multiply the input by the imaginary number `i`. Obviously you can't multiply a string by an imaginary number in python, so this errors.
</code></pre>
"
"240174","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>KḂZµƒε;h×YṄ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJL4biCWsK1xpLOtTtow5dZ4bmEIiwiIiwiMTIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to lyxal</p>
<pre><code>K           # Factors
 ḂZ         # Zipped with reverse
   µ  ;h    # Minimum by
    ƒε      # Reduced by abs. diff.
        ×Y  # Interleave with '*'
          Ṅ # Join by spaces
</code></pre>
"
"240188","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>żɾÞṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvMm+w57huYEiLCIiLCJbMSwyLDMsNCw1LDYsNyw4LDksMTBdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>żɾÞṁ
ż    # the range [1... len(input)]
 ɾ    # range [1...n] for each n in that
 Þṁ  # mold the input to the shape of that, stopping after elements start to be repeated. 
</code></pre>
"
"240193","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>ka»ƛ[¬τ*‹∧□C‛Ṡḣ6ƒO⌈=gṫO=D»`-.,`τ⌐Ŀkd5ɾ\.*5ʁṘ-:ƛ‛.-ḂĿ;JĿṄ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYcK7xptbwqzPhCrigLniiKfilqFD4oCb4bmg4bijNsaST+KMiD1n4bmrTz1EwrtgLS4sYM+E4oyQxL9rZDXJvlxcLio1yoHhuZgtOsab4oCbLi3huILEvztKxL/huYQiLCIiLCJoZWxsbyB3b3JsZCAxMjMhISEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  »...»                               # Base-256 compressed integer
       `-.,`τ⌐                        # Decompressed with the key `-.,`and split on commas
ka            Ŀ                       # Replace letters with those
                 5ɾ\.*                # 1..5 .
                      5ʁṘ-            # With 4..0 - appended 
                          :ƛ‛.-ḂĿ;J   # Make a copy with `.-` swapped
               kd                  Ŀ  # Replace digits with those
                                    Ṅ # Join on spaces and implicitly output
</code></pre>
"
"240205","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>\L₴{‛ol₴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXEzigrR74oCbb2zigrQiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Will add an explanation soon.</p>
"
"240229","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>(q
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIocSIsIiIsIjNcbkNHQ0MiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>N times, uneval the string.</p>
"
"240235","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⇧₌Ṙ⇧İİ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6figozhuZjih6fEsMSwIiwiIiwiWzgsIDMsIDEsIDgsIDEsIDgsIDMsIDEwLCAzLCA4LCAxMCwgOF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/240159/100664"">Dominic's Jelly answer</a>.</p>
<pre><code>⇧      # Gradeup
 ₌Ṙ⇧   # Push ^ reversed, ^ gradeup'd
    İ  # Use the reversed copy to index into the double-gradeup'd
     İ # Use those indicies to index into the input.
</code></pre>
"
"240248","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>3ÞẊ'∑?G=;µ÷Ȯε^ε+;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzw57huoon4oiRP0c9O8K1w7fIrs61Xs61KztoIiwiIiwiWzEsIDIsIDMsIDQsIDVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"240249","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>3ÞẊ'∑?G=;µ₌Gg-;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzw57huoon4oiRP0c9O8K14oKMR2ctO2giLCIiLCJbMSwyLDMsNCw1LDYsNyw4LDksMTBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to Bubbler's insight.</p>
<pre><code>3ÞẊ              # Combinations of input of length 3
   '    ;        # Filter by...
    ∑  =         # Sum equals
     ?G          # Maximum of input
         µ    ;h # Minimum by...
          ₌Gg-   # Difference of min + max
</code></pre>
"
"240263","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>?ɾƛ:e;Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI/yb7GmzplO86gIiwiIiwiOCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Will add an explanation soon.</p>
"
"240280","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>5?(‛, jC)Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI1PyjigJssIGpDKeG6jiIsIiIsIjMiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Outputs the  first n terms, although it actually calculates the  first n^3 terms.</p>
<pre><code>5          # Starting with 5
 ?(     )  # input times...
   ‛, j    # Join by `, `
       C   # Get charcodes
         Ẏ # At end, get first n
</code></pre>
"
"240293","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>ẏÞS℅~İṖ℅Z(n÷Ȧ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/DnlPihIV+xLDhuZbihIVaKG7Dt8imIiwiIiwiWzUsIDEsIDIsIDcsIDRdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ẏÞS℅~İṖ℅Z(n÷Ȧ
ẏ             # Push the input and the range [0, len(input))
 ÞS℅          # Choose a random sublist of indices
    ~İ        # And index into the input at those places, without popping anything
      Ṗ℅      # Choose a random permutation of the indexed items
        Z     # and zip that with the chosen indices - this creates a list of [[original index, new item]...]
         (    # for each pair:
          n÷Ȧ # input[original index] = new item
</code></pre>
"
"240314","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>/$›ḞṪt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIvJOKAuuG4nuG5qnQiLCIiLCIyXG4xXG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I do like the Sympy wrappers vyxal now has. Takes denominator, numerator then index.</p>
<h2>Explained</h2>
<pre><code>/$›ḞṪt
/      # divide the numerator by the denominator. This is fine because vyxal stores floats as Rationals internally. 
 $     # place the index at the top of the stack 
  ›Ḟ   # Sympy.evalf(fraction, n=index+1). This avoids rounding issues
    Ṫt # get the second last item  
</code></pre>
"
"240359","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>ĠvḢf?Ġ'₃;fȮJJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEoHbhuKJmP8SgJ+KCgztmyK5KSiIsIiIsIlsxLDEsMiwzLDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a>
Wow this is a mess.</p>
<pre><code>Ṗµ          ;t # Maximal permutation by...
  Uv=∩         # For each unique element, indices of equal elements?
      ƛ   ;∑   # Apply to each, taking the sum
       T       # Truthy indices
        ¯h     # Cumulative differences
</code></pre>
"
"240361","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>Ṗµv=UvTv¯f∑;h
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCLhuZbCtXY9VXZUdsKvZuKIkTtoIiwiIiwiIiwiWzEsMSwyLDJdIl0="" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>Vyxal's deltas is negative for whatever reason, but no worries, we just get the minimum value then.</p>
"
"240382","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>Kvṁ&lt;≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLduG5gTziiYgiLCIiLCJbMSwgNCwgMywgOCwgNl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Porting jelly got me feeling like yeet.</p>
<h2>Explained</h2>
<pre><code>Kvṁ&lt;≈
K     # prefixes of the input
 vṁ   # the mean of each of those prefixes
   &lt;  # is the input less than each of those means? 
    ≈ # and is everything the same? 
</code></pre>
"
"240427","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>Ġvẏf+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEoHbhuo9mKyIsIiIsIlsxLDEsMSwxMCwxMCw0LDQsMiwyLDIsMiw1LDYsNiw2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to lyxal</p>
<pre><code>Ġ     # Group runs of identical chars
 vẏf  # 0...n each and flatten
    + # Add to input
</code></pre>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/240422"">caird coinheringaahing's answer</a>.</p>
"
"240434","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 45 bytes</h1>
<pre><code>K0pṪ₍ṠvΠƛ?&lt;A;‛sdf*';`u∧‛ `+:[`It's a %‹⟇!`$∑%
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLMHDhuarigo3huaB2zqDGmz88QTvigJtzZGYqJztgdeKIp+KAmyBgKzpbYEl0J3MgYSAl4oC54p+HIWAk4oiRJSIsIiIsIlsyLCAzLCA3LCA0MywgMTg1Nl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A bit of a mess</p>
"
"240478","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ATy$_⁽⇧¨M
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJBVHkkX+KBveKHp8KoTSIsIiIsImFlaW91Il0="" rel=""noreferrer"">Try it Online!</a></p>
<p>The power of triads!</p>
<h2>Explained</h2>
<pre><code>ATy$_⁽⇧¨M
AT       # indices of vowels
  y      # uninterleave into two lists - this pushes a list of every second vowel and every first vowel
   $_    # remove the list of every first vowel
     ⁽⇧¨M # and apply upper-case (a function pushed by ⁽⇧) to those indices (¨M)
</code></pre>
"
"240554","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>KƛtO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLxpt0TyIsIiIsIls1LDEyLDEwLDEyLDEyLDEwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>KƛṫO</code> is also valid for 4 bytes</p>
<p>Simply count the number of occurrences of the tail of each prefix in each prefix.</p>
"
"240599","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>G+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJHKyIsIiIsIlsxLDIsMyw0LDUsNiw3LDgsOSwxMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Add the maximum of the input list to each number - just like xnor's python answer.</p>
<h2>Decoder</h2>
<pre><code>G½vε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJHwr12zrUiLCIiLCJbMTEsMTIsMTMsMTQsMTUsMTZdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Get the absolute difference of each item and half of the maximum of the list.</p>
"
"240646","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>(SCfṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIoU0Nm4bmFIiwiIiwiM1xuMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>(     # Input times...
 S    # Stringify
  C   # Charcodes 
   fṅ # Join together (Should just be ṅ, but bugs)
</code></pre>
"
"240649","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>C∷ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oi34bmFIiwiIiwiSGVsbG8sIHdvcmxkIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>05AB1E port, go read that.</p>
"
"240661","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>1w?(:¯∑p¦)¯¯∑1⟑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxdz8oOsKv4oiRcMKmKcKvwq/iiJEx4p+RIiwiIiwiNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A messy port of <a href=""https://codegolf.stackexchange.com/a/240650/100664"">Lynn's answer</a>, go upvote that!</p>
"
"240662","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ƛUẊv≈;≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm1Xhuop24omIO+KJiCIsIiIsIltcIkRJU0NSSU1JTkFUSVZFXCIsXCJTSU1QTElGSUNBVElPTlwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ    ;≈ # Same upon...
  Ẋ     # Cartesian product of...
 U      # Uniquified value
        # And (implicit) value
   v≈   # For each, same?
</code></pre>
"
"240692","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>-λ[vxnLJG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCItzrtbdnhuTEpHIiwiIiwiWzEsMixbMyw0LFs0LDVdLDUsWzYsNyw4XSw5LDEwXSw2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>-         # Subtract from self to generate a list with the same shape but only zeroes
 λ        # A recursive lambda, which automatically gets called with ^
  [       # If it's truthy (a list)
   vx     # Do a recursive call on each item
     nLJ  # Append the length of the list
        G # Get the maximum
</code></pre>
"
"240703","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 37 bytes</h1>
<pre><code>17√:£‹34¥d-√:→+¥T17+←-34¥d+√d-√d+16/S
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxN+KImjrCo+KAuTM0wqVkLeKImjrihpIrwqVUMTcr4oaQLTM0wqVkK+KImmQt4oiaZCsxNi9TIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So... Vyxal uses sympy for numbers, and sympy represents complex equations, such as <code>sqrt(17) + 1</code>, as expressions  that resolve to that.</p>
<p>So, all we  have to do is calculate the number (using the question's formula for convenience) and stringify it.</p>
<pre><code>17√                                   # Push √17
   :£‹                                # Store a copy to the register and push √17 - 1
      34¥d-√                          # Push √(34 - 2√17)
            :→                        # Store a copy to the ghost variable
              +                       # Add to previous
[             ]                       # √17 - 1 + √(34 - 2√17)
               ¥T17+                  # 3√17 + 17
                    ←-                # Subtract ghost variable
                                      # 3√17 + 17 - √(34 - 2√17)
                      34¥d+√d-        # √(34 + 2√17) subtracted from above
               [             ]        # Results in 3√17 + 17 - √(34 - 2√17) - 2√(34 + 2√17)
                              √d      # Take the square root of that doubled 
                                +16/S # Add to previous, divide by 16 and format.
</code></pre>
"
"240716","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>13</s> 10 bytes</h1>
<p><sup>-3 bytes Thanks to Kevin Cruijssen</sup></p>
<pre><code>25Ḋ[16|4]Ḋ
</code></pre>
<p>Outputs 1 for truthy, 0 for falsy</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyNeG4ilsxNnw0XeG4iiIsIiIsIjE5MDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>25Ḋ           - is it divisible by 25?
   [16   Ḋ    - if so: check if its divisible by 16
      |4]Ḋ    - if not: check if its divisible by 4
</code></pre>
<hr />
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<p>A port of Kevin Cruijssen's answer</p>
<pre><code>₁ḋ0ot4Ḋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHhuIswb3Q04biKIiwiIiwiMjQwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>₁ḋ       - divmod the input by 100
  0o     - remove all instances of 0 from the result
    t4Ḋ  - grab the tail of the divmod result and check if it's divisible by 4
</code></pre>
"
"240744","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>{›Ds≠|
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ74oC6RHPiiaB8IiwiIiwiMTM5NSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>{      # While...
 ›     # Increment
  D    # Make three copies
   s≠  # Check if sorted
     | # Do nothing
</code></pre>
"
"240777","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>1$(‹ǎ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxJCjigLnHjiIsIiIsIjkiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>1$    # Push 1 and the input
  (   # Input times
   ‹ǎ # Decrement and get nth prime
</code></pre>
"
"240779","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>λǐL⁰=;ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu8eQTOKBsD07yK90IiwiIiwiNVxuMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>λ    ;ȯt # Nth number where
 ǐL      # Prime factor length
   ⁰=    # Equal to input
</code></pre>
"
"240802","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, ~7.3Mb</h1>
<pre><code>0 { 200 ( ∆Ṗ : ) W ṫ $ ⁋,
</code></pre>
<p>Vyxal really isn't fast.</p>
<p>Because Vyxal is stack-based, an operation such as <code>1 +</code> (incrementing) is actually <code>push(1), push(add(pop(),pop()))</code>, which makes it incredibly difficult to optimize anything.</p>
<p>Vyxal uses <a href=""https://docs.sympy.org/latest/modules/ntheory.html#sympy.ntheory.primetest.isprime"" rel=""nofollow noreferrer"">Sympy's <code>isprime</code></a>, which looks for small factors, then for numbers <span class=""math-container"">\$ n &lt; 2^{64}\$</span> it runs a set of <a href=""https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test"" rel=""nofollow noreferrer"">Miller-Rabin tests</a>. In other words, no optimization there.</p>
<p>So, the above program optimizes by buffering the output into groups of 200, which through experimentation produces the most output.</p>
<p>This version</p>
<p><code>{</code> is loop forever. <code> 200 ( ∆Ṗ : )</code> means &quot;200 times, get the prime after the top of stack and push a copy of it&quot;. <code>W ṫ $</code> gets all but the last one (which we use for the next iteration of the forever loop), then <code>⁋,</code> prints that joined by newlines.</p>
<h2>Other attempts</h2>
<h2>~10Kb</h2>
<pre><code>0 {›:ǎ,
</code></pre>
<p>This one's &quot;forever, print the nth prime and increment n&quot;. It's kinda slow.</p>
<h2>~165Kb</h2>
<pre><code>0 { ∆Ṗ …
</code></pre>
<p>This one's &quot;forever, get the next prime and print it&quot;. It's an order of magnitude faster than the previous, but still slow.</p>
<h2>~780Kb</h2>
<pre><code>Þp(n,
</code></pre>
<p>5x faster than the previous, but still not very fast, this one loops through an infinite generator of primes and prints each one.</p>
<h2>~4.3Mb</h2>
<pre><code>0 { ⟨⟩ →primes 100 ( ∆Ṗ : ←primes $ J →primes) ←primes ⁋ ,
</code></pre>
<p>Like the main submission but uses an array instead of the stack, making it slower.</p>
<p>*<sup> amounts approximated with online interpreter, unreliable</sup></p>
"
"240902","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>(λ¾₌‡¯ȧtnεc¾nc∨¬;ṅ…⅛
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIozrvCvuKCjOKAocKvyKd0bs61Y8K+bmPiiKjCrDvhuYXigKbihZsiLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm probably going to take the L to better algorithms, but that's okay with me. Prints the first n numbers.</p>
<h2>Explained</h2>
<pre><code>(λ¾₌‡¯ȧtnεc¾nc∨¬;ṅ…⅛
(                     # input times:
 λ..............;ṅ    #   find the first number N where:
   ₌                  #     the 
  ¾ ‡¯ȧ               #     absolute values of the deltas of the global array
          c           #     contains
  ¾    tnε            #     the absolute difference of the last item of the global array and N
              ∨¬      #     nor
           ¾nc        #     does the global array contain N
                  …⅛  #   print N and add to the global array
</code></pre>
"
"240933","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>lvGg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJsdkdnIiwiIiwiM1xuWzEsIDIsIDMsIDQsIDVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Why reduce by things when you can just vectorise.</p>
<h2>Explained</h2>
<pre><code>lvGg
l    # overlaps of input list of size input integer. 
 vG  # maximum of each window
   g # minimum of that
</code></pre>
"
"240937","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Ḃ+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuIIrIiwiIiwiWzEsIDIsIDNdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>Ḃ+
Ḃ  # bifurcate, i.e. duplicate and reverse
 + # vectorized addition of two lists
</code></pre>
"
"240945","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>⇧
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCLih6ciLCIiLCIiLCJbMiwgNiwgMSwgOSwgMSwgMiwgM10iXQ=="" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>0-indexed</p>
"
"240987","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>19</s> 14 bytes</h1>
<pre><code>L3/₌ẎȯI÷‟-ȧ₀%⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJMMy/igozhuo7Ir0nDt+KAny3Ip+KCgCXigbwiLCIiLCJbMSwgMCwgNiwgOSwgNSwgOSwgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Checks whether an input number is a Fmbalbuena number. Takes input as a list of digits.</p>
<p><em>can't believe I forgot to handle the case where the length isn't divisible by 3...</em></p>
<p><em>-5 thanks to Fmbalbuena</em></p>

<h2>Explained</h2>
<pre><code>L3/₌ẎȯI÷‟-ȧ₀%⁼
L                   # Push the length of the input
 3/                 # divide that by 3
   ₌Ẏȯ              # and push input[0:that], input[that:-1]
      I             # split input[that:-1] into two lists
       ÷            # and dump that onto the stack - the stack is now [first N/3, remaining first half, remaining second half]
        ‟           # rotate the stack right - this sets it up for the subtraction
         -ȧ         # subtract the first N/3 digits from the second half and take the absolute value
           ₀%       # and modulo by 10
             ⁼      # does that exactly equal the first half?
</code></pre>
"
"240993","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> <s>14</s> 13 bytes</h1>
<pre><code>≬ƛƛ;⁼;A⁽ÞfŀL›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazGm8abO+KBvDtB4oG9w55mxYBM4oC6IiwiIiwiW1tdLFtbMSwyLFszXV1dLFtdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Feels too long. Vyxal parsing isn't janky at all why would you even think that?</p>
<h2>Explained</h2>
<pre><code>≬ƛƛ;⁼;A⁽ÞfŀL›
≬......⁽..ŀ   # call function ≬ on the input until the result of function ⁽ is falsey
≬             # a function that: (this is the predicate for ŀ)
 ƛƛ;⁼;        #   checks whether each item is a list - an empty map over a list equals itself
      A       #   and returns whether all items are truthy under that
              # ----------------------------------------------------
              # N.B. The ≬ modifier (next 3 elements as a lambda) is used here because of the way map lambdas are parsed:
              # Rather than treating them as their own structure type internally, 
              # they are converted to a lambda structure 
              # followed immediately by a token representing the `M` (map) element.
              # This means that map lambdas are considered to be 2 elements
              # ‡ doesn't work because it doesn't catch the extra `M` 
              # token generated while parsing.
              # ------------------------------------------------------
        ⁽Þf   # a function that flattens its argument by 1 depth
           L› # the length of the list collected by ŀ + 1
</code></pre>
"
"241029","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⁽LÞZfg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb1Mw55aZmciLCIiLCJbW10sW1sxLDIsWzNdXV0sW11dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Can’t be bothered trying to add an explanation on mobile, feel free to edit one in.</p>
"
"241030","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>0…{!…N…
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=0%E2%80%A6%7B!%E2%80%A6N%E2%80%A6&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"241085","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>C∑$LḊ
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCJD4oiRJEzhuIoiLCIiLCIiLCJhYmNiIl0="" rel=""noreferrer"">Try It Online!</a></p>
<p>Same thing as my Jelly solution.</p>
<pre><code>C∑$LḊ    Full Program
C        ord (vectorizes)
 ∑       sum
  $      swap; bring the string back to the top
   L     length
    Ḋ    is the ord sum divisible by the length?
</code></pre>
"
"241134","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ȧ¹o
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLIpsK5byIsIiIsImFhYWJ4ZFxuMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>Ȧ¹o
Ȧ   # input_string[input_index] = input_string
 ¹o # remove the input string from that
</code></pre>
"
"241213","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 87 bytes</h1>
<pre><code>»ƛUċ≬r¾□ƈ1K↵ẏǐṅȧꜝq6⟩λ∵†⇧↳∨¬ṫ«X¡„q∪[&gt;±∩λxƒẊ[øȧẇ/hAh&lt;∨T⅛⇧¥WnWU°⋎ƈ_S↳‡a∑⋏‡ø¨z≈cƛ÷a»₀Sτ22/⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu8abVcSL4omscsK+4pahxogxS+KGteG6j8eQ4bmFyKfqnJ1xNuKfqc674oi14oCg4oen4oaz4oiowqzhuavCq1jCoeKAnnHiiKpbPsKx4oipzrt4xpLhuopbw7jIp+G6hy9oQWg84oioVOKFm+KHp8KlV25XVcKw4ouOxohfU+KGs+KAoWHiiJHii4/igKHDuMKoeuKJiGPGm8O3YcK74oKAU8+EMjIv4oGLIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Naive base compression.</p>
<pre><code>»...»        # Base-255 compressed integer
     ₀Sτ     # Decompress into base 22 with 1s and 0s
        22/⁋ # Split into 22 pieces and join on newlines
</code></pre>
"
"241225","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>¡ɾṗ'Ė∑1=;t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCocm+4bmXJ8SW4oiRMT07dCIsIiIsIjMiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Bruteforcer. <span class=""math-container"">\$O\left(2^{n!}\right)\$</span> time complexity, searches for fractions with reciprocals <span class=""math-container"">\$ n! \$</span> which seems to be enough.</p>
<pre><code>¡          # Factorial
 ɾṗ        # All combinations of 1...n
   '    ;  # Filtered by...
    Ė∑     # Sum of reciprocals
      1=   # is 1?
         t # Get the last one
</code></pre>
"
"241275","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>y2•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ5MuKAoiIsIiIsInVtYnJlbGxhIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Vyxal has a better built-in for this than Jelly.</p>
<pre><code>y2•     Full Program
y       Uninterleave; push a[::2] and a[1::2]
 2•     Repeat each character twice
</code></pre>
"
"241300","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 71 bytes</h1>
<pre><code>\|6*Ṅ`&amp;`×6*+∞`¬꘍ »₆`:⌈Rvf÷4ɾd7+‛-_f4Ẏ*$++J‛ |Ḃ∇++÷`###%$`∞‛ṫ¹%\#21*WøĊ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXHw2KuG5hGAmYMOXNior4oieYMKs6piNIMK74oKGYDrijIhSdmbDtzTJvmQ3K+KAmy1fZjThuo4qJCsrSuKAmyB84biC4oiHKyvDt2AjIyMlJGDiiJ7igJvhuavCuSVcXCMyMSpXw7jEiuKBiyIsIiIsIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>=== Top bit ===
\|6*Ṅ`&amp;`×6*+∞
\|6*          # Six |
    Ṅ         # Join by spaces
     `&amp;`   +  # Append to an &amp;
        ×6*   # six asterisks
            ∞ # Palindromise that

=========== Code Golf bit ===========
`¬꘍ »₆`:                              # Compressed string `Code Golf`, two copies
        ⌈R                            # Split on spaces and reverse each word
          vf÷                         # Make each a char list and push each
             4ɾ                       # 1...4
               d7+                    # Double + 7 -&gt; 9, 11, 13, 15
                  ‛-_f4Ẏ              # Extend `-_` into length 4 and turn into char list
                        *             # Repeat characters by numbers
                         $++          # Join the `Code Golf` bit by those
                            J         # Append `Code Golf`
                             ‛ |Ḃ     # Push ` |` and `| `
                                 ∇++  # Prepend `| ` and append ` |` to each
                                    ÷ # Push each value to the stack.

=== Final bit ===
`###%$`               # Literal string `###%$`
       ∞              # Palindromised
        ‛ṫ¹%          # Format (replace % by) &quot;Dennis&quot;
            \#21*     # 21 #
                 WøĊ⁋ # Output the stack, centred and joined on newlines.
</code></pre>
"
"241320","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>λEE›æ;5ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu0VF4oC6w6Y7NcivIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Finds the fifth Fermat Prime.</p>
<pre><code>λ    ;5ȯ # First 5 numbers where
 EE›     # 2^2^n + 1
   æ     # Is prime
</code></pre>
"
"241325","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>s½Ṙ∑=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJzwr3huZjiiJE9IiwiIiwibm9kZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>s     # Input Sorted
 ½    # Split into two halves
  Ṙ∑  # And concatenated reversed
    = # Equals original input?
</code></pre>
"
"241343","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>‡Ḃ=‡½hŀL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKHhuII94oChwr1oxYBMIiwiIiwiYWJhYmFiYWJhIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>‡  ‡  ŀ  # Collect until false
 Ḃ=      # Is a palindrome
    ½h   # Get first half (rounded up)

       L # Get length
</code></pre>
"
"241359","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>MT
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCJgWzgsIDksIDEwLCAxMSwgMTIsIDEzXWBFXG7OuzEwKzIwPjsiLCJNVCIsIiIsIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>100% pure ascii. 0-indexed</p>
<h2>Explained</h2>
<pre><code>MT
M  # Map the function to the list
 T # and return indicies where the result is truthy
</code></pre>
"
"241466","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>U:ż⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJVOsW84oG8IiwiIiwiWzEsIDIsIDEsIDMsIDEsIDMsIDQsIDVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a list of nonnegative integers.</p>
<pre><code>U    # Uniquify
   ⁼ # Is equal to
 :ż  # 1...length?
</code></pre>
"
"241505","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes, 9 changes, <a href=""https://codegolf.stackexchange.com/questions/241486/from-code-to-golf-robbers-thread/241511#241511"">crick craked</a> by Aaroneous Miller</h1>
<pre><code>«ƛ↔ƒ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq8ab4oaUxpIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This was kinda fun to create. I'll see what happens!</p>
<h2>Programs:</h2>
<pre><code>«ƛ↔ƒ outputs code
«ƛ↔ṙ outputs coal
«ƛ℅ṙ outputs fear
«ƛ℅ṫ outputs feat
«ƛFṫ outputs dent
«ƛF` outputs dell
«ƛ¾` outputs foci
`ƛ¾` outputs program
`ƛ₅` outputs then
`»₅` outputs golf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq8ab4oaUxpLCqyxcbsKrxpvihpThuZnCqyxcbsKrxpvihIXhuZnCqyxcbsKrxpvihIXhuavCqyxcbsKrxptG4bmrwqssXG7Cq8abRmDCqyxcbsKrxpvCvmDCqyxcbmDGm8K+YCAsXG5gxpvigoVgICxcbmDCu+KChWAgLCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a> (last two characters of each line are to print)</p>
<p>Vyxal has two types of string compression. The first, delimited by <code>«</code>, takes the bytes within as a base-255 integer then converts that to base 27 and indexes it into a space plus the alphabet.</p>
<p>We switch through a bunch of these until we get to one where the last character is <code>`</code>, allowing us to change the first character to <code>`</code> to get into a dictionary compressed regular string.</p>
<p>Vyxal's dictionary compression is fairly simple - it replaces pairs of  non-ASCII characters with words from its dictionary, then remaining non-ASCII characters are replaced with words from a shorter dictionary.</p>
<p>This means that a string containing three characters shouldn't be able to return <code>golf</code>. But, I forgot that the short dictionary isn't complete (some slots aren't taken) and those just disappear, which Aaroneous's crack exploited.</p>
<p>Then, we iterate through a few words before getting to the 2-char compression code of <code>golf</code>.</p>
"
"241511","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, cracks <a href=""https://codegolf.stackexchange.com/a/241505/101522"">emanresu A’s answer</a></h1>
<pre><code>«ƛ↔ƒ
`ƛ↔ƒ
`ƛ₅ƒ
`»₅ƒ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq8ab4oaUxpLCqyxcbmDGm+KGlMaSYCxcbmDGm+KChcaSYCxcbmDCu+KChcaSYCwiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Note: The final two characters in each line in the linked program is just so that each one can be ran alongside one another; they aren’t required for the individual programs.</p>
<p>The first change is changing the first character, which changes the compressed string into a dictionary compressed string. From this point on, because of the way that dictionary compression works in Vyxal, the final character in the string is ignored.</p>
<p>The next two changes are simply changing to the dictionary entry for <code>golf</code>. What’s convenient about using the dictionary is that most of it is made up of English words, so I didn’t have to worry much about how I changed those two characters, as long as I changed them to the correct characters.</p>
<p>I’m guessing the intended solution was probably more clever than just switching to dictionary compression, but I saw that the option was available and decided to take advantage of it.</p>
"
"241579","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 399 bytes, 85 words</h1>
<pre><code>`ab₴⁋
ak
ƈ¶
₴ǒ
ay₃⁺
b√ṫ
b□×
b£ṫ
Ǎ₂ǎǏ
°ẋ
bo
b⋎≈h
ǍĊ
br
Ǎ∩
d⋏ė
d⋏ḟz
d꘍τ
›¢£ǎ
∩ḟv
fa
⊍½…ƈk
⊍†Ǐẏ
f⋏ø
⊍¾≥‹
fȦ‹ka
ß≠v
↔¥
fƒİ
fy≥₃
£ṫǏ⟨
g꘍ȧ
£₆zo
£§£Ḣ
g⋎Ċb
go∪ḋ
gr₴↵t
£Ȧka
¥₈≥ḟ
¥Ġ⋏ġ
ḋ₌l⋏÷
₍₴
i∪…kar
isɖ„
↲₍
iꜝ⁺b
izl⁋‛
Ṅ⋎k⋏£
kat
kµ₴Ẇ≠
k₴≬…„
kf…ƈ
k€Ḟḋ₌
ki↔Ṡo
kivsk
klḋ₌t
kod
koik
kolḂṙ
k꘍¼
koǏṗ
k⋎§va
koss
k⋎Ṡh
k≥τ
kroǏḂ
ksik
ksuz
k≠ʁ
k¢‹⋏÷
kt꘍⁽zo
la
ȯ¡
l£Ẇ
†ṫλ‡
lƒṖ
mak
m√ṫv
s¥₈
shꜝø
∪Ǐǎ⌐
∪Ǐ≠ḣ
shƒ≠
siǍḟ
si½ǔ`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgYWLigrTigYtcbmFrXG7GiMK2XG7igrTHklxuYXnigoPigbpcbmLiiJrhuatcbmLilqHDl1xuYsKj4bmrXG7HjeKCgseOx49cbsKw4bqLXG5ib1xuYuKLjuKJiGhcbseNxIpcbmJyXG7HjeKIqVxuZOKLj8SXXG5k4ouP4bifelxuZOqYjc+EXG7igLrCosKjx45cbuKIqeG4n3ZcbmZhXG7iio3CveKApsaIa1xu4oqN4oCgx4/huo9cbmbii4/DuFxu4oqNwr7iiaXigLlcbmbIpuKAuWthXG7Dn+KJoHZcbuKGlMKlXG5mxpLEsFxuZnniiaXigoNcbsKj4bmrx4/in6hcbmfqmI3Ip1xuwqPigoZ6b1xuwqPCp8Kj4biiXG5n4ouOxIpiXG5nb+KIquG4i1xuZ3LigrTihrV0XG7Co8ima2FcbsKl4oKI4oml4bifXG7CpcSg4ouPxKFcbuG4i+KCjGzii4/Dt1xu4oKN4oK0XG5p4oiq4oCma2FyXG5pc8mW4oCeXG7ihrLigo1cbmnqnJ3igbpiXG5pemzigYvigJtcbuG5hOKLjmvii4/Co1xua2F0XG5rwrXigrThuobiiaBcbmvigrTiiazigKbigJ5cbmtm4oCmxohcbmvigqzhuJ7huIvigoxcbmtp4oaU4bmgb1xua2l2c2tcbmts4biL4oKMdFxua29kXG5rb2lrXG5rb2zhuILhuZlcbmvqmI3CvFxua2/Hj+G5l1xua+KLjsKndmFcbmtvc3Ncbmvii47huaBoXG5r4omlz4Rcbmtyb8eP4biCXG5rc2lrXG5rc3V6XG5r4omgyoFcbmvCouKAueKLj8O3XG5rdOqYjeKBvXpvXG5sYVxuyK/CoVxubMKj4bqGXG7igKDhuavOu+KAoVxubMaS4bmWXG5tYWtcbm3iiJrhuat2XG5zwqXigohcbnNo6pydw7hcbuKIqsePx47ijJBcbuKIqseP4omg4bijXG5zaMaS4omgXG5zaceN4bifXG5zacK9x5RgIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"241646","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>Πv‡ULG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOoHbigKFVTEciLCIiLCJbWzFdLCBbMiwgM10sIFsyLCA0XSwgWzEsIDRdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Π      # Cartesian product - get all possibilties
 v     # Over each...
  ‡--  # Do the next two elements
   U   # Uniquify 
    L  # Get length
     G # Maximum
</code></pre>
"
"241661","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λ-[vxs
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOuy1bdnhzIiwiIiwiW1tbMTAsIDUsIDldLCBbNiwgNCwgNF1dLCBbWzIsIDYsIDNdLCBbMywgMywgMl1dLCBbWzMsIDgsIDZdLCBbMSwgNSwgNl1dXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-5 thanks to @emanresuA in vychat</em></p>
<h2>Explained</h2>
<pre><code>λ-[vxs
λ      # a lambda that takes a single argument n and:
 -     #   subtracts n from itself (scalars return 0 which is falsey, lists return a list of 0s which is truthy) - borrowed from https://codegolf.stackexchange.com/a/241658/78850
  [    #  and if that item is a list
   vx  #    call this lambda on each item
     s #    and sort the result
</code></pre>
"
"241663","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 9 bytes</h1>
<pre><code>ÞẊǎ:∷d=Ṡ†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwiw57huorHjjriiLdkPeG5oOKAoCIsIiIsIjNcblwiYWJjXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ÞẊǎ:∷d=Ṡ†∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuG6iseOOuKIt2Q94bmg4oCg4oiRIiwiIiwiM1xuXCJhYmNcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ÞẊ         # Cartesian product; all ways to choose n items from k
  -----    # Next bit contains only vectorising elements, applied to each
  ǎ:       # Get substrings and duplicate
    ---    # Next bit over each substring 
    ∷      # Get the second half
     d     # Double it
      =    # Is it equal to the original?
           # (If it is, that word's a square)
       Ṡ   # Sum each result - truthy if any are equal and word contains squares
        †  # NOT each result - those that are squarefree
         ∑ # Sum the result (s flag)
</code></pre>
"
"241804","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>λIȧ[vx¯ȧ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu0nIp1t2eMKvyKfiiJEiLCIiLCJbMSxbMiw1LDEwXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to lyxal.</p>
<p>Or if we can assume no empty lists, 8 bytes:</p>
<pre><code>λ-[vx¯ȧ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOuy1bdnjCr8in4oiRIiwiIiwiWzEsWzIsNSwxMF1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Both are essentially the same, just with different <code>is_array</code> checks.</p>
<pre><code>λ          # Create a recursive lambda...
  - [      # If the input is a list...
  -        # int - int = 0 (falsy), lst - lst = list of zeros, truthy
 Iȧ        # If n is int, remove_whitespace(&quot; &quot; * n) which is falsy.
           # If n is list, split into two halves and take the absolute value.
     vx    # Call the lambda on each element of the list
       ¯   # Get differences between pairs of elements
        ȧ  # Take the absolute value of those
         ∑ # Sum
</code></pre>
"
"241840","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKAiLCIiLCJbMCwxLDAsMSwxLDAsMSwxLDAsMSwxLDAsMSwwLDEsMSwxLDAsMCwwLDEsMSwwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"241841","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>s²Ṙḣ∑=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJzwrLhuZjhuKPiiJE9IiwiIiwiMTIsIDM3LCAzNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A very simple 6 byter. Can't think of any stack manipulation to get it to 5.</p>
<p>Outputs <code>1</code> for truthy, <code>0</code> for falsey.</p>
<h2>Explained</h2>
<pre><code>s²Ṙḣ∑=
s²     # sort and square the input
  Ṙ    # reverse the list so that it's in descending order
   ḣ   # push the head of that, and the rest of that to the stack
    ∑= # does the sum of the list equal the other item? 
</code></pre>
"
"241842","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>k6↔=[1pH
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrNuKGlD1bMXBIIiwiIiwiYmFnIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>k6↔      # Remove non-hex chars from input
   =[    # If it equals the original
     1p  # Prepend a 1
       H # Convert from hexadecimal
</code></pre>
"
"241843","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>m
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJtIiwiIiwiYmFnIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A simple 1-byter - <code>m</code> mirrors input by appending its reverse.</p>
"
"241892","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>₀Ẏ:v꘍:£vv‡¥꘍?‹*›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoDhuo46duqYjTrCo3Z24oChwqXqmI0/4oC5KuKAuiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A huge mess.</p>
"
"241902","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>g-:G/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJnLTpHLyIsIiIsIlsxMy4wLCAxNy4wLCAxNy4wLCAxNS41LCAyLjldIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs as arbitrary-precision rationals. Look Ma, no Unicode!</p>
<pre><code>g-    # Subtract the minimum
  :G  # Make a copy and get the maximum of that
    / # Divide (list - min) by the maximum
</code></pre>
"
"241987","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte (non-competing)</h1>
<pre><code>ṗ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLDnuKIniIsIuG5lyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Non-competing as this builtin and many others were <a href=""https://github.com/Vyxal/Vyxal/issues/586"" rel=""nofollow noreferrer"">recently given infinite list support</a> because of this challenge.</p>
"
"241993","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>:‹&quot;*÷Ṙ=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI64oC5XCIqw7fhuZg9IiwiIiwiNlxuOSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  &quot;     # Pair the first input with
:‹      # Itself decremented
   *    # Multiply both by the second input
    ÷   # Push both to the stack
     Ṙ= # Is one reversed equal to the other?
</code></pre>
"
"242048","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<p>Flagless and without dictionary compression.</p>
<pre><code>kaṖṅ
</code></pre>
<p>This prints out all the possible permutations of the lowercase alphabet.<br />
In the online interpreter the code times out (for understandable reasons). Does it count?<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYeG5lmbhuYUiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"242058","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>₌Ǎ⌊∆o$c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigozHjeKMiuKIhm8kYyIsIiIsIjIxbmQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Because we have a built-in for that.</p>
<h2>Explained</h2>
<pre><code>₌Ǎ⌊∆o$c
₌Ǎ⌊     # Push the letters and numbers of the input
∆o      # Push the corresponding ordinal string
$c      # are the letters of the string contained in the ordinal string? 
</code></pre>
"
"242061","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>‡_+T⁺
ḞẎ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKFfK1TigbpcbuG4nuG6jiIsIiIsIjIwIl0="" rel=""nofollow noreferrer"">Try it Online!</a>
Woo, we beat Jelly!</p>
<pre><code>‡  T      # A triadic lambda function taking three arguments...
 _+       # Pop the first and add the next two
    ⁺NL   # With the initial vector [1, 1, 1]...
       Ḟ  # Create an infinite generator that calls the function with the last &lt;arity&gt; (3 in this case) arguments and appends that to the list.
        Ẏ # Get the first n items.
</code></pre>
<p>NL in the explanation represents a literal newline. In Vyxal, <code>⁺</code> takes the index of the next character in the Vyxal codepage and adds 101 to it. As Vyxal's codepage is aligned with ASCII, a newline is #10, so the number 111 can be represented by <code>⁺</code> and a newline.</p>
"
"242063","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>~æ3ḋ'÷*+?=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ+w6Yz4biLJ8O3Kis/PSIsIiIsIjM3Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>~          # Filter (implicit) range 1...n by...
 æ         # Is prime?
  3ḋ       # Combinations of length 3
    '      # Filtered by...
     ÷*+   # a*b+c
        ?= # Equals input?
</code></pre>
<p>Outputs a list of all valid lists.</p>
"
"242091","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <S>26 18</s> 14 bytes (88 bytes saved)</h1>
<p>Crack of <a href=""https://codegolf.stackexchange.com/a/242085/103772"">@lyxal's vyxal cop program</a></p>
<pre><code>k×:\(+33*\↵+Ė›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrw5c6XFwoKzMzKlxc4oa1K8SW4oC6IiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>output lowest bound +1</p>
<p>(first time doing vyxal, tell me if I did something incorrectly)</p>
<h2>Explanation</h2>
<pre><code>k×         Push 2147483648 onto the stack
           =&gt; [2147483648]
:          Duplicate the stack
             =&gt; [2147483648, 2147483648]
\(+        Concatenate the last element of the stack with `(`
             =&gt; [2147483648, '2147483648(']
33*        Multiply by 33 the string on top of the stack
             =&gt; [2147483648, '2147483648(21 ... 8(2147483648(']
\↵+        Add `↵` to the string on top of the stack
             =&gt; [2147483648, '2147483648(21 ... 8(2147483648(↵']
Ė          Evaluate as vyxal code the last element of the stack (see the cop thread)
             =&gt; [ &lt;lowest bound&gt; ]
›          Add 1 to the result
             =&gt; [ &lt;lowest bound +1&gt; ]
           implicit output
</code></pre>
"
"242111","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>¯ȧ&lt;1JTh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCr8inPDFKVGgiLCIiLCJbMSwgMiwgMywgMV1cbjUiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>¯ȧ      # Get absolute differences
  &lt;     # Find all less than the input
   1J   # Append a 1
      h # Get the first...
     T  # Index of a 1
</code></pre>
"
"242226","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, Cat + Quine = Hello, 16 bytes</h1>
<h2>Hello world, 13 bytes</h2>
<pre><code>kh\!+□⁋`I^`I^
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJraFxcISvilqHigYtgSV5gSV4iLCIiLCJhXG5iXG5jXG5kXG4iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Cat, 7 bytes</h2>
<pre><code>kh\!+□⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJraFxcISvilqHigYsiLCIiLCJhXG5iXG5jXG5kXG4iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a>qwhYOKWoeKBiyIsIiIsImFcbmJcbmNcbmRcbiJd)</p>
<h2>Quine, 6 bytes</h2>
<pre><code>`I^`I^
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSV5gSV4iLCIiLCJhXG5iXG5jXG5kXG4iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation :</h2>
<pre><code>## Cat (10)

kh       # push 'Hello World' onto the stack
  \!+    # add '!' to the string
     □   # push the list of the inputs onto the stack
      ⁋  # join the element on top of the stack, with '\n' as separator
         # implicit output

## Quine (6)

`I^`     # push 'I^' on the stack
    I    # string -&gt; `string`string 
     ^   # reverse the stack
         # implicit output

## Hello (16)

kh\!+          # push `Hello World!` onto the stack
     □         #  | do
      ⁋        #  | many
       `I^`    #  | useless
           I   #  | things
             ^ # reverse the stack
               # implicit output
</code></pre>
"
"242247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 57 bytes</h1>
<pre><code>{:‛Ṗ⊍⇧≠|aA[`No, λ† ∧Ṡ %!`»÷ḟ»21℅+%,|`Huh?! ∞⇧ up, ½Ŀny!`,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7OuKAm+G5luKKjeKHp+KJoHxhQVtgTm8sIM674oCgIOKIp+G5oCAlIWDCu8O34bifwrsyMeKEhSslLHxgSHVoPyEg4oie4oenIHVwLCDCvcS/bnkhYCwiLCIiLCJIZWxsb1xuSEVMTE9cbkJZRSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Vyxal's not particularly good at English compression.</p>
<pre><code>{                                # While...
 :   ≠|                          # Take an input, is it not equal to...
  ‛Ṗ⊍⇧                           # &quot;BYE&quot;
       aA[                       # If all uppercase
          `...`        %,        # Print &quot;No, not since&quot; formatted by
               »÷ḟ»21℅+          # 1929 + random(1..21)
                          `...`, # Otherwise print &quot;Huh?! Speak up, sonny!&quot;
</code></pre>
"
"242248","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>øṀ¶+∞
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuOG5gMK2K+KIniIsIiIsIlwiKy0tLVxcbnwuLy5cXG58Ly4uXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>øṀ    # Vertically mirror, flipping /\
  ¶+  # Append a newline
    ∞ # Palindromise
</code></pre>
"
"242249","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>kaf₄ɾ*∑=42*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYWbigoTJviriiJE9NDIqIiwiIiwiYWJiY2NjZGRkZGVlZWVlZmZmZmZmZ2dnZ2dnZ2hoaGhoaGhoaWlpaWlpaWlpampqampqampqamtra2tra2tra2trbGxsbGxsbGxsbGxsbW1tbW1tbW1tbW1tbW5ubm5ubm5ubm5ubm5ub29vb29vb29vb29vb29vcHBwcHBwcHBwcHBwcHBwcHFxcXFxcXFxcXFxcXFxcXFxcnJycnJycnJycnJycnJycnJyc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3R0dHR0dHR0dHR0dHR0dHR0dHR0dXV1dXV1dXV1dXV1dXV1dXV1dXV1dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnd3d3d3d3d3d3d3d3d3d3d3d3d3d3d3eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXp6enp6enp6enp6enp6enp6enp6enp6enp6Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>kaf         # lowercase alphabet, flattened into char list
   ₄ɾ*      # Repeat by 1..26
      ∑=    # Concatenate all, 1 if input is equal to string, 0 if not
        42* # Multiply by 42
</code></pre>
"
"242250","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ÞẇṖ℅j
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuG6h+G5luKEhWoiLCIiLCJcImhlbGxvXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Þẇ    # Push (first+last, rest)
  Ṗ℅  # Shuffle (rest)
    j # Join (first+last) by (rest)
</code></pre>
"
"242253","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ÞoÞ∞ZƛhṘ2ẎṘntp
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnm/DnuKInlrGm2jhuZgy4bqO4bmYbnRwIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ÞoÞ∞Z          # Zip ordinals with positive integers
     ƛ         # Over each
      hṘ2ẎṘ    # Get the last two characters of the ordinal
           ntp # Append the number
</code></pre>
"
"242317","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⇧¯0&lt;∑›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6fCrzA84oiR4oC6IiwiIiwiWzgsNiwxLDExLDEwLDIsNyw5LDUsNCwzXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of ovs's jelly answer.</p>
<pre><code>⇧      # Grade up
 ¯0&lt;   # Cumulative differences less than 0
    ∑› # Sum + 1
</code></pre>
"
"242319","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 182 bytes</h1>
<pre><code>»∨vw\\ẇẆ|ετfẆτ›≥Πo∩Ṗ…›Ẏ⟑ȮĠḃ…°Ṗ5=₴ƛ¯⇩7¡∇∞}⁺εḭ&gt;∑‛u²%¤ßǔ]‡∨ε⁼Ġ†ȧ£€Ż₁T±↑⁋N∵ɽE&quot;@∩⁺ ≤Ǐ0¬ė⅛6⌈0ż⇧⌊≈ŀ¬∑ȮW√꘍↓ṗX→≥bOÞẇṀÞ≈¢e5Ṙẏð₀ꜝ→£∴∑↑›∇₇⋏o½↓t¼¨8¾‹O¾ṪO\ȧ₁↑żẆðŀErc⊍≤λ?↓ṙ…k;,ε÷5M&lt;ṅǒR‡,∩ŻIλ»14τṘ4ẇ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu+KIqHZ3XFxcXOG6h+G6hnzOtc+EZuG6hs+E4oC64omlzqBv4oip4bmW4oCm4oC64bqO4p+RyK7EoOG4g+KApsKw4bmWNT3igrTGm8Kv4oepN8Kh4oiH4oiefeKBus614bitPuKIkeKAm3XCsiXCpMOfx5Rd4oCh4oiozrXigbzEoOKAoMinwqPigqzFu+KCgVTCseKGkeKBi07iiLXJvUVcIkDiiKnigbog4omkx48wwqzEl+KFmzbijIgwxbzih6fijIriiYjFgMKs4oiRyK5X4oia6piN4oaT4bmXWOKGkuKJpWJPw57huofhuYDDnuKJiMKiZTXhuZjhuo/DsOKCgOqcneKGksKj4oi04oiR4oaR4oC64oiH4oKH4ouPb8K94oaTdMK8wqg4wr7igLlPwr7huapPXFzIp+KCgeKGkcW84bqGw7DFgEVyY+KKjeKJpM67P+KGk+G5meKApms7LM61w7c1TTzhuYXHklLigKEs4oipxbtJzrvCuzE0z4ThuZg04bqHIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This just hardcodes the result.</p>
<pre><code>»...»       # Base-255 compressed integer
     14τ    # Convert to base 14
        Ṙ   # Reverse (because leading zero)
         4ẇ # Chunks of length 4
</code></pre>
<p>Or, if we're allowed to take a few universe lifetimes:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>14ɾ364↔'4ẇ3vḋÞf:U⁼;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxNMm+MzY04oaUJzThuoczduG4i8OeZjpV4oG8O2giLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is a horrendously inefficient bruteforcer. It computes all <span class=""math-container"">\$14^{364}\$</span><sup>*</sup> sets of 14 symbols of length 364, for each gets combinations of three elements and checks if they all appear once.</p>
<p>The last two bytes can be removed if we're allowed to output all such sets.</p>
<pre><code>14ɾ                  # 1...14 
   364↔              # Combinations of length 364
       '          ;h # Find one such that...
        4ẇ           # When grouped into lengths of 4
          3vḋÞf      # And all subsets of length 3 within those lists
               :U⁼   # Does it include all subsets exactly once? 
</code></pre>
<p><sup>*</sup> Roughly 10^400, so give it a few universe lifetimes</p>
"
"242324","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 34 bytes</h1>
<pre><code>«⟑,HǎẆṀ,‹¹β»Ẇ→| e×«⌈:?ḟ»Ǎ‹ǒr$»fḢ+İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq+KfkSxIx47huobhuYAs4oC5wrnOssK74bqG4oaSfCBlw5fCq+KMiDo/4bifwrvHjeKAuceSciTCu2bhuKIrxLAiLCIiLCJiYiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Takes input as notes in lowercase (<code>db</code> not <code>Db</code> or <code>C#</code>, this doesn't allow sharps)</p>
<p>Thanks to Unrelated String for saving a byte on the numbers ocmpression</p>
<pre><code>«...«              # Compressed string `c db d eb e f gb g ab a bb b`
     ⌈:            # Split on spaces and make a copy
       ?ḟ          # Find the index of the input in those
         »...»fḢ   # The list [0,0,0,0,5,5,0,0,7,5,0,0]
                   # Note: This is surprisingly difficult to compress. The leading and trailing zeroes resist base compression, the high numbers make base compression inefficient, but attempting to index into [0,5,7] is worse.
                +İ # Add those numbers to the input's number and modularly index into the notes.
</code></pre>
"
"242386","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>kH
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrSCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>My first vxyal post, although someone probably already posted this</p>
"
"242387","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDpiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"242392","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>04&quot;?(Dtɽ$F∑J)i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwNFwiPyhEdMm9JEbiiJFKKWkiLCIiLCIyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"242528","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 27 values</h1>
<pre><code>45²›d
</code></pre>
<p>And the numbers produced are:</p>
<pre><code>[12, 11, 10, 5, 6, 50, 100, 25, 26, 36, 9, 8, 4, 32, 64, 16, 17, 92, 91, 110, 109, 90, 108, 45, 54, 46, 55]
</code></pre>
"
"242529","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ÞSvs?Uṗ$F
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlN2cz9V4bmXJEYiLCIiLCJbMSwyLDMsNCwyLDQsMSwzXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns a list containing the empty list (<code>⟨ ⟨  ⟩ ⟩</code>) for truthy and a list containing nonempty lists for falsy.</p>
<pre><code>ÞS        # Sublists...
  vs      # Sort each
       $F # Remove from...
      ṗ   # Powerset of...
    ?U    # Unique symbols of input
</code></pre>
"
"242535","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ṘKRṘ=vTvßhf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZhLUuG5mD12VHbDn2hmIiwiIiwiW1wiQVwiLFwiQlwiLFwiQ1wiLFwiQVwiLFwiQVwiLFwiRFwiXVxuXCJBXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṘKRṘ        # Get suffixes
    =       # Find those that are equal
     vT     # Get truthy indices of each
       vßh  # For each, if it is truthy, get the first
          f # Flatten (remove empty values)
</code></pre>
<p>Or if we can return zeroes if the required value is not at the end:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ṘKRṘ=ƛTh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZhLUuG5mD3Gm1RoIiwiIiwiW1wiQVwiLFwiQlwiLFwiQ1wiLFwiQVwiLFwiQVwiXVxuXCJBXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṘKRṘ     # Over suffixes...
    =    # Check if each value is equal to the second input
     ƛ   # Map...
      Th # Find the first index where it is equal
</code></pre>
"
"242626","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 22 bytes, 1 slice, <a href=""https://codegolf.stackexchange.com/a/242632/78850"">cracked by lyxal</a></h1>
<pre><code>Ǎ⟑(hn\++Rnẋ::ws=ß⅛)¾∑t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHjeKfkShoblxcKytSbuG6izo6d3M9w5/ihZspwr7iiJF0IiwiIiwiSGVsbG8sIFdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>For once I decided not to take advantage of some strange quirk of Vyxal that only I know exists and instead did a normal Vyxal cop answer. Enjoy!</p>
<p>Lyxal found the exact slice I used. Nice.</p>
"
"242631","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>62</s> <s>58</s> <s>57</s> 56 bytes</h1>
<pre><code>`[^\w.,?! -]`ẎL‛?!øB?ẎL1&gt;?⌈ƛ`[A-Z]`nẎL1&gt;;a?\.O3&gt;?\,O1&gt;Wa
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgW15cXHcuLD8hIC1dYOG6jkzigJs/IcO4Qj/huo5MMT4/4oyIxptgW0EtWl1gbuG6jkwxPjthP1xcLk8zPj9cXCxPMT5XYSIsIiIsImFhYmJBYyEhISEhIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>My first Vyxal answer, and I'm loving this language. So much more intuitive than Jelly. 99% sure this can be golfed more.</p>
<p>Explanation:</p>
<pre><code>`[^\w.,?! -]`?ẎL‛?!øB?ẎL1&gt;?⌈ƛ`[A-Z]`nẎL1&gt;;a?\.O3&gt;?\,O1&gt;Wa ; Takes the word as input
`[^\w.,?! -]`ẎL                                          ; Length of any matched of illegal characters (0 if no matches)
               ‛?!                                       ; The string '?!'
                  øB                                     ; Bracketify: converts '?!' to '[?!]'
                    ?ẎL                                  ; Find all '?' and '!' and count them
                       1&gt;                                ; More than 1?
                         ?⌈                              ; Split the input on spaces
                           ƛ            ;                ; Mapping lambda: maps all the words using the following criteria
                            `[A-Z]`nẎL                   ; How many capital letters in the word?
                                      1&gt;                 ; More than 1?
                                         a               ; Any truthy? (i.e. any words with more than 1 capital letter?)
                                          ?\.O           ; Count full stops in string
                                              3&gt;         ; More than 3?
                                                ?\,O     ; Count commas in string
                                                    1&gt;   ; More than 1?
                                                      W  ; Turn the stack into a list
                                                       a ; Any truthy? (i.e. are any of the conditions true?)
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>`[^\w-.,?! ]|[A-Z]\S*[A-Z]|[!?].*[!?]|,.*,|(\..*){4}`?ẎL
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%60%5B%5E%5Cw-.%2C%3F!%20%5D%7C%5BA-Z%5D%5CS*%5BA-Z%5D%7C%5B!%3F%5D.*%5B!%3F%5D%7C%2C.*%2C%7C%28%5C..*%29%7B4%7D%60%3F%E1%BA%8EL&amp;inputs=abc!&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A different version based off of the <a href=""https://codegolf.stackexchange.com/a/242499/107299"">regex Node.js answer</a></p>
"
"242632","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes, cracks <a href=""https://codegolf.stackexchange.com/a/242626/78850"">Aaroneous Miller's answer</a></h1>
<pre><code>wRh
</code></pre>
<p>Obtained from a slice of <code>[13::-5]</code>. Ngl you should have used that one quirk that only you know about because I know quite a few vyxal quirks too.</p>
"
"242641","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes, 1 slice, <a href=""https://codegolf.stackexchange.com/questions/242618/slice-the-source-code-robbers/242642#242642"">cracked by lyxal</a></h1>
<pre><code>»ż⟩&quot; 3⅛⇩Cİµ×∷İ»kPτ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu8W84p+pXCIgM+KFm+KHqUPEsMK1w5fiiLfEsMK7a1DPhCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Should be fairly easy but I'll see if y'all get this one.</p>
"
"242642","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, cracks <a href=""https://codegolf.stackexchange.com/a/242641/78850"">emanresuA's answer</a></h1>
<pre><code>ż⇩İ
</code></pre>
<p>Generated from a slice of <code>[1:15:6]</code></p>
"
"242645","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 47 bytes, 1 slice, <a href=""https://codegolf.stackexchange.com/questions/242618/slice-the-source-code-robbers/242648#242648"">cracked by lyxal</a></h1>
<pre><code>»β₀₇⁽sßḋ∪₁ĿɖC↵‡_Ẋ$ƛµ&quot;√₀tṠ⟇¤H∧+(Ȧfꜝ⁼∑↵dTḋI∷›»kpτ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu86y4oKA4oKH4oG9c8Of4biL4oiq4oKBxL/JlkPihrXigKFf4bqKJMabwrVcIuKImuKCgHThuaDin4cwSOKIpysoyKZm6pyd4oG84oiR4oa1ZFThuItJ4oi34oC6wrtrcM+EIiwiIiwiWzEsMiwgM10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A bit harder.</p>
"
"242648","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, cracks <a href=""https://codegolf.stackexchange.com/a/242645/78850"">EmanresuA's second answer</a></h1>
<pre><code>ɖ‡$&quot;t¤+f
</code></pre>
<p>Given by the slice <code>[11:33:3]</code></p>
"
"242649","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 233 bytes, safe.</h1>
<pre><code>`NZɾ√√₁₆₂‛‛ẋȯWġ₴ẏ.tṗṫ⟩εpj*5;[[kromer]]ȮGβŻ∇QQ↳ꜝ^QJ∧A⇩≬[pipis]fWPėX℅dżT←›Ṗ‡[[BIG SHOT]]!ṗȯḃ•I[[classic vyxal jankness]]Ẋėṅ⋏HðβėEV3RY BUDDY 'S FAVORITE [[Number 1 Rated Salesman1997]] ṁẏ℅□ṁQḃ₌ŻKKQTẇλε λ½ no ₃≠ Ḣ¥s in λλ square ʀ¬ of 2`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgTlrJvuKImuKImuKCgeKChuKCguKAm+KAm+G6i8ivV8Sh4oK04bqPLnThuZfhuavin6nOtXBqKjU7W1trcm9tZXJdXciuR86yxbviiIdRUeKGs+qcnV5RSuKIp0Hih6niiaxbcGlwaXNdZldQxJdY4oSFZMW8VOKGkOKAuuG5luKAoVtbQklHIFNIT1RdXSHhuZfIr+G4g+KAoklbW2NsYXNzaWMgdnl4YWwgamFua25lc3NdXeG6isSX4bmF4ouPSMOwzrLEl0VWM1JZIEJVRERZICdTIEZBVk9SSVRFIFtbTnVtYmVyIDEgUmF0ZWQgU2FsZXNtYW4xOTk3XV0g4bmB4bqP4oSF4pah4bmBUeG4g+KCjMW7S0tRVOG6h867zrUgzrvCvSBubyDigoPiiaAg4biiwqVzIGluIM67zrsgc3F1YXJlIMqAwqwgb2YgMmAiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Maybe if I add enough deltarune references Lyxal will get distracted...</p>
<p>The solution was simply <code>Ṗt</code> - of all permutations, get the last. <code>[72:18:-1]</code> I think. Idk what the score is.</p>
"
"242673","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>\II
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXElJIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>which prints :</p>
<pre><code>`I`I
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSWBJIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>which is a quine</p>
<h2>Explanation :</h2>
<pre><code>  I  # quote and prepend
\I   # the char `I`
     # Implicit output =&gt; `I`I

   I # quote and prepend
`I`  # a string containing `I`
     # implicit output =&gt; `I`I
</code></pre>
"
"242714","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Þ∞ƛṄvṖ;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInsab4bmEduG5ljtmIiwiIiwiIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Pretty much the sequence in the question, but with a lot more 1s. Outputs as an infinite lazy list.</p>
<pre><code>  ƛ   ;  # Over each element of...
Þ∞       # 1...∞
   Ṅ     # Get integer partitions
    vṖ   # Get all permutations
       f # Flatten the result
</code></pre>
"
"242737","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 37 bytes</h1>
<p>Probably can be golfed a <em>lot</em>, but this is too long for me.
So basically for every <code>i</code> in input <code>n</code>, it checks if both <code>n[:i]</code> and <code>n[i:]</code> are squares.<br />
I think the time complexity is <span class=""math-container"">\$O(2*\mathrm{len}(n)) \$</span></p>
<pre><code>Lʁƛ?fnȯṅ:h⌊[⌊|3]∆²→?fẎṅ:h⌊[⌊|3]∆²←∧;a
</code></pre>
<p>Explanation:</p>
<pre><code>Lʁƛ?fnȯṅ:h⌊[⌊|3]∆²→?fẎṅ:h⌊[⌊|3]∆²←∧;a
Lʁ                                     Exclusive 0 range of length(n)                                    
  ƛ                                    Map through range
   ?f                                  Push stringified n
     nȯṅ                               Slice from loop index to end
        :h⌊[⌊|3]                        Duplicate slice, if int(head) = 0, push 3 (non-square) else int(slice)
               ∆²→                     Set var to &quot;is a perfect square?&quot;
                  ?f                   Push stringified n
                    Ẏṅ                 Slice from 0 to loop index
                      h⌊[⌊|3]           Duplicate slice, if int(head) = 0, push 3 (non-square) else int(slice)
                            ∆²         Is it a perfect square?
                              ←        Get var
                               ∧       Are both are squares?
                                ;a     End map, check if any element is true.
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJMyoHGmz9mbsiv4bmFOmjijIpb4oyKfDNd4oiGwrLihpI/ZuG6juG5hTpo4oyKW+KMinwzXeKIhsKy4oaQ4oinO2EiLCIiLCIxNDQxMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"242779","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>›₌ɾʁẊ²vṅ⌊c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLrigozJvsqB4bqKwrJ24bmF4oyKYyIsIiIsIjkwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>An 05AB1E port.</p>
<h2>Explained</h2>
<pre><code>›₌ɾʁẊ²vṅ⌊c
›          # Increment the input
 ₌ɾʁ       # The range [1, input + 1] and the range [0, input + 1)
    Ẋ      # Cartesian product of those ranges
     ²     # Square each number in each pair
      vṅ⌊  # Integer version of each pair concatenated into a single string
         c # Does that contain the original input? 
</code></pre>
"
"242784","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ƛ¦Þǔ;∑¦Ḣ:G/*⌈×*⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm8Kmw57HlDviiJHCpuG4ojpHLyrijIjDlyrigYsiLCIiLCJbWzEsMiwzXSxbMiw0LDddLFsyLDIsMiwyLDIsMiwyLDJdLFs5LDEwXSxbMSwxLDMsMl1dXG4zMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Straightforward port of <a href=""https://codegolf.stackexchange.com/a/242782/100664"">my Jelly answer</a>, go see that explanation for a better idea of how it works. Jelly has some nicer builtins.</p>
<pre><code>ƛ   ;            # Map each task to...
 ¦               # Cumulative sums (instants where a step will complete)
  Þǔ             # Untruth (a boolean list with 1s at those indices)
     ∑           # Reduce the whole thing by addition
      ¦Ḣ         # Get cumulative sums and remove the leading zero
        :G/      # Divide by the maximum
           *     # Multiply by the input
            ⌈    # Get the ceiling
             ×*⁋ # Make a bar graph
</code></pre>
"
"242809","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ÞSƛgnL*;G
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlPGm2duTCo7RyIsIiIsIlsxLCAzLCAzLCAxLCA0LCA1LCAyXSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Port of Unrelated String's Jelly answer.</p>
<pre><code>ÞSƛ    ;  # For each contiguous sublist
   g  *   # Multiply the smallest element
    nL    # The length.
        G # Get the largest product.
</code></pre>
"
"242834","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>↵ƛðv≠TgI;g
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLihrXGm8OwduKJoFRnSTtnIiwicSIsIlwiICAgSm9lIFxcbiAgIEJydWhcXG4gICAgIFBpcGlzXFxuICAgICAgXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of the jelly answer. 8 bytes with the <code>g</code> flag.</p>
<h2>Explained</h2>
<pre><code>↵ƛðv≠TgI;g
↵ƛ          # For each item n in the input split on newlines:
  ðv≠       #   Is each character not a space?
     Tg     #   Smallest index where ^ is truthy. Returns an empty list if all spaces. 
       I    #   Push that many spaces or two empty lists if it's all spaces.
        ;g  #   Return the smallest item of that. 
</code></pre>
"
"242837","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes -15% = 6.8</h1>
<pre><code>` I,` I,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgIEksYCBJLCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Every other char</h2>
<pre><code>`I`I
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSWBJIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation :</h2>
<pre><code>` I,`    # push ` I,`
      I  # quote and prepend
       , # print

`I`  # push `I`
   I # quote and prepend
     # implicit output
</code></pre>
"
"242855","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes, score 0</h1>
<pre><code>kH0kH ∴¡¡
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJEIiwiOSggICAgICAgICAgICAgICAgICAgIyBsb29wIDkgdGltZVxuV18gICAgICAgICAgICAgICAgICAgIyBjbGVhciBzdGFja1xuYGNoYXIgJSByZW1vdmVkOmBuJSwgIyBwcmludChcImNoYXIgJXMgcmVtb3ZlZDpcIiVuKVxuYCIsImtIMGtIIOKItMKhwqEiLCJg4bii4bmqICAgICAgICAgICAjIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBuZXdsaW5lXG5u4oC54ouOICAgICAgICAgICAjIHJlbW92ZSB0aGUgbnRoIGNoYXJcbmBjb2RlOiBg4oK0OiwgICAjIHByaW50KFwiY29kZTogXCIgKyBjb2RlKVxuYG91dHB1dDogYOKCtMSWLCAjIHByaW50KFwib3V0cHV0OiBcIiArIGV2YWwoY29kZSkpXG7CpCwgICAgICAgICAgICAjIHByaW50KCkiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation :</h2>
<pre><code># unaltered
kH        # push 'Hello, World!'  =&gt; [ Hello, World! ]
  0       # push 0                =&gt; [ Hello, World! , 0 ]
   kH     # push 'Hello, World!'  =&gt; [ Hello, World! , 0 , Hello, World! ]
      ∴   # max(a,b)              =&gt; [ Hello, World! , Hello, World! ]
       ¡¡ # sentence case (twice) =&gt; [ Hello, World! , Hello, world! ]
          # implicit output

# 1st char missing
H         # convert to hex        =&gt; [ 0 ]
 0        # Push 0                =&gt; [ 0 , 0 ]
  kH      # push 'Hello, World!'  =&gt; [ 0 , 0 , Hello, World! ]
     ∴¡¡  # max and sentence case =&gt; [ 0 , Hello, world! ]

# 2nd char missing
k0        # do nothing            =&gt; [ ]
  kH      # push 'Hello, World!'  =&gt; [ Hello, World! ]
     ∴¡¡  # max and sentence case =&gt; [ Hello, world! ]

# 3nd char missing
kH        # push 'Hello, World!'  =&gt; [ Hello, World! ]
  kH      # push 'Hello, World!'  =&gt; [ Hello, World! , Hello, World! ]
     ∴¡¡  # max and sentence case =&gt; [ Hello, world! ]

# 4th char missing
kH        # push 'Hello, World!'  =&gt; [ Hello, World! ]
  0       # push 0                =&gt; [ Hello, World! , 0 ]
   H      # convert to hex        =&gt; [ Hello, World! , 0 ]
     ∴¡¡  # max and sentence case =&gt; [ Hello, world! ]

# 5th char missing
kH        # push 'Hello, World!'  =&gt; [ Hello, World! ]
  0       # push 0                =&gt; [ Hello, World! , 0 ]
   k      # do nothing            =&gt; [ Hello, World! , 0 ]
     ∴¡¡  # max and sentence case =&gt; [ Hello, world! ]

# 6th same as unaltered

# 7th char missing
kH        # push 'Hello, World!'  =&gt; [ Hello, World! ]
  0       # push 0                =&gt; [ Hello, World! , 0 ]
   kH     # push 'Hello, World!'  =&gt; [ Hello, World! , 0 , Hello, World! ]
      ¡¡  # sentence case (twice) =&gt; [ Hello, World! , 0 , Hello, world! ]

# 8th or 9th char missing same as unaltered but sentence case only once

</code></pre>
<p>Fun fact, the char <code>0</code> can be replaced by any of <code>$123456789₀₄₆₇₈Ȯ</code> (and maybe some more) and the program is still a solution</p>
"
"242937","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ÞF'Hkd↔⌊æ;i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkYnSGtk4oaU4oyKw6Y7aSIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Infinite Fibonacci <em>and</em> hexadecimal conversion builtins go brr</p>
<pre><code>ÞF          # All fibonacci numbers
  '      ;i # Find the nth where...
   H        # In hexadecimal
    kd↔     # Keeping only digits
       ⌊æ   # Is it prime?
</code></pre>
"
"242945","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>‡₍+-℅d11Ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKHigo0rLeKEhWQxMeG4niIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Prints the infinite list.</p>
<pre><code>        Ḟ # Create an infinite list from...
      11  # [1, 1]
‡    d    # And a function taking two arguments...
 ₍  ℅     # Choose randomly from...
  +-      # sum of previous two, difference of previous two
</code></pre>
"
"243001","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>‡÷₍+-Ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKHDt+KCjSst4bieIiwiIiwiW1sxMCwgMl1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Outputs an infinite list.</p>
<pre><code>     Ḟ # Create an infinite list by repeatedly calling on the input...
‡      # A function
 ÷₍    # Push each  value, and wrap...
   +-  # Their sum and difference
</code></pre>
"
"243003","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>∩ȧvT:v₃$¯ȧ2&lt;JA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqF2ZiIsIuKIqcindlQ6duKCgyTCr8inMjxKQSIsIiIsIiAgICAgICAgICAgIDAgMCAgICAgICAgICAgICAgIFxuICAwICAgICAgICAwIDAgMDAwICAgICAgICAgICAgXG4wMCAwICAgICAwMCAgICAgICAwMDAgMCAgICAgIDBcbiAgICAwMDAgMCAgICAgICAgICAgIDAgMCAgIDAwIFxuICAgICAgIDAgICAgICAgICAgICAgICAgMDAwICAgIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as a list of char lists.</p>
<pre><code>∩              # Transpose the input
 ȧ             # Remove whitespace (since this is a char list list, spaces become empty)
  vT           # Truthy indices (indices of 0) of each
            JA # Are both...
    :v₃        # All elements are length 3
       $¯ȧ     # And all elements have absolute differences
          2&lt;   # Less than 2.
</code></pre>
"
"243006","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>h:N&quot;F
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJoOk5cIkYiLCLiiJEiLCJIZWxsbywgd29ybGQhIEhvdyBhcmUgeW91LCBhbmQgd291bGQgeW91IGxpa2Ugc29tZSBoYWlyeSBob2Jnb2JsaW5zPyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Look ma, no Unicode!</p>
<pre><code>h     # First character of (implicit) input
   &quot;  # Paired with
 :    # A copy of itself
  N   # With case swapped
    F # Remove those characters from (implicit) input
</code></pre>
"
"243039","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>C∑₂`⟇ǎ↔β`½i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oiR4oKCYOKfh8eO4oaUzrJgwr1pIiwiIiwiYTciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>C∑₂`⟇ǎ↔β`½i ; takes the coordinate
C           ; character values of the input
 ∑          ; sum of char values
  ₂         ; is even?
   `⟇ǎ↔β`   ; compressed string &quot;lightdark&quot;
         ½  ; split in half (yielding [&quot;light&quot;, &quot;dark&quot;])
          i ; index into
</code></pre>
"
"243062","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⁺ẇf+12%›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigbrhuodmKzEyJeKAuiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it online!</a> (<a href=""https://vyxal.pythonanywhere.com/#WyIiLCIxMsm+xpsiLCLigbrhuodmKzEyJeKAuiIsIm4kd0o74oGLIiwiIl0="" rel=""nofollow noreferrer"">All test cases</a>)</p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/215712/80050"">SunnyMoon's 05AB1E solution</a></p>
<p><strong>How it works:</strong></p>
<pre><code>⁺ẇf+12%›
⁺ẇ        The number 258
  f       ...as a list of digits ⟨ 2 | 5 | 8 ⟩
   +      Add the input to each
    12%   Mod-12 each
       ›  Increment each
          (implicit output)
</code></pre>
"
"243115","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>C3τvṅ5∆Z⁋
</code></pre>
<p>Uses newline as the separator.</p>
<pre><code>C3τvṅ5∆Z⁋
C            Convert to ASCII codepoint
 3τ          Convert each character to base 3
   vṅ        Join by nothing, because to-base returns a list of digits
     5∆Z     Pad with 5 zeros (because that's the max length of an ASCII char)
        ⁋    Join by newlines
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDM8+EduG5hTXiiIZa4oGLIiwiIiwiSGVsbG8sIHdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strike>It will probably get 9 bytes soon, because of a bug (to-base doesn't support vectorization)</strike><br />
Lyxal epic speed bug fix done</p>
<p>Actually, <a href=""https://vyxal.pythonanywhere.com/#WyJqIiwiIiwiQzPPhHbhuYU14oiGWiIsIiIsIkhlbGxvLCB3b3JsZCEiXQ=="" rel=""nofollow noreferrer"">8 bytes with flag</a>, but <code>j</code> is very buggy</p>
"
"243143","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 89 bytes</h1>
<pre><code>d3+\-*,λ\|?n*J\|Jʁ,;→8*‹(ð←†)\-←†\\?d›IJ\/J,ð\\J?d‹\-*J\/J,?‹(n›I\\J?nd-?‹+IJ\/J,)?›I\vJ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkMytcXC0qLM67XFx8P24qSlxcfErKgSw74oaSOCrigLkow7DihpDigKApXFwt4oaQ4oCgXFxcXD9k4oC6SUpcXC9KLMOwXFxcXEo/ZOKAuVxcLSpKXFwvSiw/4oC5KG7igLpJXFxcXEo/bmQtP+KAuStJSlxcL0osKT/igLpJXFx2SiwiLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>d3+\-*,    Print 2n + 3 dashes

λ                Lambda to print:
 \|              Pipe joined with
   ?n*J;         A string (arg) n times joined with
        \|J      Another pipe
            ʁ,→  Palindromised (and set lambda to anon. var)

8*‹(ð←†)         Loop 8*n - 1 times, call the lambda passing a space as arg
\-←†             Call same lambda with dash as arg
\\?d›IJ\/J,      Print \, n*2+1 spaces, and /
ð\\J?d‹\-*J\/J,  Print space, \, n*2-1 dashes, and /


?‹(n›I\\J?nd-?‹+IJ\/J,)    Loop through n-1 with loop index i
   n›I\\J                  Pad n+1 spaces and /
         ?nd-?‹+IJ         Append i-n*2+i-1 spaces
                  \/J,     Append \/ and print

?›I\vJ,                    Print v padded with n+1 spaces

</code></pre>
"
"243158","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>Ḣ\|vOA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqEiLCLhuKJcXHx2T0EiLCIiLCJ8fFxufHxcbi9vXFxcbnx8Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a list of lines, returns a 1 if Jimmy can't hang on, 0 if he can.</p>
"
"243235","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>↵'²&quot;Ṡ≈;i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLihrUnwrJcIuG5oOKJiDtpIiwiIiwiMSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Insights scraped from the <a href=""https://codegolf.stackexchange.com/a/185357/107299"">MathGolf answer</a> and the <a href=""https://codegolf.stackexchange.com/a/164398/107299"">05AB1E answer</a>.</p>
<pre><code>↵'²&quot;Ṡ≈;i # Takes the number as input and returns the n-th number in the series, 0-indexed
↵        # 10**input
 '    ;  # Filter the implicit range [0..n]
  ²      # Square the input
   &quot;     # Pair the square with the input
    Ṡ    # Vectorised sum
     ≈   # All equal?
       i # Index into the resulting list
</code></pre>
"
"243247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɽƛAß⇧;ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvcabQcOf4oenO+G5hSIsIiIsIkFiY2RlZmciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɽƛAß⇧;ṅ # Takes the string as input
ɽ       # Lowercase the string
 ƛ   ;  # Map the characters in the string to...
  A     # Is character a vowel?
   ß⇧   # If truthy, uppercase the letter
      ṅ # Join by nothing
</code></pre>
"
"243280","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>ɾ\|*\\?ɾ꘍$YvøMøĊ§
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvlxcfCpcXFxcP8m+6piNJFl2w7hNw7jEisKnIiwiIiwiMyJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>This was quite a nice approach that may have ended up a bit clunky due to lack of overloads.</p>
<p>The idea is simple: Create the rotated form:</p>
<pre><code>  \ /
   |
 \   /
  |||
\     /
 |||||
</code></pre>
<p>And rotate it 90° with the <code>§</code> builtin.</p>
<p>We can create the above by interleaving the following:</p>
<pre><code>   |
  |||
 |||||

  \ /
 \   /
\     /
</code></pre>
<p>And that's basically what this does, with a few convenient Vyxal builtins. So close to beating Charcoal...</p>
<pre><code>   *              # Repeat...
 \|               # &quot;|&quot;
ɾ                 # By 1...n
      ?ɾ          # 1...n
        ꘍         # Spaces appended to...
    \\            # &quot;\&quot; 
         $Y       # Interleave them
           vøM    # Mirror each line, leaving the middle alone and flipping slashes
              øĊ  # Align each line to the center
                § # Rotate the whole thing 90°
</code></pre>
"
"243309","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>4ɾ≥vS4ɾd›*¶+4*⁋↵§
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI0yb7iiaV2UzTJvmTigLoqwrYrNCrigYvihrXCpyIsIiIsIjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-3 thanks to Seggan.</p>
<pre><code>4ɾ≥               # Create a map of ones and zeroes corresponding to the bar characters.
   vS             # Stringify those
     4ɾd›         # Create the range [3, 5, 7, 9]
         *        # And repeat each char of those
          ¶+      # Append a newline to each
            4*    # Repeat each four times
              ⁋↵  # Turn into a list of lines
                § # Rotate 90°
</code></pre>
"
"243341","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>d×*₀↲×p14e:&quot;×12*p∞
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkw5cq4oKA4oayw5dwMTRlOlwiw5cxMipw4oieIiwi4oGLIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>d                  # Input * 2
 ×*                # That many asterisks
   ₀↲              # Pad the left to length 10 with spaces
     ×p            # Prepend an asterisk
       14e         # Extend to length 14 by appending the first char
          :&quot;       # Pair with itself
                p  # Prepend to this...
            ×12*   # 12 asterisks
                 ∞ # Palindromise the result
</code></pre>
"
"243417","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ṗv⇧$c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZd24oenJGMiLCIiLCJbNSwyLDEsNCwzLDBdXG5bMiwxLDBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan Allan's Jelly answer.</p>
<pre><code>ṗ     # Powerset
 v⇧   # Grade up each
   $c # Is the input contained in that?
</code></pre>
"
"243427","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6ciLCIiLCJbMSwyLDBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I suppose grading the list up also works.</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h2>
<pre><code>Ṗ'2(?~İ)⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnMig/fsSwKeKBvCIsIiIsIlswLDIsMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>Ṗ'2(?~İ)⁼
Ṗ         # From all permutations of the input
 '        # Keep those where
  2(      #   Getting the result of
   ?~İ    #   [input[x] for x on tos]
      )   #   twice
       ⁼  #   equals the original item. 
</code></pre>
"
"243479","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>14</s> <s>12</s> 10 bytes</h1>
<pre><code>?lṠṪ?nȯ⁼)ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiP2zhuaDhuao/bsiv4oG8KeG5hSIsIiIsIlszXVxuWzIsIDIsIDJdXG5bMSwgMiwgMl1cblsyLCAzLCA0LCA3XVxuWzEsIDMsIDQsIDcsIDExLCAxOF1cblsxLCAxLCAxLCAxLCAxLCAxLCA2XVxuWzIsIDQsIDUsIDExLCAyMCwgMzYsIDY3LCAxMjMsIDIyNiwgNDE2XVxuWzEsIDIsIDQsIDcsIDgsIDIyLCA0MywgODQsIDE2NCwgMzIxXVxuWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Man this new &quot;lambda to newline&quot; thing is cool.</p>
<p><em>-2 thanks to @emanresuA</em></p>
<h2>Explained</h2>
<pre><code>?lṠṪ?nȯ⁼)ṅ
        )ṅ   # Get the first positive integer n where:
  Ṡ          #   the sums of all
?l           #   overlapping windows of the input of length n
   Ṫ         #   with the tail removed
       ⁼     #   exactly equals
    ?nȯ      #   input[n:]
</code></pre>
"
"243563","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>b1O₂
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiMU/igoIiLCIiLCI3NzciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"243564","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>‹9%›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLk5JeKAuiIsIiIsIjQ5NTEwNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"243574","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>C₆%₌∑LḊ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCJgYWJjYjogdHJ1dGh5XG5jY2M6IHRydXRoeVxuYWFhOiB0cnV0aHlcbnB1cmU6IHRydXRoeVxud29yZDogdHJ1dGh5XG5iZWQ6IGZhbHN5XG5jb2RlOiBmYWxzeVxuYm9kZTogZmFsc3lgXG5cbuKGtVxcOi92aFxuXG7GmyIsIkPigoYl4oKM4oiRTOG4iiIsIm4kXCJgJSAtPiAlYCQlO1xcXG5qIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"243575","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>∑dḊ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJFk4biKIiwiIiwiMzkwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"243578","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ƛe;Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm2U7zqAiLCIiLCI0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"243612","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>∑½?g-6≤
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJHCvT9nLTbiiaQiLCIiLCJbOSwgMTEsIDZdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/243606/107299"">@Dominic van Essen's Husk answer</a>. <code>1</code> if the dice are normal, <code>0</code> if the alien used tesseracts for its dice.</p>
<pre><code>∑½?g-6≤ # Takes list as input
∑       # Sum of the list
 ½      # Halved..
    -   # Minus...
  ?g    # Smallest element of the input
     6≤ # Is less than or equal to 6?
</code></pre>
"
"243646","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 33 bytes</h1>
<pre><code>`gDKKN`\*kP*JkP*` w`J`NQKCZ`kP*JN
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgZ0RLS05gXFwqa1AqSmtQKmAgd2BKYE5RS0NaYGtQKkpOIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>As I've golfed this, it's become a lot more straightforward. For reference, the original looked something like <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrQXl5eWdgRUxMYE4wa0x5X0p5X3lfeV9HRF9EPURfSkRfVCtDYCB3YE5KSiRgUkxEYE5KSkpKRD1EX0pUQ0oiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">this</a>.</p>
<p>For convenience, the string is constructed swapcase'd, then fixed at the end.</p>
<p>This program makes heavy use of <code>kP*</code> - <code>*</code> in this context is ring translate, and <code>kP</code> printable ASCII, which is <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrUCIsIiIsIiJd"" rel=""nofollow noreferrer"">arranged a bit weirdly</a>.</p>
<pre><code>       \*kP*                      # The character `+`, made by ring translating `*`
`gDKKN`     J                     # Append that to `gDKKN`
             kP*                  # Ring translate again, producing `hELLO,`
                ` w`J             # Append ` w`
                     `NQKCZ`kP*   # The string `NQKCD` ring translated to `ORLD!`
                                  # Don't ask why Z wraps to `!`
                               JN # Append that and swap the case.
</code></pre>
"
"243664","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ÞFẎΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkbhuo7OoCIsIiIsIjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Come on Vyxal, <a href=""https://codegolf.stackexchange.com/a/225956/107299"">you can do better</a>.</p>
<pre><code>ÞFẎΠ # Takes a number input
ÞF   # Infinite Fibonacci numbers
  Ẏ  # Limit to first n numbers
   Π # Product of them
</code></pre>
"
"243690","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ṖvÞ*Þf$c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZZ2w54qw55mJGMiLCIiLCJbW1wiQVwiLFwiQlwiLFwiQ1wiXSxbXCJBXCIsXCJFXCIsXCJJXCJdLFtcIkVcIixcIk9cIixcIlVcIl0sW1wiTFwiLFwiTlwiLFwiUlwiLFwiU1wiLFwiVFwiXV1cbltcIkNcIixcIk9cIixcIkFcIixcIkxcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns 1 for valid, 0 for invalid.</p>
<pre><code>Ṗv  Þf   # over all permutations
  Þ*     # Reduce by cartesian product
      $c # Check if the input contains that
</code></pre>
"
"243713","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://chat.stackexchange.com/rooms/240/the-nineteenth-byte"">19 bytes</a></h1>
<pre><code>ÞF3l(:n‛+=Y∑꘍,nhL›+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkYzbCg6buKAmys9WeKIkeqYjSxuaEzigLorIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs infinitely.</p>
<pre><code>ÞF3l                # Take the infinite list of Fibonacci numbers, and get overlapping groups of 3
    (               # Looping over that...
          Y∑        # Interleave...
      n             # The tuple of three numbers
       ‛+=          # With '+='
     :      ꘍       # Pad that with the correct amount of spaces, without popping the padding amount
             ,      # Print that
                  + # Add to the padding amount (initially 0)
              nhL›  # The length of the first number in the tuple, plus one.
</code></pre>
"
"243755","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 6 bytes</h1>
<pre><code>Ṅ~Þush
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYR+w551c2giLCIiLCI0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to EmanresuA reminding me that <code>~</code> exists.</p>
<h2>Explained</h2>
<pre><code>Ṅ~Þush
Ṅ      # From all integer partitions of the input,
 ~     # Keep only partitions where:
  Þu   #   The uniqufied version equals the partition (this makes sure that only partitions without duplicates are kept)
    sh # Sort the list and take the first item
</code></pre>
"
"243766","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ẋ∩vg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuoviiKl2ZyIsIiIsIlsyLCAzLCA1LCA3XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ẋ    # Repeat the numbers by themselves
     # [[2, 2], [3, 3, 3], [5, 5, 5, 5, 5]]
 ∩   # Transpose
     # [[2, 3, 5], [2, 3, 5], [3, 5], [5], [5]]
  vg # Get the minimum of each
</code></pre>
"
"243828","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>∷∑‹ȧċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiLfiiJHigLnIp8SLIiwiIiwiWzMsIDQsIDVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>05ab1e port. Outputs 0 for possible + 1 for impossible. The last character can be removed if we can output 1 for possible and anything for impossible.</p>
"
"243845","<h1><a href=""https://github.com/Vyxal/Vyxal/blob/v2.6.0/documents/knowledge/elements.md"" rel=""noreferrer"">Vyxal</a>, 4 <a href=""https://github.com/Vyxal/Vyxal/blob/master/docs/codepage.txt"" rel=""noreferrer"">bytes</a></h1>
<pre><code>ż-Þu
</code></pre>
<p>My first Vyxal answer. Similar approach as the other answer.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvC3DnnUiLCIiLCJbNiw0LDcsMyw1LDIsMV0iXQ=="" rel=""noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqEoROKCtGAgLT4gYOKCtCIsIsW8LcOedSIsIiwiLCJbMywyLDFdXG5bNiw0LDcsMyw1LDIsMV1cblsyLDEsNiw0LDIsNF1cblsxLDIsM11cblszLDEsMl1cbls0LDcsNiw1LDIsMSwzXVxuWzQsNiw0LDIsMSw0XVxuWzIsMSw2LDQsNCw0XSJd"" rel=""noreferrer"">verify all test cases</a>.</p>
<p><strong>Explanation:</strong></p>

<pre class=""lang-python prettyprint-override""><code>ż     # Push a list in the range [1, input-length]
 -    # Subtract it from the input at the same positions
  Þu  # Check if all values in this list are unique
      # (after which the result is output implicitly)
</code></pre>
"
"243886","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ʁÞẊṖ'¯:fTl
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgcOe4bqK4bmWJ8KvOmZUbCIsIiIsIjNcbjIiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>   Ṗ'      # Find all permutations of...
 ÞẊ        # Cartesian power of input and...
ʁ          # Range(input)
    '      # Where...
     ¯     # Differences (vectorising)
      :  l # Length is unchanged when...
       fT  # Flattening and getting truthy indices.
</code></pre>
"
"243926","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 30 bytes</h1>
<pre><code>»ε¥»₄τ2?»øƒ≈»₇τẋṀf`|^/\.`τ\_+§
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu861wqXCu+KChM+EMj/Cu8O4xpLiiYjCu+KCh8+E4bqL4bmAZmB8Xi9cXC5gz4RcXF8rwqciLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Modified port of the Jelly answer.</p>
<pre><code>»ε¥»₄τ                         # [2, 14, 19, 3]
      2         Ṁ              # Insert at position 2...
        »øƒ≈»₇τ                # [74, 125, 99]
       ?       ẋ               # Repeated &lt;input&gt; times
                 f             # Flatten the whole thing
                  `|^/\.`τ     # Decompress each from base with the key &quot;|^/\.&quot;
                          \_+  # Append an underscore to each
                             § # Transpose, fill and join by newlines.
</code></pre>
<p>Old version below because I thought it was quite elegant.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>C</code>, 42 bytes</h1>
<pre><code>` ^
/|
.|
.|
__`øM↵*` 
 
/
/.
__`øṀ↵½Zƛ÷$j
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJDIiwiIiwiYCBeXG4vfFxuLnxcbi58XG5fX2DDuE3ihrUqYCBcbiBcbi9cbi8uXG5fX2DDuOG5gOKGtcK9Wsabw7ckaiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is quite elegant but somewhat messy approach. I'm unsatisfied with the last bit, <code>vj</code> should work but it doesn't.</p>
<p>The first bit produces the string</p>
<pre><code> ^ 
/|\
.|.
.|.
___
</code></pre>
<p>Then repeats each row of that by the input.</p>
<p>Then, it creates</p>
<pre><code>

/\
/..\
____
</code></pre>
<p>by mirroring half of each line, and inserts the previous into that. Finally, the whole thing is centered.</p>
"
"244002","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>4(36₄vV§↵R)∑2O
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqF2UyIsIjQoMzbigoR2VsKn4oa1UiniiJEyTyIsIiIsIjYzTzZcbjMzMzNcbjMzM09cbjMzTzYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Messy port of Kevin Cruijssen's 05AB1E answer.</p>
<p>Two things increase the byte count of this:</p>
<ul>
<li>We have to explicitly vectorise replace (<code>V</code>)</li>
<li>Transposing creates a character matrix, so we use a more convoluted method.</li>
</ul>
<pre><code>4(        )    # Four times...
  36₄vV        # Replace 36 with 26
       §↵R     # Rotate 90°
           ∑2O # Count the 2s in the result.
</code></pre>
"
"244004","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ɾ›:Ẋµƒe;Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKAujrhuorCtcaSZTvhuo4iLCIiLCIxMSJd"" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>ɾ›        # 2..n+1
  :Ẋ      # Cartesian product with self
    µ  ;  # Sort by...
     ƒ    # Reduce by...
      e   # Exponentiation.
        Ẏ # Get the first n.
</code></pre>
"
"244103","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Ṗ'¯A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnwq9BIiwiIiwiWzEsMCwxLDJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan Allan's Jelly answer.</p>
<p>-1 thanks to ovs.</p>
"
"244149","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>bǔǔB
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJix5THlEIiLCIiLCIyMSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>All these languages without rotate right built-ins smh.</p>
<h2>Explained</h2>
<pre><code>bǔǔB
b    # convert input to binary
 ǔ   # rotate that right once
  ǔ  # and rotate that right all over again. 
   B # convert back to base 10 
</code></pre>
"
"244168","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 38 bytes</h1>
<pre><code>1N→_a`\d+`?λ←_a1+→_a`\d+`?Ẏ⌊s←_a iS;øṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxTuKGkl9hYFxcZCtgP8674oaQX2ExK+KGkl9hYFxcZCtgP+G6juKMinPihpBfYSBpUzvDuOG5mSIsIiIsImBbMTIsIFs0MywgNTFdLCBbWzIzLCA0XSwgOSwgWzIyLCBbXV1dXWAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks @lyxal for helping me a lot in chat. I've never posted any Vyxal answers before.</p>
<p>This is a port of my JavaScript solution. Takes a stringified list (provided with backticks around a Python-like list syntax).</p>
"
"244190","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>⌐
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJhIiwidmZcXCAwdlZcXCMxdlYiLCLijJAiLCIwXFwgdlYxXFwjdlZ24bmF4oGLIiwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyAgIyMjICAjIyAgICAgICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgICAgICAjIyMjIyMgICMjIyAgIyMgICAgICAgIyMgICAgICAgIyMgICMjIyMjIyMgICAgICAjI1xuIyAgIyMjICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICMjIyAgIyMgICMjIyAgIyMgICMjIyAgIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgICAgICAjIyAgICAgIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICMgIyAgIyMgICMjIyAgIyMgICAgICAgIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgIyMjICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICAjICAgIyMgICMjIyAgIyMgICMgICMjIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgIyMjICAjIyAgICAgICAjIyAgICAgICAjIyAgICAgICAjIyAgICAgICAjIyMjIyMgICMjIyAgIyMgICAgICAgIyMgICMjIyAgIyMgICAgICAgIyMgICAgICAjI1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same method as DLosc's 3 byte Pip answer. Takes a list of lists of either 0 or 1.</p>
<p>Simply computes <code>1 - n</code> for each digit. Alternatively,</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h2>
<pre><code>₀S*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJhIiwiXFwgMHZWXFwjMXZW4oGLIiwi4oKAUyoiLCIwXFwgVjFcXCNWIiwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyAgIyMjICAjIyAgICAgICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgICAgICAjIyMjIyMgICMjIyAgIyMgICAgICAgIyMgICAgICAgIyMgICMjIyMjIyMgICAgICAjI1xuIyAgIyMjICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICMjIyAgIyMgICMjIyAgIyMgICMjIyAgIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgICAgICAjIyAgICAgIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICMgIyAgIyMgICMjIyAgIyMgICAgICAgIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgIyMjICAjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjIyMjIyAgIyMjICAjIyMjIyMgICAjICAgIyMgICMjIyAgIyMgICMgICMjIyMgICMjIyMjIyMgICMjIyAgI1xuIyAgIyMjICAjIyAgICAgICAjIyAgICAgICAjIyAgICAgICAjIyAgICAgICAjIyMjIyMgICMjIyAgIyMgICAgICAgIyMgICMjIyAgIyMgICAgICAgIyMgICAgICAjI1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a multiline string of 0s and 1s. The flag, header and footer are for allowing the test cases to be directly pasted in without having to change them.</p>
<h2>Explained</h2>
<pre><code>₀S*
₀S  # The string &quot;10&quot;
  * # Ring translate the input according to that - change 0 to 1, 1 to 0 and leave newlines as they are. 
</code></pre>
"
"244201","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> <s>15</s> 10 bytes</h1>
<pre><code>≬Iȧ[vxǓ]İǔ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaxJyKdbdnjHk13EsMeUIiwiIiwiWzEsMTAsWzIsMiw0XSw2LFtbNSw2XSw3XSwxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>All because there's a bug with <code>ǔ</code> and nested lists.</s> Gotta love bug fixes.</p>
<h2>Explained</h2>
<pre><code>≬Iȧ[vxǓ]İǔ
≬       İ    # Apply the following on the input while the result is unique, collecting iterations:
 Iȧ          #   Either push lambda arugment spaces or split a list into two halves. Then remove all whitespace.
   [   ]     #   If that's truthy (that is, the item is a list):
    vx       #    Apply this lambda to each item recursively
      Ǔ      #    And rotate the result of that left once
        ǔ    # Rotate the resulting list right
</code></pre>
"
"244253","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 words + <span class=""math-container"">\$1^1 +1 = 4\$</span></h1>
<pre><code>`qUEued`qUEued
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgcVVFdWVkYHFVRXVlZCIsIiIsIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Gosh this took ages to find.</p>
<p>Vyxal's a SBCS language, meaning most of its characters are unicode ones that we cannot use here. But it's still fairly usable without those.</p>
<p>The easiest way to make Vyxal quines is using the format <code>`code`code</code>, where the code prepends a backtick and doubles the result, or similar - this is pretty much exactly what the above program does.</p>
<pre><code>`qUEued`       # Data string
        q      # Unevaluate; enclose in backticks
         U     # Uniquify, removing the trailing backtick
          E    # Evaluate as Python; NOP
           ue  # Extend to length -1; NOP
             d # Double, creating the quine!
</code></pre>
"
"244257","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>Þp'ɾ↵$%1ḟ⇧=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnnAnyb7ihrUkJTHhuJ/ih6c9IiwiIiwiMTciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Kevin Cruijssen's answer.</p>
<pre><code>Þp'         # Filter the infinite list of primes by...
   ɾ        # 1...n
    ↵       # 10 to the power of each of those
     $%     # Modulo n
       1ḟ   # Find the first index of a 1
         ⇧= # Is it + 2 equal to n?
</code></pre>
<p>See, when I saw something about &quot;powers of 10 modulo n&quot; I thought it meant you could get something with an equivalent cycle in that way. I didn't realise it was so simple...</p>
"
"245341","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 65 bytes, score 22</h1>
<pre><code>\\\::\__\⅛⅛\££\→→\((\[[\‟‟\**\••\--\oo\PP\ḞḞ\↳↳\↲↲\⋏⋏\ǑǑ\FF\jj\∇∇
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXFxcXFw6OlxcX19cXOKFm+KFm1xcwqPCo1xc4oaS4oaSXFwoKFxcW1tcXOKAn+KAn1xcKipcXOKAouKAolxcLS1cXG9vXFxQUFxc4bie4bieXFzihrPihrNcXOKGsuKGslxc4ouP4ouPXFzHkceRXFxGRlxcampcXOKIh+KIhyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Based on <a href=""https://codegolf.stackexchange.com/a/155997/100664"">Weijun Zhou's Stax answer</a>.</p>
<p>In Vyxal, <code>\</code> takes the next character as a single character. So, the bit at the start <code>\\\::</code> pushes <code>&quot;\&quot;</code>, pushes <code>&quot;:&quot;</code>, then duplicates it with the operation <code>:</code>.</p>
<p>The stack is now <code>[&quot;\&quot;, &quot;:&quot;, &quot;:&quot;]</code>.</p>
<p>If either <code>:</code> is removed, the <code>:</code> operation is not run and the stack is just <code>[&quot;\&quot;, &quot;:&quot;]</code>. If any <code>\</code> is removed, the stack becomes <code>[&quot;\&quot;,&quot;\&quot;,&quot;\&quot;]</code>.</p>
<p>The rest of the program is chunks of <code>\xx</code>, where x is some operation that effectively does nothing but remove a string from the stack. These chunks normally do nothing, as they effectively push and pop a value.</p>
<p>If a backslash is removed, an operation that effectively pops the stack is run twice, removing the two <code>&quot;:&quot;</code> from the stack and leaving the backslash we pushed at the start.</p>
<p>If either x is removed, the string <code>&quot;x&quot;</code> is pushed to the stack and not removed.</p>
<p>Finally, the top of the stack is implicitly output.</p>
<h3>Operations, and why they work</h3>
<p>For these, <code>x</code> is the value already on the stack and <code>y</code> is the value</p>
<ul>
<li><code>_</code> - Simply pops <code>y</code></li>
<li><code>⅛</code> - Pushes <code>y</code> to the global array.</li>
<li><code>£</code> - Stores <code>y</code> to the register</li>
<li><code>→</code> - Stores <code>y</code> to the empty variable</li>
<li><code>(</code> - starts a for loop over <code>y</code>. As it's a 1-character string the code inside is run once</li>
<li><code>[</code> - If <code>y</code> is truthy, execute the remaining code. It will always be truthy.</li>
<li><code>‟</code> - Rotate <code>y</code> to the bottom of the stack.</li>
<li><code>*</code> - Ring translate <code>x</code> by <code>y</code>. Since the strings share no characters, nothing happens.</li>
<li><code>•</code> - Give <code>x</code> the casing of <code>y</code>. Since this occurs before anything alphabetical, nothing happens.</li>
<li><code>-</code> - Remove <code>y</code> from <code>x</code></li>
<li><code>o</code> - Remove <code>y</code> from <code>x</code></li>
<li><code>P</code> - Strip <code>y</code> from the outside of <code>x</code></li>
<li><code>Ḟ</code> - Replace spaces in <code>x</code> with <code>y</code>. There are no spaces in <code>x</code>.</li>
<li><code>↳</code> - Pad <code>x</code> according to <code>y</code></li>
<li><code>↲</code> - Pad <code>x</code> according to <code>y</code></li>
<li><code>⋏</code> - Center <code>x</code> according to <code>y</code></li>
<li><code>Ǒ</code> - Remove <code>y</code> from <code>x</code> until <code>x</code> doesn't change</li>
<li><code>F</code> - Remove characters in <code>y</code> from <code>x</code></li>
<li><code>j</code> - Join <code>y</code> by <code>x</code>. This does nothing to a 1-character <code>x</code>.</li>
<li><code>∇</code> - Rotate the top three items of the stack. Has to be at the end.</li>
</ul>
"
"245342","<h1>Answer 69, <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, distance 6</h1>
<pre><code>`C68º,;n*:&quot;C&quot;
BBc&quot;&lt;&lt;x
2**66
x
#??92a5*2p@^54┘#--2'3k:'2k*.@2(#&quot;#28@P2*Jp;math 2\^45#2^41 NB.#(expt 2 39); ^ 
qut()
@n.out (*2 32#e#a44******O@) //2 25)
&quot;e
&quot;2ej
:
py 
p
r1ker
s
n
t
(2**60)
&quot;%d&quot; $[2**43]bye'$/*#&quot;A#327;N&lt;.&quot;$&quot;/class HelloWorld {static void Main() 0{;n***~#`69E
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgQzY4wrosO24qOlwiQ1wiXG5CQmNcIjw8eFxuMioqNjZcbnhcbiM/PzkyYTUqMnBAXjU04pSYIy0tMiczazonMmsqLkAyKCNcIiMyOEBQMipKcDttYXRoIDJcXF40NSMyXjQxIE5CLiMoZXhwdCAyIDM5KTsgXiBcbnF1dCgpXG5Abi5vdXQgKCoyIDMyI2UjYTQ0KioqKioqT0ApIC8vMiAyNSlcblwiZVxuXCIyZWpcbjpcbnB5IFxucFxucjFrZXJcbnNcbm5cbnRcbigyKio2MClcblwiJWRcIiAkWzIqKjQzXWJ5ZSckLyojXCJBIzMyNztOPC5cIiRcIi9jbGFzcyBIZWxsb1dvcmxkIHtzdGF0aWMgdm9pZCBNYWluKCkgMHs7bioqKn4jYDY5RSIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<ul>
<li>Added a backtick att tthe start and end</li>
<li>Appended <code>69E</code></li>
<li>Removed an existing backtick</li>
</ul>
"
"245347","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>kAµ?⇧nO⌐
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrQcK1P+KHp25P4oyQIiwiIiwiXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBQcmFlc2VudCB2aXRhZSBlcmF0IHZlbGl0LiBNYXVyaXMgZ3JhdmlkYSBldWlzbW9kIGxpYmVybyB1dCB0aW5jaWR1bnQuIFBoYXNlbGx1cyBlbGl0IGR1aSwgY29uc2VjdGV0dXIgZXQgZWdlc3RhcyBpbiwgYWxpcXVhbSB2aXRhZSBkaWFtLiBEb25lYyBlZ2V0IHZhcml1cyBhbnRlLiBWZXN0aWJ1bHVtIGN1cnN1cyBkaWFtIGFsaXF1ZXQsIGVnZXN0YXMgb3JjaSBxdWlzLCBwbGFjZXJhdCBkb2xvci4gUHJvaW4gdmVsIG5pc2kgbGVjdHVzLiBDbGFzcyBhcHRlbnQgdGFjaXRpIHNvY2lvc3F1IGFkIGxpdG9yYSB0b3JxdWVudCBwZXIgY29udWJpYSBub3N0cmEsIHBlciBpbmNlcHRvcyBoaW1lbmFlb3MuIEFsaXF1YW0gZXJhdCB2b2x1dHBhdC4gRXRpYW0gbGliZXJvIHRvcnRvciwgb3JuYXJlIGlkIGR1aSBlZ2V0LCBwb3N1ZXJlIGRpZ25pc3NpbSBsaWJlcm8uIFBlbGxlbnRlc3F1ZSBjb21tb2RvIGNvbnNlcXVhdCB2b2x1dHBhdC4gSW50ZWdlciBoZW5kcmVyaXQgc2FwaWVuIGxpYmVybywgdmVsIHZpdmVycmEgYXVndWUgZmFjaWxpc2lzIHNpdCBhbWV0LiBRdWlzcXVlIGNvbnNlY3RldHVyIGVnZXQgbmlzbCBxdWlzIGRpZ25pc3NpbS4gVXQgbGFjaW5pYSBwcmV0aXVtIHF1YW0gYSBwbGFjZXJhdC5Nb3JiaSBzZWQgaW50ZXJkdW0gcmlzdXMsIG5lYyBwcmV0aXVtIGxlY3R1cy4gTW9yYmkgaW1wZXJkaWV0IGVzdCBpZCBhY2N1bXNhbiBtb2xlc3RpZS4gRHVpcyBzZWQgZmVybWVudHVtIG5pc2wuIE51bmMgdml0YWUgYXVndWUgbWF0dGlzLCBkaWN0dW0gbGVjdHVzIHZlbCwgYWNjdW1zYW4gbmlzbC4gU2VkIHVsdHJpY2llcyBhZGlwaXNjaW5nIHJob25jdXMuIFZpdmFtdXMgZXUgbGFjdXMgYSBlbmltIHZlbmVuYXRpcyBlbGVpZmVuZC4gUHJhZXNlbnQgY29uc2VjdGV0dXIgdG9ydG9yIG5vbiBlbGVpZmVuZCB1bHRyaWNpZXMuIE1hdXJpcyBldCBvZGlvIHBvc3VlcmUsIGF1Y3RvciBlcmF0IGF0LCBmcmluZ2lsbGEgZXN0LiBQcm9pbiBpbiB2ZXN0aWJ1bHVtIGVyYXQuIE1hZWNlbmFzIGNvbmd1ZSBjb21tb2RvIGFudGUgdmVsIHZhcml1cy4gU2VkIHRlbXB1cyBtaSB1dCBtZXR1cyBncmF2aWRhLCBuZWMgZGljdHVtIGxpYmVybyBkYXBpYnVzLiBNb3JiaSBxdWlzIHZpdmVycmEgZWxpdC4gVXQgcGhhcmV0cmEgbmVxdWUgZWdldCBsYWN1cyB0aW5jaWR1bnQgZGljdHVtLiBGdXNjZSBzY2VsZXJpc3F1ZSB2aXZlcnJhIHRlbGx1cyBldCBwcmV0aXVtLkZ1c2NlIHZhcml1cyBhZGlwaXNjaW5nIG9kaW8uIE51bGxhIGltcGVyZGlldCBmYXVjaWJ1cyBzZW0sIGF0IHJob25jdXMgaXBzdW0gYWRpcGlzY2luZyB2aXRhZS4gUGhhc2VsbHVzIGltcGVyZGlldCBjb25ndWUgbGFjdXMgZXQgbW9sbGlzLiBOdWxsYW0gZWdlc3RhcyBtYXVyaXMgbWFnbmEsIGV0IG1vbGxpcyBsZWN0dXMgdmFyaXVzIHV0LiBTZWQgc29sbGljaXR1ZGluIGFkaXBpc2NpbmcgZG9sb3IsIHZlbCBlbGVtZW50dW0gZWxpdCBsYW9yZWV0IG1vbGVzdGllLiBBbGlxdWFtIG5lYyBudWxsYSB2ZWwgc2VtIHVsdHJpY2VzIHVsbGFtY29ycGVyLiBOdWxsYW0gbmVjIGZlbGlzIG1hZ25hLiBEdWlzIHNvZGFsZXMgb3JjaSBub24ganVzdG8gYWxpcXVhbSB0ZW1wdXMuIEludGVnZXIgbWkgZGlhbSwgdGVtcG9yIHNlZCB2dWxwdXRhdGUgZXQsIHZhcml1cyBldCBudW5jLiBWZXN0aWJ1bHVtIHNvZGFsZXMgaXBzdW0gaWQgbWkgcGhhcmV0cmEsIHV0IGNvbnZhbGxpcyBtaSBhY2N1bXNhbi4gU2VkIGRpY3R1bSB2b2x1dHBhdCB2ZXN0aWJ1bHVtLlF1aXNxdWUgYWMgZG9sb3Igc2FnaXR0aXMsIGFsaXF1YW0gbGliZXJvIGF0LCBldWlzbW9kIGVuaW0uIE51bGxhIHVsbGFtY29ycGVyIHBvc3VlcmUgbnVsbGEgdml0YWUgdmFyaXVzLiBOYW0gYXQgZG9sb3Igbm9uIGxpYmVybyBlbGVtZW50dW0gcGVsbGVudGVzcXVlIGluIGluIGxvcmVtLiBGdXNjZSBwb3J0dGl0b3IgdHVycGlzIGluIHF1YW0gcGxhY2VyYXQgdmFyaXVzLiBEb25lYyBsb3JlbSBvcmNpLCBjb25kaW1lbnR1bSBldSBzYXBpZW4gc2l0IGFtZXQsIGFsaXF1ZXQgY29tbW9kbyBtYWduYS4gUXVpc3F1ZSBzZWQgbGVjdHVzIHNpdCBhbWV0IGFyY3UgZXVpc21vZCBhY2N1bXNhbiBldCBub24gbnVuYy4gUGhhc2VsbHVzIHBsYWNlcmF0IGNvbmd1ZSBtZXR1cywgZmV1Z2lhdCBwb3N1ZXJlIGxlbyBkaWN0dW0gcXVpcy4gU2VkIHVsdHJpY2llcyBmZXVnaWF0IGVyb3MgZGlnbmlzc2ltIGJpYmVuZHVtLk1hdXJpcyBzY2VsZXJpc3F1ZSBjb25zZWN0ZXR1ciBsaWJlcm8gZWdldCB2YXJpdXMuIEFlbmVhbiBuZXF1ZSBudW5jLCB1bGxhbWNvcnBlciB2aXRhZSBvcmNpIGluLCBhdWN0b3Igb3JuYXJlIHNhcGllbi4gTmFtIGxhY2luaWEgbW9sZXN0aWUgaW1wZXJkaWV0LiBOYW0gdml0YWUgbWF0dGlzIG5pYmguIFZlc3RpYnVsdW0gY29uc2VxdWF0IHRlbGx1cyBhYyBuaXNpIHNhZ2l0dGlzIHB1bHZpbmFyLiBOdWxsYW0gbW9sbGlzIG9ybmFyZSBxdWFtLCBldCB2ZW5lbmF0aXMgbGVvIHBvcnR0aXRvciBzaXQgYW1ldC4gTnVsbGEgdXJuYSBuZXF1ZSwgZGlnbmlzc2ltIG5vbiBvcmNpIHV0LCB2b2x1dHBhdCB1bHRyaWNlcyBlcmF0LiBDdW0gc29jaWlzIG5hdG9xdWUgcGVuYXRpYnVzIGV0IG1hZ25pcyBkaXMgcGFydHVyaWVudCBtb250ZXMsIG5hc2NldHVyIHJpZGljdWx1cyBtdXMuIFBlbGxlbnRlc3F1ZSB2ZXN0aWJ1bHVtIHRlbGx1cyBuZWMgZXJvcyBmYXVjaWJ1cyBwb3J0YS5cIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>kA       # Uppercase alphabet
  µ    ⌐ # Reverse sorted by...
      O  # Count of...
     n   # This item in...
   ?⇧    # Uppercase input
</code></pre>
"
"245360","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>?0⁼?0⁼∨??⁼∨??∴*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI/MOKBvD8w4oG84oioPz/igbziiKg/P+KItCoiLCIiLCIxXG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Surprisingly no Vyxal answer yet. Return the max, multiplied by the boolean value indicating whether the values are equal or one of them is zero.</p>
<hr />
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>s0pU3i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCJgKDAsIDApIC0+IDBcbigwLCAxKSAtPiAxXG4oMCwgMikgLT4gMlxuKDAsIDMpIC0+IDNcbigxLCAwKSAtPiAxXG4oMSwgMSkgLT4gMVxuKDEsIDIpIC0+IDBcbigxLCAzKSAtPiAwXG4oMiwgMCkgLT4gMlxuKDIsIDEpIC0+IDBcbigyLCAyKSAtPiAyXG4oMiwgMykgLT4gMFxuKDMsIDApIC0+IDNcbigzLCAxKSAtPiAwXG4oMywgMikgLT4gMFxuKDMsIDMpIC0+IDNgXG5cbmBcXG5gLyBgIC1gLyB2aEUgXG7GmyIsInMwcFUzaSIsIm5TJFwiYCUgLT4gJWAkJTtgXFxuYGoiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks @lyxal for this version which ports the Pyth answer.</p>
"
"245396","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>Zf0€÷^
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJaZjDigqzDt14iLCIiLCJbMTEsMTIsMTNdXG5bMSwyLDMsNCw1XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Looks like 05AB1E beats Vyxal this time. Takes input in reversed order.</p>
<pre><code>Zf0€÷^ # Leaving out this comment makes the explanation kinda feel empty
Z      # Zip the lists
 f     # Flatten
  0€   # Split on 0
    ÷  # Push every item
     ^ # Reverse the stack
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>Zf:0ḟẎ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJaZjow4bif4bqOIiwiIiwiWzExLDEyLDEzXVxuWzEsMiwzLDQsNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A slightly different approach. Still 6 bytes.</p>
<pre><code>Zf:0ḟẎ # Leaving out this comment makes the explanation kinda feel empty
Z      # Zip the lists
 f     # Flatten
  :    # Duplicate the top of the stack
   0ḟ  # Index of the first 0
     Ẏ # Take everything up until that index
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>Zf0€h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJaZjDigqxoIiwiIiwiWzExLDEyLDEzXVxuWzEsMiwzLDQsNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input in reversed order. Returns 0 for the case of 2 empty lists, so does not meet the spec.</p>
<pre><code>Zf0€h # Leaving out this comment makes the explanation kinda feel empty
Z     # Zip the 2 lists
 f    # Flatten them
  0€  # Split on 0
    h # Get the first item
</code></pre>
"
"245429","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>N
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqHigYtcXCNcXEFWXFwgXFxhViIsIk4iLCJcXGFcXCBWXFxBXFwjViIsIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgICMjIyAgIyMgICAgICAgIyMgICMjIyMjIyMgICMjIyMjIyMgICAgICAgIyMjIyMjICAjIyMgICMjICAgICAgICMjICAgICAgICMjICAjIyMjIyMjICAgICAgIyNcbiMgICMjIyAgIyMgICMjIyMjIyMgICMjIyMjIyMgICMjIyMjIyMgICMjIyAgIyMjIyMjICAjIyMgICMjICAjIyMgICMjICAjIyMgICMjICAjIyMjIyMjICAjIyMgICNcbiMgICAgICAgIyMgICAgICMjIyMgICMjIyMjIyMgICMjIyMjIyMgICMjIyAgIyMjIyMjICAjICMgICMjICAjIyMgICMjICAgICAgICMjICAjIyMjIyMjICAjIyMgICNcbiMgICMjIyAgIyMgICMjIyMjIyMgICMjIyMjIyMgICMjIyMjIyMgICMjIyAgIyMjIyMjICAgIyAgICMjICAjIyMgICMjICAjICAjIyMjICAjIyMjIyMjICAjIyMgICNcbiMgICMjIyAgIyMgICAgICAgIyMgICAgICAgIyMgICAgICAgIyMgICAgICAgIyMjIyMjICAjIyMgICMjICAgICAgICMjICAjIyMgICMjICAgICAgICMjICAgICAgIyNcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A different Vyxal solution. Expects uppercase letters for <code>#</code> and lowercase letters for <code> </code> or vice versa. <code>N</code> is the swap case element. The header and footer converts the test case format into the format that the program expects and vice versa.</p>
"
"245444","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>⌈'⇩ḣh\h≠$h\s=∧;:ɽ:vḟUİ₅6&gt;7*Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIgn4oep4bijaFxcaOKJoCRoXFxzPeKIpzs6yb06duG4n1XEsOKChTY+Nyrhuo4iLCIiLCJTUEVFRCBzUGVFZCBzaG9wcGVyIFNQRUVEIG5ldyBjYXIgYm9vayBzZXZlbiBzYWQgc3VtIHBvd2VyIGZ1biBzdXBlciBzaXN0ZXIgc2lsdmVyIHNpbGx5IHN0YXJ0Il0="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJqIiwi4pahxpsiLCLijIgn4oep4bijaFxcaOKJoCRoXFxzPeKIpzs6yb06duG4n1XEsOKChTY+Nyrhuo4iLCIiLCJzcGVlZCBzcGVlZCBuZXcgY2FyIGJvb2sgc2V2ZW4gc2FkIHN1bSBwb3dlciBmdW4gc3VwZXIgc2lzdGVyIHNpbHZlciBzaWxseSBzdGFydFxuc3BlZWQgU3BFRWQgbmV3IGJvb2sgc2V2ZW4gc2FkIHN1bSBwb3dlciBmdW4gc3VwZXIgc2lzdGVyIHNpbHZlciBzaWxseSBzdGFydFxuc2hlZXAgc3BlZWQgbmV3IGNhciBib29rIHNldmVuIHNhZCBzdW0gcG93ZXIgZnVuIHN1cGVyIHNpc3RlciBzaWx2ZXIgc2lsbHkgc3RhcnRcbmZpcnN0IHNlY29uZCB0aGlyZFxuU1BFRUQgc1BlRWQgc2hvcHBlciBTUEVFRCBuZXcgY2FyIGJvb2sgc2V2ZW4gc2FkIHN1bSBwb3dlciBmdW4gc3VwZXIgc2lzdGVyIHNpbHZlciBzaWxseSBzdGFydCJd"" rel=""nofollow noreferrer"">Try some testcases!</a> Mis-deduplication should be fixed now.</p>
<pre><code>⌈'⇩ḣh\h≠$h\s=∧;:ɽ:vḟUİ₅6&gt;7*Ẏ
⌈'             ;                 Filter input, split on spaces, by:
  ⇩ḣ                                 Push (input lowercased)([0], [1:])
    h\h≠                             Second character (input[1:][0]) isn't `h`
        $h\s=∧                       and first character isn `s`

                :ɽ               Duplicate, lowercase each
                  :vḟ            Find first occurrences of each of ^ in ^
                     U           Uniquify ^
                      İ          Index ^ into filtered list, resulting
                                 in the properly deduplicated list

                       ₅6&gt;       1 if len(^) is 7 or more, otherwise 0
                          7*Ẏ    Multiply by 7 and slice [0:that]
</code></pre>
"
"245503","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ḣ$NpB
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuKMkTnBCIiwiIiwiWzEsMSwxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>When you steal ideas from Jelly</p>
<pre><code>ḣ$NpB # Expects a list of digits
ḣ     # Push the first item and then the rest
 $    # Swap
  N   # Negate the first item
   p  # Prepend the result to the rest of the list
    B # Binary to decimal
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>h[†B›N|B
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJoW+KAoELigLpOfEIiLCIiLCJbMSwxLDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>My original pre-Jelly answer</p>
<pre><code>h[†B›N|B # Takes input as a list of binary digits
h[       # If the first bit is 1...
  †      # Vectorized not
   B     # Convert to decimal
    ›    # Add one
     N   # Negate
      |  # Otherwise...
       B # Convert to decimal
</code></pre>
"
"245522","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>35</s> 34 bytes</h1>
<pre><code>»gtWŀż⌊l,∇ɖ∩꘍√ṘȮ∞*&quot;Cβ1⋎ʀv@Ḃ»kakd+τ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu2d0V8WAxbzijIpsLOKIh8mW4oip6piN4oia4bmYyK7iiJ4qXCJDzrIx4ouOyoB2QOG4gsK7a2FrZCvPhCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to @whqwert</p>
<p>Ez</p>
<pre><code>»gtWŀż⌊l,∇ɖ∩꘍√ṘȮ∞*&quot;Cβ1⋎ʀv@Ḃ»kakd+τ # Full program
                                 τ # Convert the number to base len(str) using the number...
»gtWŀż⌊l,∇ɖ∩꘍√ṘȮ∞*&quot;Cβ1⋎ʀv@Ḃ»       # 149288472330050833510329217157030174401240445325930074868876423
                            kakd+  # And the string &quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;
</code></pre>
"
"245537","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>:ǎ'⁰l;ƛ⁰Zƛ≈;aßn;~ḃhḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI6x44n4oGwbDvGm+KBsFrGm+KJiDthw59uO37huINo4bifIiwiIiwiQkhHRUZYV0ZUSVVQSVRISExQRVRUVENMT0VXT0VMTVxuV0VUVEVSQkVSSUNIVCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I wrote this so long ago, waiting for <code>ḟ</code> to work on strings, that I forgot how this even works</p>
"
"245569","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>b4vβ:∑+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsImI0ds6yOuKIkSsiLCI7IiwiW1sxLDBdLFsxLDJdLFsyLDNdLFs0LDldLFsxMiwxMl0sWzEsM10sWzcsMTFdLFs3LDNdXSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Port of (my suggested golf to) <a href=""https://codegolf.stackexchange.com/a/245550/85334"">Jonathan Allan's Jelly solution</a>. Input as a list of the two numbers.</p>
<pre><code>b          Convert each to binary,
 4vβ       then convert each from base 4.
b4vβ       This has the effect of interleaving with a bit pattern of all zeroes.
      +    Add each to
    :∑     their sum.
</code></pre>
"
"245592","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ƒ∪
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGkuKIqiIsIiIsIltcIlRcIixcInlcIixcInBcIixcImVcIixcIiBcIixcInVcIixcIm5cIixcImlcIixcInFcIixcInVcIixcImVcIixcIiBcIixcImNcIixcImhcIixcImFcIixcInJcIixcInNcIixcIiFcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Reduce by set union. Port of caird's answer.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ÞU*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlUqIiwiIiwiW1wiVFwiLFwieVwiLFwicFwiLFwiZVwiLFwiIFwiLFwidVwiLFwiblwiLFwiaVwiLFwicVwiLFwidVwiLFwiZVwiLFwiIFwiLFwiY1wiLFwiaFwiLFwiYVwiLFwiclwiLFwic1wiLFwiIVwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Multiply by uniquify mask.</p>
"
"245593","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>dḢ?ḟ›Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJk4biiP+G4n+KAuuG6jiIsIiIsIlwiYWJjYWJjYWJjXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yet another port of xnor's answer</p>
"
"245722","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 + (11 * 2) = 25</h1>
<pre><code>`İy
</code></pre>
<p>Currently outputs <code>&lt;/li&gt;y</code>, should output <code>d xdirf irrwst.mreo3//h.s-ksxdiry</code>.</p>
<p>A necessary spoiler: This works on MacOS and probably only there, on the offline Vyxal interpreter.</p>
"
"245734","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 + (2 * 2) = 7, <a href=""https://codegolf.stackexchange.com/questions/245702/whats-the-missing-code-robbers/245759#245759"">Cracked</a> by Jonathan Allan.</h1>
<pre><code>kay
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYXkiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Should output <code>acegikmoqsuwy]</code>. Bonus challenge: <code>cegikmoqsuwya</code>.</p>
"
"245736","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 + (2 * 4) = 10, safe!</h1>
<pre><code>kj
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJraiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>One last one... Output should be <code>////\\///\\\//\\\////\\///\\\//\\\////\\///\\\//\\\\///\\///\\\//\\\\///\\///\\\//\\\////\\///\\\//\\\////\\///\\\//\\\////\\///\\\//\\\\///\\///\\\//\\\\///\\///\\\//\\\\///\\///\\\//\\\////\\///\\\//\\\////\\///\\\//\\\\///\\///\\\//\\\\///\\///\\\//\\\\</code></p>
<blockquote class=""spoiler"">
<p> <pre><code>k/3(:j</code></pre>
 <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrLzMoOmoiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a><br />
 Explanation:
 <pre><code>k/      # &quot;/\&quot;
   3(   # 3 times...
     :j # Join by itself</code></pre>
 Spoilers = pain</p>
</blockquote>
"
"245827","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>17</s> 15 bytes</h1>
<pre><code>₇ƛ⁰+₇%C;U'kBṄ↔⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigofGm+KBsCvigoclQztVJ2tC4bmE4oaU4oG8IiwiIiwiWzEwMywgMTIzLCAxMjAsIDUxLCA5NywgMTI0LCAxLCAxMjAsIDcsIDEyMCwgMTIwLCAxLCA3LCAxMjMsIDUxLCA4NSwgMTIsIDcsIDEyMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to @lyxal</p>
<p>Explanation is for my old code:</p>
<pre><code>₇ƛ⁰+₇%Cṅ;U'ðkB+↔= # This comment line needs some love
₇                 # 128, implicitly cast to `0..128`
 ƛ      ;         # Map to...
  ⁰+              # The input plus the offset
    ₇%            # Modulo 128
      Cṅ          # Converted into a string
         U        # Remove duplicates
          '       # Filter by...
                = # Is the original string equal to...
               ↔  # The string with the following chars removed
           ðkB+   # &quot; ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;
           
</code></pre>
"
"246010","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> <s>7</s> <s>6</s> 5 bytes</h1>
<pre><code>∑4ḭ$-
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJE04bitJC0iLCIiLCJbNzk4LDc5NCw4MDMsODE2LDc4OV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>∑4ḭ$-
          # (implicit input)
∑         # Sum
 4ḭ       # Divide the sum by four
   $-     # Swap and subtract
</code></pre>
<p><em>-2 bytes thanks to a stone arachnid</em></p>
<p><em>-1 byte thanks to ovs</em></p>
"
"246026","<p>A simple greedy approach gives the set <code>[1, 2, 4, 5, 10, 11, 13, 14...]</code>. This is probably optimal.</p>
<p>It can be constructed by:</p>
<ul>
<li>Start with the set <code>[1]</code></li>
<li>Forever:
<ul>
<li>Take the maximum value of the set, double it, and subtract 1</li>
<li>Add that to each value of the set</li>
<li>Append that to the current set</li>
</ul>
</li>
</ul>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxdyA/KCBEIEcgZOKAuStKIiwiIiwiNSJd"" rel=""nofollow noreferrer"">Here</a>'s an example program to do this.</p>
<p>After a bit of digging on OEIS, we find that the sequence we're looking for is <a href=""http://oeis.org/A003278"" rel=""nofollow noreferrer"">A003278</a>.</p>
<p>A more convenient way of constructing this set is to use one of the definitions on said OEIS page - <a href=""https://vyxal.pythonanywhere.com/#WyI1IiwiIiwiw57iiJ7igLliM3bOsuKAuiIsIiIsIjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This one takes the infinite list of nonnegative integers, converts each to binary and from ternary, and increments them.</p>
<p>This definition is really easy to implement as a check. We simply check that (n-1) in ternary contains no twos.</p>
<p>The sequence plus or minus any constant has the same properties so we can check if n in ternary contains no twos. Thanks to Jonathan Allan for this insight, saving a byte on both versions.</p>
<p>Finally:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>3τ2&lt;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzz4QyPEEiLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>3τ    # Convert to base 3
    A # Are all elements
  2&lt;  # Less than 2?
</code></pre>
<p>Jelly has a convenient builtin for this which saves a byte:</p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 4 bytes</h1>
<pre><code>b3ỊȦ
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8/z/J@OHurhPL/pscbv8PAA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<pre><code>b3   # Convert to base 3
   Ȧ # Are all elements
  Ị  # Less than two?
</code></pre>
"
"246081","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>λ[ḣƛt;J,ḢƛṪ;x¤
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwizrtb4bijxpt0O0os4biixpvhuao7eMKkIiwiIiwiW1sxLDIsNCw4XSxbOSwzLDYsN10sWzMsMywyLDldXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>λ[ḣƛt;J,ḢƛṪ;x¤
λ                 Open a lambda (for recursion)
 [                If statement (check if truthy)
  ḣ               Separate the first item, push both sides to stack
   ƛt;            Map to last item of each
      J           Join both lists
       ,          Pop and print (the J bracket)
        Ḣ         All but the first item
         ƛṪ;      Map to all but the last item of each
            x     Recurse
             ¤    Empty space (so that it won't output an empty list at the end, since stack is implicitly output)
</code></pre>
"
"246082","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>CṁC
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4bmBQyIsIiIsImF6Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explanation</h3>
<pre><code>CṁC
     (implicit input)
C    Convert to character code list
 ṁ   Get average
  C  Convert back to letter
</code></pre>
"
"246089","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>d‹↵√⌈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJk4oC54oa14oia4oyIIiwiIiwiMTgiXQ=="" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCJAZjpufOKGkG4iLCJk4oC54oa14oia4oyIIiwiO1xuXG4yNSDJviDGmyA6IGAgLT4gYCBKICQgQGY7IFMgSiA7IOKBiyIsIiJd"" rel=""nofollow noreferrer"">verify the test cases</a>.</p>
<pre><code>d‹↵√⌈
d     # Double
 ‹    # Decrement
  ↵   # 10 to the power of that
   √  # Sqrt
    ⌈ # Ceiling
</code></pre>
"
"246094","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>J*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJKKiIsIiIsIjEyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246106","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes, depth 5, A000041 from A006882</h1>
<pre><code>[ṄL|1
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJb4bmETHwxIiwiIiwiNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Calculates A000041(n). Could have been 2 bytes, but it wouldn't have worked correctly for an input of 0. The sequence is the number of <a href=""https://en.wikipedia.org/wiki/Partition_(number_theory)"" rel=""nofollow noreferrer"">integer partitions</a> of <code>n</code>.</p>
<pre><code>[ṄL|1 # Takes an integer input
[     # If input is not 0...
 Ṅ    # Integer partitions of n
  L   # And take the length
   |  # Otherwise...
    1 # Push 1
      # After which the top of the stack is printed
</code></pre>
<p>The next answer should match the following terms:</p>
<pre><code>1, 1, 2, 3, 5
</code></pre>
"
"246112","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes, depth 6, A002379 from A000041</h1>
<pre><code>3$e$Eḭ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzJGUkReG4rSIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The next answer should match the following terms:</p>
<pre><code>1, 1, 2, 3, 5, 7
</code></pre>
"
"246113","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes, depth 5, A027383 from A000123</h1>
<pre><code>→ʀƛ←ε∵E;∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLihpLKgMab4oaQzrXiiLVFO+KIkSIsIiIsIjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The next answer should match the following terms:</p>
<pre><code>1, 2, 4, 6, 10
</code></pre>
"
"246114","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes, depth 8, A079584 from A01881</h1>
<pre><code>¡b1O
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCoWIxTyIsIiIsIjgiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The next sequence should match the following terms:</p>
<pre><code>1, 1, 2, 2, 4, 4, 6, 6
</code></pre>
"
"246119","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>17</s> <s>12</s> 11 bytes</h1>
<pre><code>∷[T›|½)İ2ḟ⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oi3W1TigLp8wr0pxLAy4bif4oenIiwiIiwiMlxuMTZcbjVcbjciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-5 bytes thanks to lyxal</em></p>
<p>Removed flag thanks to emanresu A.</p>
"
"246165","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>¹ð«E⟨b?6Ḃ«⁰²∆τ6ḭS‹`ḊṄa ⟇¦.`Wṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCucOwwqtF4p+oYj824biCwqvigbDCsuKIhs+ENuG4rVPigLlg4biK4bmEYSDin4fCpi5gV+G5hSIsIiIsIlJ1c3Ncbjk4NjAwMDAwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>¹ð«E⟨b?6Ḃ«⁰²∆τ6ḭS‹`ḊṄa ⟇¦.`Wṅ
¹ð                             # Get first input and push space
  «E⟨b?6Ḃ«                     # Push compressed string &quot;is in the &quot;
          ⁰²                   # Get second input and square it
            ∆τ                 # Log10 it
              6ḭ               # Floor divide by 6
                S              # Stringify
                 ‹             # Push a hyphen
                  `ḊṄa ⟇¦.`    # Push string &quot;comma club&quot;
                           Wṅ  # Join stack
</code></pre>
"
"246195","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>1ẋ{:∑pṫ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyI1IiwiIiwiMeG6i3s64oiRcOG5qywiLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 bytes thanks to emanresu A</p>
"
"246197","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 33 bytes</h1>
<pre><code>»@Ǐ+Ẇ₃e⋏UWṡ:≠7ẏŀz→=»`| _`τ₀/3/τ∩⁋
</code></pre>
<p>Ports the 05AB1E answer.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu0DHjyvhuobigoNl4ouPVVfhuaE64omgN+G6j8WAeuKGkj3Cu2B8IF9gz4TigoAvMy/PhOKIqeKBiyIsIiIsIjEzNTc5MjQ2ODAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>»@Ǐ+Ẇ₃e⋏UWṡ:≠7ẏŀz→=»`| _`τ₀/3/τ∩⁋
»@Ǐ+Ẇ₃e⋏UWṡ:≠7ẏŀz→=»              # Push compressed integer 5210925748351095970666976465591163407510385
                    `| _`         # Push string &quot;| _&quot;
                         τ        # Convert the integer to this custom base
                          ₀/      # Split into ten pieces
                            3/    # Split each into three pieces
                              τ   # For each string, convert the (implicit) input to this custom base
                               ∩  # Transpose
                                ⁋ # Join on newlines
</code></pre>
"
"246248","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>(ẋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIo4bqLIiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246249","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>ẋṅ,⇩(L⁰‹*$S↲₴,)ċ[ẋṅ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuovhuYUs4oepKEzigbDigLkqJFPihrLigrQsKcSLW+G6i+G5hSwiLCIiLCIxMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ẋṅ,⇩(L⁰‹*$S↲₴,)ċ[ẋṅ,
ẋ                    # Repeat the (implicit) input the (implicit) input number of times (returns a list)
 ṅ                   # Join by nothing
  ,                  # Print with trailing newline
   ⇩(                # Loop (implicit) input minus 2 times:
     L               #  Get the length of the (implicit) input
      ⁰‹             #  Push the input minus 1
        *            #  Multiply the length by that
         $           #  Swap to make (implicit) input at top
          S          #  Convert the input to a string
           ↲         #  Pad the stringified input with leading spaces until its length is len(input) * (input - 1) calculated earlier
            ₴        #  Print this without a trailing newline
             ,       #  Print the (implicit) input with trailing newline
              )      # Close loop
               ċ[    # If the (implicit) input is not one:
                 ẋ   #  Repeat the (implicit) input the (implicit) input amount of times
                  ṅ  #  Join by nothing to make it a string
                   , #  Print with trailing newline
</code></pre>
"
"246302","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 0 bytes</h1>
<pre><code>
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIiLCIiLCIxIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Implicitly inputs then implicitly outputs. Stretching the rules a <em>teeny</em> bit. Specifically the following rule:</p>
<blockquote>
<p>The only exception being if your language absolutely always prints a trailing newline after execution.</p>
</blockquote>
<p>In Vyxal, &quot;printing after execution&quot; (implicit, not explicit printing) always prints with a newline.</p>
"
"246315","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ǔṅ⌊
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHlOG5heKMiiIsIiIsIjJcbjEwMCJd"" rel=""nofollow noreferrer"">Try it Online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCJAZjoyfCIsIseU4bmF4oyKIiwiO1xu4p+oXG4gIOKfqDEyMyB8IDEgfCAzMTLin6kgfFxuICDin6gxMjMgfCAyIHwgMjMx4p+pIHxcbiAg4p+oMTIzIHwgMyB8IDEyM+KfqSB8XG4gIOKfqDEyMyB8IDQgfCAzMTLin6kgfFxuICDin6gxIHwgNjM3IHwgMeKfqSB8XG4gIOKfqDEwIHwgMSB8IDHin6kgfFxuICDin6gxMDAgfCAyIHwgMeKfqSB8XG4gIOKfqDEwIHwgMiB8IDEw4p+pIHxcbiAg4p+oMTEwIHwgMiB8IDEwMeKfqSB8XG4gIOKfqDEyMyB8IDAgfCAxMjPin6kgfFxuICDin6g5OTk4IHwgMiB8IDk4OTnin6lcbuKfqVxuKGF84oaQYSDDtyDiiIcgOuKCtCBgLCBgIOKCtCAkIDrigrQgYCA9PiBgIOKCtCDiiIfiiIcgOuKCtCBgIHwgYCDigrQg4oiHIEBmOyA6IOKIhyA9IFtgUEFTU2AgfCBgRkFJTCwgcmV0dXJuZWQgYCAkIEpdICwiLCIiXQ=="" rel=""nofollow noreferrer"">Verify all the test cases</a></p>
"
"246361","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>øṘL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuOG5mEwiLCIiLCI5NSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>I love it when there's built-ins for things like this.</p>
<h2>Explained</h2>
<pre><code>øṘL
øṘ  # Convert input to Roman numerals
  L # and return the length of that.
</code></pre>
"
"246378","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<p>(without roman numeral builtin)</p>
<pre><code>»ḣ₈ɖ¢»fṘτ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu+G4o+KCiMmWwqLCu2bhuZjPhOKIkSIsIiIsIjM4OTkiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsIsK74bij4oKIyZbCosK7ZuG5mM+E4oiRIiwiO1rGm2AgPT4gYGo74oGLIiwiWzEsMiwzLDQsNSw2LDksMTAsMzcsMzgsOTUsOTksMjg4LDIwMjIsMzA4OSwzODk5XSJd"" rel=""nofollow noreferrer"">Verify all the test cases</a></p>
<h2>How?</h2>
<pre><code>»ḣ₈ɖ¢»fṘτ∑
»ḣ₈ɖ¢»      # Push compressed integer 2432123210
      f     # Convert to list of digits: [2, 4, 3, 2, 1, 2, 3, 2, 1, 0]
       Ṙ    # Reverse
        τ   # Convert the (implicit) input to this custom base
         ∑  # Summate
</code></pre>
"
"246382","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 7 bytes</h1>
<pre><code>2lvƒ&gt;ÞṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIybHbGkj7DnuG5oCIsIiIsIls0LDIsMywxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiQGY6MXwiLCIybHbGkj7DnuG5oCIsIjtcbsabQGY7O1rGm2AgPT4gYGo74oGLIiwiW1sxXSxbMSwyXSxbMiwxXSxbMSwyLDNdLFsxLDMsMl0sWzIsMywxXSxbMywyLDFdLFsxLDIsMyw0XSxbMSwyLDQsM10sWzEsMyw0LDJdLFsxLDQsMywyXSxbMiwzLDQsMV0sWzIsNCwzLDFdLFszLDQsMiwxXSxbNCwzLDIsMV0sWzMsMSwyXSxbMSwzLDIsNF0sWzEsNCwyLDNdLFsyLDEsMyw0XSxbMiwxLDQsM10sWzIsMywxLDRdLFsyLDQsMSwzXSxbMywxLDIsNF0sWzMsMSw0LDJdLFszLDIsMSw0XSxbMywyLDQsMV0sWzMsNCwxLDJdLFs0LDEsMiwzXSxbNCwxLDMsMl0sWzQsMiwxLDNdLFs0LDIsMywxXSxbNCwzLDEsMl1dIl0="" rel=""nofollow noreferrer"">Run all the test cases</a></p>
<p><em>-2 bytes thanks to Aaroneous Miller</em></p>
"
"246384","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λd⋏[›x
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu2Tii49b4oC6eCIsIiIsIjEyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>λd⋏[›x
λ      # Open a lambda for recursion
 d     #  Double
  ⋏    #  Bitwise AND the doubled input with the input
   [   #  If this is truthy (non-zero):
    ›x #   Increment and recurse
</code></pre>
"
"246385","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ÞSṗ'f⁰⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlPhuZcnZuKBsOKBvCIsIiIsIlsxLCAyLCAzLCA0XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>well it has a 2-byte builtin <code>øṖ</code> but it doesn't return all of the partitions...</p>
<h2>How?</h2>
<pre><code>ÞSṗ'f⁰⁼
ÞS      # Get all sublists of the (implicit) input
  ṗ     # Powerset
   '    # Filter for:
    f   #  Flatten
     ⁰⁼ #  Is it equal to the input? (non-vectorizing)
</code></pre>
"
"246387","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ʁ⁰²ɾ∆f⁰%F
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgeKBsMKyyb7iiIZm4oGwJUYiLCIiLCIxNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ʁ⁰²ɾ∆f⁰%F
           # (implicit input)
ʁ          # Exclusive zero range [0, n)
 ⁰²        # Input squared
   ɾ       # Inclusive one range [1, n]
    ∆f     # Nth fibonacci number (implicit vectorization)
      ⁰%   # Modulo with input
        F  # Remove all values from this list in the other list
</code></pre>
"
"246390","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>2lƛvh≈⁰ẋntc;∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIybMabdmjiiYjigbDhuotudGM74oiRIiwiIiwiW1wiQkFMTFwiLCBcIkJBVFwiLCBcIkJFQVJcIiwgXCJCRUxUXCIsIFwiQk9ZXCIsIFwiQ0FUXCIsIFwiQ09XXCIsIFwiRE9HXCIsIFwiR0FMXCIsIFwiSEFORFwiLCBcIkhBVFwiLCBcIk1JQ0VcIiwgXCJTSE9FXCIsIFwiVE9QXCIsIFwiVE9ZU1wiLCBcIlpBUFwiXVxuSkxJQlBOWlFPQUpEICBLQkZBTVpTQkVBUk8gIE9BS1RNSUNFQ1RRRyAgWUxMU0hPRURBT0dVICBTTEhDT1daQlRZQUggIE1IQU5EU0FPSVNMQSAgVE9QSUZZUFlBR0pUICBFWlRCRUxURUFUQVoiXQ=="" rel=""nofollow noreferrer"">Try it Online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCJAZjphOmJ84oaQYSIsIjrhuKJa4bmqxpt2aOKJiOKGkGLhuotudGM74oiRIiwiO1xuxpvDtyRAZjs7IiwiW1tbXCJCQUxMXCIsIFwiQkFUXCIsIFwiQkVBUlwiLCBcIkJFTFRcIiwgXCJCT1lcIiwgXCJDQVRcIiwgXCJDT1dcIiwgXCJET0dcIiwgXCJHQUxcIiwgXCJIQU5EXCIsIFwiSEFUXCIsIFwiTUlDRVwiLCBcIlNIT0VcIiwgXCJUT1BcIiwgXCJUT1lTXCIsIFwiWkFQXCJdLFwiSkxJQlBOWlFPQUpEXFxuS0JGQU1aU0JFQVJPXFxuT0FLVE1JQ0VDVFFHXFxuWUxMU0hPRURBT0dVXFxuU0xIQ09XWkJUWUFIXFxuTUhBTkRTQU9JU0xBXFxuVE9QSUZZUFlBR0pUXFxuRVpUQkVMVEVBVEFaXCJdLFtbXCJBQlwiLFwiQVNLXCIsXCJBUkJcIixcIkFSWFwiLFwiQVhcIl0sXCJBQkNcXG5TUk9cXG5LQVhcIl0sW1tcIkJBQ0tXQVJEXCIsXCJESUFHT05BTFwiLFwiRklORFwiLFwiSE9SSVpPTlRBTFwiLFwiUkFORE9NXCIsXCJTRUVLXCIsXCJTTEVVVEhcIixcIlZFUlRJQ0FMXCIsXCJXSUtJUEVESUFcIixcIldPUkRTRUFSQ0hcIl0sXCJXVkVSVElDQUxMXFxuUk9PQUZGTFNBQlxcbkFDUklMSUFUT0FcXG5ORE9ES09OV0RDXFxuRFJLRVNPT0RES1xcbk9FRVBaRUdMSVdcXG5NU0lJSE9BRVJBXFxuQUxSS1JSSVJFUlxcbktPRElERURSQ0RcXG5IRUxXU0xFVVRIXCJdLFtbXCJBQkNcIixcIkFZQ1wiLFwiQ0JcIixcIkNCQVwiLFwiQ0RcIixcIkVGXCIsXCJFRkdIXCJdLFwiQVlDRFxcbkVGR0hcXG5EQ0JBXCJdXSJd"" rel=""nofollow noreferrer"">run all the test cases</a>.</p>
<h2>How?</h2>
<pre><code>2lƛvh≈⁰ẋntc;∑
2l            # Get a list of overlapping pairs in the (implicit) first input
  ƛ           # Map over them:
   vh         # Get the first character of both
     ≈        # Are they equal?
      ⁰       # Push the second input
       ẋ      # Repeat (so if the first characters are not equal, empty string, else second input)
        n     # Push the pair again
         t    # Get the second item in the pair
          c   # Does the other string contain this string?
           ;  # Close map lambda
            ∑ # Summate
</code></pre>
"
"246416","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>¯±ĠvL1p¦2lvƒṡ‹İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCr8KxxKB2TDFwwqYybHbGkuG5oeKAucSwIiwiIiwiWy01NSwtNjcsLTgwLDUsNSw1LDksOSw5LDksMTQsMjAsMjVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>¯±ĠvL1p¦2lvƒṡ‹İ
¯               # Deltas (consecutive differences) of (implicit) input
 ±              # Sign of each
  Ġ             # Group consecutive identical items
   vL           # Length of each
     1p         # Prepend a one
       ¦        # Cumulative sums
        2lvƒṡ   # For each overlapping pair, get an inclusive range between them
             ‹  # Decrement each
              İ # Index each into the (implicit) input
</code></pre>
"
"246418","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>¯±ĠvL0p¦2lvƒṡİ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCr8KxxKB2TDBwwqYybHbGkuG5ocSwIiwiIiwiWy01NSwtNjcsLTgwLDUsNSw1LDksOSw5LDksMTQsMjAsMjVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Unrelated String's Jelly answer.</p>
<pre><code>  ĠvL          # Get the lengths of the runs of identical...'
 ±             # Signs
¯              # In the forward differences of the input
     0p¦       # Prepend a zero and get cumulative sums
         lvƒ   # Over runs of length...
        2      # 2
            ṡ  # Inclusive range
             İ # Index those into the original array
</code></pre>
"
"246481","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⇧2lvƒ&lt;ÞṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiQGY6MXwiLCLih6cybHbGkjzDnuG5oCIsIjtcbsabQGY7IiwiW1swXSwgWzAsIDFdLCBbMSwgMF0sIFswLCAxLCAyXSwgWzAsIDIsIDFdLCBbMiwgMSwgMywgMF0sIFszLCAxLCAwLCAyXSwgWzEsIDIsIDAsIDNdLCBbMiwgMywgMSwgNCwgMF0sIFsyLCAzLCAwLCA0LCAxXSwgWzAsIDUsIDEsIDMsIDIsIDRdLCBbNiwgNSwgNCwgNywgMywgOCwgOSwgMiwgMSwgMF0sIFs0LCAzLCA1LCA2LCA3LCAyLCA5LCAxLCAwLCA4XSwgWzUsIDIsIDcsIDksIDYsIDgsIDAsIDQsIDEsIDNdLCBbMjAsIDEzLCA3LCAwLCAxNCwgMTYsIDEwLCAyNCwgMjEsIDEsIDgsIDIzLCAxNywgMTgsIDExLCAyLCA2LCAyMiwgNCwgNSwgOSwgMTIsIDMsIDE1LCAxOV0sIFszNCwgMzYsIDk5LCA5NCwgNzcsIDkzLCAzMSwgOTAsIDIxLCA4OCwgMzAsIDY2LCA5MiwgODMsIDQyLCA1LCA4NiwgMTEsIDE1LCA3OCwgNDAsIDQ4LCAyMiwgMjksIDk1LCA2NCwgOTcsIDQzLCAxNCwgMzMsIDY5LCA0OSwgNTAsIDM1LCA3NCwgNDYsIDI2LCA1MSwgNzUsIDg3LCAyMywgODUsIDQxLCA5OCwgODIsIDc5LCA1OSwgNTYsIDM3LCA5NiwgNDUsIDE3LCAzMiwgOTEsIDYyLCAyMCwgNCwgOSwgMiwgMTgsIDI3LCA2MCwgNjMsIDI1LCA2MSwgNzYsIDEsIDU1LCAxNiwgOCwgNiwgMzgsIDU0LCA0NywgNzMsIDY3LCA1MywgNTcsIDcsIDcyLCA4NCwgMzksIDUyLCA1OCwgMCwgODksIDEyLCA2OCwgNzAsIDI0LCA4MCwgMywgNDQsIDEzLCAyOCwgMTAsIDcxLCA2NSwgODEsIDE5XSwgWzQ3LCA0OCwgNDYsIDQ1LCA0NCwgNDksIDQzLCA0MiwgNDEsIDUwLCA0MCwgMzksIDM4LCA1MSwgMzcsIDM2LCA1MiwgMzUsIDM0LCAzMywgMzIsIDUzLCA1NCwgMzEsIDMwLCA1NSwgNTYsIDI5LCAyOCwgNTcsIDU4LCA1OSwgNjAsIDI3LCAyNiwgNjEsIDI1LCA2MiwgNjMsIDY0LCA2NSwgNjYsIDY3LCAyNCwgMjMsIDIyLCAyMSwgNjgsIDY5LCAyMCwgMTksIDE4LCAxNywgNzAsIDcxLCAxNiwgMTUsIDcyLCA3MywgNzQsIDc1LCA3NiwgMTQsIDEzLCAxMiwgNzcsIDExLCAxMCwgOSwgOCwgNzgsIDcsIDc5LCA4MCwgNiwgODEsIDUsIDQsIDMsIDgyLCAyLCA4MywgODQsIDEsIDg1LCA4NiwgODcsIDAsIDg4LCA4OSwgOTAsIDkxLCA5MiwgOTMsIDk0LCA5NSwgOTYsIDk3LCA5OCwgOTldXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Like Lynn's Jelly answer, takes my <a href=""https://codegolf.stackexchange.com/a/246382/92689"">Vyxal answer</a> to <a href=""https://codegolf.stackexchange.com/q/243173/92689"">Is it a tower permutation?</a>, adds a grade up at the beginning, and changes <code>&gt;</code> to <code>&lt;</code>.</p>
<h2>How?</h2>
<pre><code>⇧2lvƒ&lt;ÞṠ
⇧        # Grade up (i.e. sort indices by corresponding values)
 2l      # Get overlapping pairs
   vƒ&lt;   # For each pair, check if the first item is less than the second
      ÞṠ # Is it sorted in ascending order?
</code></pre>
"
"246483","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes (UTF-8)</h1>
<pre><code>🍪
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLwn42qIiwiIiwiIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Outputs <code>cookie</code> forever.</p>
"
"246504","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>b∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJi4oiRIiwiIiwiMTMzNyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 1 byte</h1>
<pre><code>b
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwiYiIsIiIsIjEzMzciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246508","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ʁEd3ḭ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgUVkM+G4rSIsIiIsIjE4Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Neil's Python answer.</p>
<h2>How?</h2>
<pre><code>ʁEd3ḭ
ʁ     # Exclusive zero range of (implicit) input
 E    # Square, implicit vectorization
  d   # Double, implicit vectorization
   3ḭ # Floor divide by three, implicit vectorization again
</code></pre>
"
"246510","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>bṘB²
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJi4bmYQsKyIiwiIiwiMTEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>bṘB²
bṘB  # Convert to binary, reverse, convert back to decimal
   ² # Square
</code></pre>
"
"246523","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 6 bytes</h1>
<pre><code>¯Ḣ₅⁰Ẏ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCr+G4ouKCheKBsOG6juKBvCIsIiIsIls0OSw3MSwxMjAsMTkxLDMxMSw1MDJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 byte thanks to emanresu A</em></p>
<h2>How?</h2>
<pre><code>¯Ḣ₅⁰Ẏ⁼
¯         # Deltas (consecutive differences) of (implicit) input
 Ḣ        # Remove the first item
  ₅       # Push length without popping
   ⁰      # Push the input
    Ẏ     # Slice the input until the length
     ⁼    # Exactly equal to the deltas with first item removed? (non-vectorizing)
</code></pre>
"
"246553","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 75 bytes</h1>
<pre><code>`ƈṡ... eh, ↓Ṅ ƛ¤ I £Ẋet?`,⇩`ƛ†`=[`Ah, ∨ȯ. ƛ€.`,|«ƛτ«ǐ`. λ÷ ⋏°'t λ⟨ I ḋ↓.`J,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgxojhuaEuLi4gZWgsIOKGk+G5hCDGm8KkIEkgwqPhuopldD9gLOKHqWDGm+KAoGA9W2BBaCwg4oioyK8uIMab4oKsLmAsfMKrxpvPhMKrx5BgLiDOu8O3IOKLj8KwJ3Qgzrvin6ggSSDhuIvihpMuYEosIiwiIiwiV29SbEQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246568","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>vḟ:ż+$i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24bifOsW8KyRpIiwiIiwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxueHl6Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer.</p>
<h2>How?</h2>
<pre><code>vḟ:ż+$i
vḟ      # For each element in the (implicit) second input, find its index in the (implicit) first input
  :ż    # Duplicate and push a length range [1, length]
    +   # Add top two things on stack together
     $  # Swap so (implicit) first input is pushed to the stack
      i # Index the list into the string
</code></pre>
"
"246585","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆Ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIbEvyIsIiIsIlsxLCA2LCAxMCwgMywgNCwgMTAsIDddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246587","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>λ›D₃$3c∨[x
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu+KAukTigoMkM2PiiKhbeCIsIiIsIjI5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It would be 9 bytes with <code>₌</code> (parallel apply), but that seems to clear the stack, so that didn't work.</p>
<h2>How?</h2>
<pre><code>λ›D₃$3c∨[x
λ           # Open a lambda (for recursion)
 ›          # Increment
  D         # Triplicate, push three copies of a to the stack
   ₃        # Is it divisible by three?
    $       # Swap
     3c     # Does the number contain a three?
       ∨    # Is either of the top two things on the stack true?
        [x  # Then recurse
</code></pre>
"
"246588","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ǐ1⋎Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHkDHii47OoCIsIiIsIjI4Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ǐ1⋎Π
ǐ    # Prime factors
 1⋎  # Bitwise OR each with one
   Π # Product
</code></pre>
"
"246590","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>T¦v₃∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJUwqZ24oKD4oiRIiwiIiwiMjYwNDIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>T¦v₃∑
T     # Triple the (implicit) input
 ¦    # Cumulative sum
  v₃  # Is each element divisible by three?
    ∑ # Sum
</code></pre>
"
"246591","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>3ẇ∩\_ÞṪ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIz4bqH4oipXFxfw57huaoiLCIiLCJUaHJlZSBzcHJlZSEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>3ẇ∩\_ÞṪ
3ẇ      # Split into chunks of three
  ∩     # Transpose
   \_ÞṪ # Transpose with &quot;_&quot; as filler
</code></pre>
"
"246624","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>C₈β⁺µ%∷
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqHGmyIsIkPigojOsuKBusK1JeKItyIsIiIsInJlZFxub3JhbmdlXG55ZWxsb3dcbmdyZWVuXG5ibHVlXG5pbmRpZ29cbnZpb2xldFxucHVycGxlXG5icm93blxucGlua1xuY3lhblxubWFyb29uIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>C₈β⁺µ%∷
C       # Character codes of (implicit) input
  β     # Convert from base...
 ₈      # ...256
   ⁺µ   # Push 283
     %  # Modulo
      ∷ # Parity (a % 2)
</code></pre>
"
"246651","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>d%ε¹ε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkJc61wrnOtSIsIiIsIjE0XG4xNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>d%ε¹ε
d     # Double the (implicit) first input
 %    # Modulo the (implicit) second input by this
  ε   # Take the absolute difference of this and the (implicit) first input
   ¹ε # Take the absolute difference of this and the first input again
</code></pre>
"
"246652","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>≬ḭ›*r
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazhuK3igLoqciIsIiIsIlsxNSwgOCwgMTIsIDQ3LCAyMiwgMTUsIDQsIDY2LCA3MiwgMTUsIDMsIDRdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer.</p>
<h2>How?</h2>
<pre><code>≬ḭ›*r
≬     # Next three elements as a lambda:
 ḭ    # Floor divide: a/b
  ›   # Increment: a/b+1
   *  # Multiply: (a/b+1)*b
    r # Cumulative reduce the (implicit) input by this lambda
</code></pre>
"
"246653","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ṡ:²∑$∑²ε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuaE6wrLiiJEk4oiRwrLOtSIsIiIsIjkxXG4xMjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ṡ:²∑$∑²ε
ṡ        # Inclusive range between (implicit) second input and (implicit) first input
 :       # Duplicate this range
  ²      # Square each of the duplicate
   ∑     # Summate
    $    # Swap so the other range is at the top
     ∑   # Summate
      ²  # Then square
       ε # Absolute difference between the two
</code></pre>
"
"246654","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ɾ‡&lt;[*|ḭ]R
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKAoTxbKnzhuK1dUiIsIiIsIjMxNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer. That if statement takes up so much bytes tho...</p>
<h2>How?</h2>
<pre><code>ɾ‡&lt;[*|ḭ]R
ɾ          # Inclusive one range of (implicit) input
        R  # Reduce by:
 ‡         # Next two elements as a lambda
  &lt;        # Is a&lt;b?
   [*      # If so, multiply: a*b
     |ḭ]   # Else, floor divide: a//b
</code></pre>
"
"246655","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>+ṡƒ-
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIr4bmhxpItIiwiIiwiMTAwXG41Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer.</p>
<h2>How?</h2>
<pre><code>+ṡƒ-
+ṡ   # Inclusive range [a, a + b]
  ƒ- # Reduce by subtraction
</code></pre>
"
"246657","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>2√ḭ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIy4oia4bitIiwiIiwiOTU2Mjg3NDgwOTExODcyMTMxNzg0ODk2MTc2MjU0MzM3NjMzMzUzOTgwOTExMTQ5OTY0MDc0NDM0MzgzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"246659","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 7 bytes</h1>
<pre><code>≬¯ṅ⌊İ∑+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazCr+G5heKMisSw4oiRKyIsIiIsIjg2NzUzMDkiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-5 bytes thanks to allxy</em></p>
<h2>How?</h2>
<pre><code>≬¯ṅ⌊İ∑+ # full program
≬¯ṅ⌊    # Three element lambda
 ¯      # Deltas (consecutive differences of digits)
  ṅ     # Join by nothing
   ⌊    # Convert to integer
    İ   # Apply this lambda on the (implicit) input and collect unique values
     ∑  # Summate
      + # Add to (implicit) input
</code></pre>
"
"246661","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>s∇g=İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJz4oiHZz3EsCIsIiIsIls0LDEsMyw2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>s∇g=İ
s      # Sort the input
 ∇     # Push this two values down so that there are two copies of the input on top
  g    # Get the minimum of the input
   =   # For each in the input, is it equal to that?
    İ  # Index this into the sorted list
</code></pre>
"
"246662","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ɾe'¹&gt;;hε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvmUnwrk+O2jOtSIsIiIsIjM0M1xuNyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>ɾe'¹&gt;;hε
ɾ        # Inclusive range from one to (implicit) first input
 e       # For each element, push it to the power of the (implicit) second input
  '¹&gt;;   # Filter for only elements greater than the first input
      h  # Get the first item
       ε # Get the absolute difference of the first item and the (implicit) first input
</code></pre>
"
"246791","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>{:ṁ4≠|18ƛ3 6r℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7OuG5gTTiiaB8MTjGmzMgNnLihIUiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>{              # While...
 :ṁ            # The mean of the current value
   4≠          # Isn't 4
     |         # Do...
      18ƛ      # Fill an array of 18 elements with...
         3 6r℅ # one of 3, 4, and 5.
</code></pre>
"
"246804","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>b½.β
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiwr0uzrIiLCIiLCI5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>b    # Get the binary digits of the (implicit) input
 ½   # halve them all
   β # Convert from base
  .  # 1/2
</code></pre>
<p><em>-1 byte thanks to emanresu A</em></p>
"
"246836","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>UvhÞu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJVdmjDnnUiLCIiLCJbKDMsIDUpLCAoMywgNSksICg2LCA0KSwgKDQsIDQpXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of chunes' factor answer</p>
<pre><code>U     # Uniquify
 vh   # Get the first of each
   Þu # Are they all unique?
</code></pre>
"
"246966","<h1><a href=""https://vyxapedia.hyper-neutrino.xyz"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>\F:ɽĿGɾ
</code></pre>
<p>Ported from <a href=""https://codegolf.stackexchange.com/a/246939/111322"">Neil's 05AB1E answer</a>; make sure to upvote that answer as well!</p>
<p>Explanation:</p>
<pre><code>\F      Push literal character `F`
  :     Duplicate
   ɽ    Lowercase the duplicate
    Ŀ   Transliterate `F` to `f`
     G  Take the maximum
      ɾ Change to uppercase
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCJcXEY6yb3Ev0fJviIsIiIsIiIsIlRUIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
"
"246971","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 19 <a href=""https://chat.stackexchange.com/rooms/240/the-nineteenth-byte"">bytes</a></h1>
<pre><code>¹żb:∩L∆ZĿf8ẇR8∆ZRvB
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCucW8YjriiKlM4oiGWsS/ZjjhuodSOOKIhlpSdkIiLCIiLCJcIiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiXG5cInRoZSBmb3hcIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>        Ŀ           # Replace each element of &lt;the key&gt; in &lt;the input&gt;
                    # with the corresponding value of...
¹ż                  # 1...len(key)
  b                 # Convert each to binary
      ∆Z            # left-pad each with zeroes to length
   :∩L              # The maximum length - the length when transposed
         f8ẇ        # Reshape into chunks of 8
            R   R   # With each reversed...
             8∆Z    # Left-pad to length 8 (so right-pad)
                 vB # Convert each back from binary
</code></pre>
"
"246973","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>≬C4%Þ↑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaxDNCXDnuKGkSIsIiIsIlRGIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>≬C4%Þ↑
≬      # Three element lambda:
 C     # Convert to character code
  4%   # Modulo 4
       # Lambda implicitly ends here
    Þ↑ # Maximum of the (implicit) input by this function
</code></pre>
<p>Also 6 bytes:</p>
<pre><code>µC4%;t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCtUM0JTt0IiwiIiwiVEYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>µC4%;t
µ   ;   # Sorting lambda
 C      # Character code
  4%    # modulo four
     t  # Last item
</code></pre>
"
"246980","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ż\'vṀ\+j
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvFxcJ3bhuYBcXCtqIiwiIiwic2hvcnQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No clue why I didn't vectorise insertion back in May 2022.</p>
<h2>Explained</h2>
<pre><code>żƛ?n\'Ṁ;\+j
żƛ           # For each item P in the range 1...len(input):
  ?n         #   at position P in the input,
    \'Ṁ      #   insert a '
       ;     # end map
        \+j  # join the result of that on &quot;+&quot; and output
</code></pre>
"
"247032","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>¯±Ġȧ≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwixpsiLCLCr8KxxKDIp+KJiCIsIjtaxptgID0+IGBqO+KBiyIsIltbMSwgMywgNSwgOCwgNiwgNCwgMiwgMywgNSwgNywgNiwgNCwgMiwgNSwgNywgOSwgNiwgNCwgMl0sIFsxLCAzLCA1LCA3LCA2LCA0LCA1LCA3LCA5LCA4LCA2LCA0LCAyLCAzLCA1XSwgWzIsIDMsIDYsIDQsIDIsIDMsIDcsIDUsIDMsIDQsIDZdLCBbMywgNiwgNCwgOCwgNSwgNywgMywgNSwgMl0sIFs4XSwgWzEsIDMsIDUsIDddLCBbNCwgNSwgNywgNiwgOCwgOV0sIFsxLCA1LCAxMCwgMTksIDE1LCAxMywgOCwgMTMsIDE4LCAyMywgMTksIDE4LCAxNF0sIFsxNSwgMTQsIDE3LCAxNiwgMTksIDE4XSwgWzEyLCAxNiwgMTksIDE1LCAxOCwgMTldXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer.</p>
<h2>How?</h2>
<pre><code>¯±Ġȧ≈
¯     # Get the deltas (consecutive differences) of input
 ±    # Get the sign (implicit vectorization)
  Ġ   # Group consecutive identical items
   ȧ  # Absolute value (implicit double-vectorization)
    ≈ # All equal?
</code></pre>
"
"247098","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>LI
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJMSSIsIiIsIkhlbGxvIFdvcmxkIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>S</code>, 2 bytes</h1>
<pre><code>v¤
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJTIiwiIiwidsKkIiwiIiwiSGVsbG8gd29ybGQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>If we want to port the Jelly answer, then:</h3>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>rs</code>, 3 bytes</h1>
<pre><code>fð•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJycyIsIiIsImbDsOKAoiIsIiIsIkhlbGxvIHdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247141","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 7 bytes</h1>
<pre><code>ɾ↔vUvL=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwiyb7ihpR2VXZMPSIsIiIsIjNcbjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCJAZjoyfCIsIjrJviTiiIfihpR2VXZMPeKIkSIsIjtcblxuNTrhuopzOsabw7dAZjs7WsabYCA9PiBgajvigYsiLCIiXQ=="" rel=""nofollow noreferrer"">Run all the test cases below 6</a></p>
<h2>How?</h2>
<pre><code>ɾ↔vUvL=
ɾ       # List in the range [1, (implicit) first input `b`]
 ↔      # Get all possible combinations of this list of size (implicit) second input `a`
  vU    # For each item, uniquify
    vL  # For each item, get the length
      = # Is each item equal to the (implicit) first input `b`?
        # `s` flag sums the top of the stack
</code></pre>
<p>Other 7-byters:</p>
<pre><code>ɾ↔ƛUL;=
ɾ↔ƛUL¹=
</code></pre>
<h3>Flagless:</h3>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ɾ↔vUvL=∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKGlHZVdkw94oiRIiwiIiwiM1xuNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247149","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>37</s> <s>26</s> <s>18</s> 17 bytes</h1>
<pre><code>vT:ẏεfG£¨2Ǔ¥ǔ¥d›Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ2VDrhuo/OtWZHwqPCqDLHk8Klx5TCpWTigLrhuo4iLCIiLCJbWzEsMiwwLDAsMF0sWzMsNCw1LDAsMF0sWzAsNiwwLDcsMF0sWzAsMCw4LDksMV0sWzAsMCwwLDIsM11dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>vT:ẏεfG£¨2Ǔ¥ǔ¥d›Ẏ
vT                  # For each row, get the indices of truthy elements
  :ẏ                # Duplicate and push a range in [0..length of list)
    ε               # Vectorizing absolute difference
     fG             # Get the flattened maximum difference
       £            # Store in the register
        ¨2          # Open dyadic map lambda on (implicit) input, pushing both item and index
          Ǔ         # Rotate row left by index
           ¥ǔ       # Rotate row right by the contents of the register
             ¥d›    # Push 2*register+1
                Ẏ   # Leave that many leading items in the current rotated row
</code></pre>
<p><em>-10 bytes thanks to Neil, and another -9 from myself</em></p>
"
"247155","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 80 bytes</h1>
<pre><code>ɽ:ẏḢṪṪ‡kvF¨MĠvhṅka»⟇†←¬ʁoĊ ∇&quot;₄[ḃ0εẆḭ:₇°ḃτsf≈β→ƈḭ⅛Ṁǒṡ□ø꘍$↲„I₇⊍ǔ¹eṀHbṡ‛1L»»ƛ∨O»τCĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvTrhuo/huKLhuarhuarigKFrdkbCqE3EoHZo4bmFa2HCu+Kfh+KAoOKGkMKsyoFvxIog4oiHXCLigoRb4biDMM614bqG4bitOuKCh8Kw4biDz4RzZuKJiM6y4oaSxojhuK3ihZvhuYDHkuG5oeKWocO46piNJOKGsuKAnknigofiio3HlMK5ZeG5gEhi4bmh4oCbMUzCu8K7xpviiKhPwrvPhEPEvyIsIiIsIlR1cnRsZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E answer.</p>
<h2>How?</h2>
<pre><code>ɽ:ẏḢṪṪ‡kvF¨MĠvhṅka»⟇†←¬ʁoĊ ∇&quot;₄[ḃ0εẆḭ:₇°ḃτsf≈β→ƈḭ⅛Ṁǒṡ□ø꘍$↲„I₇⊍ǔ¹eṀHbṡ‛1L»»ƛ∨O»τCĿ
ɽ                                                                                 # Lowercase the (implicit) input
 :                                                                                # Duplicate
  ẏ                                                                               # Get length range [0, length)
   ḢṪṪ                                                                            # Remove the first item and the last two items
      ‡kvF                                                                        # Two element lambda: Remove all vowels from input to lambda
          ¨M                                                                      # Apply z (the lambda) for each element of x (the lowercased input)
                                                                                  #   only at the indices in y (the length range without the first and last two items)
            Ġ                                                                     # Group consecutive identical items
             vh                                                                   # Get the first item of each (this is removing consecutive duplicates)
               ṅ                                                                  # Join by nothing
                ka                                                                # Push the lowercase alphabet
                  »⟇†←¬ʁoĊ ∇&quot;₄[ḃ0εẆḭ:₇°ḃτsf≈β→ƈḭ⅛Ṁǒṡ□ø꘍$↲„I₇⊍ǔ¹eṀHbṡ‛1L»          # Push huge compressed integer 3279490039691721988310819230336479163628492048784374634744299180010706872685131111164709021133012715753321092552746940878765
                                                                        »ƛ∨O»     # Push compressed integer 66378
                                                                             τ    # Convert the huge compressed integer to base-66378:
                                                                                  #  [923,76,66377,42564,8735,9021,84,124,10839,41,60,40,6664,5198,9532,8869,10817,92,10677,95,8899,9013,9013,88,613,5283]
                                                                              C   # Convert that list of codepoints to their corresponding characters
                                                                               ‡  # Transliterate the string made earlier from the lowercase alphabet to these characters
</code></pre>
"
"247184","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>‹₀ṡ'ǐĠvLġċnḂ=∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLnigoDhuaEnx5DEoHZMxKHEi27huII94oinIiwiIiwiMTUwMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer.</p>
<h2>How?</h2>
<pre><code>‹₀ṡ'ǐĠvLġċnḂ=∧
‹₀ṡ             # Descending range [input - 1, 10]
   '            # Filter for n:
    ǐ           # Get the prime factorization of n
     Ġ          # Group consecutive identical items
      vL        # Get the length of each
        ġċ      # Is the GCD of this array not one?...
             ∧  # ...and...
          nḂ=   # Is n palindromic?
</code></pre>
"
"247185","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ɽ₀ȯ'ɽ›Ėe:⌊=anḂ=∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiyb3igoDIryfJveKAusSWZTrijIo9YW7huII94oinIiwiIiwiMTMwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Who needs smart prime factorisation when you can just brute force it?</p>
<h2>Explained</h2>
<pre><code>ɽ₀ȯ'ɽ›Ėe:⌊=anḂ=∧
ɽ₀ȯ'             # From the range [11, n) (empty if n &lt; 10) keep only items (x) where:
   ɽ›Ėe:⌊=a      # there exists a number in the range [2, x) where that number to an integer power equals  x
          nḂ=∧  # and x is a palindrome
</code></pre>
<p>The part which checks for important power better explained:</p>
<pre><code>ɽ›Ėe:⌊=
ɽ›       # the range [2, x)
  Ė      # the reciprocal of each number in that range - no need to worry about floating point accuracy errors because everything is stored as fractions internally
   e     # x to the power of each of those reciprocals - this is taking every nth root of x which is less than x
    :⌊=  # determine whether each item is a whole integer.    
</code></pre>
"
"247196","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>₁ɾ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHJvuKBiyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://i.stack.imgur.com/WvVDl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WvVDl.png"" alt=""enter image description here"" /></a></p>
<p>I guess so.</p>
"
"247219","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>» 3J↔kṫ₅uR»₈τ20/41ẋfṗÞṡ'∑⁰=;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiwrsgM0rihpRr4bmr4oKFdVLCu+KCiM+EMjAvNDHhuotm4bmXw57huaEn4oiR4oGwPTtoIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">Don't try it online!</a> (it times out)</p>
<p>Add <code>vøḋ</code> to the end if it can't be returned as list of rationals instead of decimals. <code>vøḋ</code> will return a list of strings, tho. Returns <code>0</code> if it can't find a solution.</p>
<p>You can somewhat test it without the <code>Þṡ</code>, but it won't return the optimal answer: <a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiwrsgM0rihpRr4bmr4oKFdVLCu+KCiM+EMjAvNDHhuotm4bmXJ+KIkeKBsD07aCIsIiIsIjEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>Extremely</strong> slow.</p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>» 3J↔kṫ₅uR»                   # Push compressed integer 557746805944978070136
           ₈τ                 # Convert to base 256: [30, 60, 74, 180, 240, 15, 37, 90, 120]
             20/              # Divide each by 20: [1.5, 3.0, 3.7, 9.0, 12.0, 0.75, 1.85, 4.5, 6.0]
                41ẋ           # Repeat that list 41 times: [[1.5, 3.0, ...], [1.5, 3.0, ...], ...]
                   f          # Flatten it: [1.5, 3.0, ..., 1.5, 3.0, ..., ...]
                    ṗ         # Powerset
                     Þṡ       # Sort by length (this is what slows it down so much)
                       '   ;  # Filter for:
                        ∑⁰=   # The sum of this list is equal to the input
                            h # Get the first item
</code></pre>
"
"247221","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>ƛkAf7Ẏ2Ǔ:3Ẏ\'vJJn∆iin∆i›∆ė4/&quot;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm2tBZjfhuo4yx5M6M+G6jlxcJ3ZKSm7iiIZpaW7iiIZp4oC64oiGxJc0L1wiIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQaiIsIsabIiwixptrQWY34bqOMseTOjPhuo5cXCd2Skpu4oiGaWlu4oiGaeKAuuKIhsSXNC9cIiIsIjs7WsabYCA9PiBgaiIsIlsxMCw1XSJd"" rel=""nofollow noreferrer"">Run both test cases!</a></p>
<p>Port of 05AB1E. If it can't output rationals instead of decimals, add <code>øḋ</code> before <code>&quot;</code>. Then it will be as strings.</p>
<h2>How?</h2>
<pre><code>ƛkAf7Ẏ2Ǔ:3Ẏ\'vJJn∆iin∆i›∆ė4/&quot;
ƛ                              # For each item `n` in the (implicit) inclusive one range of the (implicit) input
 kA                            # Push the uppercase alphabet
   f                           # Convert to list of characters
    7Ẏ                         # Leave only the first seven letters: [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;]
      2Ǔ                       # Rotate left twice: [&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;A&quot;,&quot;B&quot;]
        :                      # Duplicate
         3Ẏ                    # Leave only the first three letters of the duplicate: [&quot;C&quot;,&quot;D&quot;,&quot;E&quot;]
           \'vJ                # Append a single quotation mark to each letter: [&quot;C'&quot;,&quot;D'&quot;,&quot;E'&quot;]
               J               # Join these two lists together: [&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C'&quot;,&quot;D'&quot;,&quot;E'&quot;]
                n∆i            # Get the `n`th (zero-indexed) digit of pi
                   i           # Index this into the list of notes
                    n∆i        # Get the `n`th pi digit again
                       ›       # Increment it
                        ∆ė     # Get the zero-indexed E digit from that
                          4/   # Divide by four
                            &quot;  # Pair the pi-note and e-digit/4 together
</code></pre>
"
"247222","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>λb°‹β?=;ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu2LCsOKAuc6yPz074bmFIiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
"
"247223","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>żṖµ£⁰ƛ¥$vḟ;Þ/4%∑;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvOG5lsK1wqPigbDGm8KlJHbhuJ87w54vNCXiiJE7aCIsIiIsIltbMSw0LDJdLFsxLDQsMl0sWzEsNCwyXSxbMiwzLDRdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQalQiLCLGm+KGkuKGkCIsIsW84bmWwrXCo+KGkMabwqUkduG4nzvDni80JeKIkTtoIiwiO1rGm2AgPT4gYGoiLCJbW1sxLDIsM10sWzIsMywxXSxbMywxLDJdXSwgW1sxLDMsMl0sWzEsMiwzXSxbMywxLDJdXSwgW1sxLDIsM10sWzEsMywyXSxbMywxLDJdXSwgW1sxLDIsM10sWzEsMiw0XSxbMiwzLDRdLFsyLDQsM11dLCBbWzEsNCwyXSxbMSw0LDJdLFsxLDQsMl0sWzIsMyw0XV0sIFtbMSwyLDNdLFsyLDMsNV0sWzQsNSwxXSxbNSwxLDJdLFs1LDQsM11dLCBbWzEsMiwzXSxbMiwzLDRdLFszLDQsNV0sWzQsNSwxXSxbMSwyLDNdXV0iXQ=="" rel=""nofollow noreferrer"">Verify (almost) all test cases</a> (the larger ones time out)</p>
<p>Port of 05AB1E. Probably a way to shorten <code>£⁰ƛ¥$vḟ;</code>, but idk.</p>
<h2>How?</h2>
<pre><code>żṖµ£⁰ƛ¥$vḟ;Þ/4%∑;h
ż                  # Inclusive length range [1, length]
 Ṗ                 # All permutations
  µ             ;  # Sorting lambda
   £               # Store this item in the register
    ⁰ƛ    ;        # Mapping lambda over the input
      ¥$vḟ         # Get the index of the current character in this list
           Þ/      # Get the main diagonal of this list
             4%    # Modulo each by four to convert -1 to 3
               ∑   # Sum these
                 h # Get the first item of the sorted list
</code></pre>
"
"247252","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>d(∩ƛ¹p¹J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkKOKIqcabwrlwwrlKIiwiOynigYsiLCIyXG5bWzEsMiwzXSxbNCw1LDZdLFs3LDgsOV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Port of <a href=""https://codegolf.stackexchange.com/users/52210/kevin-cruijssen"">@Kevin Cruijssen</a>'s <a href=""https://codegolf.stackexchange.com/a/247245/80050"">05AB1E answer</a>.</p>
<p>If it should be filled with <code>1</code>s instead (like in the test cases), then swap the tiny <code>¹</code> with a full-size <code>1</code> for the same byte count.</p>
<p><strong>How it works:</strong></p>
<pre class=""lang-bash prettyprint-override""><code>d(∩ƛ¹p¹J
d(         # Repeat 2*(length) times:
  ∩        #   Transpose
   ƛ       #   For each row:
    ¹p     #     Prepend length
      ¹J   #     Append length
</code></pre>
"
"247263","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ǐ:4&lt;꘍Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHkDo0POqYjc6gIiwiIiwiMTQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLigoHJvjrGmyIsIseQOjQ86piNzqAiLCI7WsabYCA9PiBgajvigYsiLCIiXQ=="" rel=""nofollow noreferrer"">run it from 1 to 100</a>.</p>
<p>Port of Dennis's Jelly answer. <s><code>1J</code> is needed due to a bug in Vyxal where the product of <code>[]</code> returns <code>0</code> instead of <code>1</code>.</s> Bug fixed.</p>
<h2>How?</h2>
<pre><code>ǐ:4&lt;꘍Π
ǐ      # Get the prime factors with duplicates
 :     # Duplicate
  4&lt;   # For each item, is it less than 4? (Vectorizes, produces a list of 1s and 0s)
    ꘍  # Bitwise XOR the two arrays (vectorizes)
     Π # Product of resulting array
</code></pre>
"
"247273","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes</h1>
<pre><code>₀ɾḢ«∧9₂«fJ«¬⟩C«Ẋvṅ‛jjfJɾ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoDJvuG4osKr4oinOeKCgsKrZkrCq8Ks4p+pQ8Kr4bqKduG5heKAm2pqZkrJviIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>₀ɾḢ«∧9₂«fJ«¬⟩C«Ẋvṅ‛jjfJɾ
₀ɾ                       # Push a list in the range [1, 10]
  Ḣ                      # Remove the first: [2, 3, 4, ..., 10]
   «∧9₂«                 # Push compressed string &quot;jqka&quot;
        fJ               # Convert to list of characters and add to the other list: [2, 3, 4, ..., 10, &quot;j&quot;, &quot;q&quot;, &quot;k&quot;, &quot;a&quot;]
          «¬⟩C«           # Push compressed string &quot;hsdc&quot;
               Ẋ         # Cartesian product of list and string: [[2, &quot;h&quot;], [2, &quot;s&quot;], ..., [&quot;a&quot;, &quot;c&quot;]]
                vṅ       # Join each together: [&quot;2h&quot;, &quot;2s&quot;, ..., &quot;ac&quot;]
                  ‛jjf   # Push string &quot;jj&quot; and convert to list of characters: [&quot;j&quot;, &quot;j&quot;]
                      J  # Append: [&quot;2h&quot;, &quot;2s&quot;, ..., &quot;ac&quot;, &quot;j&quot;, &quot;j&quot;]
                       ɾ # Uppercase each: [&quot;2H&quot;, &quot;2S&quot;, ..., &quot;AC&quot;, &quot;J&quot;, &quot;J&quot;]
</code></pre>
"
"247275","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>ƛ0c12*nL+;:26c[26꘍
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGmzBjMTIqbkwrOzoyNmNbMjbqmI0iLCIiLCJbW10sIFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMF0sIFtdLCBbXV0iXQ=="" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQaiIsIjrGmyIsIsabMGMxMipuTCs7OjI2Y1syNuqYjSIsIl07WsabYCA9PiBgaiIsIltbWzIsIDgsIDcsIDFdLCBbMywgNF0sIFtdLCBbOSwgNSwgNiwgMCwgMTAsIDExLCAxMiwgMTNdXSwgW1swLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxM10sIFtdLCBbXSwgWzFdXSwgW1swLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxM10sIFtdLCBbMV0sIFtdXSwgW1sxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMF0sIFtdLCBbXSwgW11dLCBbW10sWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAwXSwgW10sIFtdXV0iXQ=="" rel=""nofollow noreferrer"">run all the test cases</a>.</p>
<h2>How?</h2>
<pre><code>ƛ0c12*nL+;:26c[26꘍
ƛ                   # For each inner list in the (implicit) input:
 0c                 # Does it contain a zero (the queen of spades)?
   12*              # Multiply this by 12 (aka if it contains a zero, then 12, otherwise 0)
      nL+           # Add the length of the inner list to this
         ;          # Close map lambda
          :         # Duplicate
           26c      # Does it contain 26? (aka someone shot the moon)
              [26꘍  # Then bitwise XOR each with 26 (swapping 26 and 0)
</code></pre>
"
"247281","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>kA4Ẏk^ḢṪ\DoẊ`1F0`vpHCÞ℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrQTThuo5rXuG4ouG5qlxcRG/huopgMUYwYHZwSEPDnuKEhSIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>kA4Ẏk^ḢṪ\DoẊ`1F0`vpHCÞ℅
kA4Ẏ                    # Get the first 4 letters of the uppercase alphabet
    k^                  # Push string &quot;0123456789ABCDEF&quot;
      ḢṪ                # Remove head and tail: &quot;123456789ABCDE&quot;
        \Do             # Remove the D: &quot;123456789ABCE&quot;
           Ẋ            # Cartesian product of strings: [&quot;A1&quot;, &quot;A2&quot;, &quot;A3&quot;, &quot;A4&quot;, ..., &quot;DC&quot;, &quot;DE&quot;]
            `1F0`       # Push string &quot;1FO&quot;
                 vp     # Prepend to each: [&quot;1FOA1&quot;, &quot;1FOA2&quot;, ..., &quot;1FODE&quot;]
                   H    # Convert each from hexadecimal: [127137, 127137, ..., 127198]
                    C   # Convert each to their unicode representation: [&quot;🂡&quot;, &quot;🂢&quot;, ... &quot;🃞&quot;]
                     Þ℅ # Randomly shuffle
</code></pre>
<p>Port of Jelly is same byte count:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>62ɾ16%180ġ11&lt;T»ƛǔḭ»+CÞ℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI2Msm+MTYlMTgwxKExMTxUwrvGm8eU4bitwrsrQ8Oe4oSFIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>62ɾ16%180ġ11&lt;T»ƛǔḭ»+CÞ℅
62ɾ                     # Push range [1, 2, ..., 62]
   16%                  # Modulo each by 16
      180ġ              # GCD each with 180: [1, 2, 3, 4, 5, 6, 1, 4, 9, 10, ..., 12, 1, 2]
          11&lt;T          # Indices where item is less than 11: [0, 1, 2, 3, ... 13, 16, 17, ..., 26, ...]
              »ƛǔḭ»     # Push compressed integer 127137
                   +    # Add to each (vectorizes)
                    C   # Convert each to their unicode representation
                     Þ℅ # Randomly shuffle
</code></pre>
<p>For both solutions, add <code>s</code> flag if it needs to be a string instead of a list.</p>
"
"247282","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, since v2.6 (safe)</h1>
<p>Why does Vyxal have so many ACEs?</p>
<p>Commands with randomness aren’t allowed, and neither are <code>EĖ†</code>. Info is in the <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">repo</a>.</p>
"
"247307","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 217 bytes</h1>
<pre><code>Ṫ⁰y_«⌐ƈḣAɾǑP««∷Þ≤¦HU¤żǑ₄°ṅ›⌐7İḊṖİAs§dĖy'ΠA‹Ḃ»&amp;ḃO꘍∴øð∷|6@¢⌊⁰ė‟~R¨ėṁPO∨{P
∵ḊĠɾm≬¾hṁw⁰Ṫ±√≠a›λḣY꘍≥jzm2⁋]Ẇ+₆↔√„eK⟩Ǒo→ġ≬e¦ŀMEt@y≬Dḭ^₀P≤∆₌»-⇩&amp;λƈḟf!ßǎsGʁż℅÷}yǎġ∴fǒ¥¶ẇæ¬‛C↵⟩ḃXʀ£ƒz~≤ḃuȧ⌊«3ẇ⁰ɽḟk1%:£i⁰hp«∞τjḊ§«2ẇ¥i⁰ḢW¥»?Ṫ4»₁τ&lt;∑i⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuarigbB5X8Kr4oyQxojhuKNByb7HkVDCq8Kr4oi3w57iiaTCpkhVwqTFvMeR4oKEwrDhuYXigLrijJA3xLDhuIrhuZbEsEFzwqdkxJZ5J86gQeKAueG4gsK7JuG4g0/qmI3iiLTDuMOw4oi3fDZAwqLijIrigbDEl+KAn35SwqjEl+G5gVBP4oioe1BcbuKIteG4isSgyb5t4omswr5o4bmBd+KBsOG5qsKx4oia4omgYeKAus674bijWeqYjeKJpWp6bTLigYtd4bqGK+KChuKGlOKImuKAnmVL4p+px5Fv4oaSxKHiiaxlwqbFgE1FdEB54omsROG4rV7igoBQ4omk4oiG4oKMwrst4oepJs67xojhuJ9mIcOfx45zR8qBxbzihIXDt315x47EoeKItGbHksKlwrbhuofDpsKs4oCbQ+KGteKfqeG4g1jKgMKjxpJ6fuKJpOG4g3XIp+KMisKrM+G6h+KBsMm94bifazElOsKjaeKBsGhwwqviiJ7PhGrhuIrCp8KrMuG6h8KlaeKBsOG4olfCpcK7P+G5qjTCu+KCgc+EPOKIkWnih6ciLCIiLCJDWU0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJqIiwixpsiLCLhuapueV/Cq+KMkMaI4bijQcm+x5FQwqvCq+KIt8Oe4omkwqZIVcKkxbzHkeKChMKw4bmF4oC64oyQN8Sw4biK4bmWxLBBc8KnZMSWeSfOoEHigLnhuILCuybhuINP6piN4oi0w7jDsOKIt3w2QMKi4oyK4oGwxJfigJ9+UsKoxJfhuYFQT+KIqHtQXG7iiLXhuIrEoMm+beKJrMK+aOG5gXfigbDhuarCseKImuKJoGHigLrOu+G4o1nqmI3iiaVqem0y4oGLXeG6hivigobihpTiiJrigJ5lS+KfqceRb+KGksSh4omsZcKmxYBNRXRAeeKJrEThuK1e4oKAUOKJpOKIhuKCjMK7LeKHqSbOu8aI4bifZiHDn8eOc0fKgcW84oSFw7d9eceOxKHiiLRmx5LCpcK24bqHw6bCrOKAm0PihrXin6nhuINYyoDCo8aSen7iiaThuIN1yKfijIrCqzPhuoduyb3huJ9rMSU6wqNpbmhwwqviiJ7PhGrhuIrCp8KrMuG6h8KlaW7huKJXwqXCuz/huao0wrvigoHPhDziiJFp4oenIiwiO1rGm2AgPT4gYGoiLCJbXCJVU0FcIiwgXCJBVVNcIiwgXCJCSUhcIiwgXCJJU0xcIiwgXCJGU01cIiwgXCJTWUNcIiwgXCJVTUlcIiwgXCJTUE1cIiwgXCJHVUZcIiwgXCJBVEZcIiwgXCJIS0dcIiwgXCJJT1RcIl0iXQ=="" rel=""nofollow noreferrer"">Run all the test cases</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJqIiwixpsiLCLhuapueV/Cq+KMkMaI4bijQcm+x5FQwqvCq+KIt8Oe4omkwqZIVcKkxbzHkeKChMKw4bmF4oC64oyQN8Sw4biK4bmWxLBBc8KnZMSWeSfOoEHigLnhuILCuybhuINP6piN4oi0w7jDsOKIt3w2QMKi4oyK4oGwxJfigJ9+UsKoxJfhuYFQT+KIqHtQXG7iiLXhuIrEoMm+beKJrMK+aOG5gXfigbDhuarCseKImuKJoGHigLrOu+G4o1nqmI3iiaVqem0y4oGLXeG6hivigobihpTiiJrigJ5lS+KfqceRb+KGksSh4omsZcKmxYBNRXRAeeKJrEThuK1e4oKAUOKJpOKIhuKCjMK7LeKHqSbOu8aI4bifZiHDn8eOc0fKgcW84oSFw7d9eceOxKHiiLRmx5LCpcK24bqHw6bCrOKAm0PihrXin6nhuINYyoDCo8aSen7iiaThuIN1yKfijIrCqzPhuoduyb3huJ9rMSU6wqNpbmhwwqviiJ7PhGrhuIrCp8KrMuG6h8KlaW7huKJXwqXCuz/huao0wrvigoHPhDziiJFp4oenIiwiO1rGm2AgPT4gYGoiLCJbJ0FGRycsICdBTEEnLCAnQUxCJywgJ0RaQScsICdBU00nLCAnQU5EJywgJ0FHTycsICdBSUEnLCAnQVRBJywgJ0FURycsICdBUkcnLCAnQVJNJywgJ0FCVycsICdBVVMnLCAnQVVUJywgJ0FaRScsICdCSFMnLCAnQkhSJywgJ0JHRCcsICdCUkInLCAnQkxSJywgJ0JFTCcsICdCTFonLCAnQkVOJywgJ0JNVScsICdCVE4nLCAnQk9MJywgJ0JJSCcsICdCV0EnLCAnQlZUJywgJ0JSQScsICdWR0InLCAnSU9UJywgJ0JSTicsICdCR1InLCAnQkZBJywgJ0JESScsICdLSE0nLCAnQ01SJywgJ0NBTicsICdDUFYnLCAnQ1lNJywgJ0NBRicsICdUQ0QnLCAnQ0hMJywgJ0NITicsICdIS0cnLCAnTUFDJywgJ0NYUicsICdDQ0snLCAnQ09MJywgJ0NPTScsICdDT0cnLCAnQ09EJywgJ0NPSycsICdDUkknLCAnQ0lWJywgJ0hSVicsICdDVUInLCAnQ1lQJywgJ0NaRScsICdETksnLCAnREpJJywgJ0RNQScsICdET00nLCAnRUNVJywgJ0VHWScsICdTTFYnLCAnR05RJywgJ0VSSScsICdFU1QnLCAnRVRIJywgJ0ZMSycsICdGUk8nLCAnRkpJJywgJ0ZJTicsICdGUkEnLCAnR1VGJywgJ1BZRicsICdBVEYnLCAnR0FCJywgJ0dNQicsICdHRU8nLCAnREVVJywgJ0dIQScsICdHSUInLCAnR1JDJywgJ0dSTCcsICdHUkQnLCAnR0xQJywgJ0dVTScsICdHVE0nLCAnR0dZJywgJ0dJTicsICdHTkInLCAnR1VZJywgJ0hUSScsICdITUQnLCAnVkFUJywgJ0hORCcsICdIVU4nLCAnSVNMJywgJ0lORCcsICdJRE4nLCAnSVJOJywgJ0lSUScsICdJUkwnLCAnSU1OJywgJ0lTUicsICdJVEEnLCAnSkFNJywgJ0pQTicsICdKRVknLCAnSk9SJywgJ0tBWicsICdLRU4nLCAnS0lSJywgJ1BSSycsICdLT1InLCAnS1dUJywgJ0tHWicsICdMQU8nLCAnTFZBJywgJ0xCTicsICdMU08nLCAnTEJSJywgJ0xCWScsICdMSUUnLCAnTFRVJywgJ0xVWCcsICdNS0QnLCAnTURHJywgJ01XSScsICdNWVMnLCAnTURWJywgJ01MSScsICdNTFQnLCAnTUhMJywgJ01UUScsICdNUlQnLCAnTVVTJywgJ01ZVCcsICdNRVgnLCAnRlNNJywgJ01EQScsICdNQ08nLCAnTU5HJywgJ01ORScsICdNU1InLCAnTUFSJywgJ01PWicsICdNTVInLCAnTkFNJywgJ05SVScsICdOUEwnLCAnTkxEJywgJ0FOVCcsICdOQ0wnLCAnTlpMJywgJ05JQycsICdORVInLCAnTkdBJywgJ05JVScsICdORksnLCAnTU5QJywgJ05PUicsICdPTU4nLCAnUEFLJywgJ1BMVycsICdQU0UnLCAnUEFOJywgJ1BORycsICdQUlknLCAnUEVSJywgJ1BITCcsICdQQ04nLCAnUE9MJywgJ1BSVCcsICdQUkknLCAnUUFUJywgJ1JFVScsICdST1UnLCAnUlVTJywgJ1JXQScsICdCTE0nLCAnU0hOJywgJ0tOQScsICdMQ0EnLCAnTUFGJywgJ1NQTScsICdWQ1QnLCAnV1NNJywgJ1NNUicsICdTVFAnLCAnU0FVJywgJ1NFTicsICdTUkInLCAnU1lDJywgJ1NMRScsICdTR1AnLCAnU1ZLJywgJ1NWTicsICdTTEInLCAnU09NJywgJ1pBRicsICdTR1MnLCAnU1NEJywgJ0VTUCcsICdMS0EnLCAnU0ROJywgJ1NVUicsICdTSk0nLCAnU1daJywgJ1NXRScsICdDSEUnLCAnU1lSJywgJ1RXTicsICdUSksnLCAnVFpBJywgJ1RIQScsICdUTFMnLCAnVEdPJywgJ1RLTCcsICdUT04nLCAnVFRPJywgJ1RVTicsICdUVVInLCAnVEtNJywgJ1RDQScsICdUVVYnLCAnVUdBJywgJ1VLUicsICdBUkUnLCAnR0JSJywgJ1VTQScsICdVTUknLCAnVVJZJywgJ1VaQicsICdWVVQnLCAnVkVOJywgJ1ZOTScsICdWSVInLCAnV0xGJywgJ0VTSCcsICdZRU0nLCAnWk1CJywgJ1pXRSddIl0="" rel=""nofollow noreferrer"">Try it on every country code</a></p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>Ṫ⁰y_«⌐ƈḣAɾǑP««∷Þ≤¦HU¤żǑ₄°ṅ›⌐7İḊṖİAs§dĖy'ΠA‹Ḃ»&amp;ḃO꘍∴øð∷|6@¢⌊⁰ė‟~R¨ėṁPO∨{P
∵ḊĠɾm≬¾hṁw⁰Ṫ±√≠a›λḣY꘍≥jzm2⁋]Ẇ+₆↔√„eK⟩Ǒo→ġ≬e¦ŀMEt@y≬Dḭ^₀P≤∆₌»-⇩&amp;λƈḟf!ßǎsGʁż℅÷}yǎġ∴fǒ¥¶ẇæ¬‛C↵⟩ḃXʀ£ƒz~≤ḃuȧ⌊«3ẇ⁰ɽḟk1%:£i⁰hp«∞τjḊ§«2ẇ¥i⁰ḢW¥»?Ṫ4»₁τ&lt;∑i⇧
                # ^ full program
Ṫ               # Remove the last character of the (implicit) input
 ⁰              # Push the input again
  y             # Uninterleave, push a[::2] and a[1::2] to the stack
   _            # Pop so a[1::2] is removed. Stack: a[:-1], a[::2]
    «⌐ƈḣAɾǑP«   # Push compressed string &quot;aaeeijloqwxy&quot;
«∷Þ≤¦HU¤żǑ₄°ṅ›⌐7İḊṖİAs§dĖy'ΠA‹Ḃ»&amp;ḃO꘍∴øð∷|6@¢⌊⁰ė‟~R¨ėṁPO∨{P
∵ḊĠɾm≬¾hṁw⁰Ṫ±√≠a›λḣY꘍≥jzm2⁋]Ẇ+₆↔√„eK⟩Ǒo→ġ≬e¦ŀMEt@y≬Dḭ^₀P≤∆₌»-⇩&amp;λƈḟf!ßǎsGʁż℅÷}yǎġ∴fǒ¥¶ẇæ¬‛C↵⟩ḃXʀ£ƒz~≤ḃuȧ⌊«
                # Push compressed string &quot;atfmytspmsgscymcomprksrbatagnbalablrbihukrestirlsvnbenisrmacabwagoandarearmatgautbdibgdbhsblzbrbbrncafchlchncodcogcokcpvdnkeshflkfrofsmginglpgnqgrdgrlgufguyirqjamkazkorlbrlbymafmdgmdvmexmltmnemnpmozmtqniupakpcnplwpngpolprtprypyfsenslbslvsursvksweswzsyctcdtkmtunturtuvurywlf&quot;
3ẇ              # Split into chunks of 3: [&quot;atf&quot;, &quot;myt&quot;, &quot;spm&quot;, ..., &quot;ury&quot;, &quot;wlf&quot;]
  ⁰ɽ            # Push the input and lowercase it
    ḟ           # Find its index in the list (-1 if not found)
     k1%        # Modulo 1000 to convert -1 to 999
        :£      # Store in the register without popping
          i     # Index this into the string pushed earlier (&quot;aaeeijloqwxy&quot;)
           ⁰h   # Push the first character of the input
             p  # Prepend it
«∞τjḊ§«         # Push compressed string &quot;kykmkprs&quot;
       2ẇ       # Split into chunks of two
         ¥      # Push the contents of the register
          i     # Index this into the list
           ⁰Ḣ   # Push the input without the first character
W               # Wrap these five values on the stack into a list
 ¥              # Push the contents of the register
  »?Ṫ4»         # Push compressed integer 4082091
       ₁τ       # Convert to base 100 list: [4, 8, 20, 91]
         &lt;      # For each item, is the register (pushed earlier) less than it?
          ∑     # Sum this to get the amount of integers that the register is less than
           i    # Index this into the list pushed earlier
            ⇧   # Uppercase
</code></pre>
"
"247321","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>₁ƛ6℅6℅+;Ċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHGmzbihIU24oSFKzvEiiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns a list of <code>[roll, count]</code>. If a roll total didn't happen, then it isn't included in the list.</p>
<h2>Explained</h2>
<pre><code>₁ƛ6℅6℅+;Ċ
₁ƛ        # for each item in range(1, 100 + 1):
  6℅6℅    #   push a random number from range(1, 6 + 1) and then another random number from that range
      +   #   and add them together
       ;  # end map - this leaves 100 random dice rolls in a list.
        Ċ # get the count of each item
</code></pre>
"
"247334","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ṗṠsĠ~Ḣvh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZfhuaBzxKB+4biidmgiLCIiLCJbMTUsIDE2LCA3LCAxLCA0XSJd"" rel=""noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQaiIsIsabIiwi4bmX4bmgc8SgfuG4onZoIiwiO1rGm2AgPT4gYGoiLCJbWzFdLCBbNCwgNSwgMl0sIFs5LCAxMCwgMTEsIDEyXSwgWzIsIDMsIDUsIDZdLCBbMTUsIDE2LCA3LCAxLCA0XV0iXQ=="" rel=""noreferrer"">run all test cases</a>.</p>
<p><code>sĠ~Ḣvh</code> is the shortest way I can think of to keep only duplicates, so...</p>
<p><code>~Ḣvh</code> could alternatively be <code>vḢfU</code> for same byte count.</p>
<h2>How?</h2>
<pre><code>ṗṠsĠ~Ḣvh
ṗ        # Powerset of (implicit) input
 Ṡ       # Sum of each
  s      # Sort
   Ġ     # Group consecutive identical items
    ~    # Filter for:
     Ḣ   #  Remove the head (this means if it is only one item long, it will be falsey, else truthy)
      vh # Get the first item of each
</code></pre>
"
"247340","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>µ5i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCtTVpIiwiIiwiWyduaWNrZWwnLCAncGVubnknLCAncGVubnknLCAncXVhcnRlcicsICdxdWFydGVyJywgJ3F1YXJ0ZXInLCAnZGltZScsICdkaW1lJywgJ2RpbWUnLCAnZGltZSddIl0="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQaiIsInbijIg6xpsiLCLCtTVpIiwiOztaYCA9PiBgdmoiLCJbXCJwZW5ueSBuaWNrZWwgZGltZSBxdWFydGVyXCIsIFwibmlja2VsIHBlbm55IHBlbm55IHF1YXJ0ZXIgcXVhcnRlciBxdWFydGVyIGRpbWUgZGltZSBkaW1lIGRpbWVcIiwgXCJxdWFydGVyIGRpbWUgbmlja2VsIG5pY2tlbCBxdWFydGVyIGRpbWUgcGVubnkgcGVubnlcIl0iXQ=="" rel=""nofollow noreferrer"">Run all the test cases</a></p>
<h2>How?</h2>
<pre><code>µ5i
µ   # Sort by:
 5i #  Index 5 into the list (zero-indexed, modular)
</code></pre>
<p>Port of Jelly.</p>
"
"247349","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Ṗ'ż-ȧ⁰≤A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnxbwtyKfigbDiiaRBIiwiIiwiWzEsMiwzLDQsNSw2XVxuMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>Ṗ'ż-ȧ⁰≤A
Ṗ        # All permutations of the (implicit) first input
 '       # Filter by:
  ż      #  Length range [1, length]
   -ȧ    #  Absolute differences of values in the same positions
     ⁰≤  #  For each, is it less than or equal to the second input?
       A #  Are they all truth?
</code></pre>
<p><span class=""math-container"">```</span></p>
"
"247353","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ƛ?=T¯‹≤A;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGmz89VMKv4oC54omkQTtBIiwiIiwiWzEsIDksIDEsIDgsIDEsIDcsIDEsIDExXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ƛ       ;A # Does every value have the property that...
       A   # All of...
    ¯      # The differences between...
 ?=T       # Indices of that value in the input
     ‹     # Minus 1
      ≤    # Are at most that value?
</code></pre>
"
"247356","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>sṖµ¯5%₍≈⌐;t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJz4bmWwrXCrzUl4oKN4omI4oyQO3QiLCIiLCJbNCwgMywgMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I <em>think</em> this works? Takes a list of 0, 1, 2, 3, 4. Fixed for +1 byte thanks to @KevinCruijssen.</p>
<pre><code>s           # Sort (annoying edgecase)
 Ṗµ      ;t # The maximal permutation by...
   ¯        # Differences
    5%      # Modulo 5
      ₍     # Sort primarily by...
       ≈    # All differences are the same
      ₍     # And secondarily by...
        ⌐   # 1 - the list = minimal value.
</code></pre>
"
"247472","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 41 bytes</h1>
<pre><code>‹¨2[`  [ - __ `²℅|ð2-]\|p;‛| m4-½J\_4*pøm
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLnCqDJbYCAgWyAtIF9fIGDCsuKEhXzDsDItXVxcfHA74oCbfCBtNC3CvUpcXF80KnDDuG0iLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>‹¨2                      ;                 # Dyadic map (val, index) to...
   [                 ]                     # If the index is truthy (i.e. not first)
    `  [ - __ `²                           # String literal &quot;  [ - __ &quot;, made into a square (chunks of 3)
                ℅                          # Choose one of these
                 |   ]                     # Else... (first)
                  ð2-                      # &quot; --&quot; - Take a space and append two -s
                       \|p                 # Prepend a |
                           ‛| m            # Take &quot;| &quot; and mirror it
                               4-          # Append four -s
                                 ½J        # Split that in half and append
                                   \_4*p   # Prepend &quot;____&quot;
                                        øm # Vertically mirror (flipping []) and join by newlines
</code></pre>
"
"247477","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 1</h1>
<pre><code>,Ḣ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIs4biiIiwiIiwiSGVsbG8sIHdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>,  # Print
 Ḣ # Remove first character, ignored

Ḣ  # Remove first character, implicitly printed
</code></pre>
"
"247484","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 420 bytes</h1>
<pre><code>«⟑``‟Ḃȯ†√¦∑iRṫΠʁǓ₴5]p#4Ṅl}3ẋ¶T+⟑V]ḭr≤ṁǔ
A»cP⌐kẋṠ†⟇Ǔ≈ɽ⟩›ṪwSʀ₇⌊Ǔ∇•Xwð⇩I‡ṅfβ℅₍ṗµ∆€¾aǍ⟑Ȧ2⋏$λ⁺]/|f₁Pa⟨,₁,h¨ṁ₌ε⟑‹İ⟨Nṫw%yĖ⁼*&gt;₈Ė¹ȯU÷s¬)∨ʀ0ŀƈ½)(m-Ẋ ǓḂ⟩[0e•₂↲S⟇Ġj⟨^ɖg[⌐₁⋏żo:ẎRʁ⌐ð%⇧↓Y*?* †8„S|⁽l3√⁺⟑«⇧2ẇ:»⟑⟇βE'ċ¬$≠∪₀↳↲æMf»₄τẇkA¨£vJfZ«ƛ¤‛H∧λŻJ@±*dCẋ°4£Mgċ ≥ƒX¢ǎd≤ǔ₈b¢&amp;Ẋ≈•ġ.ẎAl&gt;₅j¨∵½↳Ŀa&gt;€¼₌Rǔb*JA⌐Ḃ∵Ḣ3\⌈|ẋ;Π1₆›Ẇ∧≬₆ETh□ʀ≬¨«⇧2ẇ:»½ǒ÷₇Π≤¶:ɽq∇¨»12τẇkAZƛ÷$f$vj;fZ«↲↵Ė¯≥꘍≠}ĊKṫ⟑ɖhṪ⁺|oI3⌈%‟ṙK/i⁺!ṅȮiȧS'₌βP⅛‛ṙ∧6ƈ;7↔⋎¡↵G]ḟɾḋ†*↑o«⇧23f20ẋfẇWf:⁰ḟ›i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq+KfkWBg4oCf4biCyK/igKDiiJrCpuKIkWlS4bmrzqDKgceT4oK0NV1wIzThuYRsfTPhuovCtlQr4p+RVl3huK1y4omk4bmBx5RcbkHCu2NQ4oyQa+G6i+G5oOKAoOKfh8eT4omIyb3in6nigLrhuap3U8qA4oKH4oyKx5PiiIfigKJYd8Ow4oepSeKAoeG5hWbOsuKEheKCjeG5l8K14oiG4oKswr5hx43in5HIpjLii48kzrvigbpdL3xm4oKBUGHin6gs4oKBLGjCqOG5geKCjM614p+R4oC5xLDin6hO4bmrdyV5xJbigbwqPuKCiMSWwrnIr1XDt3PCrCniiKjKgDDFgMaIwr0pKG0t4bqKIMeT4biC4p+pWzBl4oCi4oKC4oayU+Kfh8SgauKfqF7Jlmdb4oyQ4oKB4ouPxbxvOuG6jlLKgeKMkMOwJeKHp+KGk1kqPyog4oCgOOKAnlN84oG9bDPiiJrigbrin5HCq+KHpzLhuoc6wrvin5Hin4fOskUnxIvCrCTiiaDiiKrigoDihrPihrLDpk1mwrvigoTPhOG6h2tBwqjCo3ZKZlrCq8abwqTigJtI4oinzrvFu0pAwrEqZEPhuovCsDTCo01nxIsg4omlxpJYwqLHjmTiiaTHlOKCiGLCoibhuoriiYjigKLEoS7huo5BbD7igoVqwqjiiLXCveKGs8S/YT7igqzCvOKCjFLHlGIqSkHijJDhuILiiLXhuKIzXFzijIh84bqLO86gMeKChuKAuuG6huKIp+KJrOKChkVUaOKWocqA4omswqjCq+KHpzLhuoc6wrvCvceSw7figofOoOKJpMK2Osm9ceKIh8KowrsxMs+E4bqHa0FaxpvDtyRmJHZqO2ZawqvihrLihrXElsKv4oml6piN4omgfcSKS+G5q+KfkcmWaOG5quKBunxvSTPijIgl4oCf4bmZSy9p4oG6IeG5hciuacinUyfigozOslDihZvigJvhuZniiKc2xog7N+KGlOKLjsKh4oa1R13huJ/JvuG4i+KAoCrihpFvwqvih6cyM2YyMOG6i2bhuodXZjrigbDhuJ/igLppIiwiIiwiS1AiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJqVCIsIsab4oaSIiwiwqvin5FgYOKAn+G4gsiv4oCg4oiawqbiiJFpUuG5q86gyoHHk+KCtDVdcCM04bmEbH0z4bqLwrZUK+KfkVZd4bitcuKJpOG5gceUXG5BwrtjUOKMkGvhuovhuaDigKDin4fHk+KJiMm94p+p4oC64bmqd1PKgOKCh+KMiseT4oiH4oCiWHfDsOKHqUnigKHhuYVmzrLihIXigo3huZfCteKIhuKCrMK+YceN4p+RyKYy4ouPJM674oG6XS98ZuKCgVBh4p+oLOKCgSxowqjhuYHigozOteKfkeKAucSw4p+oTuG5q3clecSW4oG8Kj7igojElsK5yK9Vw7dzwqwp4oioyoAwxYDGiMK9KShtLeG6iiDHk+G4guKfqVswZeKAouKCguKGslPin4fEoGrin6heyZZnW+KMkOKCgeKLj8W8bzrhuo5SyoHijJDDsCXih6fihpNZKj8qIOKAoDjigJ5TfOKBvWwz4oia4oG64p+Rwqvih6cy4bqHOsK74p+R4p+HzrJFJ8SLwqwk4omg4oiq4oKA4oaz4oayw6ZNZsK74oKEz4ThuodrQcKowqN2SmZawqvGm8Kk4oCbSOKIp867xbtKQMKxKmRD4bqLwrA0wqNNZ8SLIOKJpcaSWMKix45k4omkx5TigohiwqIm4bqK4omI4oCixKEu4bqOQWw+4oKFasKo4oi1wr3ihrPEv2E+4oKswrzigoxSx5RiKkpB4oyQ4biC4oi14biiM1xc4oyIfOG6izvOoDHigobigLrhuobiiKfiiazigoZFVGjilqHKgOKJrMKowqvih6cy4bqHOsK7wr3HksO34oKHzqDiiaTCtjrJvXHiiIfCqMK7MTLPhOG6h2tBWsabw7ckZiR2ajtmWsKr4oay4oa1xJbCr+KJpeqYjeKJoH3Eikvhuavin5HJlmjhuarigbp8b0kz4oyIJeKAn+G5mUsvaeKBuiHhuYXIrmnIp1Mn4oKMzrJQ4oWb4oCb4bmZ4oinNsaIOzfihpTii47CoeKGtUdd4bifyb7huIvigKAq4oaRb8Kr4oenMjNmMjDhuotm4bqHV2Y64oaQ4bif4oC6aSIsIjtaxptgID0+IGBqIiwiW1wiQUZcIiwgXCJBWFwiLCBcIkFMXCIsIFwiRFpcIiwgXCJBU1wiLCBcIkFEXCIsIFwiQU9cIiwgXCJBSVwiLCBcIkFRXCIsIFwiQUdcIiwgXCJBUlwiLCBcIkFNXCIsIFwiQVdcIiwgXCJBVVwiLCBcIkFUXCIsIFwiQVpcIiwgXCJCU1wiLCBcIkJIXCIsIFwiQkRcIiwgXCJCQlwiLCBcIkJZXCIsIFwiQkVcIiwgXCJCWlwiLCBcIkJKXCIsIFwiQk1cIiwgXCJCVFwiLCBcIkJPXCIsIFwiQkFcIiwgXCJCV1wiLCBcIkJWXCIsIFwiQlJcIiwgXCJWR1wiLCBcIklPXCIsIFwiQk5cIiwgXCJCR1wiLCBcIkJGXCIsIFwiQklcIiwgXCJLSFwiLCBcIkNNXCIsIFwiQ0FcIiwgXCJDVlwiLCBcIktZXCIsIFwiQ0ZcIiwgXCJURFwiLCBcIkNMXCIsIFwiQ05cIiwgXCJIS1wiLCBcIk1PXCIsIFwiQ1hcIiwgXCJDQ1wiLCBcIkNPXCIsIFwiS01cIiwgXCJDR1wiLCBcIkNEXCIsIFwiQ0tcIiwgXCJDUlwiLCBcIkNJXCIsIFwiSFJcIiwgXCJDVVwiLCBcIkNZXCIsIFwiQ1pcIiwgXCJES1wiLCBcIkRKXCIsIFwiRE1cIiwgXCJET1wiLCBcIkVDXCIsIFwiRUdcIiwgXCJTVlwiLCBcIkdRXCIsIFwiRVJcIiwgXCJFRVwiLCBcIkVUXCIsIFwiRktcIiwgXCJGT1wiLCBcIkZKXCIsIFwiRklcIiwgXCJGUlwiLCBcIkdGXCIsIFwiUEZcIiwgXCJURlwiLCBcIkdBXCIsIFwiR01cIiwgXCJHRVwiLCBcIkRFXCIsIFwiR0hcIiwgXCJHSVwiLCBcIkdSXCIsIFwiR0xcIiwgXCJHRFwiLCBcIkdQXCIsIFwiR1VcIiwgXCJHVFwiLCBcIkdHXCIsIFwiR05cIiwgXCJHV1wiLCBcIkdZXCIsIFwiSFRcIiwgXCJITVwiLCBcIlZBXCIsIFwiSE5cIiwgXCJIVVwiLCBcIklTXCIsIFwiSU5cIiwgXCJJRFwiLCBcIklSXCIsIFwiSVFcIiwgXCJJRVwiLCBcIklNXCIsIFwiSUxcIiwgXCJJVFwiLCBcIkpNXCIsIFwiSlBcIiwgXCJKRVwiLCBcIkpPXCIsIFwiS1pcIiwgXCJLRVwiLCBcIktJXCIsIFwiS1BcIiwgXCJLUlwiLCBcIktXXCIsIFwiS0dcIiwgXCJMQVwiLCBcIkxWXCIsIFwiTEJcIiwgXCJMU1wiLCBcIkxSXCIsIFwiTFlcIiwgXCJMSVwiLCBcIkxUXCIsIFwiTFVcIiwgXCJNS1wiLCBcIk1HXCIsIFwiTVdcIiwgXCJNWVwiLCBcIk1WXCIsIFwiTUxcIiwgXCJNVFwiLCBcIk1IXCIsIFwiTVFcIiwgXCJNUlwiLCBcIk1VXCIsIFwiWVRcIiwgXCJNWFwiLCBcIkZNXCIsIFwiTURcIiwgXCJNQ1wiLCBcIk1OXCIsIFwiTUVcIiwgXCJNU1wiLCBcIk1BXCIsIFwiTVpcIiwgXCJNTVwiLCBcIk5BXCIsIFwiTlJcIiwgXCJOUFwiLCBcIk5MXCIsIFwiQU5cIiwgXCJOQ1wiLCBcIk5aXCIsIFwiTklcIiwgXCJORVwiLCBcIk5HXCIsIFwiTlVcIiwgXCJORlwiLCBcIk1QXCIsIFwiTk9cIiwgXCJPTVwiLCBcIlBLXCIsIFwiUFdcIiwgXCJQU1wiLCBcIlBBXCIsIFwiUEdcIiwgXCJQWVwiLCBcIlBFXCIsIFwiUEhcIiwgXCJQTlwiLCBcIlBMXCIsIFwiUFRcIiwgXCJQUlwiLCBcIlFBXCIsIFwiUkVcIiwgXCJST1wiLCBcIlJVXCIsIFwiUldcIiwgXCJCTFwiLCBcIlNIXCIsIFwiS05cIiwgXCJMQ1wiLCBcIk1GXCIsIFwiUE1cIiwgXCJWQ1wiLCBcIldTXCIsIFwiU01cIiwgXCJTVFwiLCBcIlNBXCIsIFwiU05cIiwgXCJSU1wiLCBcIlNDXCIsIFwiU0xcIiwgXCJTR1wiLCBcIlNLXCIsIFwiU0lcIiwgXCJTQlwiLCBcIlNPXCIsIFwiWkFcIiwgXCJHU1wiLCBcIlNTXCIsIFwiRVNcIiwgXCJMS1wiLCBcIlNEXCIsIFwiU1JcIiwgXCJTSlwiLCBcIlNaXCIsIFwiU0VcIiwgXCJDSFwiLCBcIlNZXCIsIFwiVFdcIiwgXCJUSlwiLCBcIlRaXCIsIFwiVEhcIiwgXCJUTFwiLCBcIlRHXCIsIFwiVEtcIiwgXCJUT1wiLCBcIlRUXCIsIFwiVE5cIiwgXCJUUlwiLCBcIlRNXCIsIFwiVENcIiwgXCJUVlwiLCBcIlVHXCIsIFwiVUFcIiwgXCJBRVwiLCBcIkdCXCIsIFwiVVNcIiwgXCJVTVwiLCBcIlVZXCIsIFwiVVpcIiwgXCJWVVwiLCBcIlZFXCIsIFwiVk5cIiwgXCJWSVwiLCBcIldGXCIsIFwiRUhcIiwgXCJZRVwiLCBcIlpNXCIsIFwiWldcIl0iXQ=="" rel=""nofollow noreferrer"">Verify all test cases (takes a while, but doesn't time out)</a></p>
<p>Messy port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>«⟑``‟Ḃȯ†√¦∑iRṫΠʁǓ₴5]p#4Ṅl}3ẋ¶T+⟑V]ḭr≤ṁǔ
A»cP⌐kẋṠ†⟇Ǔ≈ɽ⟩›ṪwSʀ₇⌊Ǔ∇•Xwð⇩I‡ṅfβ℅₍ṗµ∆€¾aǍ⟑Ȧ2⋏$λ⁺]/|f₁Pa⟨,₁,h¨ṁ₌ε⟑‹İ⟨Nṫw%yĖ⁼*&gt;₈Ė¹ȯU÷s¬)∨ʀ0ŀƈ½)(m-Ẋ ǓḂ⟩[0e•₂↲S⟇Ġj⟨^ɖg[⌐₁⋏żo:ẎRʁ⌐ð%⇧↓Y*?* †8„S|⁽l3√⁺⟑«
                            # Push compressed string &quot;dzaibwbrbfdmfrghitlvmdngrwknlclktzthtcugusalvgcugagmgiuzzmgrnihmhninmknlssazczlipsslchzwzaafarhkmnetcrdjerfjhtmwmlprumccnftjbebocoismhnpncnzphtkaskhdogugtnablwssosjvnyebtcafihuidirimjpkelbompashsdtwtovegelalsmctgttcystsgesbhbgcmcxjokimsmammnenopesmsygbviaumymurutlbviovakwmranqavcvubmecdeltnrrerosacihrluegggjekg&quot;
⇧                           # Uppercase
 2ẇ                         # Split into chunks of two
   :                        # Duplicate
    »⟑⟇βE'ċ¬$≠∪₀↳↲æMf»      # Push compressed integer 5045888909142307005039435397419896531
                      ₄τ    # Convert to base-26 as a list: [21,8,2,6,7,1,4,1,9,0,3,10,12,17,6,4,0,16,5,9,8,2,0,1,3,1]
                        ẇ   # Split the string into chunks of that size: [[&quot;DZ&quot;, &quot;AI&quot;, ..., &quot;US&quot;], [&quot;AL&quot;, &quot;VG&quot;, ..., &quot;ZM&quot;], [&quot;GR&quot;, &quot;NI&quot;], ..., [&quot;KG&quot;]]
kA                          # Push the uppercase alphabet
  ¨£vJ                      # Zip the list with the alphabet, and for each, append the corresponding letter to each:
                            #  [[&quot;DZA&quot;, &quot;AIA&quot;, ..., &quot;USA&quot;], [&quot;ALB&quot;, &quot;VGB&quot;, ..., &quot;ZMB&quot;], [&quot;GRC&quot;, &quot;NIC&quot;], ..., [&quot;KGZ&quot;]]
      f                     # Flatten
       Z                    # Zip the [&quot;DZ&quot;, &quot;AI&quot;, &quot;BW&quot;, ...] list with this
«ƛ¤‛H∧λŻJ@±*dCẋ°4£Mgċ ≥ƒX¢ǎd≤ǔ₈b¢&amp;Ẋ≈•ġ.ẎAl&gt;₅j¨∵½↳Ŀa&gt;€¼₌Rǔb*JA⌐Ḃ∵Ḣ3\⌈|ẋ;Π1₆›Ẇ∧≬₆ETh□ʀ≬¨«
                            # Push compressed string &quot;cfjmkzpkmfawlrlytdpnbimgmvmxsnaobdbsclcngnnutmbzsvfkgpmtpwsbwfaddkgqmemppgcgcdckkrmzplcvambbbnfoglgdiqpyptaeuyfmehagmqatgfgysrtntrtvskszsepfsc&quot;
        ⇧2ẇ                 # Uppercase and split into chunks of two
           :                # Duplicate
            »½ǒ÷₇Π≤¶:ɽq∇¨»  # Push compressed integer 5023299766197034891137684120
12τ                         # Convert to base 12 as a list: [5,3,2,3,2,0,2,3,2,0,1,8,0,6,6,1,0,11,2,2,7,1,2,0,2,0]
   ẇ                        # Split the list into chunks of that size: [[&quot;CF&quot;, &quot;JM&quot;, &quot;KZ&quot;, &quot;PK&quot;, &quot;MF&quot;], [&quot;AW&quot;, &quot;LR&quot;, &quot;LY&quot;], ..., [&quot;PF&quot;, &quot;SC&quot;], []]
    kAZ                     # Zip with the uppercase alphabet
       ƛ÷$f$vj;             # Map, and for each, insert the letter between each string: [[&quot;CAF&quot;, &quot;JAM&quot;, &quot;KAZ&quot;, &quot;PAK&quot;, &quot;MAF&quot;], ..., [&quot;PYF&quot;, &quot;SYC&quot;], []]
               fZ           # Flatten and zip the [&quot;CF&quot;, &quot;JM&quot;, ..., &quot;SC&quot;] list with this
«↲↵Ė¯≥꘍≠}ĊKṫ⟑ɖhṪ⁺|oI3⌈%‟ṙK/i⁺!ṅȮiȧS'₌βP⅛‛ṙ∧6ƈ;7↔⋎¡↵G]ḟɾḋ†*↑o«
                            # Push compressed string &quot;aqataaxalababihbjbenbyblreeestgssgsgwgnbieirlilisrkmcomkpprkkycymmomacpmspmrssrbsisvntfatfuaukrytmyt&quot;
⇧                           # Uppercase
 23f                        # Push list [2, 3]
    20ẋf                    # Repeat it twenty times: [2, 3, 2, 3, 2, 3, ..., 2, 3]
        ẇ                   # Split the string into chunks of that size: [&quot;AQ&quot;, &quot;ATA&quot;, &quot;AX&quot;, ..., &quot;YT&quot;, &quot;MYT&quot;]
         W                  # Wrap the stack into a list
          f                 # Flatten
           :                # Duplicate
            ⁰ḟ              # Find the index of the input in it
              ›             # Increment
               i            # Index into the list
</code></pre>
"
"247551","<h1>Almost certainly not a cop - <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>{(ƛ⁽‡≬λ@∆Ė†E'µøÞ
</code></pre>
<p>This was a pain.</p>
<p><code>†E</code> provide access to python. <code>'ƛµ</code> allow iterating over infinite lists. <code>{(</code> are loops. <code>@⁽‡≬λ</code> stop the definition of functions. <code>∆</code> deals with a certain ACE vulnerability that hasn't been patched yet. <code>ø</code> deals with <code>øV</code> which is replace until no change. And of course <code>Ė</code> (eval as vyxal) is necessary so there are no workarounds.</p>
<p>Just to be on the safe side, I'm banning <code>Þ</code>, the delimiter for list digraphs which can be infinite.</p>
<p>I'm pretty sure this blocks all infinite loops.</p>
"
"247584","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 distinct bytes, 4 bytes</h1>
<pre><code>`I`I
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSWBJIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>classic vyxal quine</p>
"
"247595","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>A∑∷
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJB4oiR4oi3IiwiIiwicmh5dGhtIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247606","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>2(‹∆f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyKOKAueKIhmYiLCIiLCIyMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>2(‹∆f
2(    # Execute twice:
  ‹   # Decrement to make this 0-indexed
   ∆f # Nth fibonacci number
</code></pre>
"
"247614","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>9ɾ∞(9n-Inɾ∞Jṅ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI5yb7iiJ4oOW4tSW7JvuKInkrhuYUsIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>9ɾ∞(9n-Inɾ∞Jṅ,
9ɾ∞             Palindromise range from 1-9 incl.
   (            Start loop
    9n-I        Push n-9 spaces
        nɾ∞     Palindromise range from 1-n
           J    Join spaces with range
            ṅ,  Join everything by nothing and print it out
</code></pre>
"
"247636","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ẇR∆ZR∩Ṡ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuodS4oiGWlLiiKnhuaAiLCIiLCI0XG5bLTcsNCwtMTIsMSw1LC0zLDEyLDAsMTQsLTJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247638","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>ẇ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuociLCIiLCI0XG5bMSwyLDMsNCw1LDZdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247661","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>ƒ/Þ∞*⌊›Þ∞/'⁰ƒ/&lt;;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGki/DnuKInirijIrigLrDnuKIni8n4oGwxpIvPDtoIiwiIiwiWzEyLDMxXVxuWzcsMThdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Husk answer.</p>
"
"247671","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>b8∆Zf⁰LbLẇvBꜝ‹İ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiOOKIhlpm4oGwTGJM4bqHdkLqnJ3igLnEsOKIkSIsIiIsIlsxNzAsIDc2LCAxOSwgMTk1LCAzMl1cblwiIGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>b                # Convert each from binary
 8∆Z             # Pad each to length 8
    f            # Flatten
         ẇ       # Split into chunks of length... 
     ⁰LbL        # Length of the encoder string, in binary
          vBꜝ‹   # Convert each from binary, remove 0s and decrement
              İ∑ # Index those into the encoder and sum
</code></pre>
"
"247697","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>1`I$u?[N]+p`I$u?[N]+p
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxYEkkdT9bTl0rcGBJJHU/W05dK3AiLCIiLCJbXCJhXCIsXCJiXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The number on front is <code>k</code>.</p>
<pre><code>1                     # Push 1 (or k)
 `I$u?[N]+p`          # Push a string containing part of the program code
            I         # Quinify, unevaling and appending
             $        # Swap with k
              u?[N]   # Push 1 if input, else -1
                   +  # Add
                    p # Prepend to the string
</code></pre>
"
"247708","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> 13 bytes</h1>
<pre><code>»1rKȮ8»`-12`τ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCuzFyS8iuOMK7YC0xMmDPhCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it online!</a><br>
-3 thanks to <a href=""https://codegolf.stackexchange.com/users/92689/steffan"">Steffan</a><br></p>
<p><b>7 bytes</b>
(<code>o</code>, Port of <a href=""https://codegolf.stackexchange.com/a/247705/107262"">this</a>, also thanks to Steffan)</p>
<pre><code>k-:dẊ…R
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJvIiwiIiwiay06ZOG6iuKAplIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<h3>16 bytes (old)</h3>
<pre><code>»-∞ðO∩ß¹¶&quot;⊍»0\-¢
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCuy3iiJ7DsE/iiKnDn8K5wrZcIuKKjcK7MFxcLcKiIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>»-∞ðO∩ß¹¶&quot;⊍»        # Compressed integer 201120201021102010201221
            0\-¢    # Replace 0 with -
</code></pre>
<br>
Spent forever trying to find a cool answer but this is all my half asleep brain could come up with at the moment<br>
There is a 0% chance this is optimal :P
"
"247711","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>»Ċ¨?»²›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu8SKwqg/wrvCsuKAuiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a><br><br>
Port of the second answer <a href=""https://codegolf.stackexchange.com/a/247594/107262"">here</a><br>
Explanation:</p>
<pre><code>»Ċ¨?»   # Compressed integer 11972312
     ²  # Squared
      › # Increment
</code></pre>
<p>I was on my way to making a super short one but I had read the rules wrong :(</p>
"
"247717","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>żZødṖƛĠvL2lvƒ&gt;A;G
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvFrDuGThuZbGm8SgdkwybHbGkj5BO0ciLCIiLCJbMSwyXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E. <s><code>vw</code> and <code>f</code> are only needed due to <a href=""https://github.com/Vyxal/Vyxal/issues/995"" rel=""nofollow noreferrer"">a bug</a>, and <code>ƒ∴</code> is needed instead of <code>G</code> due to <a href=""https://github.com/Vyxal/Vyxal/issues/997"" rel=""nofollow noreferrer"">another bug</a>.</s> Bugs fixed.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvMO44biK4bmWxpvDuMSWwqhwPkE7RyIsIiIsIlsxLDJdIl0="" rel=""nofollow noreferrer"">Could be 13 bytes</a>, but, well, this challenge is what inspired me to create all those new builtins, so, I guess it doesn't count.</p>
"
"247785","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>k⁰øl:[«88«p|_
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsImvigbDDuGw6W8KrODjCq3B8XyIsIl07WsabYCA9PiBgajvigYsiLCJbXCJ3b3JkXCIsIFwiYmFieVwiLCBcInNhbGVcIiwgXCJzdHJpbmdcIiwgXCJmdW5jdGlvblwiLCBcInN0ZWxsYXJcIiwgXCJhdHlwaWNhbFwiLCBcInd3d2hoaGhhdFwiLCBcImFhYWFhYWFhYWFcIiwgXCJsdHJcIiwgXCJhaXJwbGFuZVwiLCBcInN0b3V0XCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<h2>How?</h2>
<pre><code>k⁰øl:[«88«p|_
k⁰øl           # Strip leading consonants
    :[         # If there's anything left:
      «88«p    # Prepend &quot;shm&quot;
           |_  # Else, pop, returning the implicit input
</code></pre>
"
"247792","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ǐ₌Lhe
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsIseQ4oKMTGhlIiwiO1rGm2AgPT4gYGo74oGLIiwiWzQsIDgsIDI1LCAyNywgNDksIDEyMSwgMTI1LCAzNDMsIDEzMzEsIDMxMjUsIDE2ODA3LCA4MjM1NDMsIDE2MTA1MSwgMTk0ODcxNzFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ǐ₌Lhe
ǐ     # Prime factors with duplicates
 ₌    # Apply both of next two elements and push both results to the stack:
  L   #  Length
   h  #  First item
    e # Exponentiate these two (length ^ first item)
</code></pre>
"
"247837","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ÞFḟ‹∆f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkbhuJ/igLniiIZmIiwiIiwiMzQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247842","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>kg/ṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrZy/huZkiLCIiLCIyIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Port of Unmitigated's JavaScript answer</p>
<pre><code>  /  # Divide by...
kg   # Phi
   ṙ # Round
</code></pre>
"
"247884","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>2Ǒ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyx5EiLCIiLCIyMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This one by @lyxal</p>
<pre><code>2Ǒ # I'm running out of things to say for this comment line
 Ǒ # How many times is the input divisible by...
2  # 2
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Eġ∆l
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJFxKHiiIZsIiwiIiwiOTQyMDgiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ported from the <a href=""https://codegolf.stackexchange.com/a/247899/107299"">Desmos</a> answer.</p>
<pre><code>Eġ∆l # 4 bytes!
E    # 2^input
 ġ   # GCD of that and the input
  ∆l # log2
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>bṘȧ1ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJi4bmYyKcx4bifIiwiIiwiLTQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Strategy from the osabie answer. Suprised that there has been no Vyxal answer for a such a popular question. Bit twiddling also gives 5 bytes.</p>
<pre><code>bṘȧ1ḟ # This comment line needs some love
b     # Convert to binary
 Ṙ    # Reverse
  ȧ   # Absolute value of each element in the list. This is to handle negative numbers correctly
   1ḟ # First index of 1
</code></pre>
"
"247894","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 4 bytes</h1>
<pre><code>ÞFḟ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55G4bif4oC6IiwiIiwiMFxuMVxuMVxuMlxuM1xuNVxuOFxuMTNcbjIxXG4zNFxuNTVcbjg5XG4xNDRcbjIzM1xuMzc3XG42MTBcbjk4N1xuMTU5N1xuMjU4NFxuNDE4MVxuNjc2NVxuMTA5NDZcbjE3NzExXG4yODY1N1xuNDYzNjhcbjc1MDI1XG4xMjEzOTNcbjE5NjQxOFxuMzE3ODExXG41MTQyMjlcbjgzMjA0MFxuMTM0NjI2OVxuMjE3ODMwOVxuMzUyNDU3OFxuNTcwMjg4N1xuOTIyNzQ2NVxuMTQ5MzAzNTJcbjI0MTU3ODE3XG4zOTA4ODE2OVxuNjMyNDU5ODZcbjEwMjMzNDE1NVxuMTY1NTgwMTQxXG4yNjc5MTQyOTZcbjQzMzQ5NDQzN1xuNzAxNDA4NzMzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to Deadcode</p>
<p>1 byte longer than it should be just because Vyxal's &quot;Fibonacci sequence&quot; builtin does not start with 0.</p>
"
"247898","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ka:ż6+kiḭṪ9JṅĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYTrFvDYra2nhuK3huao5SuG5hcS/IiwiIiwiMDEyMzQ1Njc4OS1hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ka:ż6+kiḭṪ9JṅĿ
ka:            # Push the alphabet twice
   ż           # Length range: [1..26]
    6+         # Add 6: [7..32]
      kiḭ      # Floor divide by pi: [2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,9,9,9,10]
         Ṫ9J   # Remove the last item and append 10
            ṅ  # Join by nothing to make a string
             Ŀ # Transliterate the input from the alphabet to this
</code></pre>
"
"247902","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>40</s> 37 bytes</h1>
<pre><code>⇧\_*\|?꘍Ǐ?8*Ḋ\_Ḟ\\?›꘍¦Ṙ1‡\-Ḟ¨M÷_\vWøṗ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6dcXF8qXFx8P+qYjcePPzgq4biKXFxf4bieXFxcXD/igLrqmI3CpuG5mDHigKFcXC3huJ7CqE3Dt19cXHZXw7jhuZciLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>⇧\_*\|?꘍Ǐ?8*Ḋ\_Ḟ\\?›꘍¦Ṙ1w‡\-Ḟ¨M÷_\vWøṗ
⇧                                       # Push input + 2
 \_*                                    # Push that many underscores
    \|                                  # Push &quot;|&quot;
      ?꘍                                # Append the input amount of spaces
        Ǐ                               # Append its own head, aka &quot;|&quot;
         ?8*                            # Push input * 8
            Ḋ                           # Duplicate the string that many times
             \_Ḟ                        # On the top string, replace all spaces with &quot;_&quot;
                \\                      # Push a backslash
                  ?›꘍                   # Append input+1 spaces
                     ¦                  # Pop and push its prefixes
                      Ṙ                 # Reverse
                       1‡\-Ḟ¨M          # On the second string, replace all spaces with a hyphen
                              ÷_        # Push each item of that to the stack, and discard the top one (a backslash)
                                \v      # Push &quot;v&quot;
                                  W     # Wrap everything on the stack into a list
                                   øṗ   # Palindromise everything, center, and join by newlines
</code></pre>
<p><em>-2 bytes thanks to emanresu A</em></p>
"
"247906","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes</h1>
<pre><code>`\||`∞*` ^ /`p`/ v`JṄ5ẇ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgXFx8fGDiiJ4qYCBeIC9gcGAvIHZgSuG5hDXhuofigYsiLCIiLCIxMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247937","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>20₁ṡµ⁰$/:1%$∷1=+∑;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyMOKCgeG5ocK14oGwJC86MSUk4oi3MT0r4oiRO2giLCIiLCJbMTAwLCAzMDAsIDcwMCwgMTM0MF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-2 bytes thanks to emanresu A, and another -3 by porting 05AB1E</em></p>
"
"247938","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 64 bytes</h1>
<pre><code>‛()6*15∆Iṅ\.1Ṁ½÷$‛|\p$`|:\\`p&quot;43∆I16ȯ7ɾṘẇvṅ‛\:mvp‛\_mJJ\|vJJ12↳⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJsoKTYqMTXiiIZJ4bmFXFwuMeG5gMK9w7ck4oCbfFxccCRgfDpcXFxcYHBcIjQz4oiGSTE2yK83yb7huZjhuod24bmF4oCbXFw6bXZw4oCbXFxfbUpKXFx8dkpKMTLihrPigYsiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247954","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>∑×2460ø^↵vẋƛ∩Ṡ;føĊ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJHDlzI0NjDDuF7ihrV24bqLxpviiKnhuaA7ZsO4xIrigYsiLCIiLCJbMiwzLDRdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247960","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 32 bytes</h1>
<pre><code>\|=:∩0v€Þfꜝ$2lƛÞṡƒ&lt;T›;f2ẇvƒṡ&quot;vvL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqF2ZiIsIlxcfD064oipMHbigqzDnmbqnJ0kMmzGm8Oe4bmhxpI8VOKAujtmMuG6h3bGkuG5oVwidnZMIiwiIiwiICAgIC0tLS0tLSAgICBcbiAgICB8ICAgIHwgICAgXG4tLS0tLS0tLS0tLS0tLVxufCAgICB8fCAgfHwgIHxcbnwgICAgfC0tLS0tLS0tXG58ICAgIHx8ICAgICAgfCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<p>Port of 05AB1E ended up at same byte count: <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqEiLCLiiKk6duG5heKAmy184oKAdlbiiKlmdVPihpTijIrDnsW86pydec614oC6JGZcXHw9xKDhuaAwb1wiIiwiIiwiICAgIC0tLS0tLSAgICBcbiAgICB8ICAgIHwgICAgXG4tLS0tLS0tLS0tLS0tLVxufCAgICB8fCAgfHwgIHxcbnwgICAgfC0tLS0tLS0tXG58ICAgIHx8ICAgICAgfCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247969","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ṙ$Ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZgkxL8iLCIiLCJNbW0sIG1hcnNobWFsbG93cyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247971","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 45 bytes</h1>
<pre><code>»R√UǏ8x⟑9↓ḋSŀ«+Ġ↵‡⊍6-}h≥kẇ⊍ḣW£»`/ _\,`τ⌐øŀ⁋øM
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu1LiiJpVx484eOKfkTnihpPhuItTxYDCqyvEoOKGteKAoeKKjTYtfWjiiaVr4bqH4oqN4bijV8KjwrtgLyBfXFwsYM+E4oyQw7jFgOKBi8O4TSIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"247974","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 24 bytes</h1>
<pre><code>vh'Ḃ&quot;ƛ£¹'h¥⁼;ht;s⁰s⁼;vsU
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ2aCfhuIJcIsabwqPCuSdowqXigbw7aHQ7c+KBsHPigbw7dnNVIiwiIiwiW1tbJ1JvY2snLCdSb2NrJ10sJ1RpZSddLCBbWydSb2NrJywnUGFwZXInXSwnTG9zcyddLCBbWydSb2NrJywnU2Npc3NvcnMnXSwnV2luJ10sIFtbJ1BhcGVyJywnUm9jayddLCdXaW4nXSwgW1snUGFwZXInLCdQYXBlciddLCdUaWUnXSwgW1snUGFwZXInLCdTY2lzc29ycyddLCdMb3NzJ10sIFtbJ1NjaXNzb3JzJywnUm9jayddLCdMb3NzJ10sIFtbJ1NjaXNzb3JzJywnUGFwZXInXSwnV2luJ10sIFtbJ1NjaXNzb3JzJywnU2Npc3NvcnMnXSwnVGllJ11dXG5bJ1dpbicsICdMb3NzJ10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess.</p>
<h2>How?</h2>
<pre><code>vh'Ḃ&quot;ƛ£¹'h¥⁼;ht;s⁰s⁼;vsU
vh                       # Get the first item of each of the (implicit) first input
  '                      # Filter-keep for:
   Ḃ&quot;                    #   Pair with reverse
     ƛ                   #   For both:
      £                  #     Store in register
       ¹'                #     Filter-keep for first input:
         h¥⁼             #       Is the first item equal to the contents of the register? (non-vectorizing)
            ;            #     Close filter
             ht          #     Get the first item of the results of the filter, and get the last item of that
               ;         #   Close map
                s        #   Sort the results
                 ⁰s⁼     #   Is it equal to the first input sorted? (non-vectorizing)
                    ;    # Close filter
                     vs  # Sort each
                       U # Uniquify
</code></pre>
"
"247990","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>⌈ƛḣǔp;Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIjGm+G4o8eUcDvhuYQiLCIiLCJTd2FwIHRoZSBmaXJzdCBhbmQgbGFzdCBsZXR0ZXJzIG9mIGVhY2ggd29yZCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌈     Ṅ # To the words split on spaces...
 ƛ   ;  # Over each
  ḣ     # Take the first character and the rest
   ǔ    # Rotate the rest
    p   # Append the first char
</code></pre>
"
"247991","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Ṙ⋎
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZjii44iLCIiLCJyYWNlYyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> ⋎ # Merge on longest prefix/suffix with...
Ṙ  # Input reversed
</code></pre>
"
"248011","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 56 bytes</h1>
<pre><code>5&lt;[ɾ|Ṅµ1k½d⁰LǔJ3Jvḟs;tṘ¨2›:£`e&amp;a`fJ¥:\&amp;&quot;¥«cb|«&quot;ṄWḣi;]fṄ₴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiNTxbyb584bmEwrUxa8K9ZOKBsEzHlEozSnbhuJ9zO3ThuZjCqDLigLo6wqNgZSZhYGZKwqU6XFwmXCLCpcKrY2J8wqtcIuG5hFfhuKNpO11m4bmE4oK0IiwiIiwiMTZcbjI5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E. Quite slow.</p>
"
"248046","<h1>11. Neutrino, 144 bytes</h1>
<pre><code>4+0#  @ iiiiiiiiio
print(8-(2*5-3)+(1/2)*10+8-4*(2147483647*2%3))#+++++P #++++++++++++++++++++++++++++++++++++++++++++++++++.
0+0#  ^
-1*-10+4_3
</code></pre>
<p>Try it online in <a href=""https://tio.run/##KypNqvz/30TbQFlBwUEhEwbyuQqKMvNKNCx0NYy0THWNNbU1DPWNNLUMDbQtdE20NIwMTcxNLIzNTMy1jFSNNTWVtUEgQAFCkwT0uAzAtsdx6Rpq6QItMIk3/v8fAA"" rel=""nofollow noreferrer"">Ruby</a>, <a href=""https://tio.run/##y0rNyan8/99E20BZQcFBIRMG8rkKijLzSjQsdDWMtEx1jTW1NQz1jTS1DA20LXRNtDSMDE3MTSyMzUzMtYxUjTU1lbVBIEABQpME9LgMwLbHcekaaukCLTCJN/7/HwA"" rel=""nofollow noreferrer"">Jelly</a>, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI0KzAjICBAIGlpaWlpaWlpaW9cbnByaW50KDgtKDIqNS0zKSsoMS8yKSoxMCs4LTQqKDIxNDc0ODM2NDcqMiUzKSkjKysrKytQICMrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKy5cbjArMCMgIF5cbi0xKi0xMCs0XzMiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://dso.surge.sh/#@WyJyYWlzaW4tYmF0d2FmZmxlIixudWxsLCI0KzAjICBAIGlpaWlpaWlpaW9cbnByaW50KDgtKDIqNS0zKSsoMS8yKSoxMCs4LTQqKDIxNDc0ODM2NDcqMiUzKSkjKysrKytQICMrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKy5cbjArMCMgIF5cbi0xKi0xMCs0XzMiLCIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">rSNBATWPL</a>, <a href=""https://dso.surge.sh/#@WyJoZWFkYXNzIixudWxsLCI0KzAjICBAIGlpaWlpaWlpaW9cbnByaW50KDgtKDIqNS0zKSsoMS8yKSoxMCs4LTQqKDIxNDc0ODM2NDcqMiUzKSkjKysrKytQICMrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKy5cbjArMCMgIF5cbi0xKi0xMCs0XzMiLCIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Headass</a>, <a href=""https://tio.run/##K6gsycjPM/7/30TbQFlBwUEhEwbyuQqKMvNKNCx0NYy0THWNNbU1DPWNNLUMDbQtdE20NIwMTcxNLIzNTMy1jFSNNTWVtUEgQAFCkwT0uAzAtsdx6Rpq6QItMIkHuggA"" rel=""nofollow noreferrer"">Python 3</a>, <a href=""https://tio.run/##SypKzMxLK03O/v/fRNtAWUHBQSETBvK5Cooy80o0LHQ1jLRMdY01tTUM9Y00tQwNtC10TbQ0jAxNzE0sjM1MzLWMVI01NZW1QSBAAUKTBPS4DMC2x3HpGmrpAi0wiTf@/x8A"" rel=""nofollow noreferrer"">brainfuck</a>, <a href=""https://tio.run/##KyrNy0z@/99E20BZQcFBIRMG8rkKijLzSjQsdDWMtEx1jTW1NQz1jTS1DA20LXRNtDSMDE3MTSyMzUzMtYxUjTU1lbVBIEABQpME9LgMwLbHcekaaukCLTCJN/7/HwA"" rel=""nofollow noreferrer"">Runic Enchantments</a>, <a href=""https://tio.run/##S0lNTEnLLM7Q/f/fRNtAWUHBQSETBvK5Cooy80o0LHQ1jLRMdY01tTUM9Y00tQwNtC10TbQ0jAxNzE0sjM1MzLWMVI01NZW1QSBAAUKTBPS4DMC2x3HpGmrpAi0wiTf@/x8A"" rel=""nofollow noreferrer"">Deadfish~</a>. <a href=""https://dso.surge.sh/#@WyJmaXNocTkrIixudWxsLCI0KzAjICBAIGlpaWlpaWlpaW9cbnByaW50KDgtKDIqNS0zKSsoMS8yKSoxMCs4LTQqKDIxNDc0ODM2NDcqMiUzKSkjKysrKytQICMrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKy5cbjArMCMgIF5cbi0xKi0xMCs0XzMiLCIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">FISHQ9+</a>. I created this interpreter to make testing easier for others, but it also works with the Kotlin implementation that pxeger's answer works with.</p>
<p>Pxeger's post was (not intentionally) in <a href=""https://esolangs.org/wiki/FISHQ9%2B"" rel=""nofollow noreferrer"">FISHQ9+</a>, using the kotlin interpreter <code>.jar</code> file supplied on the esolangs page, run with <code>java -jar</code>. When running the REPL and entering the code:</p>
<pre><code>######@######## downloads % java -jar FISHQ9P.jar
&gt;&gt; 4+0#  @ iiiiiiiiio
print(8-(2*5-3)+(1/2)*10+8-4*(2147483647*2%3))#+++++P #++++++++++++++++++++++++++++++++++++++++++++++++++.
0+0#  ^
5_310
</code></pre>
<p>It prints 10 (without a leading newline) after the code. To avoid making testing hell for everyone in future, I will shortly be adding a FISHQ9+ interpreter to DSO.</p>
<p>This works because the <code>iiiiiiiiio</code> from answer #9 prints 9, but FISHQ9+ merges HQ9+'s <code>+</code> command in which increments it one more time to 10 before printing. Nothing else is printed.</p>
"
"248051","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>µ⁰₍&lt;%;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCteKBsOKCjTwlO2giLCIiLCJbNCw2LDgsMTAsMTIsMjBdXG41Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>µ⁰₍&lt;%;h
µ    ;  # Sort by:
 ⁰      #   Push second input
  ₍     #   Apply both of the next two commands, and wrap the results into a list:
   &lt;    #     Less than...
    %   #     And modulo
        #   This would produce [a &lt; b, a % b], where a is the current item and b is the second input.
      h # First element (this is acting as a minimum-by)
</code></pre>
"
"248052","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 45 bytes</h1>
<pre><code>Ṫλ&amp;›`dtSZ`$c¬¥*;Ḋ2l:hhp'ɽkv\@J$vcṅ⌊1=;tfṅĠvhṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsIuG5qs67JuKAumBkdFNaYCRjwqzCpSo74biKMmw6aGhwJ8m9a3ZcXEBKJHZj4bmF4oyKMT07dGbhuYXEoHZo4bmFIiwiO1rGm2AgPT4gYGo74oGLIiwiW1wibmE0aVwiLCBcIm1PT1wiLCBcInR1TkBuZFppXCIsIFwiaWxhYVwiLCBcInBhdGFsYVwiLCBcInhhbWRhdHRhXCIsIFwiQEBrdEBcIiwgXCJpc2FhcHR1XCIsIFwiZFpha3B1XCIsIFwiYml0U2l4QFwiLCBcInhhaXdhZGRhYVwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
"
"248053","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>2lƛ∑n3vḋ∩vƒ-vṅv∨½p;f~¨=⌊U⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIybMab4oiRbjN24biL4oipdsaSLXbhuYV24oiowr1wO2Z+wqg94oyKVeKBvCIsIiIsIlsyLCA5LCA0LCAzLCA4LCAxLCA2LCA3LCA1XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
"
"248054","<h1>12. <a href=""https://github.com/dloscutoff/esolangs/tree/master/BitCycle"" rel=""nofollow noreferrer"">BitCycle</a>, 170 bytes, cracked by Dingus</h1>
<pre><code>4+0#a /z@ iiiiiiiiio
print(8-(2*5-3)+(1/2)*10+1+1+1+1+1+1+1+1+1+1+1-1-1-1-1-1-1-1-1-1-1-1)#!+++++P #++++++++++++++++++++++++++++++++++++++++++++++++++.
0+0#a ^
-1*-10+4_3
</code></pre>
<p>Try It Online in <a href=""https://tio.run/##KypNqvz/30TbQDlRQb/KQSETBvK5Cooy80o0LHQ1jLRMdY01tTUM9Y00tQwNtA2xQV2sUFNZURsEAhSUtUkGelwGYHfFcekaaukCLTaJN/7/HwA"" rel=""nofollow noreferrer"">Ruby</a>, <a href=""https://tio.run/##y0rNyan8/99E20A5UUG/ykEhEwbyuQqKMvNKNCx0NYy0THWNNbU1DPWNNLUMDbQNsUFdrFBTWVEbBAIUlLVJBnpcBmB3xXHpGmrpAi02iTf@/x8A"" rel=""nofollow noreferrer"">Jelly</a>, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI0KzAjYSAvekAgaWlpaWlpaWlpb1xucHJpbnQoOC0oMio1LTMpKygxLzIpKjEwKzErMSsxKzErMSsxKzErMSsxKzErMS0xLTEtMS0xLTEtMS0xLTEtMS0xLTEpIyErKysrK1AgIysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLlxuMCswI2EgXlxuLTEqLTEwKzRfMyIsIiIsIiJd"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://dso.surge.sh/#@WyJyYWlzaW4tYmF0d2FmZmxlIixudWxsLCI0KzAjYSAvekAgaWlpaWlpaWlpb1xucHJpbnQoOC0oMio1LTMpKygxLzIpKjEwKzErMSsxKzErMSsxKzErMSsxKzErMS0xLTEtMS0xLTEtMS0xLTEtMS0xLTEpIyErKysrK1AgIysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLlxuMCswI2EgXlxuLTEqLTEwKzRfMyIsIiIsIiIsIiJd"" rel=""nofollow noreferrer"">rSNBATWPL</a>, <a href=""https://dso.surge.sh/#@WyJoZWFkYXNzIixudWxsLCI0KzAjYSAvekAgaWlpaWlpaWlpb1xucHJpbnQoOC0oMio1LTMpKygxLzIpKjEwKzErMSsxKzErMSsxKzErMSsxKzErMS0xLTEtMS0xLTEtMS0xLTEtMS0xLTEpIyErKysrK1AgIysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLlxuMCswI2EgXlxuLTEqLTEwKzRfMyIsIiIsIiIsIiJd"" rel=""nofollow noreferrer"">Headass</a>, <a href=""https://tio.run/##K6gsycjPM/7/30TbQDlRQb/KQSETBvK5Cooy80o0LHQ1jLRMdY01tTUM9Y00tQwNtA2xQV2sUFNZURsEAhSUtUkGelwGYHfFcekaaukCLTaJB7oVAA"" rel=""nofollow noreferrer"">Python 3</a>, <a href=""https://tio.run/##SypKzMxLK03O/v/fRNtAOVFBv8pBIRMG8rkKijLzSjQsdDWMtEx1jTW1NQz1jTS1DA20DbFBXaxQU1lRGwQCFJS1SQZ6XAZgd8Vx6Rpq6QItNok3/v8fAA"" rel=""nofollow noreferrer"">Brainfuck</a>, <a href=""https://tio.run/##KyrNy0z@/99E20A5UUG/ykEhEwbyuQqKMvNKNCx0NYy0THWNNbU1DPWNNLUMDbQNsUFdrFBTWVEbBAIUlLVJBnpcBmB3xXHpGmrpAi02iTf@/x8A"" rel=""nofollow noreferrer"">Runic Enchantments</a>, <a href=""https://tio.run/##S0lNTEnLLM7Q/f/fRNtAOVFBv8pBIRMG8rkKijLzSjQsdDWMtEx1jTW1NQz1jTS1DA20DbFBXaxQU1lRGwQCFJS1SQZ6XAZgd8Vx6Rpq6QItNok3/v8fAA"" rel=""nofollow noreferrer"">Deadfish~</a>, <a href=""https://dso.surge.sh/#@WyJmaXNocTkrIixudWxsLCI0KzAjYSAvekAgaWlpaWlpaWlpb1xucHJpbnQoOC0oMio1LTMpKygxLzIpKjEwKzErMSsxKzErMSsxKzErMSsxKzErMS0xLTEtMS0xLTEtMS0xLTEtMS0xLTEpIyErKysrK1AgIysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLlxuMCswI2EgXlxuLTEqLTEwKzRfMyIsIiIsIiIsIiJd"" rel=""nofollow noreferrer"">FishHQ9+</a>, <a href=""https://tio.run/##y0stLSnKzMv//99E20A5UUG/ykEhEwbyuQqAciUaFroaRlqmusaa2hqG@kaaWoYG2obYoC5WqKmsqA0CAQrK2iQDPS4DsLviuHQNtXSBFpvEG///DwA"" rel=""nofollow noreferrer"">Neutrino</a></p>
<p>The code is ran under the <code>-u</code> flag. Very easy, definitely gonna get cracked within a few minutes.</p>
"
"248068","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>×3ʀd⁰ɽ∆f›ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDlzPKgGTigbDJveKIhmbigLrDuOKIpyIsIiIsIjciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 byte thanks to emanresu A</em></p>
"
"248069","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 88 bytes</h1>
<pre><code>`Pov:
`»ẆḞẏǒ×Ȯ&lt;§Jṙ¾»»ƛḂ}Ṁ≥⌐$ǍJ₄p∞wj»₁dτCτ6/»⋏∑ṗ»51τ₀*≬⁰L&gt;ḟuJhiøM3`λ• ßµ `꘍?L` on ¬⋎»₅`Wṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgUG92OlxuYMK74bqG4bie4bqPx5LDl8iuPMKnSuG5mcK+wrvCu8ab4biCfeG5gOKJpeKMkCTHjUrigoRw4oied2rCu+KCgWTPhEPPhDYvwrvii4/iiJHhuZfCuzUxz4TigoAq4oms4oGwTD7huJ91Smhpw7hNM2DOu+KAoiDDn8K1IGDqmI0/TGAgb24gwqzii47Cu+KChWBX4bmFIiwiIiwiXCJgUG92OlxcbmDCu+G6huG4nuG6j8eSw5fIrjzCp0rhuZnCvsK7wrvGm+G4gn3huYDiiaXijJAkx41K4oKEcOKInndqwrvigoFkz4RDz4Q2L8K74ouP4oiR4bmXwrs1Mc+E4oKAKuKJrOKBsEw+4bifdUpoacO4TTNgzrvigKIgw5/CtSBg6piNP0xgIG9uIMKs4ouOwrvigoVgV+G5hVwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248077","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>ka«ƛG₈₀2ǔvȯF±ɾF)ǍrT«ĿṘ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYcKrxptH4oKI4oKAMseUdsivRsKxyb5GKceNclTCq8S/4bmY4oG8IiwiIiwicWxwb2RsYiJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqE6xpsiLCJrYcKrxptH4oKI4oKAMseUdsivRsKxyb5GKceNclTCq8S/4bmY4oG8IiwiO1rGm2AgPT4gYGo74oGLIiwidGhpc1xuYW5vdGhlclxubGxsXG5sb2xcbmRhZFxuZGFiXG5kYXBcbndvd1xub29pXG5sb2xscG9wZG9kbGxvbCJd"" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<h2>How?</h2>
<pre><code>ka«×¢₇}Ẇ₇]↲βjEβ&amp;ɾṗµ«ĿṘ⁼
ka                      # Push the lowercase alphabet
  «×¢₇}Ẇ₇]↲βjEβ&amp;ɾṗµ«    # Push compressed string &quot;bqapaaaaaaalauodbasanaaxaz&quot;
                    Ŀ   # Transliterate the (implicit) input from the lowercase alphabet to that
                     Ṙ  # Reverse
                      ⁼ # Is it equal to the (implicit) input?
</code></pre>
<p>A port of Kevin's 05AB1E answer is 23 bytes as well:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>Ḃ«ƛ≠ȧ‹«:£ḂĿka¥«g₴Ṡ«JFF=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqE6xpsiLCLhuILCq8ab4omgyKfigLnCqzrCo+G4gsS/a2HCpcKrZ+KCtOG5oMKrSkZGPSIsIjtaxptgID0+IGBqO+KBiyIsInRoaXNcbmFub3RoZXJcbmxsbFxubG9sXG5kYWRcbmRhYlxuZGFwXG53b3dcbm9vaVxubG9sbHBvcGRvZGxsb2wiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248080","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>D¶?ðWṅ∞
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJEwrY/w7BX4bmF4oieIiwiIiwiYSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Using the canvas builtin is the same byte count:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>3»«₁»ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzwrvCq+KCgcK7w7jiiKciLCIiLCJhIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248106","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 41 bytes</h1>
<pre><code>k-»&gt;xWƛo4ø₅=»b7ẇ:?hiN$2ẋΠv∩vvƒ-?S2l⌊İJfvO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrLcK7PnhXxptvNMO44oKFPcK7Yjfhuoc6P2hpTiQy4bqLzqB24oipdnbGki0/UzJs4oyKxLBKZnZPIiwiIiwiMjQ2OCJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsImstwrs+eFfGm280w7jigoU9wrtiN+G6hzpuaGlOJDLhuovOoHbiiKl2dsaSLW5TMmzijIrEsEpmdk8iLCI7Wsabw7dgLCBgasO4QlwiYCBcXOKGkiBgajvigYsiLCJbMTIzLDExMSw5ODcsMjQ2OF0iXQ=="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<h2>How?</h2>
<pre><code>k-»&gt;xWƛo4ø₅=»b7ẇ:?hiN$2ẋΠv∩vvƒ-?S2l⌊İJfvO
k-                                         # Push [-1, 1] (will be used later)
  »&gt;xWƛo4ø₅=»                              # Push compressed integer 1098931065668123279355
             b                             # Convert to binary as a list
              7ẇ                           # Split into chunks of size 7
                :                          # Duplicate
                 ?h                        # Push the first digit of the input
                   i                       # Index it into the list
                    N                      # Negate: replace all 1s with -1
                     $                     # Swap so the list of size-7 chunks are at the top again
                      2ẋΠ                  # Cartesian product with self
                         v∩                # For each, transpose
                           vvƒ-            # For each inner pair, reduce by subtraction
                               ?S          # Push stringified input
                                 2l        # Get all overlapping pairs
                                   ⌊       # Convert them to integers
                                    İ      # Index these into the other list
                                     J     # Join the two lists together
                                      f    # Flatten
                                       vO  # Count the number of -1s and 1s in this list
</code></pre>
"
"248113","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ð=†∑2Oæ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDsD3igKDiiJEyT8OmIiwiIiwiW1snLycsICdvJywgJ1xcXFwnXSwgWycgJywgJy0nXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ð=†∑2Oæ
ð=†     # For each, is it not a space?
   ∑    # Sum
    2O  # Count the amount of twos
      æ # Is this a prime?
</code></pre>
"
"248117","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>›½ɾΠvg:G$ṅ/vf⌊v∞∞İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLrCvcm+zqB2ZzpHJOG5hS92ZuKMinbiiJ7iiJ7EsCIsInbhuYXigYsiLCJbNSwxM11cbi1AIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>›½ɾΠvg:G$ṅ/vf⌊v∞∞İ
›                  # Increment both of the (implicit) first input
 ½                 # Halve both
  ɾ                # Generate a [1, n] range for both
   Π               # Cartesian product of the two
    vg             # Minimum of each
      :G           # Duplicate and get the maximum
        $          # Swap
         ṅ         # Join by nothing
          /        # Split this into that many equal parts
           vf      # Convert each back to a list
             ⌊     # Convert each to an integer
              v∞   # Palindromise each
                ∞  # Palindromise the list
                 İ # Index these into the (implicit) second input
</code></pre>
"
"248121","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> 10 bytes</h1>
<pre><code>∞∞?L2460ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJ7iiJ4/TDI0NjDDuOKIpyIsIiIsIkhlbGxvLCB3b3JsZCEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-6 bytes by porting 05AB1E thanks to emanresu</p>
"
"248124","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>×» Ḣ¡»ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDl8K7IOG4osKhwrvDuOKIpyIsIiIsIjciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E. Uses canvas builtin.</p>
<h2>How?</h2>
<pre><code>×» Ḣ¡»ø∧
×        # Push asterisk
 » Ḣ¡»   # Push compressed integer 2064147 (translates to directions [→,↑,←,↓,↗,↓,↖])
      ø∧ # Canvas builtin with implicit input as the length, 2064147 as the directions, and asterisk as the character
</code></pre>
"
"248133","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>17</s> 12 bytes</h1>
<pre><code>ǎ$o~¨=⌊⌊'ʀEc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwix44kb37CqD3ijIrijIonyoBFYyIsIiIsIiczMjInIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Times out for really long numbers. Lowkey kinda cursed but that's okay with me.</p>
<h2>Explained</h2>
<pre><code>ǎ$o~¨=⌊⌊'ʀEc
ǎ$o          # All substrings of the input, with the input removed
   ~         # Keep only those that:
    ¨=       #   are invariant under:
      ⌊       #    conversion to int
       ⌊      # convert those to int
        '    # From those numbers (i.e. all substrings that don't have leading 0s), keep those where
         ʀE  #   the range 0 to that number, vectorised to the power of 2,
           c #   contains that number
</code></pre>
"
"248144","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ɾṖƛ¯±¯A;∑½⌈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuG5lsabwq/CscKvQTviiJHCveKMiCIsIiIsIjEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The <code>½⌈</code> is because of the requirement to handle reversed lists.</p>
<pre><code>ɾṖ          # Permutations of 1...n
  ƛ    ;∑   # Count where...
     ¯      # Deltas of... 
    ±       # Signs of ...
   ¯        # Deltas
      A     # Are all nonzero
         ½⌈ # Halve the final result and round up
</code></pre>
<p>The is-alternating code <code>¯±¯A</code> works because, for example with <code>[1, 6, 2, 4, 3]</code>:</p>
<pre><code>¯    # Deltas - [5, -4, 2, -1] - Signs should be alternating
 ±   # Signs - [1, -1, 1, -1] - Should be list of alternating 1s and -1s
  ¯  # Deltas - [-2, 2, -2] - If there are two consecutive equal values in ^ there should be a 0
   A # All - 1 - if and only if there's no zeroes in ^ the list is alternating.
</code></pre>
"
"248175","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>v∆F\i*∩vṄṘøɽvm‡\_ḞuV⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24oiGRlxcaSriiKl24bmE4bmYw7jJvXZt4oChXFxf4biedVbigYsiLCIiLCI4Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>v∆F\i*∩vṄṘøɽvm‡\_ḞuV⁋
v∆F                   # For each item in [1, implicit input], get the nth fibonacci number
   \i*                # For each, repeat that many &quot;i&quot;s
      ∩               # Transpose
       vṄ             # Join each by spaces
         Ṙ            # Reverse
          øɽ          # Prepend leading spaces to each to right-align it
            vm        # Mirror each
              ‡\_ḞuV  # To the last item, replace spaces with &quot;_&quot;
                    ⁋ # Join on newlines
</code></pre>
"
"248176","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>bvṅ0ðvVøɽ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiduG5hTDDsHZWw7jJvSIsIiIsIlsxNSwgNywgMTMsIDExXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>bvṅ0ðvVøɽ
b         # Get the binary representation of each as a list
 vṅ       # Join each by nothing to make them a string
   0ðvV   # Replace all zeros with a space
       øɽ # Prepend leading spaces to each to align it to the right
</code></pre>
"
"248177","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>₌₃Ė₍¨=Ṙ‡2ȯJA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigozigoPEluKCjcKoPeG5mOKAoTLIr0pBIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Flag is <code>1</code>.</p>
"
"248178","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>□⟑Ġvṅḣ$₴:Ṫ\@Ḟ$¤ptJṅ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLilqHin5HEoHbhuYXhuKMk4oK0OuG5qlxcQOG4niTCpHB0SuG5hSwiLCIiLCIgICAgICAgICAjICAgICAgICAgICAgICAgXG4gICAgICAgICAjIyAgICAgICAgICAgICAgXG4gICAgICAjICMjIyMgICAgICAgICAgICAgXG4gIyAgICMjIyMjIyMjIyAgICAgICAgICAgXG4jIyAgIyMjIyMjIyMjIyMgICAgICAgICAgXG4jIyAjIyMjIyMjIyMjIyMjICAgIyMjIyAgXG4jIyAjIyMjIyMjIyMjIyMjIyAgIyMjIyMgXG4jIyMjIyMjIyMjIyMjIyMjIyAjIyMjIyMjXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>□⟑Ġvṅḣ$₴:Ṫ\@Ḟ$¤ptJṅ,
□                    # All inputs wrapped in a list
 ⟑                   # Open an apply lambda, apply for each:
  Ġvṅ                # Group consecutive identical characters
     ḣ               # Head extract, push a[0], a[1:]
      $              # Swap
       ₴             # Print without a trailing newline
        :Ṫ           # Duplicate and remove the last item
          \@Ḟ        # Replace all spaces with &quot;@&quot;
             $       # Swap
              ¤p     # Prepend an empty string for the case that the list is empty
                t    # Last item
                 J   # Join top two things on the stack together
                  ṅ  # Join by nothing
                   , # Print with trailing newline
</code></pre>
"
"248181","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>Þżṅ:ẏ(:hnẋ₴…Ḣ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnsW84bmFOuG6jyg6aG7huovigrTigKbhuKIiLCIiLCIwMTYxNyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>Þżṅ:ẏ(:hnẋ₴…Ḣ
Þż            # Repeat each character in the (implicit) input its 1-based index amount of times
  ṅ           # Join by nothing
   :          # Duplicate
    ẏ(        # Loop over [0...length), where the current iteration = n
      :h      # Duplicate and get the first character
        nẋ    # Repeat it n amount of times
          ₴   # Print without a trailing newline
           …  # Print without popping with a trailing newline
            Ḣ # Remove the first item
</code></pre>
"
"248187","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>×*…?(Ṫn$꘍…
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDlyrigKY/KOG5qm4k6piN4oCmIiwiIiwiMTBcblswLDEsMSwwLDEsMCwxLDEsMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>×*…?(Ṫn$꘍…
×*          # Repeat an asterisk the first (implicit) input amount of times
  …         # Print without popping
   ?(       # Loop through the second input
     Ṫ      # Remove the last character of the current string
      n$꘍   # Prepend the current item amount of spaces
         …  # Print without popping
</code></pre>
"
"248220","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ǐḢ₃
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGmyIsIseQ4bii4oKDIiwiO1rGm2AgPT4gYGo74oGLIiwiWzEsMiwzLDQsNiw4LDMwLDQ5LDk1XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248223","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>‛ #3?‹eʁ3τ∷vB:v⋏†İ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJsgIzM/4oC5ZcqBM8+E4oi3dkI6duKLj+KAoMSw4oGLIiwiIiwiNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>‛ #3?‹eʁ3τ∷vB:v⋏†İ⁋
    ?‹              # Push input - 1
   3  e             # Push 3 to the power of it
       ʁ            # Get range [0, that)
        3τ          # Convert each to base 3 (ternary)
          ∷         # Modulo each by two to convert twos to zeros
           vB       # Convert each from binary to integers
             :v⋏    # Outer product bitwise AND with itself
                †   # Logical NOT for each
‛ #              İ  # Index each into &quot; #&quot;
                  ⁋ # Join each by spaces, and then join on newlines
</code></pre>
"
"248247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>×3ø^
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDlzPDuF4iLCIiLCJbMiwgMiwgMiwgMiwgNCwgNCwgNywgN10iXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Adriandmen/05AB1E"" rel=""noreferrer"">05AB1E</a>, 3 bytes</h1>
<pre><code>3$Λ
</code></pre>
<p><a href=""https://tio.run/##yy9OTMpM/f/fWOXc7P//o410FODIBIzMgSgWAA"" rel=""noreferrer"" title=""05AB1E – Try It Online"">Try it online!</a></p>
"
"248253","<h1>Languages with built-ins</h1>
<p><a href=""https://github.com/dloscutoff/hbl"" rel=""nofollow noreferrer"">HBL</a>, 0.5: <code>-</code> - <a href=""https://dloscutoff.github.io/hbl/?f=0&amp;p=LS4_&amp;a=KCgpICgxIDQgNikgKDEgKDIgNjcgKDUgNykpKSk_"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/Seggan/Fig"" rel=""nofollow noreferrer"">Fig</a>, ~0.823: <code>f</code> - <a href=""https://fig.fly.dev/#WyJmIiwiW1sxLDQsNl0sWzEsWzIsNjcsWzUsN11dXV0iXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/PyGamer0/flax"" rel=""nofollow noreferrer"">flax</a>, 1: <code>F</code> - <a href=""https://staging.ato.pxeger.com/run?1=m70kLSexYsGCpaUlaboWC92WFCclF0N5N9WjlaKjow11FEx0FMxidRRAzGgjINscSJvqKJjHgoBSLFQ9AA"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/ETHproductions/japt"" rel=""nofollow noreferrer"">Japt</a>, 1: <code>c</code> - <a href=""https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=Yw&amp;input=W1sxLCA0LCA2XSwgWzEsIFsyLCA2NywgWzUsIDddXV1d"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 1: <code>F</code> - <a href=""https://tio.run/##y0rNyan8/9/t////0dGGOgomOgpmsToKIGa0EZBtDqRNdRTMY4EAAA"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1: <code>f</code> - <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmIiwiIiwiW1sxLCA0LCA2XSwgWzEsIFsyLCA2NywgWzUsIDddXV1dIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, 1: <code>˜</code> - <a href=""https://tio.run/##yy9OTMpM/f//9Jz//6OjDXUUTHQUzGJ1FEDMaCMg2xxIm@oomMcCAQA"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/mudkip201/pyt"" rel=""nofollow noreferrer"">Pyt</a>, 1: <code>Ƒ</code> - <a href=""https://tio.run/##K6gs@f//2MT//6OjjXSMY3WijYxiYwE"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://www.jsoftware.com/#/"" rel=""nofollow noreferrer"">J</a>, 1: <code>,</code> - <a href=""https://ato.pxeger.com/run?1=m70wa8GCpaUlaboW21KTM_IVNKx1NBWMwVBFIVPPyBwiCVUDUwsA"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 2: <code>FA</code> - <a href=""https://dso.surge.sh/#@WyJwaXAiLG51bGwsIkZBIiwiWzI7WzM7WzRdXTs1XSIsIjIgMyIsIi1wIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/isaacg1/pyth"" rel=""nofollow noreferrer"">Pyth</a>, 2: <code>.n</code> - <a href=""https://tio.run/##K6gsyfj/Xy/v///o6GhDk1gdheho09hYIG0CZBrFxgIA"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://www.haskell.org/"" rel=""nofollow noreferrer"">Haskell</a> + <a href=""https://gitlab.com/WheatWizard/haskell-golfing-library"" rel=""nofollow noreferrer"">hgl</a>, 3: <code>rtc</code></p>
<p><a href=""https://github.com/ConorOBrien-Foxx/Attache"" rel=""nofollow noreferrer"">Attache</a>, 4: <code>Flat</code> - <a href=""https://tio.run/##SywpSUzOSP2fpmBl@98tJ7Hkv19qakpxtEpBQXJ6LFdAUWZeSUhqcYlzYnFqcXSajkI0l4JCdLRxrE60MZATbRYLBDogMQgJpIBMKNtQR8FER8EMJARkRhsB2eZA2lRHwRykjSs29j8A"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://github.com/Radvylf/rSNBATWPL"" rel=""nofollow noreferrer"">rSNBATWPL</a>, 5: <code>crush</code> - <a href=""https://dso.surge.sh/#@WyJyYWlzaW4tYmF0d2FmZmxlIixudWxsLCJjcnVzaCIsIiQgKCgoMSwyKSwzLCg0LDUpKSw1LCgyLDMpKSIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> (almost), 6: <code>unlist</code> -
<a href=""https://tio.run/##K/qfZvu/NC8ns7jkf5oGiNLQ1FRW0LVTiI7lggqACUMdBRMdBTNNHQUYF0wbAcXMoWxTHQVzTRCA6Ifq0FEAMqDKQCpi/wMA"" rel=""nofollow noreferrer"" title=""R – Try It Online"">Try it online!</a></p>
<p><a href=""https://clojure.org/"" rel=""nofollow noreferrer"">Clojure</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##S87JzyotSv2vUVCUmVeSk6eg8T8tJ7GkJDXvv7qGhqGCiYKZpgKQ1jBSMDNX0DBVMNcEg/8A"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://stedolan.github.io/jq/"" rel=""nofollow noreferrer"">jq</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##yyr8/z8tJ7GkJDXv///oaONYnWhjHYXoaLNYIOCKBqLoWCAfxI421FEw0VEwA/GBzGgjINscSJvqKJiDVAMA"" rel=""nofollow noreferrer"" title=""jq – Try It Online"">Try it online!</a></p>
<p><a href=""https://factorcode.org"" rel=""nofollow noreferrer"">Factor</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##S0tMLskv@h8a7OnnbqVQnFpYmpqXnFqsl5KaWqBQUJRaUlJZUJSZV6JgzcVVrVCtYKxQCyZBbDMgGwz/p@UklpSk5v3XA6qpVYDyFPTAOmrBGF3UUMEErB/EqlYwUjAzB1KmCuYwIxHK/wMA"" rel=""nofollow noreferrer"" title=""Factor – Try It Online"">Try it online!</a></p>
<p><a href=""https://www.haskell.org/"" rel=""nofollow noreferrer"">Haskell</a> + <a href=""https://hackage.haskell.org/package/free-5.1.7/docs/Control-Monad-Free.html"" rel=""nofollow noreferrer"">free</a>, 7: <code>retract</code> - <a href=""https://tio.run/##ZZHBatwwEIbvfoqB5GBDbGdbSulS@9ImEEiXUnIrIQy2ZIu1JCPJdEPaZ9@OLK26S0/W/P/MfDPjEe2eTdPxrbyCR1TDggODH6j2u6fXmVm4Kv9kZQlfGRdKOKGVhU7PgvXAjZbgRgZWL6ZjoPkaccMYSN0vE721AcesE2rwTUbnZrut6xG7PWGqMbArbYZ6Dlrty8sP1ab6WPe6s7U1Xf1FK2f0VH3TCvvqnjKq0ckp69Eh@BA4YAbQwPfFsPX5O@g5h/yUUBRZJpR1qGjY@0V1jqbj0LQpiKkF/BqZYdSFS5x9Cgw6aeCDPICKxMw9ILmhD9lNHIPEz9etlyjHn/ph9/iwuwsAf@LMMGewc7DdwrpmnCzODmW77njKSvyG@pG4GHXurmVog40W2raBaNINHDMec3GCPEKoZXmJxVDwcsY8afMoIkt6dQ2T4feVdHKup37NSZvJANQGpwkOUBHp4EkSDv/RJbFSh5eLu6e1k8/PN/cdwub//CNv4hmOEoWipF7ThWYjlIPrVP9zpWxuwq99F7/vb@DMPamf4ndz@/xcHP8C"" rel=""nofollow noreferrer"" title=""Haskell – Try It Online"">Try it online!</a></p>
<p><a href=""https://kotlinlang.org"" rel=""nofollow noreferrer"">Kotlin</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##XY5NCsIwEIX3OcUsGwgZ/F0ILjyBZ4ht0kYnP6RjQcSz1ypV0NkM7zHve3NJTD6Oo7tGCMbHSsJdDIagsTYfSjE32IN57aOrBEzzEQupfvRSwerPWivYKNhKIYXIxUemWH252pFhtlOjBESoU2PBlRSgY879DvHyfo1MbHUqLZrscUrYnvE8BOy5IX@aj3SdiGzNPsUeZ67uOJB4jOMT"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://www.wolfram.com/wolframscript/"" rel=""nofollow noreferrer"">Mathematica</a>, 7: <code>Flatten</code> - <a href=""https://tio.run/##y00syUjNTSzJTE78n2b73y0nsaQkNe9/QFFmXomCg0IaEFdXG@oomOgomNXqKICY1UZAtjmQNtVRMK8Fgv8A"" rel=""nofollow noreferrer"" title=""Wolfram Language (Mathematica) – Try It Online"">Try it online!</a></p>
<p><a href=""http://www.swi-prolog.org/"" rel=""nofollow noreferrer"">Prolog (SWI)</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##HY3BCoMwEER/ZfGU4KZQbRU8BOJXCEsOOdQiRBM00Ft@Pd04h5k3MDDxDD581fXbSjHtPKnVu5Q@hzA4y0eZ1O6i364kyFithWkXXMO5uySaHEFpyDEfDZLBxUqJRNRbpB6BaLAsBu50ZzV6IrwQhsqM1DGPnG@Ese4tn/4B"" rel=""nofollow noreferrer"" title=""Prolog (SWI) – Try It Online"">Try it online!</a></p>
<p><a href=""https://racket-lang.org/"" rel=""nofollow noreferrer"">Racket</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##K0pMzk4t@a@ck5iXrlAE5nBp/E/LSSwpSc37r66hYahgomCmqQCkNYwUzMwVNEwVzDVB4D8A"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://www.ruby-lang.org/en/"" rel=""nofollow noreferrer"">Ruby</a>, 7: <code>flatten</code> - <a href=""https://tio.run/##ZY/LDoIwFET3/YpJ2GhyQ0V8kmBi/Iymi8ojGsWSUhd8fZWGAOJs58zcueZ9bZ0LcNF5gdLoKsHN2rpJOFf1PdfZI8x0xc0X42djVMvLp7K2eLEGKQQiwpoQQ2JUkJ4gekMy67kNYUvYEcSecJCe99zMkEx5viFYwpEQrYZuzw/F9J/tA5LVUGG/E3NN19G4q2sY8mrym4j7S93on@pFtHTuAw"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><a href=""https://arturo-lang.io"" rel=""nofollow noreferrer"">Arturo</a>, 7: <code>flatten</code> - <a href=""http://arturo-lang.io/playground?I2Glkq"" rel=""nofollow noreferrer"">Try it</a></p>
<hr />
<p>Feel free to add to this community wiki. The below is a template to copy the code and links into to add to the above list.</p>
<pre><code>[&lt;language&gt;](&lt;language URL&gt;), &lt;byte-count&gt;: `&lt;code&gt;` - [Try it online!](&lt;interpreter url&gt;)
</code></pre>
"
"248283","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>ẏṗ'?ẏ⊍?$İ₌ÞS¯Ḣc;ÞgL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/huZcnP+G6j+KKjT8kxLDigozDnlPCr+G4omM7w55nTCIsIiIsIlsxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Long, clunky, and likely to be outgolfed, but it's 1:01am so whatever lol.</p>
<p>Gets all lists of indices where removing the items at those positions gives a Fibonacci list and then gets the length of the smallest indice list.</p>
"
"248318","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 36 bytes</h1>
<pre><code>`⟑↓ Tuɖ¾% {ƛḊ ß₂ %;}`₁ƛɾ\_$+\,j&quot;;v%⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJg4p+R4oaTIFR1yZbCviUge8ab4biKIMOf4oKCICU7fWDigoHGm8m+XFxfJCtcXCxqXCI7diXigYsiLCIiLCJbOSwgNywgLTEsIDYsIDUsIDIsIDExLCAxNiwgMjddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>     ₁ƛ         ;    # map 1...100 to...
       ɾ             # 1...n
        \_$+         # Prepend underscores to each
            \,j      # Join by commas
               &quot;     # Pair with n
`...`                # Compressed string `class Tuple% {public object %;}`
                 v%  # Formatted with (n, names)
                   ⁋ # Join by newlines
</code></pre>
"
"248327","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ẋfṗvṅ⌊sUi
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuotm4bmXduG5heKMinNVaSIsIiIsIjRcblsyLCAyMiwgMjIyXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the Jelly answer. Yields a list of the first N concatenated integers.</p>
<h2>Explained (outdated - will fix soon)</h2>
<pre><code>ẋfṗvṅ⌊sUi
ẋf        # Repeat the input list N times
  ṗ       # take the powerset of that list
   vṅ⌊    # Concatenate each sublist into a single integer
      sUi # and get the Nth item in the sorted uniquified list
</code></pre>
"
"248361","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 0, 4 bytes</h1>
<pre><code>kLFL
</code></pre>
<p>Yes, you heard me right. Flagless, score 0, 4 bytes.</p>
<h2>Explanation</h2>
<pre><code>kLFL
kL    Uppercase and Lowercase alphabet
  F   Filter out the input
   L  Take the length of that
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrTEZMIiwiIiwiSGVsbG8sIFdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a> |
<a href=""https://vyxal.pythonanywhere.com/#WyJsIiwiIiwia0xGIiwiIiwiSGVsbG8sIFdvcmxkISJd"" rel=""nofollow noreferrer"">3 bytes with flag</a></p>
"
"248378","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>Cʀ»ƛ⁽ṗ»*+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCJDOiIsIkPKgMK7xpvigb3huZfCuyorIiwiQ+G5hSIsIkhFTExPLCBXT1JMRCEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248389","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>U</code>, 56 bytes</h1>
<pre><code>ka`#Ẏṗ'(*¥ṫ§Ẋ⟨ẎṫẊ₅-.Ẏẏ0Ẋ¦2;Ṫ₆Ẏ↓¥ṫε&gt;?CDxẎḋE`C:70&lt;7389*+CĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJVIiwiIiwia2FgI+G6juG5lycoKsKl4bmrwqfhuorin6jhuo7huavhuorigoUtLuG6juG6jzDhuorCpjI74bmq4oKG4bqO4oaTwqXhuavOtT4/Q0R44bqO4biLRWBDOjcwPDczODkqK0PEvyIsIiIsIkhlbGxvIFdvcmxkIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of CJam.</p>
<h2>How?</h2>
<pre><code>ka`#Ẏṗ'(*¥ṫ§Ẋ⟨ẎṫẊ₅-.Ẏẏ0Ẋ¦2;Ṫ₆Ẏ↓¥ṫε&gt;?CDxẎḋE`C:70&lt;7389*+CĿ
ka                                         # Push the lowercase alphabet
  `#Ẏṗ'(*¥ṫ§Ẋ⟨ẎṫẊ₅-.Ẏẏ0Ẋ¦2;Ṫ₆Ẏ↓¥ṫε&gt;?CDxẎḋE` # Push string &quot;#ʙ'(*ꜰɢʜɪ-.ʟ0ɴ2;ǫʀꜱ&gt;?CDxʏE&quot;
                             C             # Convert to character codes: [35, 665, 39, 40, 42, 42800, 610, 668, 618, 45, 46, 671, 48, 628, 50, 59, 491, 640, 42801, 62, 63, 67, 68, 120, 655, 69]
                              :            # Duplicate
                               70&lt;         # For each, is it less than 70?
                                  7389*    # Multiply by 7389
                                       +   # Add
                                        C  # Convert from character codes
                                         Ŀ # Transliterate the implicit input from the lowercase alphabet to this
</code></pre>
<p>Previous answer:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 61 bytes</h2>
<pre><code>ka»7ȧ∵ẋǍ}Żq(ṗ⌐&gt;⁋8≤M?↵:‡⌊&amp;fǍ≈⁋D5£ɾ|øP₂@ġĿ≤ǔxτ¶_ṙɾ|ȧ.,=»»₃↲»τCĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYcK7N8in4oi14bqLx419xbtxKOG5l+KMkD7igYs44omkTT/ihrU64oCh4oyKJmbHjeKJiOKBi0Q1wqPJvnzDuFDigoJAxKHEv+KJpMeUeM+EwrZf4bmZyb58yKcuLD3Cu8K74oKD4oaywrvPhEPEvyIsIiIsIkhlbGxvIFdvcmxkIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ka»7ȧ∵ẋǍ}Żq(ṗ⌐&gt;⁋8≤M?↵:‡⌊&amp;fǍ≈⁋D5£ɾ|øP₂@ġĿ≤ǔxτ¶_ṙɾ|ȧ.,=»»₃↲»τCĿ
ka                                                            # Push the lowercase alphabet
  »7ȧ∵ẋǍ}Żq(ṗ⌐&gt;⁋8≤M?↵:‡⌊&amp;fǍ≈⁋D5£ɾ|øP₂@ġĿ≤ǔxτ¶_ṙɾ|ȧ.,=»         # Push compressed integer 454193002670633612531343815167055208136573147142298478503419521655224802790872780438775790455172058745698867697958481400
                                                     »₃↲»     # Push compressed integer 42802
                                                         τ    # Convert the big integer to that custom base as a list: [7424, 665, 7428, 7429, 7431, 42800, 610, 668, 618, 7434, 7435, 671, 7437, 628, 7439, 7448, 491, 640, 42801, 7451, 7452, 7456, 7457, 120, 655, 7458]
                                                          C   # Convert it from character codes to characters
                                                           Ŀ  # Transliterate the implicit input from the lowercase alphabet to that
</code></pre>
"
"248410","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ż*∑d?∑Ḋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqE6xpsiLCLFvCriiJFkP+KIkeG4iiIsIjtaxpvDtyRgLCBgasO4QlwiYCA8PSBgajvigYsiLCJbMSwgMF1cblszLCAxLCA1LCA3XVxuWzYsIDMsIDFdXG5bMTAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCA1XVxuWzEwLCA0LCAzLCAwLCAyLCAwLCA1XVxuWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXVxuWzcsIDcsIDcsIDddXG5bMSwgMl1cblszLCA2LCA1LCAxLCAxMl1cblswLCAwLCAyLCAwLCAxLCAwXVxuWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldXG5bNiwgMywgMiwgNCwgMCwgMSwgMiwgM11cbls0LCAwLCAwLCAyLCAzLCA1LCAyLCAwLCAxLCAyLCAzLCAwLCAwLCAxLCAyLCA0LCAzLCAxLCAzLCAwLCAwLCAyXVxuWzEwMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ż*∑d?∑Ḋ
ż*      # Multiply each by its 1-based index
  ∑     # Sum this
   d    # Double
      Ḋ # Is it divisible by...
    ?∑  # ...the sum of the input?
</code></pre>
"
"248411","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>YIṠ≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqE6xpsiLCJZSeG5oOKJiCIsIjskWsabYCA8PSBgajvigYsiLCIxXG42XG4xMVxuMTQxXG4xMjIxXG4yMzI4MTQ1Mzc5NjAwNDQxNFxuNTIzNDI4MTIxNjU2NjY2NjU1NjU1NTU2NjU1NjU2NTAyODA5NzQ1MjQ5NTUyNDY2MzM5MDg5NzAyMzYxNzE2NDc3OTgzNjEwNzU0OTY2ODg1MTI4MDQxOTc1NDA2MDA1MDg4XG4xMFxuMTJcbjExMFxuMTU0MjFcbjUyMzQwOTUxMjM1MDgzMjFcbjYyNDA5MTEzMTQzOTkwNzI0NTk0OTM3NjU2NjExOTEwNTg2MTM0OTE4NjMxNDQxNTIzNTIyNjI4OTczNTE5ODgyNTA0MzExNDA1NDY2NjAwMzU2NDg3OTUzMTY3NDAyMTI0NTQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Beats all other answers.</p>
<h2>How?</h2>
<pre><code>YIṠ≈
Y     # Interleave the input with itself, giving a list with each digit duplicated
 I    # Split into two halves
  Ṡ   # Sum each
   ≈  # Is this list all equal?
</code></pre>
<h1><a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, 6 bytes</h1>
<pre><code>.ι2äOË
</code></pre>
<p><a href=""https://tio.run/##yy9OTMpM/f9f79xOo8NL/A93//9vaGRkCAA"" rel=""nofollow noreferrer"" title=""05AB1E – Try It Online"">Try it online!</a></p>
<p>Same concept.</p>
"
"248426","<h1><a href=""https://www.python.org"" rel=""nofollow noreferrer"">Python</a>, 93 bytes</h1>
<pre>lambda s,t=&#39;the&#39;,r=&#39; (&#39;,w=&#39; &#39;:(p:=s.replace(w+t+w,r+t+w).replace(t+r+t,t+w+t))+p.count(r)*&#39;)&#39;</pre>
<p><a href=""https://ato.pxeger.com/run?1=dVFLDoIwEI1bT9HERTu2sjYkvYkuEEFIUJpSQjyLGxKjd9J7uLeET9pSuujnzXvzZqaPt7irrLy1z5QfXrVKd_vPsYiup3OEKqY4VlmCmeQYEcwafeCQiJBXgUxEEcUJaaiiDZPdDhOoqAaYhqgCoCKIy_qmiIQtBtybfFc_IXMNpqSzQCK_YADkrg2aouuJr18oK5f4Y9Tmd1k8moFPhjD4Vcip0FH1F42AqV_QGl1ZUo-zp2bT2VPzCHumOXjOp2mgrqutWXQduszl3FdnsKP977dtf_4B"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 31 bytes</h1>
<pre><code>⌈D‛λλÞIf$L‹o:›Fꜝλ\(p;VṄ:\(O\)*J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIhE4oCbzrvOu8OeSWYkTOKAuW864oC6Ruqcnc67XFwocDtW4bmEOlxcKE9cXCkqSiIsIiIsInRoZSB0aGUgcGlnIHRoZSB0aGUgaG9nIHRoZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Charcoal answer.</p>
"
"248435","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 11 bytes</h1>
<pre><code>≬bøṖ'ĠÞgḢ;ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaxiw7jhuZYnxKDDnmfhuKI7yK8iLCIiLCIzMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<p>4 months later, -1 byte thanks to emanresu A</p>
"
"248438","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>%›*‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIl4oC6KuKAuSIsIiIsIjNcbjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248455","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<p>or 12</p>
<pre><code>¾?(ṗ
</code></pre>
<h2>Explanation</h2>
<pre><code>¾?(ṗ
¾     Global array, empty at the start
 ?    Get input n
  (   Start loop n times
   ṗ  Powerset
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCvj8o4bmXIiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>12 bytes with the curly braces formatting:</h2>
<p>(thanks to <a href=""https://codegolf.stackexchange.com/users/78850/lyxal"">@lyxal</a>)</p>
<pre><code>¾?(ṗ)S¾S‛{}Ŀ
</code></pre>
<pre><code>¾?(ṗ)S¾S‛{}Ŀ
¾?(ṗ)          The boring stuff
     S         Stringify the power-setted list
      ¾        Empty list -&gt; `[]`
       ‛{}     Curly braces
          Ŀ    Transliterate, replace `[]` with the curly braces
</code></pre>
<p>The <code>P</code> prints the list with its python representation.
<a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiwr4/KOG5lylTwr5T4oCbe33EvyIsIiIsIjMiXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
"
"248463","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>⁽₍LN∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb3igo1MTuKItSIsIiIsIlszNDUxLCAyOTgyMCwgMjk4MywgMTIyMywgMTMzN10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>⁽₍LN∵
⁽     # Next element as a lambda:
 ₍    #  Apply both of the next two elements and wrap the results in a list:
  L   #   Length...
   N  #   ...and negate
    ∵ # Get the minimum of the input by that function
</code></pre>
"
"248468","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>τ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLPhCIsIiIsIlwiOlxcbi5fPSApKCxcIlxuMzQ0NjUwMzI2NTY0NTM4MTAxNTQxMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, 3 bytes</h1>
<pre><code>ÅвJ
</code></pre>
<p><a href=""https://tio.run/##yy9OTMpM/f//cOuFTV7//yspKVlx6cXbKmhq6ADZXMYmJmamBsZGZqZmJqbGFoYGhqYmhkYA"" rel=""nofollow noreferrer"" title=""05AB1E – Try It Online"">Try it online!</a></p>
"
"248480","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ḋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuIoiLCIiLCIzXG45Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248481","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>₁²½ƛ?8&quot;¦23f/›ḊkF½*∑n?τ$∨;⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwi4oKBwrLCvcabPzhcIsKmMjNmL+KAuuG4imtGwr0q4oiRbj/PhCTiiKg74oGLIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248501","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ɽ:Ṗv¦⁰%vs^O
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvTrhuZZ2wqbigbAldnNeTyIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ɽ:Ṗv¦⁰%vs^O
ɽ           # exclusive range from 0; range(1, N)
 :          # duplicate top of stack
  Ṗ         # get permutations
   v¦       # vectorized cumulative sum
     ⁰      # push N to top of stack
      %     # modulo (vectorizes)
       vs   # vectorized sort
         ^  # flip stack (so range(1, N) is now on top)
          O # count number of instances
</code></pre>
"
"248508","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>28</s> 27 bytes</h1>
<pre><code>⇧Þ□λ÷N^›WDṘ²+^∑1&lt;i;ÞZÞḋIRfi
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6fDnuKWoc67w7dOXuKAuldE4bmYwrIrXuKIkTE8aTvDnlrDnuG4i0lSZmkiLCIiLCIyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Based on <a href=""https://codegolf.stackexchange.com/users/58563/arnauld"">@Arnauld</a>'s <a href=""https://codegolf.stackexchange.com/a/247864/103205"">Javascript answer</a>.</p>
<p>–1 per <a href=""https://codegolf.stackexchange.com/users/100664/emanresu-a"">@emanresu A</a>.</p>
<h2>How?</h2>
<pre><code>λ÷N^›WDṘ²+^∑1&lt;i; # find the (i, j)th entry of the matrix
λ              ; # lambda           STACK (top -&gt;)
 ÷               # unwrap           i j
  N              # negate           i -j
   ^             # reverse stack    -j i
    ›            # increment        -j i+1
     W           # wrap             [i+1,-j]
                 #                = [N,-T] (using Arnaud's notation)
      D          # triplicate       [N,-T] [N,-T] [N,-T]
       Ṙ         # reverse          [N,-T] [N,-T] [-T,N]
        ²        # square           [N,-T] [N,-T] [T^2,N^2]
         +       # sum              [N,-T] [T^2+N,N^2-T]
          ^      # reverse stack    [T^2+N,N^2-T] [N,-T]
           ∑     # sum              [T^2+N,N^2-T] N-T
            1&lt;   # is &lt; 1?          [T^2+N,N^2-T] (1 if N-T&lt;1 else 0)
                 #                = [T^2+N,N^2-T] (1 if T&gt;=N else 0)
              i  # index            N^2-T if T&gt;=N else T^2+N

⇧Þ□λ÷N^›WDṘ²+^∑1&lt;i;ÞZ # make the matrix
⇧                     # double increment, pushing N+2
 Þ□                   # (Nx2)x(Nx2) identity matrix
   λ÷N^›WDṘ²+^∑1&lt;i;   # (above function)
                   ÞZ # fill by coordinates, i.e. replace each entry
                      # of the matrix with the result of calling the
                      # function on the entry's list of coordinates

ÞḋIRfi # output              example (3x3 matrix)
Þḋ     # antidiagonals       [[5,3,9],[2,4],[1],[7],[6,8]]
  I    # into two pieces     [ [[5,3,9],[2,4],[1]] , [[7],[6,8]] ]
   R   # vectorized reverse  [ [[1],[2,4],[5,3,9]] , [[6,8],[7]] ]
    f  # flatten             [1,2,4,5,3,9,6,8,7]
     i # index by input
</code></pre>
"
"248526","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<p>Returns <code>0</code> for valid or <code>1</code> for invalid.</p>
<pre><code>\ioC¨pλ꘍∑8%7%;a
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXGlvQ8KocM676piN4oiROCU3JTthIiwiIiwiZWllaW8iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This currently fails for the case <code>iiiiiii</code> <a href=""https://github.com/Vyxal/Vyxal/issues/1095"" rel=""nofollow noreferrer"">due to a bug</a>, but it should work after that gets fixed.</p>
<h2>How?</h2>
<p>Ignoring <code>i</code>s, the digit sum of the xor of pairwise codepoints is good if it's one of <code>0</code>, <code>7</code>, or <code>8</code>.</p>
<pre><code>   O  U  a  e  o  u
O  0  8 10  6  5 13
U  8  0  7 12 13  5
a 10  7  0  4  5  2
e  6 12  4  0  1  7
o  5 13  5  1  0  8
u 13  5  2  7  8  0
</code></pre>
<pre><code>\ioC¨pλ꘍∑8%7%;a
\i              # literal i
  o             # remove is
   C            # to codepoints
    ¨pλ      ;  # pairwise map
       ꘍        # xor
        ∑       # digit sum
         %8     # mod 8
           %7   # mod 7
              a # are any truthy?
</code></pre>
"
"248529","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 74 bytes</h1>
<pre><code>`J½Ḣ Π Π.`¹ċ[Ṫ£234¹tc¹Ṫtċ∧[⁺żC`SΠ Π Πy.`|⁺ċC¹[¥`ΠΠw.`|⁰`Nie ma \ż…ṅƒ꘍ ΠΠw.
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSsK94biiIM6gIM6gLmDCucSLW+G5qsKjMjM0wrl0Y8K54bmqdMSL4oinW+KBusW8Q2BTzqAgzqAgzqB5LmB84oG6xItDwrlbwqVgzqDOoHcuYHzigbBgTmllIG1hIFxcxbzigKbhuYXGkuqYjSDOoM6gdy4iLCIiLCIxMDRcbndpZWxvcnliIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>`J½Ḣ Π Π.`¹ċ[Ṫ£234¹tc¹Ṫtċ∧[⁺żC`SΠ Π Πy.`|⁺ċC¹[¥`ΠΠw.`|⁰`Nie ma \ż…ṅƒ꘍ ΠΠw.
`J½Ḣ Π Π.`                   # Push string &quot;Jest {implicit first input} {implicit second input}.&quot;
          ¹ċ                 # Is the first input not one?
            [                #  If so:
             Ṫ               #   Remove the last character (the period) from the string
              £              #   Pop and put it in the register.
               234¹tc        #    Is the last digit of the first input one of 2, 3, 4?...
                     ¹Ṫtċ∧   #    ...and is the second last digit of the first input not one?
[                            #     If so:
 ⁺żC                         #      Push &quot;ą&quot;
    `SΠ Π Πy.`               #      Push string &quot;S{'ą'} {implicit first input} {implicit second input}y.&quot; (which is implicitly output)
              |              #     Otherwise:
               ⁺ċC           #      Push &quot;ó&quot;
                  ¹          #      Is the first input truthy? (not zero)
                   [         #       If so:
                    ¥`ΠΠw.`  #        Push string &quot;{register}{'ó'}w.&quot; (which is implicitly output)
|                            #       Otherwise (the input is zero):
 ⁰`Nie ma \ż…ṅƒ꘍ ΠΠw.        #         Push string &quot;Nie ma żadnych {second input}{'ó'}w.&quot; (which is implicitly output)
                             # All strings and if statements implicitly closed.
                             # If the first if statement was falsy (aka the input was one), then the string pushed at the beginning will be implicitly output.
</code></pre>
"
"248535","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>1{~&quot;vKf∑…
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxe35cInZLZuKIkeKApiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Prints the sequence forever.</p>
<pre><code>1         # Push 1
 {        # Forever...
  ~&quot;      # Grab top two elements, without popping
    vK    # Get divisors of each
      f∑  # Deep sum
        … # Print that without popping
</code></pre>
"
"248542","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>33</s> 32 bytes</h1>
<pre><code>h√d£0¾ȦλȮḂÞ•-¥/J;RI÷?₂J†^¥J:⌊=JA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJo4oiaZMKjMOKfqOKfqcimzrvIruG4gsOe4oCiLcKlL0o7UknDtz/igoJK4oCgXsKlSjrijIo9SkEiLCIiLCJbNCwwLC00LDQsMSwyLDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>–1 per <a href=""https://codegolf.stackexchange.com/users/100664/emanresu-a"">emanresu A</a>.</p>
<h2>How?</h2>
<p>We find the square root of the polynomial <a href=""https://math.stackexchange.com/a/920756/680415"">using its power series</a>, checking if the result has several integers followed by zeroes, plus additional checks.</p>
<pre><code>           #                   stack (top -&gt;)
h          # head              p0
 √         # square root       sqrt(p0)
  d        # double            2sqrt(p0)
   £       # set register    = 2k

0¾Ȧ        # top[0] = []       [[],p1,…,p(2n)]

λ          # λ(acc,cur)        acc cur
           #                 = [a1,…,an] p(n+1)
 Ȯ         # over              [a1,…,an] p(n+1) [a1,…,an]
  Ḃ        # dup and reverse   [a1,…,an] p(n+1) [a1,…,an] [an,…,a1]
   Þ•      # dot product       [a1,…,an] p(n+1) a1an+…+ana1
     -     # subtract          [a1,…,an] p(n+1)-a1an-…-ana1
      ¥    # push register     [a1,…,an] p(n+1)-a1an-…-ana1 2k
       /   # divide            [a1,…,an] (p(n+1)-a1an-…-ana1)/2k
           #                 = [a1,…,an] a(n+1)
        J; # join              [a1,…,an,a(n+1)]

R          # reduce            [a1,…,a(2n)]
 I         # halve             [[a1,…,an],[a(n+1),…,a(2n)]]
  ÷        # split to stack    [a1,…,an] [a(n+1),…,a(2n)]
   ?       # push input        [a1,…,an] [a(n+1),…,a(2n)] [p0,…,p(2n)]
    ₂      # length even?      [a1,…,an] [a(n+1),…,a(2n)] 0
     J     # join              [a1,…,an] [a(n+1),…,a(2n),0]
      †    # vectorized not    [a1,…,an] [1,…,1]
           # [if perfect square, then a(n+1) = … = a(2n) = 0,
           # and the length of input, 2n+1, would be odd]

^          # flip stack        [1,…,1] [a1,…,an]
 ¥         # push register     [1,…,1] [a1,…,an] 2k
  J        # join              [1,…,1] [a1,…,an,2k]
   :       # dup               [1,…,1] [a1,…,an,2k] [a1,…,an,2k]
    ⌊      # floor             [1,…,1] [a1,…,an,2k] [a1,…,an,2k]
     =     # equal?            [1,…,1] [1,…,1]
           # [if perfect square, then a0 = 2k, … , an would
           # all be integers]

J          # join              [1,…,1]
 A         # all truthy?       1
</code></pre>
"
"248543","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>150</s> <s>149</s> 148 bytes</h1>
<pre><code>k2T0ẋ→_0→0?£{D¥L&lt;|¥i:‛+-$c[:‛ +ḟ←_:_←›Ǔṫ∇∇+J←›ǔ→_|:‛&lt;&gt;$c[:‛ &gt;ḟ←+→|:\.=[←_← iC₴|:\,=[←_:_←?CȦ→_|:\[=[←_← i¬[Ȯ¥$ȯ\]ḟ∇∇+$]|:\]=[Ȯ¥$Ẏf\[=TG‹∇$_]]]]]]]_›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrMlQw4bqL4oaSXzDihpIwP8Kje0TCpUw8fMKlaTrigJsrLSRjWzrigJsgK+G4n+KGkF86X+KGkOKAuseT4bmr4oiH4oiHK0rihpDigLrHlOKGkl98OuKAmzw+JGNbOuKAmyA+4bif4oaQK+KGknw6XFwuPVvihpBf4oaQIGlD4oK0fDpcXCw9W+KGkF86X+KGkD9DyKbihpJffDpcXFs9W+KGkF/ihpAgacKsW8iuwqUkyK9cXF3huJ/iiIfiiIcrJF18OlxcXT1byK7CpSThuo5mXFxbPVRH4oC54oiHJF9dXV1dXV1dX+KAuiIsIiIsIisrKysrKysrKytbPisrKysrKys+KysrKysrKysrKz4rKys+Kzw8PDwtXT4rKy4+Ky4rKysrKysrLi4rKysuPisrLjw8KysrKysrKysrKysrKysrLj4uKysrLi0tLS0tLS4tLS0tLS0tLS4+Ky4+LiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>&quot;But there's already a Vyxal answer that's <s>100</s> <s>99</s> 98 bytes shorter bro what is this cringe&quot; I hear you say. Well this version doesn't use <code>eval</code>, and instead runs it manually. Note that it can be slow because it's doing things like rotating a 30000 item list quite frequently, so <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxMDAgMOG6i+KGkl8w4oaSMD/Co3tEwqVMPHzCpWk64oCbKy0kY1s64oCbICvhuJ/ihpBfOl/ihpDigLrHk+G5q+KIh+KIhytK4oaQ4oC6x5TihpJffDrigJs8PiRjWzrigJsgPuG4n+KGkCvihpJ8OlxcLj1b4oaQX+KGkCBpQ+KCtHw6XFwsPVvihpBfOl/ihpA/Q8im4oaSX3w6XFxbPVvihpBf4oaQIGnCrFvIrsKlJMivXFxd4bif4oiH4oiHKyRdfDpcXF09W8iuwqUk4bqOZlxcWz1UR+KAueKIhyRfXV1dXV1dXV/igLoiLCIiLCIrKysrKysrKysrWz4rKysrKysrPisrKysrKysrKys+KysrPis8PDw8LV0+KysuPisuKysrKysrKy4uKysrLj4rKy48PCsrKysrKysrKysrKysrKy4+LisrKy4tLS0tLS0uLS0tLS0tLS0uPisuPi4iXQ=="" rel=""nofollow noreferrer"">here's a version with only 100 cells for testing</a></p>
<p>Some assumptions this program makes:</p>
<ul>
<li>Closed brackets</li>
<li>EOF handled manually</li>
<li>Program on first line, each input character on a new line</li>
</ul>
<h2>Explained</h2>
<h3>Quick Overview</h3>
<pre><code>k2T0ẋ→_                                                                                                                                                      # Tape
       0→                                                                                                                                                    # Cell pointer
         0                                                                                                                                                   # Instruction pointer
          ?£                                                                                                                                                 # Prog
            {D¥L&lt;|                                                                                                                                           # While the instruction pointer is less than program length
                  :,←_,¥i                                                                                                                                    # Get command
                         :‛+-$c[:‛ +ḟ←_:_←›Ǔṫ∇∇+J←›ǔ→_|                                                                                                      # Handle addition and subtraction in the same place
                                                       :‛&lt;&gt;$c[:‛ &gt;ḟ←+→|                                                                                      # Handle moving the pointer left and right
                                                                       :\.=[←_← iC,|                                                                         # Output
                                                                                    :\,=[←_:_←?CȦ→_|                                                         # Input
                                                                                                    :\[=[                                                    # jump to next `]` if tape[cell] == 0
                                                                                                         ←_← i¬[Ȯ¥$ȯ:,\]ḟ›∇+$]|
                                                                                                                               :\]=[Ȯ¥$Ẏf\[=TG›∇$_]          # Jump back to the previous `[`
                                                                                                                                                   ]]]]]]
                                                                                                                                                         _   # Remove the char from the stack
                                                                                                                                                          ›  # Next command
                                                                                                                                                           }
</code></pre>
<h3>Detailed Explanation</h3>
<pre><code>k2T0ẋ→_
</code></pre>
<p>This is the tape. It consists of 30000 0s in a list. It's stored in a global variable called <code>_</code>.</p>
<pre><code>0→
</code></pre>
<p>This is the cell pointer. It tracks which cell is being pointed to. It's stored in the ghost variable. The ghost variable is another name for the variable with no name (as in, its name is literally <code>&quot;&quot;</code> - the empty string.)</p>
<pre><code>0
</code></pre>
<p>This is the instruction pointer. It tracks which character of the program is being executed. It's stored on the stack as the bottom of the stack. Throughout this answer, the stack is <code>[instruction pointer, current character, ...]</code> where <code>...</code> is whatever processing is happening in each command.</p>
<pre><code>?£
</code></pre>
<p>This gets the program to execute and stores it in the register.</p>
<pre><code>{D¥L&lt;|
</code></pre>
<p>This is the main program execution loop. It calls its code while the instruction pointer is less than the length of the program. Before performing the comparison, the instruction pointer is triplicated (i.e. three copies of it are pushed to the stack). This is so that there is a copy for the comparison, for getting the current character in the program and for maintaining the value of the pointer.</p>
<pre><code>¥i
</code></pre>
<p>This gets the character at the index of the instruction pointer and puts it on the stack. The stack is now <code>[instruction pointer, command]</code>. We now move on to handling the commands</p>
<h4>Addition and Subtraction</h4>
<pre><code>:‛+-$c[:‛ +ḟ←_:_←›Ǔṫ∇∇+J←›ǔ→_
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>+</code> and <code>-</code> commands.</p>
<pre><code>:‛+-$c
</code></pre>
<p>This checks if the command is in the string <code>&quot;+-&quot;</code>, while leaving a copy of the command on the stack for further comparison if needed.</p>
<pre><code>[:‛ +ḟ
</code></pre>
<p>If the command <em>is</em> one of <code>+</code> or <code>-</code>, then the command is duplicated yet again, and its index in the string <code>&quot; +&quot;</code> is returned. This returns <code>1</code> for <code>+</code> and <code>-1</code> for <code>-</code>, as <code>-1</code> is returned for characters not in the string. The <code>1</code> or <code>-1</code> acts as an offset for the current cell, and saves having to check for <code>+</code> and <code>-</code> individually. It also means <code>+</code> can be used for both commands instead of <code>›</code> for addition and <code>‹</code> for subtraction.</p>
<pre><code>←_:_←›Ǔ
</code></pre>
<p>This pushes the tape (stored in the global variable called <code>_</code>), the value of the cell pointer + 1 (stored in the ghost variable and then incremented) and then rotates the tape left that many times. The <code>:_</code> after <code>←_</code> is needed because there seems to be a bug with list mutability when rotating. (TODO: Fix)</p>
<p>After the rotation, the cell that is to be incremented or decremented is at the tail of the tape.</p>
<pre><code>ṫ∇∇+J
</code></pre>
<p>This separates the tail and the rest of the list - first it pushes <code>tape[:-1]</code> and then it pushes <code>tape[-1]</code>.  It then rotates the top three items on the stack so that the order is <code>[tape[:-1], tape[-1], offset]</code>. The offset is then added to the tail, and the tail is then appended back to the rest of the tape.</p>
<pre><code>←›ǔ→_
</code></pre>
<p>The tape is then rotated <code>cell pointer + 1</code> times to the right to &quot;undo&quot; the left rotation and then placed back into the global variable called <code>_</code>.</p>
<h4>Moving the Cell Pointer</h4>
<pre><code>|:‛&lt;&gt;$c[:‛ &gt;ḟ←+→
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>&lt;</code> and <code>&gt;</code> commands.</p>
<pre><code>|:‛&lt;&gt;$c
</code></pre>
<p>Just like with the <code>+</code> and <code>-</code> commands, a check is done to see if the command is in the string <code>&quot;&lt;&gt;&quot;</code>.</p>
<pre><code>[:‛ &gt;ḟ
</code></pre>
<p>And also just like with the <code>+</code> and <code>-</code> commands, if the command <em>is</em> one of <code>&lt;</code> or <code>&gt;</code>, then the command is duplicated yet again, and its index in the string <code>&quot; &gt;&quot;</code> is returned. This returns <code>1</code> for <code>&gt;</code> and <code>-1</code> for <code>&lt;</code>. The <code>1</code> or <code>-1</code> acts as an offset for the current cell location, and saves having to check for <code>&lt;</code> and <code>&gt;</code> individually. It also means <code>+</code> can be used for both commands instead of <code>›</code> for moving right and <code>‹</code> for moving left.</p>
<pre><code>←+→
</code></pre>
<p>This adds the offset to the cell pointer and updates the value stored in the ghost variable. It also acts as a weird face.</p>
<h4>Output</h4>
<pre><code>|:\.=[←_← iC₴
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>.</code> command.</p>
<pre><code>|:\.=
</code></pre>
<p>This checks if the command is equal to the string <code>&quot;.&quot;</code>. Unlike addition/subtraction and cell pointer movement, input and output cannot be handled in the same if-statement, as their functions are different at a fundamental level.</p>
<pre><code>[←_← i
</code></pre>
<p>If the command is <code>.</code>, the tape is pushed, as well as the cell pointer's value. The item at the location of the cell pointer is then retrieved. The space after the second <code>←</code> is needed to avoid it being interpreted as <code>←i</code></p>
<pre><code>C₴
</code></pre>
<p>This prints that item after converting it to its ASCII equivalent (think <code>chr</code> in python)</p>
<h4>Input</h4>
<pre><code>|:\,=[←_:_←?CȦ→_
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>,</code> command.</p>
<pre><code>|:\,=
</code></pre>
<p>This checks if the command is equal to the string <code>&quot;,&quot;</code>.</p>
<pre><code>[←_:_←?C
</code></pre>
<p>If the command <em>is</em> <code>,</code>, the tape and current cell pointer are pushed to the stack, as well as the ordinal value (think <code>ord</code> in python) of the next input.</p>
<pre><code>Ȧ→_
</code></pre>
<p>This sets the <code>cell pointer</code>th item of <code>tape</code> to the input. Basically <code>tape[cell_pointer] = ord(input())</code>.</p>
<h4>Looping</h4>
<pre><code>|:\[=[←_← i0=[Ȯ¥$ȯ\]ḟ∇∇+$]
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>[</code> command.</p>
<pre><code>|:\[=
</code></pre>
<p>The usual check for a certain character. <code>[</code> this time.</p>
<pre><code>[←_← i
</code></pre>
<p>If the command is <code>[</code>, get the <code>cell pointer</code>th item of <code>tape</code>.</p>
<pre><code>¬[
</code></pre>
<p>If the cell is not a truthy value (i.e. not <code>0</code>), then:</p>
<pre><code>Ȯ¥$ȯ\]ḟ
</code></pre>
<p>Push <code>program[instruction_pointer:]</code> and find the first <code>]</code> in that string. The stack is now <code>[instruction pointer, command, position of &quot;]&quot;]</code>.</p>
<pre><code>∇∇+$
</code></pre>
<p>Rotate the stack so that its order is <code>[command, position of &quot;]&quot;, instruction pointer]</code> and add the position of the <code>]</code> to the instruction pointer. This has the effect of iterating through the program until the next <code>]</code> is found without having to have lengthy while loops.</p>
<pre><code>|:\]=[Ȯ¥$Ẏf\[=TG‹∇$_
</code></pre>
<p>The above snippet is the entirety of the section that handles the <code>]</code> command.</p>
<pre><code>|:\]=
</code></pre>
<p>Check if the command is <code>]</code></p>
<pre><code>[Ȯ¥$Ẏf\[=TG
</code></pre>
<p>And if it is, get the greatest index of all <code>[</code>s in the string <code>program[0:instruction_pointer]</code>. This has the effect of backtracking to the matching <code>[</code> without having to have a lengthy while loop.</p>
<pre><code>‹∇$_
</code></pre>
<p>Decrement that so that the instruction pointer will be re-incremented to the position of the matching <code>[</code> and rotate the stack so that the stack order is once again <code>[instruction pointer, command]</code></p>
<h4>Final bits</h4>
<pre><code>]]]]]]] # Close all the if statements
_       # Remove the command from the stack
›       # Move the instruction pointer forward 1
}       # Close the main while loop
</code></pre>
"
"248554","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 + 1 = 2 bytes</h1>
<p>f(x) = <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLkiLCIiLCIiXQ=="" rel=""nofollow noreferrer""><code>‹</code></a> and g(x) = <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLIpyIsIiIsIiJd"" rel=""nofollow noreferrer""><code>ȧ</code></a>.</p>
<p><code>ȧ</code> is absolute value and <code>‹</code> is decrement, so <span class=""math-container"">\$f(g(x))\$</span> = <span class=""math-container"">\$\left|x-1\right|\$</span> and <span class=""math-container"">\$g(f(x))\$</span> = <span class=""math-container"">\$ \left|x\right| - 1\$</span>, which are the same only on positive integers.</p>
"
"248596","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Þ∞y$:ẇYf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyI1IiwiIiwiw57iiJ55JDrhuodZZiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Challenge number 1 - a list with an odd probability 1. Creates an infinite list.</p>
<p>The sequence generated looks like <span class=""math-container"">\$2, \color{red}{1}, \color{black}{4}, \color{red}{3, 5, 7}, \color{black}6, \color{red}{9, 11, 13, 15, 17},  \color{black}{8}\cdots\$</span>, interleaving the even numbers with the odd numbers in ever-growing chunks.</p>
<p>If we take the first <span class=""math-container"">\$k^2+k\$</span> terms for integer <span class=""math-container"">\$k\$</span>, <span class=""math-container"">\$\sum_{n=0}^{k}2n+1 = k^2\$</span> of them will be odd and <span class=""math-container"">\$k\$</span> will be even, so the proportion of odd numbers is <span class=""math-container"">\$\frac{k}{k+1}\$</span>. As <span class=""math-container"">\$k \to ∞ \$</span>, <span class=""math-container"">\$ \frac{k}{k+1} \to 1\$</span>.</p>
<pre><code>Þ∞       # Infinite list of positive integers
  y$     # Uninterleave, pushing odds and evens, and swap the odds on top
    :ẇ   # Cut odds into sequences of lengths [1, 3, 5, 7...]
      Yf # Interleave and flatten.
</code></pre>
"
"248614","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 155 bytes</h1>
<pre><code>1→m?\:/⌊:£t¬[¥h12ḋ:→d÷¬[0→m12←d h¬[‛⟇Ẏ|‛₄⟨]|¥h12%]|¥t15ḋ:→d÷¬[←d h∷[‛ɽ¢|‛»⌈]|¥t:30&gt;[60ε]‛«¦]¥t30≤[‛×Ṡ¥h12Ḋ[12|¥h12%]|‛to¥h12%›]]←m[`o'∵₅`¥h12&lt;‛PAi\M+]WḢ∆ċṄ
</code></pre>
<p>Takes input as HH:MM.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIx4oaSbT9cXDov4oyKOsKjdMKsW8KlaDEy4biLOuKGkmTDt8KsWzDihpJtMTLihpBkIGjCrFvigJvin4fhuo584oCb4oKE4p+oXXzCpWgxMiVdfMKldDE14biLOuKGkmTDt8KsW+KGkGQgaOKIt1vigJvJvcKifOKAm8K74oyIXXzCpXQ6MzA+WzYwzrVd4oCbwqvCpl3CpXQzMOKJpFvigJvDl+G5oMKlaDEy4biKWzEyfMKlaDEyJV184oCbdG/CpWgxMiXigLpdXeKGkG1bYG8n4oi14oKFYMKlaDEyPOKAm1BBaVxcTStdV+G4ouKIhsSL4bmEIiwiIyAwMDowMDowMCA+IHR3ZWx2ZSBuaWdodFxuIyAxMjowMDowMCA+IHR3ZWx2ZSBub29uXG4jIDA2OjAwOjAwID4gc2l4IG8nY2xvY2sgQU1cbiMgMTg6MDA6MDAgPiBzaXggbydjbG9jayBQTVxuIyAwNjoxNTowMCA+IHF1YXJ0ZXIgcGFzdCBzaXggbydjbG9jayBBTVxuIyAxODo0NTowMCA+IHF1YXJ0ZXIgdG8gc2V2ZW4gbydjbG9jayBQTVxuIyAxMTozMDowMCA+IGhhbGYgcGFzdCBlbGV2ZW4gbydjbG9jayBBTVxuIyAxMzoyMjowMCA+IHR3ZW50eXR3byBtaW51dGVzIHBhc3Qgb25lIG8nY2xvY2sgUE1cbiMgMTc6NDM6MDAgPiBzZXZlbnRlZW4gbWludXRlcyB0byBzaXggbydjbG9jayBQTVxuIyAwMDowOTowMCA+IG5pbmUgbWludXRlcyBwYXN0IHR3ZWx2ZSBvJ2Nsb2NrIEFNXG5cbiMgSW5wdXQgaXMgSEg6TU0iLCIxMzoyMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"248622","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>5l⟑sḢṪṁ;g:∆τ⌊3+Ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI1bOKfkXPhuKLhuarhuYE7ZzriiIbPhOKMijMr4bieIiwiIiwiWzE3LjE2LDE1LjA0LDE0LjY3LDE2LjU1LDE0Ljk5LDE3LjE2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>5l        # apertures, width 5
  ⟑       # map over each:
   s      # - sort
    Ḣ     # - drop head
     Ṫ    # - drop tail
      ṁ   # - average
       ;  # end map
        g # minimum

:       # dup
 ∆τ     # log10
   ⌊    # floor
    3+  # plus 3
      Ḟ # format to that many decimals
</code></pre>
"
"248626","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 54 bytes</h1>
<pre><code>1.*(\v*,)½(n-\v*₴n:d+\&gt;*,)½½ʁ(½\v*?T\&gt;*Jnd\&gt;*J:⅛,)¾(¼,
</code></pre>
<p>Boy oh boy, this is my new favorite answer now.<br />
The satisfaction when I got it down from 79 bytes to 54 bytes was immense.<br />
I bet you can't golf this anymore.<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxLiooXFx2Kiwpwr0obi1cXHYq4oK0bjpkK1xcPiosKcK9wr3KgSjCvVxcdio/VFxcPipKbmRcXD4qSjrihZssKcK+KMK8LCIsIiIsIjgiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>1.*(\v*,)½(n-\v*₴n:d+\&gt;*,)½½ʁ(½\v*?T\&gt;*Jnd\&gt;*J:⅛,)¾(¼,

1.*(\v*,)     &lt;Top part&gt;
1.            Evaluates to 1.5
  *           Times input i
   (    )     Loop (with loop var n)
    \v*,      Repeat &quot;v&quot; n times and print it

½(n-\v*₴n:d+\&gt;*,)     &lt;Diagonal part&gt;
½                     Halve input i
 (              )     Loop (with loop var n)
  n-\v*₴              Repeat &quot;v&quot; i minus n times and print it (without a newline)
        n:d           Duplicate n and double it
           +\&gt;*,      Repeat &quot;&gt;&quot; 2n plus n times

½½ʁ(½\v*?3*\&gt;*Jnd\&gt;*J:⅛,)     &lt;Top half bumpy part&gt;
½½ʁ                           Create range 0 to input i/4
   (                    )     Loop
    ½\v*                      Repeat &quot;v&quot; i/2 times
        ?T\&gt;*J                Repeat &quot;&gt;&quot; 3i times and join it
               nd\&gt;*J:        Repeat &quot;&gt;&quot; 2n times, merge and duplicate it
                      ⅛,      Push it to the global array and print it

¾(¼,                          &lt;Bottom half bumpy part&gt;
¾(                            Loop through the length of the global array
  ¼,                          Pop from the global array (to reverse it)
</code></pre>
"
"248661","<h1>372. <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 170 bytes, <a href=""https://oeis.org/A000224"" rel=""nofollow noreferrer"">A000224</a></h1>
<pre><code>ɾ²$%UL

#       | | \ / \ /  _  |
#       \ /  |   X  /_\ |
#        v   |  / \ | | |__
#             
#   Terse, elegant and readable.
#   <a href=""https://github.com/vyxal/vyxal"" rel=""nofollow noreferrer"">https://github.com/vyxal/vyxal</a>
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsKyJCVVTFxuXG4jICAgICAgIHwgfCBcXCAvIFxcIC8gIF8gIHxcbiMgICAgICAgXFwgLyAgfCAgIFggIC9fXFwgfFxuIyAgICAgICAgdiAgIHwgIC8gXFwgfCB8IHxfX1xuIyAgICAgICAgICAgICBcbiMgICBUZXJzZSwgZWxlZ2FudCBhbmQgcmVhZGFibGUuXG4jICAgaHR0cHM6Ly9naXRodWIuY29tL3Z5eGFsL3Z5eGFsIiwiIiwiMzQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://oeis.org/A000170"" rel=""nofollow noreferrer"">Next Sequence!</a></p>
<p>My program's only six bytes, so I had to add some advertising :P</p>
<pre><code>ɾ      # 1...n
 ²     # Squared
  $%   # Modulo n
    UL # Count unique
</code></pre>
"
"248682","<h1>5 Languages - <a href=""https://github.com/Lyxal/Keg"" rel=""nofollow noreferrer"">Keg</a>, <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://docs.python.org/3/"" rel=""nofollow noreferrer"">Python 3</a>, <a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a> and <a href=""https://github.com/Lyxal/CFEsolang"" rel=""nofollow noreferrer"">Curlyfrick</a>, 114 bytes</h1>
<pre><code>&quot;&quot;&quot;
!+._\PC\DC-\CC\CC- [|,]#`&quot;&quot;&quot;
''' TT__D++,q'''
print(ord(&quot;P&quot;)-ord(&quot;D&quot;))
'''
...{}   ({}+{}+{}+{})*({}+{}+{})
''' 
</code></pre>
<p>100% ascii too</p>
<p><a href=""https://tio.run/##y05N//9fSUmJS1FbLz4mwDnGxVk3xtkZiHQVomt0YpUTQJLq6uoKISHx8S7a2jqFQA5XQVFmXolGflGKhlKAkqYumOGipKkJUsmlp6dXXcupUV2rDUOaWnAeWInC//8A"" rel=""nofollow noreferrer"">Try Keg online!</a></p>
<p><a href=""https://tio.run/##K6gsycjPM/7/X0lJiUtRWy8@JsA5xsVZN8bZGYh0FaJrdGKVE0CS6urqCiEh8fEu2to6hUAOV0FRZl6JRn5RioZSgJKmLpjhoqSpCVLJpaenV13LqVFdqw1DmlpwHliJwv//AA"" rel=""nofollow noreferrer"">Try Python 3 online!</a></p>
<p><a href=""https://tio.run/##yy9OTMpM/f9fSUmJS1FbLz4mwDnGxVk3xtkZiHQVomt0YpUTQJLq6uoKISHx8S7a2jqFQA5XQVFmXolGflGKhlKAkqYumOGipKkJUsmlp6dXXcupUV2rDUOaWnAeWInC//8A"" rel=""nofollow noreferrer"">Try 05AB1E online!</a></p>
<p><a href=""https://tio.run/##Sy4tyqlMK8pMzv7/X0lJiUtRWy8@JsA5xsVZN8bZGYh0FaJrdGKVE0CS6urqCiEh8fEu2to6hUAOV0FRZl6JRn5RioZSgJKmLpjhoqSpCVLJpaenV13LqVFdqw1DmlpwHliJwv//AA"" rel=""nofollow noreferrer"">Try Curlyfrick online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcIlwiXCJcbiErLl9cXFBDXFxEQy1cXENDXFxDQy0gW3wsXSNgXCJcIlwiXG4nJycgVFRfX0QrKyxxJycnXG5wcmludChvcmQoXCJQXCIpLW9yZChcIkRcIikpXG4nJydcbi4uLnt9XHQoe30re30re30re30pKih7fSt7fSt7fSlcbicnJyAiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try Vyxal Online!</a></p>
<p>Explanation coming soon. Soon here means a time that <em>isn't</em> 21 minutes past midnight.</p>
"
"248719","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>µ₂
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCteKCgiIsIiIsIlsxLDIsNSwxLDI0LDU0LDEyLDUsNywxLDcsNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>µ  # Sort by...
 ₂ # Even?
</code></pre>
"
"248742","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes ~<span class=""math-container"">\$10^{305}\$</span></h1>
<pre><code>øCṪ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuEPhuaoiLCIiLCIzMDUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to emanresu A for 2 more orders of magnitude</p>
<p>Simple number compression builtin, then chop off the last char. Generates a Vyxal compressed number in base 255. Exceeds the 128 byte output limit at <span class=""math-container"">\$10^{305}\$</span>, but can go up to <span class=""math-container"">\$10^{308}\$</span> if the ceiling is raised to 130 bytes.</p>
"
"248776","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 32 bytes</h1>
<pre><code>₀f»#tṪİ□»₆τʀ»₃¡s↳‡∴»⁺/τ+Jf18vḋ›i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoBmwrsjdOG5qsSw4pahwrvigobPhMqAwrvigoPCoXPihrPigKHiiLTCu+KBui/PhCtKZjE4duG4i+KAumkiLCIiLCI1NyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
<h2>How?</h2>
<pre><code>₀f»#tṪİ□»₆τʀ»₃¡s↳‡∴»⁺/τ+Jf18vḋ›i
₀f                               # Push ten converted to a list of digits: [1, 0]
  »#tṪİ□»                        # Push compressed integer 145680302990
         ₆τ                      # Convert to base-64 as list: [2, 7, 43, 14, 16, 14, 14]
           ʀ                     # Convert each to a range [0, item]
            »₃¡s↳‡∴»             # Push compressed integer 180810357611003
                    ⁺/τ          # Convert to base-148 as list: [17, 30, 48, 129, 93, 147, 111]
                       +         # Add the values in these two lists at the same positions
                        J        # Join the [1, 0] and this list together
                         f       # Flatten this list
                          18vḋ   # Divmod each by 18
                              ›  # Increment each
                               i # 0-based index the input into this list
</code></pre>
"
"248841","<h1>379. <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 180 bytes, <a href=""https://oeis.org/A000494"" rel=""nofollow noreferrer"">A000494</a></h1>
<pre><code>∆sṙ
##############
#####    #####
### LOOKS  ###
### LIKE   ###
### I HAVE ###
### TO     ###
### MAKE   ###
### THIS   ###
### 180    ###
### BYTES  ###
##############
   ########
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiOTAgyoAgxpsiLCLiiIZz4bmZXG4jIyMjIyMjIyMjIyMjI1xuIyMjIyMgICAgIyMjIyNcbiMjIyBMT09LUyAgIyMjXG4jIyMgTElLRSAgICMjI1xuIyMjIEkgSEFWRSAjIyNcbiMjIyBUTyAgICAgIyMjXG4jIyMgTUFLRSAgICMjI1xuIyMjIFRISVMgICAjIyNcbiMjIyAxODAgICAgIyMjXG4jIyMgQllURVMgICMjI1xuIyMjIyMjIyMjIyMjIyNcbiAgICMjIyMjIyMjIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is a very simple formula: <span class=""math-container"">\$ \large a(n) = \lfloor\sin(n)\rceil \$</span>.</p>
<p><a href=""https://oeis.org/A000180"" rel=""nofollow noreferrer"">Next sequence!</a></p>
"
"248911","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>¦₀ʁv+Ṙf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCpuKCgMqBdivhuZhmIiwiIiwiSU5WQUxJRCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¦       # Prefixes
   v+   # To each append
 ₀ʁ     # 0...9
     Ṙf # Reverse and flatten
</code></pre>
"
"248931","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>≬?p∆²ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaw/cOKIhsKy4bmFIiwiIiwiMjg0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>≬    ṅ # Find the first number where...
 ?p    # Prepending the input
   ∆²  # Produces a square?
</code></pre>
<p><a href=""https://github.com/Vyxal/Vyxal/blob/main/vyxal/elements.py#L2482"" rel=""nofollow noreferrer"">Vyxal's square function</a> uses <a href=""https://docs.sympy.org/latest/modules/ntheory.html#sympy.ntheory.primetest.is_square"" rel=""nofollow noreferrer""><code>sympy.ntheory.primetest.is_square</code></a>, which works on arbitrary ints, so this won't fail on float precision.</p>
"
"248948","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>0λ?εf1&gt;a;₍&gt;&lt;⁽ȧ∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwzrs/zrVmMT5hO+KCjT484oG9yKfiiLUiLCIiLCI3MDIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>0λ?εf1&gt;a;₍&gt;&lt;⁽ȧ∵
         ₍      # Apply both of the following two commands and wrap the results in a list:
          &gt;     #  Increment until lambda returns false...
           &lt;    #  and decrement until lambda returns false.
 λ      ;       # With the following lambda:
  ?ε            #  Absolute difference with input
    f           #  List of digits
     1&gt;a        #  Are there any that are greater than 1?
0               # ...starting from 0.
            ⁽ȧ∵ # Take the minimum of these two by the absolute value.
</code></pre>
<p>Another 15 byter: <code>Nṡ:ȧbvṅ⌊$±*-⁽ȧ∵</code>. In fact, <code>:ȧbvṅ⌊$±*</code> is all to create a binary string, but handling negative values.</p>
"
"248974","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>≬₌gGṡ⊍İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazigoxnR+G5oeKKjcSwIiwiIiwiWzEsIDMsIDUsIDcsIDldIl0="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJhIiwixpsiLCLiiazigoxnR+G5oeKKjcSwIiwiU25TJFwiYCUgPT4gJWAkJTtcXFxuaiIsIlsxLCAzLCA1LCA3LCA5XVxuWzUsIDEwLCAxNSwgMjBdXG5bNSwgMTAsIDE1XVxuWzEsIDIsIDYsIDcsIDExLCAxMl1cblsxLCAyLCAzXVxuWzUsIDYsIDddIl0="" rel=""nofollow noreferrer"">Try all the tests</a></p>
<p>Input list not included, empty list is.</p>
<h2>Explained</h2>
<pre><code>≬₌gGṡ⊍İ
≬-----     # Next three elements as a function:
 ₌gG       #   Get the smallest and largest item of the argument
    ṡ      #   Create an incluse range between those values
     ⊍     #   and set xor with the original argument
      İ    # Repeat that function until the result is no longer unique, collecting results
</code></pre>
"
"248999","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 7 bytes</h1>
<pre><code>'?+½?↔₃
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInPyvCvT/ihpTigoMiLCIiLCJbMSwgMiwgMywgNCwgMTAsIDUyLCAxMDAsIDIwMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJhUGoiLCJ2aMabwqMiLCInwqUrwr3CpeKGlOKCgyIsIjs7wqhad0o7Osabw7figbxg4p2M4pyFYGk7wqhaJMO3JF9cImAgPT4gYGpcXCBKcCIsIlsxLCAyLCAzXSwgWzJdXG5bMSwgMiwgMywgNF0sIFtdXG5bMSwgMywgNCwgNV0sIFs0XVxuWzEsIDUsIDEwLCAyMCwgNDBdLCBbMSwgNSwgMTAsIDIwLCA0MF1cblsxLCA1LCA2LCAxMF0sIFsxLCA1LCA2LCAxMF1cblsxLCAyLCAzLCA0LCAxMCwgNTIsIDEwMCwgMjAwXSwgWzEwLCA1MiwgMjAwXVxuWzEsIDIsIDMsIDUsIDgsIDEzLCAyMSwgMzRdLCBbXSJd"" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p><em>-2 bytes by porting Unrelated String's Jelly answer</em></p>
<h2>How?</h2>
<pre><code>'?+½?↔₃
'       # Filter for:
 ?+     #  Add the input (vectorizes)
   ½    #  Halve each
    ?↔  #  Remove elements that are not in the input
      ₃ #  Is the length equal to 1?
</code></pre>
"
"249049","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>¨2$:NrḢ+⁰ntiv&quot;;ÞfÞu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCqDIkOk5y4biiK+KBsG50aXZcIjvDnmbDnnUiLCIiLCJbMiwyLDIsMCwwLDQsMCwzLDIsMV1cblsyLDAsMSwwLDAsMiwwLDAsMSwyXSJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQIiwixpvDt8KjIiwiwqgyJDpOcuG4oivCpW50aXZcIjvDnmbDnnUiLCI7WmAgPT4gYHZq4oGLIiwiW1tbMiwyLDIsMCwwLDQsMCwzLDIsMV0sWzIsMCwxLDAsMCwyLDAsMCwxLDJdXSwgW1syLDIsMCwxLDNdLFswLDEsMCwxLDBdXSwgW1syLDEsMiw0LDRdLFswLDEsMiwzLDRdXSwgW1swLDIsMl0sWzAsMSwxXV0sIFtbMCwxLDAsMCw0XSxbMCwwLDAsMCwwXV0sIFtbMCwyLDAsMCwzXSxbMCwwLDAsMCwwXV1dIl0="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p>Port of 05AB1E. Too bad we don't have a loop index variable. Then it could be 16 bytes.</p>
<pre><code>¨2$:NrḢ+⁰ntiv&quot;;ÞfÞu
¨2                  # Open a dyadic map lambda: Map over the implicit first input, pushing both item and index
  $                 #  Swap so the item is at the top
   :Nr              #  Range [n, -n)
      Ḣ             #  Remove the first item to make this (n, -n)
       +            #  Add the index
        ⁰nti        #  Index the loop-index into the second input
            v&quot;      #  Pair each in the list with this
              ;     # Close map
               Þf   # Flatten one level
                 Þu # Is this unique?
</code></pre>
"
"249051","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>d‹ɾ-:ż+:£₌żLÞẊ'¥¨£v&quot;ÞfÞu;⁽G∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiZOKAucm+LTrFvCs6wqPigozFvEzDnuG6iifCpcKowqN2XCLDnmbDnnU74oG9R+KItSIsIiIsIlsyLDIsMCwxLDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly. Outputs a list of 1-indexed heights.</p>
"
"249054","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>40</s> 32 bytes</h1>
<pre><code>ẏṘ\\$꘍øm↵:IǏfL:£Nvȯ$Z¥?hL⇧\_*꘍p⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/huZhcXFxcJOqYjcO4beKGtTpJx49mTDrCo052yK8kWsKlP2hM4oenXFxfKuqYjXDigYsiLCIiLCJbXCI0MFwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJQIiwixpsiLCLhuo/huZhcXFxcJOqYjcO4beKGtTpJx49mTDrCo052yK8kWsKlbmhM4oenXFxfKuqYjXDigYsiLCI7wqhaJOKBi2BJbnB1dDpcXG5gcCRgXFxuT3V0cHV0OlxcbmBwyK87YFxcblxcblxcbmBqIiwiW1tcIjQwXCJdLCBbXCIgIF9fX19cIixcIlxcXFwvIDQwIFwiXSwgW1wiL3wgXCIsXCIgfCBcIixcIiB8IFwiLFwiX3xfXCJdLCBbXCIjICAjIFwiLFwiIyAgIyBcIixcIiMjIyMjXCIsXCIgICAjIFwiLFwiICAgIyBcIl0sIFtcImFiXCIsXCJjZFwiLFwiZWZcIl1dIl0="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p><em>-8 bytes from porting 05AB1E</em></p>
"
"249055","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>`{&quot;‹&quot;:0}
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJge1wi4oC5XCI6MH0iLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs <code>{&quot;https://www.google.com&quot;:0}</code>.</p>
"
"249062","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>»\Π»F∑69S*Ṙ=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu1xczqDCu0biiJE2OVMq4bmYPSIsIiIsIlwiOTA4MDZcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>    F∑       # Remove elements of...
»\Π»         # 23457
         *   # Ring translate by...
      69S    # &quot;69&quot;
          Ṙ= # Does it, reversed, equal the input?
</code></pre>
"
"249071","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>#∩
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIj4oipIiwiIiwiW1sxLDJdLFszLDRdLFs1LDZdXSJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIjXG7iiKkiLCIiLCJbWzEsMl0sWzMsNF0sWzUsNl1dIl0="" rel=""nofollow noreferrer"">try it online transposed</a>.</p>
<p>Receives a list of lists (a list of strings will work too).</p>
<p><em>-2 bytes thanks to lyxal</em></p>
"
"249086","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɾ¦c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsKmYyIsIiIsIjI3NiJd"" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJhIiwixpsiLCLJvsKmYyIsIlwiYCUgLT4gJWAkJTtcXFxuaiIsIjFcbjNcbjZcbjEwXG4xNVxuMjFcbjU1XG4yNzZcbjJcbjRcbjVcbjdcbjhcbjlcbjExXG4xNlxuMzJcbjUwXG4yOTAiXQ=="" rel=""nofollow noreferrer"">Try a Test Suite Online!</a></p>
<p>Can be <a href=""https://vyxal.pythonanywhere.com/#WyJSIiwiIiwiwqZjIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">2 bytes</a> with the <code>R</code> flag.</p>
<p>The power of automatically swapping arguments based on types.</p>
<h2>Explained</h2>
<pre><code>ɾ¦c
ɾ    # The range [1..n]
 ¦  # Cumulative sums of that - this creates a list of the first n triangular numbers, which is guaranteed to include at least one number bigger than the input. 
  c # is the input in that list? The arguments popped are [input, triangles] but Vyxal is smart enough to realise that because a list will never be in a number, it can swap the arguments and perform the membership test. 
</code></pre>
"
"249093","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ṙ=Ṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZg94bmYIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> =  # Equal to...
Ṙ   # Self reversed?
  Ṙ # Reverse the result
</code></pre>
"
"249125","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ʁḂ$ƈ0ZfẎ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgeG4giTGiDBaZuG6jiIsIiIsIjkiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same idea as Bubbler's J answer.</p>
<pre><code>ʁḂ$ƈ0ZfẎ
ʁ        # Exclusive zero range, 0..n-1
 Ḃ       # Bifurcate, push reverse without popping
  $      # Swap
   ƈ     # Binomial coefficients
    0Zf  # Append zero after each
       Ẏ # Only keep the first input items
</code></pre>
<p>Porting pajonk's Python answer is 8 bytes as well:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>+₌∷½⌊⁰ƈ*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIr4oKM4oi3wr3ijIrigbDGiCoiLCIiLCI1XG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249155","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>ƛ`.0*`Ẏ⌊øṘṅøṘ;∑øṘvøṘṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm2AuMCpg4bqO4oyKw7jhuZjhuYXDuOG5mDviiJHDuOG5mHbDuOG5mOG5hSIsIiIsIltcIjEwMTAxMTFcIiwgXCIxMDEwNTFcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>How?</h2>
<pre><code>ƛ`.0*`Ẏ⌊øṘṅøṘ;∑øṘvøṘṅ
ƛ                      # Map, and for both strings:
 `.0*`Ẏ                #  Get all regex matches &quot;.0*&quot;
       ⌊               #  Convert each to integers
        øṘ             #  Convert each to their roman numeral
          ṅ            #  Join together to a single string
           øṘ          #  Convert from roman numeral to number
             ;         # Close map
              ∑        # Sum
               øṘ      # Convert to roman numeral
                 vøṘ   # Convert each character from roman numeral to number
                    ṅ  # Join together to a string
</code></pre>
"
"249156","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>⁽⌊λ₁Ḋ40*›-;ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb3ijIrOu+KCgeG4ijQwKuKAui07xYAiLCIiLCIxMjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly answer. Takes single integer and outputs list of ints.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgHZcIuKBsOKAucqAxps2MMqBdlwiO8OeZkoiLCIiLCI5MFxuMiJd"" rel=""nofollow noreferrer"">16 bytes taking second and minute</a>.</p>
"
"249191","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>21</s> 15 bytes</h1>
<pre><code>ṖÞ∞ƛ₍₃₅T∨;ÞS$↔h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZbDnuKInsab4oKN4oKD4oKFVOKIqDvDnlMk4oaUaCIsIiIsIjI4LCBbMF0sIFswLCAxXSwgMjkiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Why use clever mathematics when you can just generate infinite FizzBuzz?</p>
<p><em>-6 thanks to Steffan and emanresuA</em></p>
<h2>Explained</h2>
<pre><code>ṖÞ∞ƛ₍₃₅T∨;ÞS$↔h
Ṗ                # All permutations of the input
 Þ∞              # An infinite list of positive integers starting at 1
   ƛ     ;       # To each number n:
    ₍₃₅          #   [n % 3 == 0, n % 5 == 0]
       T         #   Truthy indices of that
        ∨        #   Logical or that with the number. This gets either the indices of where Fizz or Buzz would usually be or n
         ÞS      # Sublists of the infinite fizzbuzz
           $↔    # Remove sublists which don't have everything from the input
             h   # Get the first item of that
</code></pre>
"
"249196","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>{N…ꜝ…
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7TuKApuqcneKApiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>{     # Forever...
 N    # Negate
  …   # Print
   ꜝ  # ~
    … # Print
</code></pre>
"
"249205","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 19 bytes</h1>
<pre><code>Œṗf³$ƑƇœ&amp;/¹¡L
P!Ç€Ṁ
</code></pre>
<p><a href=""https://tio.run/##ATEAzv9qZWxsef//xZLhuZdmwrMkxpHGh8WTJi/CucKhTApQIcOH4oKs4bmA////WzEsIDNd"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>-1 thanks to Jonathan Allan.</p>
<p><a href=""https://github.com/Vyxal/Vyxal/issues/1201"" rel=""nofollow noreferrer"">Unlike Vyxal</a>, Jelly's multiset intersection appears to work properly.</p>
<p>This is roughly <span class=""math-container"">\$O\left(2^{\left(\prod{s}\right)!}\right)\$</span>. I'm pretty sure using <a href=""https://github.com/cairdcoinheringaahing/jellylanguage/"" rel=""nofollow noreferrer"">caird's fork</a> would save a few bytes but I can't be bothered for now.</p>
<pre><code>P!Ç€Ṁ  Main link (takes a list of numbers)
P!     Factorial of product
   €   Map over 1...n
  Ç    Helper (see below)
    Ṁ  Take maximum

Œṗf³$ƑƇœ&amp;/¹¡L  Helper link (takes argument n)
Œṗ             Integer partitions
      Ƈ        Filtered by...
    $Ƒ         Same under
  f³           Remove all but input
         /     Reduce by
       œ&amp;      Multiset union
          ¹¡   N times
            L  Get final length
</code></pre>
"
"249209","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 8 bytes</h1>
<pre><code>øṖ⌊'ḣtṡ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuOG5luKMiifhuKN04bmh4oG8IiwiIiwiXCI3ODkxMDExXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Incredibly slow for some inputs, reasonable for others.</p>
<h2>Explained</h2>
<pre><code>øṖ⌊'ḣtṡ⁼
øṖ⌊      # All sublists of the input, as numbers
   '     # Keep only those where:
    ḣtṡ  #   The range between the first and last item
       ⁼ #   Exactly equals the original item
</code></pre>
"
"249234","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>V
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLOu8KyOyAiLCJWIiwiIiwiWzAsIDIsIDMsIDQsIDUsIDZdXG5bMTQsIDE0LCA1LCAxNSwgMTUsIDEwLCAxMywgOSwgM10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builtin. Vyxal can't take a function as an input, so just leave the function on the stack.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>£Þǔ¨£[¥†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLin6ggMTQgfCAxNCB8IDUgfCAxNSB8IDE1IHwgMTAgfCAxMyB8IDkgfCAzIOKfqVxu4p+oIDAgfCAyIHwgMyB8IDQgfCA1IHwgNiDin6lcbs67wrI7IiwiwqPDnseUwqjCo1vCpeKAoCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Without builtin.</p>
"
"249237","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>L₄+v₍₃₅ÞS?Ṗ↔ḃ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJM4oKEK3bigo3igoPigoXDnlM/4bmW4oaU4biDIiwiIiwiW1swLDBdLFswLDBdLFsxLDBdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> Super slow. Uses <code>[0,0]</code> for <code>Int</code>, <code>[1,0]</code> for <code>Fizz</code>, <code>[0,1]</code> for <code>Buzz</code>, and <code>[1,1]</code> for <code>FizzBuzz</code>.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJhVCIsIsabYCwgYC9gSW50YGBGaXp6YFwiYEJ1enpgSmBGaXp6QnV6emBKMDBcIjEwZlwiMDFcIndKMTFmd0rEvzvGmyIsIkwxNCt24oKN4oKD4oKFw55TbuG5luKGlOG4gyIsIjsiLCJJbnQsIEludCwgRml6elxuRml6eiwgSW50LCBGaXp6LCBCdXp6XG5GaXp6LCBGaXp6LCBGaXp6LCBJbnQsIEludCwgSW50LCBCdXp6XG5CdXp6LCBJbnQsIEludCwgSW50LCBGaXp6LCBGaXp6QnV6elxuRml6ekJ1enosIEludCwgSW50LCBJbnQsIEludFxuQnV6eiwgRml6ekJ1enosIEZpenpcbkJ1enosIEZpenosIEJ1enpcbkludCwgSW50LCBJbnRcbkZpenosIEludCwgRml6elxuRml6ekJ1enosIEludCwgSW50LCBCdXp6LCBGaXp6Il0="" rel=""nofollow noreferrer"">Test cases, using 14 instead of 26 to make it faster.</a></p>
<pre><code>L₄*v₍₃₅ÞS?Ṗ↔ḃ
L₄+           # Length of input + 26 (14 would be enough, but 26 is one byte)
   v₍₃₅       # For each in range [1, that], calculate [n % 3 == 0, n % 5 == 0]
       ÞS     # All sublists
           ↔  # Keep only lists that are in...
         ?Ṗ   # The permutations of the input
            ḃ # Is this truthy? (does it have at least one element?)
</code></pre>
"
"249260","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal 2.14.1</a>, 9 bytes</h1>
<pre><code>kPð+s16ẇ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrUMOwK3MxNuG6h+KBiyIsIiIsIltdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So turns out <code>kP</code> isn't <em>actually</em> all of printable ascii - it's missing the space character, and it isn't in the right order either, meaning that for the purposes of this challenge, it shouldn't be banned, as it doesn't print &quot;the ascii table&quot; and it isn't exactly &quot;trivial&quot; either.</p>
<p>(And if it isn't allowed, then that's grounds enough for VTCing this challenge as needs details or clarity, because &quot;trivialising the challenge&quot; isn't objectively defined - there's an argument to be made that <code>kPð+s</code> isn't a trivial built-in).</p>
<h2>Explained</h2>
<pre><code>kPð+s16ẇ⁋
kPð+       # a string of 0-9a-Z + python's string.punctuation + space
    s      # sorted to be in printable ascii order
     16ẇ   # split into parts of length 16
        ⁋  # joined on newlines
</code></pre>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h2>
<pre><code>kP6/⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrUDYv4oGLIiwiIiwiW10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Bug fixes make this 5 bytes in reality.</p>
"
"249367","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>C∷ƛĠv¦ƛṘ=*;f;∑y_½⌈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oi3xpvEoHbCpsab4bmYPSo7ZjviiJF5X8K94oyIIiwiIiwiW1wiICAgICAgICAgICAgICAgICAgPSAgICAgICAgICAgICAgXCIsXCIgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICBcIixcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiLFwiICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgXCIsXCIgICAgICAgICAgPT09PT09PT09ICAgICAgICAgICAgICBcIixcIiAgICAgICAgICAgICAgfCB8IHwgICAgICAgICAgICAgIFwiLFwiICAgICAgICAgID09PT09IHwgfCAgID0gICAgICAgICAgXCIsXCIgICAgICAgICAgICB8IHwgfCB8ICAgfCAgICAgICAgICBcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
"
"249385","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 11 bytes</h1>
<pre><code>żƛ?l'ṪǏ⁼;;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvMabP2wn4bmqx4/igbw7O0EiLCIiLCJbMSwgMywgMSwgMSwgMywgMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 thanks to EmanresuA but also -10 rep thanks to EmanresuA so now I have to edit the post so the upvote can be returned</em></p>
<h2>Explained</h2>
<pre><code>żƛ?l'ṪǏ⁼;;A
żƛ           # For every number n in the range [0, len(input)]
  ?l         #   Overlapping windows of length n of the input
    'ṪǏ⁼;    #   Get all sublists where the list is the same after appending the head of the list to the list with the tail chopped off. That is, `a[:-1] + [a[0]] == a`
         ;   # End map
          A  # Are all the items truthy?
</code></pre>
"
"249443","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>jM</code>, 5 bytes</h1>
<pre><code>k2'Þ⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJqTSIsIiIsImsyJ8Oe4oenIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Flagless:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>k2ʀ~Þ⇧⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrMsqAfsOe4oen4oGLIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249452","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>~₃≬£⁰'ẏ⋎¥↔;İft
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ+4oKD4omswqPigbAn4bqP4ouOwqXihpQ7xLBmdCIsIiIsIlsnYXMnLCAnaScsICdoaXMnLCAndGhhdCcsICdwaW5nJywgJ3BpbicsICdpbicsICd3YXMnLCAnYXQnLCAndGhpcycsICd3aGF0JywgJ2lzJywgJ2l0JywgJ2FuZCcsICdhJywgJ2luJywgJ2NhbicsICdpZicsICdhbicsICdoYW5kJywgJ2xhbmQnLCAnYWN0JywgJ2FzaycsICdhbnknLCAncGFydCcsICdtYW4nLCAnbWVhbicsICdtYW55JywgJ2hhcycsICdzdGFuZCcsICdmYXJtJywgJ2VhdCcsICdtYWluJywgJ3dpbmQnLCAnYm9hdCcsICdyYW4nLCAnaGVhdCcsICdlYXN0JywgJ3dhcm0nLCAnZmFjdCcsICdmYXN0JywgJ3JhaW4nLCAnYXJ0JywgJ2hlYXJ0JywgJ2FtJywgJ2FybScsICdzaXQnLCAndHJhaW4nLCAnc2F0JywgJ2dhcycsICdsZWFzdCcsICdmaXQnLCAnZmxhdCcsICdjYXQnLCAnYml0JywgJ2NvYXN0JywgJ3NhbmQnLCAnYmVhdCcsICdoaXQnLCAncGFydHknLCAnd2luZycsICd3YXNoJywgJ2JhdCcsICdtZWF0JywgJ3N1aXQnLCAnZmF0JywgJ21lYW50JywgJ2NvYXQnLCAnYmFuZCcsICd3aW4nLCAnc2VhdCcsICdoYXQnLCAnc2FsdCddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249459","<h1>385. <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 182 bytes, <a href=""https://oeis.org/A000798"" rel=""nofollow noreferrer"">A000798</a></h1>
<pre><code>ɾṗꜝṗ'fUL?=;'2↔:ƛfUs;$ƛƒ↔Us;ꜝ∪$F¬;L
############################
#############################
#############################
#############################
############################
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuG5l+qcneG5lydmVUw/PTsnMuKGlDrGm2ZVczskxpvGkuKGlFVzO+qcneKIqiRGwqw7TFxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIsIiIsIjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://oeis.org/A000182"" rel=""nofollow noreferrer"">Next sequence.</a></p>
"
"249460","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>øŀC32-ƒ*95%32+Cṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuMWAQzMyLcaSKjk1JTMyK0PhuYUiLCIiLCJbXCJ3b29kXCIsIFwiaHVuZ3J5XCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>øŀC32-ƒ*95%32+Cṅ  # Example input: [&quot;wood&quot;, &quot;hungry&quot;]
øŀ                # Align to left by padding to the right with spaces: [&quot;wood  &quot;, &quot;hungry&quot;]
  C               # Character codes: [[119, 111, 111, 100, 32, 32], [104, 117, 110, 103, 114, 121]]
   32-            # Subtract 32: [[87, 79, 79, 68, 0, 0], [72, 85, 78, 71, 82, 89]]
      ƒ*          # Element-wise multiply both: [6264, 6715, 6162, 4828, 0, 0]
        95%       # Modulo 95: [89, 65, 82, 78, 0, 0]
           32+    # Add 32: [121, 97, 114, 110, 32, 32]
              C   # From character codes: [&quot;y&quot;, &quot;a&quot;, &quot;r&quot;, &quot;n&quot;, &quot; &quot;, &quot; &quot;]
               ṅ  # Join together: &quot;yarn  &quot;
</code></pre>
"
"249461","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>F¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJGwqwiLCIiLCJcImFiY2RlZlwiXG5cImFiY1wiIl0="" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiRsKsIiwiIiwiYWJjZGVmLCBkZWZiY2FcbmFiYywgYWJjMTIzXG5cIlwiLCBcIlwiXG5kZWYsIGFiY2RlZlxuYWJjZGVmLCBhYmNcbvCfmIDwn5iB8J+Yhiwg8J+YgfCfmIbwn5iAIl0="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
"
"249464","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>‡½⌊↔e
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIuKAocK94oyK4oaUZSIsIiIsIjIxLCAzXG4wLCAxMDAwXG4xNSwgMlxuNDAwMDAsIDFcbjMsIDIxIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes inputs in reverse order.</p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 6 bytes</h1>
<pre><code>HḞ$Ƭ*@
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8/9/j4Y55KsfWaDn8///fyPC/MQA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Takes inputs in reverse order.</p>
<h2>Explanation</h2>
<pre><code>HḞ$Ƭ*@  Dyadic link f(n, x)
   Ƭ    Repeatedly apply on n until the results are no longer unique
  $     Last two links as a monad:
H        Halve
 Ḟ       Floor
    *@  x to the power of each
</code></pre>
"
"249496","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>7↵'f$ġnU⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIz4oa1J2YkxKFuVeKBvCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a> (modified to only output numbers up to <span class=""math-container"">\$10^3\$</span> instead of <span class=""math-container"">\$10^7\$</span> to prevent timeouts)</p>
"
"249504","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λ½vx∑›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu8K9dnjiiJHigLoiLCIiLCI2MCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>λ½vx∑›
λ      # Open a lambda for recursion: f(n)
 ½     #  Halve to n/2
  vx   #  For each x in [1..floor(n/2)], call f(x)
    ∑  #  Sum
     › #  Increment
</code></pre>
"
"249505","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>Ṙɖ∴Ṙ?ɖ∴Þ∵ε∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmYyZbiiLThuZg/yZbiiLTDnuKItc614oiRIiwiIiwiWzFdXG5bMSwzLDI1NSwxXVxuWzYsMiwxLDEsMiw2XVxuWzIsMSwzLDEsNSwxLDcsMV1cblsyLDEsMywxLDcsMSw3LDFdXG5bNSwyLDEsMywxLDIsNV1cbls4MCw4MCw2Nyw3MV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249506","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>λbṘTvx
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQQSIsIiIsIs67YuG5mFR2eCIsIiIsIjBcbjFcbjJcbjNcbjRcbjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<pre><code>λbṘTvx
λ      # Open a lambda for recursion, f(x)
 b     # Get the binary representation of x (as a list)
  Ṙ    # Reverse
   T   # Get truthy indices of that (zero-indexed)
    vx # For each, recurse
</code></pre>
"
"249507","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>λ&amp;›₂¥*;ḊRf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIs67JuKAuuKCgsKlKjvhuIpSZiIsIiIsIlswLDFdXG5bMSwzXVxuWzEsMiwzXVxuWzEsMywyXVxuWzEwLDcsOSw2LDgsOV1cblsyMywxMiwzMiwyMywyNSwyN11cblsxMjMsMTIzLDM0NSwwLDEsOV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
<p>Another 10-byter that I produced independently: <code>⁽₂Ḋƛh∷ßṘ;f</code></p>
"
"249525","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>9</strike> <strike>8</strike> <strike>5</strike> 4 bytes</h1>
<p>- x bytes thanks to <a href=""https://codegolf.stackexchange.com/users/92689/steffan"">@Steffan</a></p>
<pre><code>ƛḣ$Y
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm+G4oyRZIiwiIiwiW1wicmV2ZXJzZVwiLCBcInRoZVwiLCBcImZpcnN0XCIsIFwidHdvXCIsIFwibGV0dGVyc1wiLCBcIm9mXCIsIFwiZWFjaFwiLCBcIndvcmRcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> | <a href=""https://vyxal.pythonanywhere.com/#WyJTIiwiIiwixpvhuKMkWSIsIiIsIltcInJldmVyc2VcIiwgXCJ0aGVcIiwgXCJmaXJzdFwiLCBcInR3b1wiLCBcImxldHRlcnNcIiwgXCJvZlwiLCBcImVhY2hcIiwgXCJ3b3JkXCJdIl0="" rel=""nofollow noreferrer""><code>S</code> Flag to join by spaces</a></p>
<h2>Explanation</h2>
<pre><code>ƛḣ$Y
ƛ     Map through each word
 ḣ    Push all but the first letter and the first letter
  $   Swap the first two elements
   Y  Interleave
</code></pre>
"
"249559","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>λ∷d›½e⌊;İJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu+KIt2TigLrCvWXijIo7xLBKIiwiIiwiNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249560","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ḣtṡ?¯ġḞ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuKN04bmhP8KvxKHhuJ4iLCIiLCJbMjEsIDksIDYsIDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249583","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ṙ=h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZg9aCIsIiIsIlsnSCcsICdFJywgJ1MnLCAnSCddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Input as a list of chars.</p>
"
"249592","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>y&quot;v¯vUfsk≈⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwieVwidsKvdlVmc2viiYjigbwiLCIiLCIxODI4Mzg0ODU4Njg3ODg4OThcbjQzNDRcbjg1ODY4XG4xMjIyMzI0MjUyNlxuMTIzNDVcbjY3MjQwMTM2MzVcbjM2ODQyNDc4MzI0ODM2XG4xMjIyMjMyNDI1XG41ODU5NTEwNTExIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249597","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>₍+ε5c□≈∨
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oKNK861NWPilqHiiYjiiKgiLCIiLCI0LCAxXG4xMCwgMTBcbjEsIDNcbjYsIDJcbjEsIDZcbi0yNTYsIC0yNTFcbjYsIDFcbi01LCA1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249600","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>×
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDlyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Apparently we don't have a Vyxal answer yet. Outputs <code>*</code>.</p>
"
"249612","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ḢṪ‡$/ḭ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bii4bmq4oChJC/huK0iLCIiLCJbMSwxLDIsMl1cblsxLDIsMSwyLDEsMl1cbls2LDEyLDMsMTAsNSw4XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249613","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>`Lo≥›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgTG/iiaXigLoiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249614","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⌈:¦$∩h¦↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIg6wqYk4oipaMKm4oaUIiwiIiwicHBjZyBwYWludHMgY29vbCBnYWxheGllcyBwb3VyaW5nIGFjaWQgaW50byBuaWdodCB0aW1lIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249642","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>Gɾ‡?cḊƛḢ[h?c∧;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIkfJvuKAoT9j4biKxpvhuKJbaD9j4oinO2YiLCIiLCJbMSwyLDMsNCwyMCwyMSwyMl1cblsxLDIsMyw1LDZdXG5bMiwzLDQsOV1cblszLDUsNyw4LDEwXVxuWzEsMjAsMjNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses <code>0</code> for ellpisis.</p>
"
"249646","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Þu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw551IiwiIiwiNDg3Nzg1ODRcbjE3MzA4NDU5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249648","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>fCḂ$sεg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZkPhuIIkc861ZyIsIiIsIlwiYWJcIlxuXCJhYWJiXCJcblwiYWFhYmJiXCJcblwiYWFhYWJiYmJcIlxuXCJhYWFhYWJiYmJiXCJcblwiYWFhYWFhYmJiYmJiXCJcblwiXCJcblwiYVwiXG5cImJcIlxuXCJhYVwiXG5cImJhXCJcblwiYmJcIlxuXCJhYWFcIlxuXCJhYWJcIlxuXCJhYmFcIlxuXCJhYmJcIlxuXCJiYWFcIlxuXCJiYWJcIlxuXCJiYmFcIlxuXCJiYmJcIlxuXCJhYWFhXCJcblwiYWFhYlwiXG5cImFhYmFcIlxuXCJhYmFhXCJcblwiYWJhYlwiXG5cImFiYmFcIlxuXCJhYmJiXCJcblwiYmFhYVwiXG5cImJhYWJcIlxuXCJiYWJhXCJcblwiYmFiYlwiXG5cImJiYWFcIlxuXCJiYmFiXCJcblwiYmJiYVwiXG5cImJiYmJcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249662","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ǏΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLGm8O3JDoiLCLHj86gIiwiXCI6YCA9PiBgaiR04oCePWDinYzinIVgaeG6izvigYsiLCJbWzEsMV0sWzIsMl0sWzMsM10sWzQsMl0sWzUsNV0sWzYsNl0sWzcsN10sWzgsMl0sWzksM10sWzEwLDEwXSxbMTEsMTFdLFsxMiw2XSxbMTMsMTNdLFsxNCwxNF0sWzE1LDE1XSxbMTYsMl0sWzE3LDE3XSxbMTgsNl0sWzE5LDE5XSxbMjAsMTBdLFsyMSwyMV0sWzIyLDIyXSxbMjMsMjNdLFsyNCw2XSxbMjUsNV0sWzI2LDI2XSxbMjcsM10sWzI4LDE0XSxbMjksMjldLFszMCwzMF0sWzMxLDMxXSxbMzIsMl0sWzMzLDMzXSxbMzQsMzRdLFszNSwzNV0sWzM2LDZdLFszNywzN10sWzM4LDM4XSxbMzksMzldLFs0MCwxMF0sWzQxLDQxXSxbNDIsNDJdLFs0Myw0M10sWzQ0LDIyXSxbNDUsMTVdLFs0Niw0Nl0sWzQ3LDQ3XSxbNDgsNl0sWzQ5LDddLFs1MCwxMF1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249679","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> <s>6</s> <s>5</s> 4 bytes</h1>
<pre><code>I÷&lt;g
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZiIsIknDtzxnIiwiIiwiXCJhYlwiXG5cImFhYmJcIlxuXCJhYWFiYmJcIlxuXCJhYWFhYmJiYlwiXG5cImFhYWFhYmJiYmJcIlxuXCJhYWFhYWFiYmJiYmJcIlxuXCJcIlxuXCJhXCJcblwiYlwiXG5cImFhXCJcblwiYmFcIlxuXCJiYlwiXG5cImFhYVwiXG5cImFhYlwiXG5cImFiYVwiXG5cImFiYlwiXG5cImJhYVwiXG5cImJhYlwiXG5cImJiYVwiXG5cImJiYlwiXG5cImFhYWFcIlxuXCJhYWFiXCJcblwiYWFiYVwiXG5cImFiYWFcIlxuXCJhYmFiXCJcblwiYWJiYVwiXG5cImFiYmJcIlxuXCJiYWFhXCJcblwiYmFhYlwiXG5cImJhYmFcIlxuXCJiYWJiXCJcblwiYmJhYVwiXG5cImJiYWJcIlxuXCJiYmJhXCJcblwiYmJiYlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiScO3PGciLCIiLCJbXCJhXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXVxuW1wiYVwiXVxuW1wiYlwiXVxuW1wiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYlwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> - without the <code>f</code> header</p>
<p>Takes a list of characters as input. Outputs <code>1</code> for true for inputs in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^+\}\$</span>, and empty string or <code>0</code> for false otherwise. This matches Vyxal's truthy/falsey semantics, which can be confirmed by putting <code>ḃ</code> (Boolify) in the Footer.</p>
<pre><code>I   # Into Two Pieces - Splits a list into two halves and wraps them in a list.
    # If the input is odd in length, the left side gets 1 more character.
÷   # Item Split - Unwraps the list created above. Required so that the next
    # operation can compare the two halves.
&lt;   # Less Than (vectorized) - Are items in the left half list less than the
    # corresponding items in the right half list? Puts 1 where yes, 0 where no.
    # The resulting list takes the size of whichever list was longer. For items
    # at the end of that list with no corresponding item in the other list, it
    # puts 0 if that position is empty in the right list, and 1 if it's empty in
    # the left list (which can never happen in this program).
g   # Minimum
</code></pre>
<hr />
<p>Determining membership in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^0\}\$</span> can also be done in 4 bytes:</p>
<pre><code>I÷&lt;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZiIsIknDtzxBIiwiIiwiXCJhYlwiXG5cImFhYmJcIlxuXCJhYWFiYmJcIlxuXCJhYWFhYmJiYlwiXG5cImFhYWFhYmJiYmJcIlxuXCJhYWFhYWFiYmJiYmJcIlxuXCJcIlxuXCJhXCJcblwiYlwiXG5cImFhXCJcblwiYmFcIlxuXCJiYlwiXG5cImFhYVwiXG5cImFhYlwiXG5cImFiYVwiXG5cImFiYlwiXG5cImJhYVwiXG5cImJhYlwiXG5cImJiYVwiXG5cImJiYlwiXG5cImFhYWFcIlxuXCJhYWFiXCJcblwiYWFiYVwiXG5cImFiYWFcIlxuXCJhYmFiXCJcblwiYWJiYVwiXG5cImFiYmJcIlxuXCJiYWFhXCJcblwiYmFhYlwiXG5cImJhYmFcIlxuXCJiYWJiXCJcblwiYmJhYVwiXG5cImJiYWJcIlxuXCJiYmJhXCJcblwiYmJiYlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiScO3PEEiLCIiLCJbXCJhXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXVxuW1wiYVwiXVxuW1wiYlwiXVxuW1wiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYlwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> - without the <code>f</code> header</p>
<p>Takes a list of characters as input. Outputs <code>1</code> for true and <code>0</code> for false. Only the last element of the program is different:</p>
<pre><code>A   # Check if all items in a list are truthy (returns truthy for an empty list)
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> <s>5</s> 4 bytes</h1>
<pre><code>sṘ꘍g
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZjoiLCJz4bmY6piNZyIsIiIsIlwiYWJcIlxuXCJhYWJiXCJcblwiYWFhYmJiXCJcblwiYWFhYWJiYmJcIlxuXCJhYWFhYWJiYmJiXCJcblwiYWFhYWFhYmJiYmJiXCJcblwiXCJcblwiYVwiXG5cImJcIlxuXCJhYVwiXG5cImJhXCJcblwiYmJcIlxuXCJhYWFcIlxuXCJhYWJcIlxuXCJhYmFcIlxuXCJhYmJcIlxuXCJiYWFcIlxuXCJiYWJcIlxuXCJiYmFcIlxuXCJiYmJcIlxuXCJhYWFhXCJcblwiYWFhYlwiXG5cImFhYmFcIlxuXCJhYmFhXCJcblwiYWJhYlwiXG5cImFiYmFcIlxuXCJhYmJiXCJcblwiYmFhYVwiXG5cImJhYWJcIlxuXCJiYWJhXCJcblwiYmFiYlwiXG5cImJiYWFcIlxuXCJiYmFiXCJcblwiYmJiYVwiXG5cImJiYmJcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwic+G5mOqYjWciLCIiLCJbXCJhXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXVxuW1wiYVwiXVxuW1wiYlwiXVxuW1wiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYlwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> - without the <code>f:</code> header</p>
<p>Takes a list of characters as input. Outputs <code>1</code> for true for inputs in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^+\}\$</span>, and empty string or <code>0</code> for false otherwise.</p>
<p>This is a port of <a href=""https://codegolf.stackexchange.com/a/86037/17216"">Dennis's MATL answer</a>, with an algorithm also used by many subsequent answers.</p>
<pre><code>s   # Pushes a copy of the input, sorted.
Ṙ   # Reverses the sorted copy.
꘍   # Levenshtein distance (vectorized) - Used here to compare corresponding
    # single-character strings between two lists, so it's effectively a vectorized
    # Not Equals, giving 1 for unequal and 0 for equal. This works around the fact
    # that Vyxal has no vectorizing Not Equals operator (even though it does have
    # vectorizing versions of all the other basic comparison operators). For input
    # in L, this will yield a non-empty list of all 1s. For an empty input it will
    # yield an empty list. For all other inputs it yields a list of both 1s and 0s.
g   # Minimum
</code></pre>
<p>To take a string as input, this becomes <code>f:sṘ꘍g</code> or alternatively <code>fṘḂs꘍g</code> (6 bytes). It is, however, possible to do this with the sort-and-reverse algorithm in 5 bytes (see <code>AḂs꘍↓</code> below).</p>
<hr />
<p>Determining membership in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^0\}\$</span> can also be done in 4 bytes using this algorithm:</p>
<pre><code>sṘ꘍A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZjoiLCJz4bmY6piNQSIsIiIsIlwiYWJcIlxuXCJhYWJiXCJcblwiYWFhYmJiXCJcblwiYWFhYWJiYmJcIlxuXCJhYWFhYWJiYmJiXCJcblwiYWFhYWFhYmJiYmJiXCJcblwiXCJcblwiYVwiXG5cImJcIlxuXCJhYVwiXG5cImJhXCJcblwiYmJcIlxuXCJhYWFcIlxuXCJhYWJcIlxuXCJhYmFcIlxuXCJhYmJcIlxuXCJiYWFcIlxuXCJiYWJcIlxuXCJiYmFcIlxuXCJiYmJcIlxuXCJhYWFhXCJcblwiYWFhYlwiXG5cImFhYmFcIlxuXCJhYmFhXCJcblwiYWJhYlwiXG5cImFiYmFcIlxuXCJhYmJiXCJcblwiYmFhYVwiXG5cImJhYWJcIlxuXCJiYWJhXCJcblwiYmFiYlwiXG5cImJiYWFcIlxuXCJiYmFiXCJcblwiYmJiYVwiXG5cImJiYmJcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwic+G5mOqYjUEiLCIiLCJbXCJhXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJhXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCIsXCJiXCJdXG5bXVxuW1wiYVwiXVxuW1wiYlwiXVxuW1wiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYVwiLFwiYlwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYVwiLFwiYlwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYVwiLFwiYlwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYVwiXVxuW1wiYlwiLFwiYlwiLFwiYlwiLFwiYlwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a> - without the <code>f:</code> header</p>
<p>Takes a list of characters as input. Outputs <code>1</code> for true and <code>0</code> for false.</p>
<p>To take a string as input, this becomes <code>f:sṘ꘍A</code> or alternatively <code>fṘḂs꘍A</code> (6 bytes). It is, however, possible to do this with the sort-and-reverse algorithm in 5 bytes (see <code>AḂs꘍A</code> below).</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>fI÷&lt;g
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZknDtzxnIiwiIiwiXCJhYlwiXG5cImFhYmJcIlxuXCJhYWFiYmJcIlxuXCJhYWFhYmJiYlwiXG5cImFhYWFhYmJiYmJcIlxuXCJhYWFhYWFiYmJiYmJcIlxuXCJcIlxuXCJhXCJcblwiYlwiXG5cImFhXCJcblwiYmFcIlxuXCJiYlwiXG5cImFhYVwiXG5cImFhYlwiXG5cImFiYVwiXG5cImFiYlwiXG5cImJhYVwiXG5cImJhYlwiXG5cImJiYVwiXG5cImJiYlwiXG5cImFhYWFcIlxuXCJhYWFiXCJcblwiYWFiYVwiXG5cImFiYWFcIlxuXCJhYmFiXCJcblwiYWJiYVwiXG5cImFiYmJcIlxuXCJiYWFhXCJcblwiYmFhYlwiXG5cImJhYmFcIlxuXCJiYWJiXCJcblwiYmJhYVwiXG5cImJiYWJcIlxuXCJiYmJhXCJcblwiYmJiYlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a string as input. Outputs <code>1</code> for true for inputs in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^+\}\$</span>, and empty string or <code>0</code> for false otherwise. This is just one of the above 4 byte programs with <code>f</code> inserted at the beginning.</p>
<hr />
<p>Determining membership in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^0\}\$</span> can also be done in this way:</p>
<pre><code>fI÷&lt;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZknDtzxBIiwiIiwiXCJhYlwiXG5cImFhYmJcIlxuXCJhYWFiYmJcIlxuXCJhYWFhYmJiYlwiXG5cImFhYWFhYmJiYmJcIlxuXCJhYWFhYWFiYmJiYmJcIlxuXCJcIlxuXCJhXCJcblwiYlwiXG5cImFhXCJcblwiYmFcIlxuXCJiYlwiXG5cImFhYVwiXG5cImFhYlwiXG5cImFiYVwiXG5cImFiYlwiXG5cImJhYVwiXG5cImJhYlwiXG5cImJiYVwiXG5cImJiYlwiXG5cImFhYWFcIlxuXCJhYWFiXCJcblwiYWFiYVwiXG5cImFiYWFcIlxuXCJhYmFiXCJcblwiYWJiYVwiXG5cImFiYmJcIlxuXCJiYWFhXCJcblwiYmFhYlwiXG5cImJhYmFcIlxuXCJiYWJiXCJcblwiYmJhYVwiXG5cImJiYWJcIlxuXCJiYmJhXCJcblwiYmJiYlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a string as input. Outputs <code>1</code> for true and <code>0</code> for false.</p>
<p>This too is just one of the above 4 byte programs with <code>f</code> inserted at the beginning – but it can also be done without <code>f</code>, using a conceptually similar algorithm:</p>
<pre><code>½C÷‹⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwr1Dw7figLnigbwiLCIiLCJcImFiXCJcblwiYWFiYlwiXG5cImFhYWJiYlwiXG5cImFhYWFiYmJiXCJcblwiYWFhYWFiYmJiYlwiXG5cImFhYWFhYWJiYmJiYlwiXG5cIlwiXG5cImFcIlxuXCJiXCJcblwiYWFcIlxuXCJiYVwiXG5cImJiXCJcblwiYWFhXCJcblwiYWFiXCJcblwiYWJhXCJcblwiYWJiXCJcblwiYmFhXCJcblwiYmFiXCJcblwiYmJhXCJcblwiYmJiXCJcblwiYWFhYVwiXG5cImFhYWJcIlxuXCJhYWJhXCJcblwiYWJhYVwiXG5cImFiYWJcIlxuXCJhYmJhXCJcblwiYWJiYlwiXG5cImJhYWFcIlxuXCJiYWFiXCJcblwiYmFiYVwiXG5cImJhYmJcIlxuXCJiYmFhXCJcblwiYmJhYlwiXG5cImJiYmFcIlxuXCJiYmJiXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a string as input. Outputs <code>1</code> for true and <code>0</code> for false.</p>
<pre><code>½   # Split in half. If odd in length, the left side gets 1 more character. This
    # creates a list containing two strings.
C   # Convert characters to their ASCII values. This results in a list containing
    # two lists of ASCII values.
÷   # Item Split - split the list into its elements on stack; in this case, these
    # are the left and right halves, each of which is a list of ASCII values.
‹   # Decrement - iff the right half is all 'b' (ASCII 98), this will change it to
    # all 'a' (ASCII 97)
⁼   # Are the two top items on the stack exactly equal? This gives a boolean value
    # that's 1 for true (equal counts of 'a' and 'b') and 0 for false.
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>AḂs꘍↓
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiQeG4gnPqmI3ihpMiLCIiLCJcImFiXCJcblwiYWFiYlwiXG5cImFhYWJiYlwiXG5cImFhYWFiYmJiXCJcblwiYWFhYWFiYmJiYlwiXG5cImFhYWFhYWJiYmJiYlwiXG5cIlwiXG5cImFcIlxuXCJiXCJcblwiYWFcIlxuXCJiYVwiXG5cImJiXCJcblwiYWFhXCJcblwiYWFiXCJcblwiYWJhXCJcblwiYWJiXCJcblwiYmFhXCJcblwiYmFiXCJcblwiYmJhXCJcblwiYmJiXCJcblwiYWFhYVwiXG5cImFhYWJcIlxuXCJhYWJhXCJcblwiYWJhYVwiXG5cImFiYWJcIlxuXCJhYmJhXCJcblwiYWJiYlwiXG5cImJhYWFcIlxuXCJiYWFiXCJcblwiYmFiYVwiXG5cImJhYmJcIlxuXCJiYmFhXCJcblwiYmJhYlwiXG5cImJiYmFcIlxuXCJiYmJiXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a string as input. Outputs <code>1</code> for true, and empty string or <code>0</code> for false.</p>
<p>This is an adaptation of the algorithm used in <a href=""https://codegolf.stackexchange.com/a/86034/17216"">Dennis's Jelly answer</a> and <a href=""https://codegolf.stackexchange.com/a/86037/17216"">MATL answer</a> (and many subsequent answers):</p>
<pre><code>A   # Check if character is a vowel (vectorized)
    # Converts each 'a' to 1, and each 'b' to 0. Pushes the result as a list if
    # the input was a string of 2 characters or longer, but only pushes a single
    # integer if it was a single-character string. This limits what useful
    # operations can subsequently be done (for example, it can't be reliably
    # split into two halves).
Ḃ   # Bifurcate - Pushes the top of the stack then its reverse.
s   # Sort - Operates on the non-reversed copy.
꘍   # Bitwise Xor (vectorized)
↓   # Minimum by tail. On a list of numbers, it picks the item with the minimum
    # last digit. On a single number, it picks the minimum digit. Since the only
    # numbers given to it here will be 0 and 1, that's the same as the standard
    # minimum, except that it avoids the crash that happens with &quot;g&quot; (Minimum)
    # when its argument is not a list.
</code></pre>
<p>It appears to be impossible to solve this challenge in Vyxal in less than 5 bytes taking a string as input.</p>
<hr />
<p>Determining membership in <span class=""math-container"">\$\{a^n b^n:n∈\mathbb{Z}^0\}\$</span> can also be done in this way:</p>
<pre><code>AḂs꘍A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiQeG4gnPqmI1BIiwiIiwiXCJhYlwiXG5cImFhYmJcIlxuXCJhYWFiYmJcIlxuXCJhYWFhYmJiYlwiXG5cImFhYWFhYmJiYmJcIlxuXCJhYWFhYWFiYmJiYmJcIlxuXCJcIlxuXCJhXCJcblwiYlwiXG5cImFhXCJcblwiYmFcIlxuXCJiYlwiXG5cImFhYVwiXG5cImFhYlwiXG5cImFiYVwiXG5cImFiYlwiXG5cImJhYVwiXG5cImJhYlwiXG5cImJiYVwiXG5cImJiYlwiXG5cImFhYWFcIlxuXCJhYWFiXCJcblwiYWFiYVwiXG5cImFiYWFcIlxuXCJhYmFiXCJcblwiYWJiYVwiXG5cImFiYmJcIlxuXCJiYWFhXCJcblwiYmFhYlwiXG5cImJhYmFcIlxuXCJiYWJiXCJcblwiYmJhYVwiXG5cImJiYWJcIlxuXCJiYmJhXCJcblwiYmJiYlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a string as input. Outputs <code>1</code> for true and <code>0</code> for false. Only the last element of the program is different:</p>
<pre><code>A   # Check if all items in a list are truthy (returns truthy for an empty list)
</code></pre>
"
"249687","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>¶o²⁋=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCtm/CsuKBiz0iLCIiLCJcImZvb1xcbmJhclxcbmJhelwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¶o²⁋=
¶o    # Remove all newlines
  ²   # Format as a square
   ⁋  # Join by newlines
    = # Equal to the input?
</code></pre>
"
"249694","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ʁ$vḋṠ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgSR24biL4bmg4oC6IiwiIiwiMTNcbjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<pre><code>ʁ$vḋṠ›
ʁ       # Range [0, first input)
 $      # Swap so the second input is at the top
  vḋ    # For each in the range, divmod by that
    Ṡ   # Sum each
     ›  # Increment
</code></pre>
"
"249714","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Tɾ$(ṅ2lĖ)Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJUyb4kKOG5hTJsxJYp4bqOIiwiIiwiNTBcbjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>number of items to generate</code> then <code>how many times to squash</code></p>
"
"249729","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 53 bytes</h1>
<pre><code>‛ks958CV‛ps968CVka«Þİ»«»1m»Ŀ»4⁽.ṘŻ⟨«⋎D-§ƛE←₍»₄τ944+CĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJtrczk1OENW4oCbcHM5NjhDVmthwqvDnsSwwrvCq8K7MW3Cu8S/wrs04oG9LuG5mMW74p+owqvii45ELcKnxptF4oaQ4oKNwrvigoTPhDk0NCtDxL8iLCIiLCJlcHNheG5hIGdpYSBtaWEgYWdnZWxpYSBzdGggdGhsZW9yYXNoIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Transliterate doesn't work when replacing two-character strings unfortunately, so <code>ks</code> and <code>ps</code> had to be done separately. Otherwise this would be 45 bytes.</p>
<pre><code>‛ks958CV‛ps968CVka«Þİ»«»1m»Ŀ»4⁽.ṘŻ⟨«⋎D-§ƛE←₍»₄τ944+CĿ
‛ks    V               # Replace all occurrences of &quot;ks&quot; with...
   958C                #  Character code 958, &quot;ξ&quot;
        ‛ps    V       # Replace all occurrences of &quot;ps&quot; with...
           968C        #  Character code 968, &quot;ψ&quot;
ka                     # Push the lowercase alphabet
  «Þİ»«                # Push compressed string &quot;cjquv&quot;
       »1m»            # Push compressed number 12348
           Ŀ           # Transliterate in the alphabet, c -&gt; 1, j -&gt; 2, q -&gt; 3, u -&gt; 4, v -&gt; 8
                       # Produces &quot;ab1defghi2klmnop3rst48wxyz&quot; (as a list of single-character strings). Call this V
»4⁽.ṘŻ⟨«⋎D-§ƛE←₍»      # Compressed integer 255394376001292872295693368395691084
₄τ                     # Convert to base-26 as a list
  944+                 # Add 944 to each
      C                # Get the character codes of each: &quot;αβαδεφγηιακλμνοπξρστψθωχυζ&quot; (as a list of single-character strings). Call this X
       Ŀ               # Replace each of V with the corresponding character in X in the input
</code></pre>
"
"249743","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 5 bytes</h1>
<pre><code>ɽǍkaƈ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb3HjWthxogiLCIiLCJcIkFjRWdJa01vUXNVd1liRGZIakxuUHJUdlh6XCJcblwiQ3dtIGZqb3JkIGJhbmsgZ2x5cGhzIHZleHQgcXVpei5cIlxuXCJGb3ggbnltcGhzIGdyYWIgcXVpY2sgaml2ZWQgd2FsdHouXCJcblwiR2xpYiBqb2NrcyBxdWl6IG55bXBoIHRvIHZleCBkd2FyZi5cIlxuXCJRdWljayB6ZXBoeXJzIGJsb3csIHZleGluZyBkYWZ0IEppbS5cIlxuXCJIb3cgdmV4aW5nbHkgcXVpY2sgZGFmdCB6ZWJyYXMganVtcCFcIlxuXCJNci4gSm9jaywgVFYgcXVpeiBQaEQsIGJhZ3MgZmV3IGx5bnguXCJcblwiU3BoaW54IG9mIGJsYWNrIHF1YXJ0eiwganVkZ2UgbXkgdm93LlwiXG5cIlRoZSBmaXZlIGJveGluZyB3aXphcmRzIGp1bXAgcXVpY2tseS5cIlxuXCJXYWx0eiwgbnltcGgsIGZvciBxdWljayBqaWdzIHZleCBCdWQuXCJcblwiUXVpY2sgZm94IGp1bXBzIG5pZ2h0bHkgYWJvdmUgd2l6YXJkLlwiXG5cIkphY2tkYXdzIGxvdmUgbXkgYmlnIHNwaGlueCBvZiBxdWFydHouXCJcblwiVHdvIGRyaXZlbiBqb2NrcyBoZWxwIGZheCBteSBiaWcgcXVpei5cIlxuXCJGaWNrbGUgamlueCBib2cgZHdhcnZlcyBzcHkgbWF0aCBxdWl6LlwiXG5cIlB1YmxpYyBqdW5rIGR3YXJ2ZXMgaHVnIG15IHF1YXJ0eiBmb3guXCJcblwiRml2ZSBxdWFja2luZyB6ZXBoeXJzIGpvbHQgbXkgd2F4IGJlZC5cIlxuXCJQYWNrIG15IGJveCB3aXRoIGZpdmUgZG96ZW4gbGlxdW9yIGp1Z3MuXCJcblwiU3ltcGF0aGl6aW5nIHdvdWxkIGZpeCBRdWFrZXIgb2JqZWN0aXZlcy5cIlxuXCJXaGVuIHpvbWJpZXMgYXJyaXZlLCBxdWlja2x5IGZheCBqdWRnZSBQYXQuXCJcblwiV2F4eSBhbmQgcXVpdmVyaW5nLCBqb2NrcyBmdW1ibGUgdGhlIHBpenphLlwiXG5cIlRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2cuXCJcblwiV292ZW4gc2lsayBweWphbWFzIGV4Y2hhbmdlZCBmb3IgYmx1ZSBxdWFydHouXCJcblwiVGhlIGpheSwgcGlnLCBmb3gsIHplYnJhIGFuZCBteSB3b2x2ZXMgcXVhY2shXCJcblwiQSB3aXphcmQncyBqb2IgaXMgdG8gdmV4IGNodW1wcyBxdWlja2x5IGluIGZvZy5cIlxuXCJUaGUgcXVpY2sgb255eCBnb2JsaW4ganVtcHMgb3ZlciB0aGUgbGF6eSBkd2FyZi5cIlxuXCJGb3h5IGRpdmEgSmVubmlmZXIgTG9wZXogd2Fzbid0IGJha2luZyBteSBxdWljaGUuXCJcblwiV2F0Y2ggXFxcIkplb3BhcmR5IVxcXCIsIEFsZXggVHJlYmVrJ3MgZnVuIFRWIHF1aXogZ2FtZS5cIlxuXCJCeSBKb3ZlLCBteSBxdWljayBzdHVkeSBvZiBsZXhpY29ncmFwaHkgd29uIGEgcHJpemUhXCJcblwiTXkgZ2lybCB3b3ZlIHNpeCBkb3plbiBwbGFpZCBqYWNrZXRzIGJlZm9yZSBzaGUgcXVpdC5cIlxuXCJHcnVtcHkgd2l6YXJkcyBtYWtlIGEgdG94aWMgYnJldyBmb3IgdGhlIGpvdmlhbCBxdWVlbi5cIlxuXCJBIHF1aXZlcmluZyBUZXhhcyB6b21iaWUgZm91Z2h0IHJlcHVibGljIGxpbmtlZCBqZXdlbHJ5LlwiXG5cIlRoZSB3aXphcmQgcXVpY2tseSBqaW54ZWQgdGhlIGdub21lcyBiZWZvcmUgdGhleSB2YXBvcml6ZWQuXCJcblwiQWxsIHF1ZXN0aW9ucyBhc2tlZCBieSBmaXZlIHdhdGNoZWQgZXhwZXJ0cyBhbWF6ZSB0aGUganVkZ2UuXCJcblwiQmFjayBpbiBKdW5lIHdlIGRlbGl2ZXJlZCBveHlnZW4gZXF1aXBtZW50IG9mIHRoZSBzYW1lIHNpemUuXCJcblwiV2UgcHJvbXB0bHkganVkZ2VkIGFudGlxdWUgaXZvcnkgYnVja2xlcyBmb3IgdGhlIG5leHQgcHJpemUuXCJcblwiSmltIHF1aWNrbHkgcmVhbGl6ZWQgdGhhdCB0aGUgYmVhdXRpZnVsIGdvd25zIGFyZSBleHBlbnNpdmUuXCJcblwiQ3dtIGJhbmsgZ2x5cGhzIHF1aXogdmV4dCBGb3JkLlwiXG5cIkZveCBueW1waHMgZ3JhYiBxdWljayBqaXZlIHdhbHR6LlwiXG5cIkdsaWIgam9jayBkd2FydmVzIHZldCBveCBueW1waCBxdWl6LlwiXG5cIlF1aWNrIHplcGh5cnMgYmxvdywgdmV4aW5nIGRhZnQgSm9uLlwiXG5cIkhvdyB2ZXhpbmdseSBxdWljayBkYWZ0IHplYnJhcyBwdW1wIVwiXG5cIk1zLiBKb2NrLCBUViBxdWl6IFBoRCwgYmFncyBmZXcgbHlueC5cIlxuXCJTcGhpbmdlcyBvZiBibGFjayBxdWFydHosIGp1ZGdlIG15IHZvdy5cIlxuXCJUaGUgZm91ciBib3hpbmcgd2l6YXJkcyBqdW1wIHF1aWNrbHkuXCJcblwiV2FsdHosIG55bXBoLCBvciBxdWljayBqaWdzIHZleCBCdWQuXCJcblwiUXVpY2sgZm94IGp1bXBzIG5pZ2h0bHkgb3ZlciB3aXphcmQuXCJcblwiSmFja2Rhd3MgbG92ZSBteSBiaWcgcXVhcnR6IHNwaGlueC5cIlxuXCJEcml2ZW4gam9ja3MgaGVscCBmYXggbXkgYmlnIG93bCBxdWl6LlwiXG5cIkZpY2tsZSBqaW54IGJvZyBkd2FydmVzIGhhbSBzcHkgcXVpei5cIlxuXCJQdWJsaWMganVuayBkd2FydmVzIGh1ZyBteSBxdWFydHogb3guXCJcblwiQXcsIGZpdmUgcXVhY2tpbmcgemVwaHlycyBqb2x0IG15IGJlZC5cIlxuXCJQYWNrIG15IG94IHdpdGggZml2ZSBkb3plbiBsaXF1b3IganVncy5cIlxuXCJTeW1wYXRoaXppbmcgd291bGQgbml4IFF1YWtlciBvYmplY3RpdmVzLlwiXG5cIldoZW4gem9tYmllcyBhcnJpdmUgYXQgZmF4LCBxdWlja2x5IGp1ZGdlLlwiXG5cIldheHkgam9ja3MgcXVpdmVyZWQgYW5kIGZ1bWJsZWQgdGhlIHBpenphLlwiXG5cIlRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgemFueSBkb2cuXCJcblwiRXhjaGFuZ2Ugd292ZW4gc2lsayBweWphbWFzIGZvciBibHVlIHF1YXJ0ei5cIlxuXCJUaGUgamF5cywgcGlnLCBmb3gsIHplYnJhIGFuZCBteSB3b2xmIHF1YWNrIVwiXG5cIkEgd2l6YXJkJ3Mgam9iIGlzIHRvIHF1aWNrbHkgZmluZ2VyIGV4LWNodW1wcy5cIlxuXCJUaGUgcXVpcmt5IGxhenkgZHdhcmYganVtcHMgb3ZlciB0aGUgb255eCBibGluZy5cIlxuXCJGb3h5IGRpdmEgSmVubmlmZXIgTG9wZXogd2FzIGJha2luZyBteSBxdWljaGUuXCJcblwiV2F0Y2ggXFxcIkplb3BhcmR5IVxcXCIsIEFsZXggVHJlYmVrJ3MgZnVuIHF1aXogZ2FtZS5cIlxuXCJCeSBKb3ZlLCBteSBzdHVkeSBvZiBxdWluZSBsZXhpY29ncmFwaHkgd29uIGEgcHJpemUhXCJcblwiWW91ciBnaXJsIHdvdmUgc2l4IGRvemVuIHBsYWlkIGphY2tldHMgYmVmb3JlIHNoZSBxdWl0LlwiXG5cIkdydW1weSB3aXphcmRzIGNyZWF0ZSBhIHRveGljIGJyZXcgZm9yIHRoZSBqb3ZpYWwgcXVlZW4uXCJcblwiQSBxdWl2ZXJpbmcgVGV4YXMgem9tYmllIGZvdWdodCBpbmsgcmVwdWJsaWMgamV3ZWxyeS5cIlxuXCJUaGUgd2l6YXJkIHF1aWNrbHkgamlueGVkIHRoZSBnbm9tZSBiZWZvcmUgaGUgdmFwb3JpemVkLlwiXG5cIlRoZSBqdWRnZSBhc2tlZCBhbGwgcXVlc3Rpb25zIGFtYXNzZWQgYnkgZml2ZSB3YXRjaGVkIGV4cGVydHMuXCJcblwiQmFjayBpbiBNYXkgd2UgZGVsaXZlcmVkIG94eWdlbiBlcXVpcG1lbnQgb2YgdGhlIHNhbWUgc2l6ZS5cIlxuXCJTaGUgcHJvbXB0bHkganVkZ2VkIGFudGlxdWUgaXZvcnkgYnVja2xlcyBmb3IgdGhlIG5leHQgcHJpemUuXCJcblwiSm9uIHF1aWNrbHkgcmVhbGl6ZWQgdGhhdCB0aGUgYmVhdXRpZnVsIGdvd25zIGFyZSBleHBlbnNpdmUuXCJcblwiU3F1YXNoIGhhcyBiZWNvbWUgYSBwb3B1bGFyIHJhY2tldCBnYW1lIGFuZCBmYWNpbGl0aWVzIGFyZSB3aWRlbHkgYXZhaWxhYmxlLlwiXG5cIkVxdWFsbHkgY292ZXRlZCBpcyB0aGUgc2V4eSBZMksgbG9nbyAobmFtZWQgZm9yIHRoZSBtaWxsZW5uaWFsIGNvbXB1dGVyIGJ1ZykuXCJcblwiRG9sZSBpcyBzb3JlbHkgdGVtcHRlZCB0byBmb3JnZXQgZXZlcnl0aGluZyBoZSBrbm93cyBhYm91dCB0aGUgMTk4MHMgdGF4IGN1dHMuXCJcblwiVGhlIG9mZmljZXJzIGhhdmUgYmVlbiBwbGFjZWQgb24gYWRtaW5pc3RyYXRpdmUgZHV0eSB3aGlsZSBhIGdyYW5kIGp1cnkgZXhhbWluZXMgdGhlIGNhc2UuXCJcblwiSGVhZCB1cCB0aGUgaGlsbCBhYm92ZSB0aGUgdG93biB0byBleHBsb3JlIHRoZSByZW1haW5zIG9mIHRoZSBhbmNpZW50IEdyZWVrIHRvd24gb2YgU3licml0YS5cIlxuXCJcXFwiSSBjYW4gYXQgbGVhc3QgcGFydGx5IHNhdmUgdGhlIG1vdmllIGZyb20gYmVpbmcgd3JlY2tlZCBieSBIZXJ6b2cncyBidW5nbGluZyxcXFwiIHdyaXRlcyBLaW5za2kuXCJcblwiVG8gYW5zd2VyIHRoaXMgcXVlc3Rpb24sIFZ5Z290c2t5IHByb3Bvc2VkIGEgc3BlY2lhbCBjb25jZXB0OiB0aGUgem9uZSBvZiBwcm94aW1hbCBkZXZlbG9wbWVudC5cIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɽ   # Convert input to lowercase.
Ǎ   # Remove non-alphabetical characters.
ka  # Push the lowercase alphabet.
ƈ   # Are the set of characters in the two strings the same?
</code></pre>
"
"249748","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>r</code>, 4 bytes</h1>
<pre><code>ÞFce
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJyIiwiyoAobuKCtGAgPT4gYOKCtG7OuyIsIsOeRmNlIiwiO+KAoCwpIiwiMTUwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show all boolean results<br />
<a href=""https://vyxal.pythonanywhere.com/#WyJyIiwiyoAobs67Iiwiw55GY2UiLCI74oCgW24sXSkiLCI0MjAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show only numbers returning truthy</p>
<p>Thanks to Steffan. This based on the alternative 5 byte answer below, removing the need for the <code>$</code>.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ÞF0pc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67Iiwiw55GMHBjIiwiO+KAoCwpIiwiMTUwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show all boolean results<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLDnkYwcGMiLCI74oCgW24sXSkiLCIxNjAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show only numbers returning truthy</p>
<pre><code>ÞF   # All 1-indexed Fibonacci numbers as a LazyList.
0p   # Prepend the list with 0
c    # Is the input contained in the list?
</code></pre>
<p>Alternative 5 bytes:</p>
<pre><code>ÞFc$e
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67Iiwiw55GYyRlIiwiO+KAoCwpIiwiMTUwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show all boolean results<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLDnkZjJGUiLCI74oCgW24sXSkiLCI0MjAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - show only numbers returning truthy</p>
<pre><code>ÞF   # All 1-indexed Fibonacci numbers as a LazyList.
c    # Is the input contained in the list?
$    # Swap above result with the input (this creates a copy of the input)
e    # Exponentiate. For an input of zero this will yield 0**0 == 1; for other
     # Fibonacci numbers, 1**{n&gt;0} == 1; otherwise 0**{n&gt;0} == 0.
</code></pre>
<p>The above two solutions work around the fact that there's no 0-indexed version of <code>ÞF</code>. Alternatively using <code>∆F</code> requires a different workaround, but it can also be done in 5 bytes:</p>
<pre><code>Þn∆Fc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67Iiwiw55u4oiGRmMiLCI74oCgLCkiLCIxNTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> - show all boolean results<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLDnm7iiIZGYyIsIjvigKBbbixdKSIsIjE2MDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> - show only numbers returning truthy</p>
<pre><code>Þn  # All integers in an infinite list (0, 1, -1, 2, -2, ...)
∆F  # nth Fibonacci number, 0-indexed
c   # Contains - Check if one thing contains another
</code></pre>
<p>Using <code>ʀ</code> (Inclusive range [0..input]) instead of <code>Þn</code> wouldn't work, because the Fibonacci numbers <span class=""math-container"">\$2\$</span> and <span class=""math-container"">\$3\$</span> are not members of the lists <span class=""math-container"">\$[0,1,1]\$</span> and <span class=""math-container"">\$[0,1,1,2]\$</span> respectively. It would be necessary to use <code>›ʀ</code> (the range [0..input+1]), but for non-Fibonacci numbers that is exponentially slower than using <code>Þn</code> (and <code>Þn∆Fc</code> is in turn a bit slower than <code>ÞFc$e</code>).</p>
<p>Note that <code>Þn</code> includes negative numbers, and <code>∆F</code> on a negative number returns a negative Fibonacci number. However, <code>Þn∆Fc</code> only returns truthy for nonnegative Fibonacci numbers, probably due to a bug in Vyxal.</p>
<hr />
<p>Without using any Fibonacci builtins (<strong>7 bytes</strong>):</p>
<pre><code>k≈⁽+dḞc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67Iiwia+KJiOKBvStk4bieYyIsIjvigKAsKSIsIjE1MCJd"" rel=""nofollow noreferrer"">Try it Online!</a> - show all boolean results<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCJr4omI4oG9K2ThuJ5jIiwiO+KAoFtuLF0pIiwiMTYwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a> - show only numbers returning truthy</p>
<p>The is based on <a href=""https://codegolf.stackexchange.com/a/223094/17216"">lyxal's answer to Fibonacci function or sequence</a>.</p>
<pre><code>k≈   # the list [0, 1]
⁽+d  # lambda x, y: x + y
Ḟ    # Create an infinite sequence based on the function and the initial list.
c    # Does the list contain the input?
</code></pre>
"
"249756","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>λ∑u$e;€f?fÞ•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu+KIkXUkZTvigqxmP2bDnuKAoiIsIiIsIltbWzEsIDJdLCBbMiwgNF0sIFs0LCA4XV0sIFtbLTQsIC00XSwgWy0xLCAxXSwgWzIsIC0yXV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is like, really, really, really bad.</p>
"
"249778","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>Ṗ$vḊvAa
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmWJHbhuIp2QWEiLCIiLCJbNiwgMTIsIDhdLCBbMywgNCwgNl1cblsxMCwgNSwgN10sIFsxLCA1LCAxMDBdXG5bMTQsIDEwMDUzLCA2LCA5XSwgWzEsMSwxLDFdXG5bMTJdLCBbN10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249790","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>v=vTΠ~Þ⇧h⁽⇧V
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ2PXZUzqB+w57ih6do4oG94oenViIsIuKIkSIsIltcIm5cIiwgXCJlXCIsIFwidlwiLCBcImVcIiwgXCJyXCIsIFwiIFwiLCBcImdcIiwgXCJvXCIsIFwiblwiLCBcIm5cIiwgXCJhXCIsIFwiIFwiLCBcImdcIiwgXCJpXCIsIFwidlwiLCBcImVcIiwgXCIgXCIsIFwieVwiLCBcIm9cIiwgXCJ1XCIsIFwiIFwiLCBcInVcIiwgXCJwXCJdXG5bXCJ2XCIsXCJpXCIsXCJwXCJdIl0="" rel=""noreferrer"">Try it Online!</a> I/O as char lists.</p>
<p>I feel like there's gotta be a smarter/faster way to do <code>Π~Þ⇧h</code>.</p>
<pre><code>v=           # Create an equality table
  vT         # Get all indices of each letter in the string
    Π        # Take the cartesian product, getting all combinations
     ~Þ⇧     # Filter by those which are strictly ascending
        h    # Get the first, which will be the first occurences
           V # To those indices in the original string...
         ⁽⇧  # Uppercase them
</code></pre>
"
"249794","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>ƛ78fMƛ÷₍ǑO∑;;∩÷›u„¦e*¦Ȯ%0p
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGmzc4Zk3Gm8O34oKNx5FP4oiROzviiKnDt+KAunXigJ7CpmUqwqbIriUwcCIsIiIsIjEwMFxuNyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pretty much a port of <a href=""https://codegolf.stackexchange.com/a/197271/103205"">Nick Kennedy's Jelly answer</a>. First argument <code>turns-1</code>, second argument <code>num_players</code>, players are zero-indexed.</p>
<h2>How?</h2>
<pre><code>                           #                 e.g. stack (top -&gt;)
ƛ78fMƛ÷₍ǑO∑;;∩÷›u„¦e*¦Ȯ%0p #                      100
ƛ                          # for i = 1..turns     77
 78f                       #   push, split        77 [7,8]
    M                      #   pair               [77,7] [77,8]
     ƛ                     #   for [i,7] [i,8]    [77,7]
      ÷                    #     split            77 7
       ₍                   #     parallel apply
        Ǒ                  #       multiplicity   1     
         O                 #       count          2
                           #     end              [1,2]
          ∑                #     sum              3
           ;               #   end                [3,0]
            ;              # end                  [[0,0],[0,0],[0,0],...]
             ∩             # transpose            [[0,0,0,...],[0,0,0,...]]
              ÷            # split                [0,0,0,...] [0,0,0,...]
               ›           # increment            [0,0,0,...] [1,1,1,...]
                u          # push -1              [0,0,0,...] [1,1,1,...] -1
                 „         # rotate left          [1,1,1,...] -1 [0,0,0,...]
                  ¦        # prefix sum           [1,1,1,...] -1 [0,0,0,...]
                   e       # exponent             [1,1,1,...] [1,1,1,...]
                    *      # multiply             [1,1,1,...]
                     ¦     # prefix sum           [1,2,3,...]
                      Ȯ    # over                 [1,2,3,...] 3
                       %   # modulo               [1,2,0,...]
                        0p # prepend 0            [0,1,2,...]
</code></pre>
"
"249803","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>₀₀×ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoDigoDDl8WAIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>   ŀ # Make a grid of size
₀    # Ten
 ₀   # By ten
  ×  # Filled with asterisks
</code></pre>
"
"249834","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>£ƛ¥h=[&amp;Ḣ⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwiwqPGm8KlaD1bJuG4ouKHpyIsIiIsInllZXRcbnllbGxvdyBzdWJtYXJpbmUgdGltZSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Literally is different by one character from <a href=""https://codegolf.stackexchange.com/a/249833/92689"">this</a>, and also very similar to <a href=""https://codegolf.stackexchange.com/a/249605/92689"">this</a>.</p>
<p>Input as strings, output as char list. (<code>s</code> flag in link smashes)</p>
<pre><code>£ƛ¥h=[&amp;Ḣ⇧
£         # Put the first input in the register
 ƛ        # Map over the second input:
  ¥h=[    #  Is the current character equal to the first character of the register?
      &amp;Ḣ⇧ #  If so, remove the first character of the register and uppercase the current character
          #  (implicit) else, return the current character unchanged
</code></pre>
"
"249835","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ṄṘ‡R⁼c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYThuZjigKFS4oG8YyIsIiIsIjIxIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṄṘ‡R⁼c
Ṅ      # Integer partitions (from longest to shortest)
 Ṙ     # Reverse to make the shortest partitions be at the beginning
  ‡  c # Find the first element that satisfies:
   R   #  Reverse each
    ⁼  #  Equal to the original item?
</code></pre>
"
"249838","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ẋf⁰↔U
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwi4bqLZuKBsOKGlFUiLCIiLCJbMSwyLDNdXG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249844","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>‛oe₀Ŀ∑ṘṄĖ₂∆ċt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJtvZeKCgMS/4oiR4bmY4bmExJbigoLiiIbEi3QiLCIiLCIqbytlbyJd"" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>    Ŀ∑        # Replace each of 
‛oe           # o and e
   ₀          # With 1 and 0
      Ṙ       # Reverse 
       Ṅ      # Join by spaces
        Ė     # Eval
         ₂    # Even? (1-n%2)
          ∆ċt # Last character of num -&gt; cardinal (one -&gt; e, zero -&gt; o)
</code></pre>
"
"249848","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 32 bytes</h1>
<pre><code>k₁w≬ƛ£?ÞT›'¥ε∑ṅ}ÞfU↔‹vÞǔ∑:fGε›*‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwia+KCgXfiiazGm8KjP8OeVOKAuifCpc614oiR4bmFfcOeZlXihpTigLl2w57HlOKIkTpmR8614oC6KuKAuSIsIiIsIltbMSwgMSwgMCwgMV0sIFsxLCAxLCAxLCAxXSwgWzAsIDAsIDEsIDFdLCBbMSwgMSwgMSwgMV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan Allan's Jelly answer, byte count can certainly be way less.</p>
"
"249870","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>R</code>, 9 bytes</h1>
<pre><code>Ṗƛ2ẇvss;U
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJSUCIsIiIsIuG5lsabMuG6h3ZzcztVIiwiIiwiNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <span class=""math-container"">\$n\$</span> as input.</p>
<pre><code>Ṗƛ2ẇvss;U
Ṗ         # Permutations of [1, n]
 ƛ        # For each:
  2ẇ      #  Split into chunks of length 2
    vs    #  Sort each
      s   #  Sort
       ;  # Close map
        U # Uniquify
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>dɾ2ḋḋ'fÞu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiZMm+MuG4i+G4iydmw551IiwiIiwiMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of caird's Jelly answer, takes <span class=""math-container"">\$\frac{n}{2}\$</span> as input.</p>
<pre><code>dɾ2ḋḋ'fÞu
d         # Double, n × 2
 ɾ        # Range [1, that]
  2ḋ      # Combinations without replacement of length 2
    ḋ     # Combinations without replacement of length {input}
     '    # Filter for:
      fÞu #  Is it unique after flattening?
</code></pre>
"
"249886","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>vṅ1JĠ•∷ṅṄṪ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24bmFMUrEoOKAouKIt+G5heG5hOG5qiIsIlxcXCJwx48iLCJbMCwyLDMsMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly, so go upvote that.</p>
"
"249890","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, <s>6</s> 5 bytes</h1>
<pre><code>≬K¯÷ẋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBbCIsIiIsIuKJrEvCr8O34bqLIiwiIiwiMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyXG4zM1xuMzRcbjM1XG4zNlxuMTAwXG4yMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is the same as the 6 byte answer below except the length is taken by the <code>l</code> flag rather than a <code>L</code> element.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 6 bytes</h1>
<pre><code>≬K¯÷ẋL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLJvihu4oK0YCA9PiBg4oK0bs67Iiwi4omsS8Kvw7fhuotMIiwiO+KAoCwpIiwiMTExIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>≬    # 3-element lambda:
  K  # Push a list of the divisors, from 1 to the number itself in increasing order
  ¯  # Deltas - returns a list of the consecutive differences in the list.
     # The resulting list has a length of 1 less than the one fed to it.
  ÷  # Unwrap the list onto the stack. For a non-empty list, this is effectively
     # equivalent to t (Tail - get the last item). But for an empty list, the
     # result is effectively whatever was already on the stack, i.e. the the
     # number whose list of divisors was taken, i.e., 1, the only one that yields
     # an empty deltas list. This makes 1, instead of 0, the fixed point.
ẋ    # Repeat the lambda on the number at the top of the stack (which is initially
     # the input) until the result no longer changes, returning a list of the
     # results. The last result will be 1, our fixed point.
L    # Length
</code></pre>
<p>This is very slow for most numbers of more than 60 decimal digits or so, since it has to generate a full list of divisors (even if it only uses the largest two). Prime factorization is still fast enough at that level, but unless the number has only one distinct prime factor, the list of divisors will be orders of magnitude longer.</p>
"
"249922","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>`(?:'€?')+`ẎƛḢṪ‛''\'V
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgKD86J+KCrD8nKStg4bqOxpvhuKLhuarigJsnJ1xcJ1YiLCIiLCJcIidhYmMnZGVmJ2doaSdcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Regex in golflangs go brr</p>
<p>Uses @Neil's regex, go upvote that.</p>
"
"249944","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>»~qǔ:ṙ⁋»₆τ¦₈+b:RJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu35xx5Q64bmZ4oGLwrvigobPhMKm4oKIK2I6UkoiLCJ24bmFdsKyduKBi2BcXG5cXG5gamAxMGBgWE9gxL8iLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> Port of 05AB1E thanks to Steffan.</p>
<pre><code>          ¦       # Cumulative sums of...
        ₆τ        # Base 64 digits of...
»~qǔ:ṙ⁋»          # Compressed integer
           ₈+     # + 256
             b    # Convert each to binary
              :RJ # Append each matrix reversed
</code></pre>
"
"249961","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ÞD?L‹ǔṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkQ/TOKAuceU4bmgIiwiIiwiW1sxNywgNCwgNV0sIFsyNCwgMTYsIDVdLCBbOSwgMjQsIDEwXSwgWzEsIDE0LCAyMl0sIFsxLCAyMSwgMjRdLCBbNCwgNCwgMTddLCBbMjQsIDI1LCAxN11dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes 4 bytes to get it in the right order. If the order didn't matter, it would be 3 bytes (remove the <code>?L‹ǔ</code>).</p>
"
"249989","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>:∩JvøĖ≤fa
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI64oipSnbDuMSW4omkZmEiLCIiLCJbWzMsMiwzLDQsMiwxXSxbNCwxLDQsMiw0LDJdLFs0LDIsMywzLDQsMV0sWzEsMSwyLDIsMCw0XSxbMSwxLDIsMiwzLDRdLFszLDIsMywxLDMsMV0sWzEsMSwyLDIsMyw0XV1cbjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"249997","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>«∨λð«fvO:»TM»₄τÞ•J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq+KIqM67w7DCq2Z2TzrCu1RNwrvigoTPhMOe4oCiSiIsIiIsInBubmRubnFwZG5wcW5kIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>«∨λð«fvO:»TM»₄τÞ•J
«∨λð«               # Compressed string &quot;pndq&quot;
     f              # Convert to list of characters
      vO            # For each, how many times does it appear in the input?
        :           # Duplicate it
         »TM»       # Compressed integer 21241
             ₄τ     # To base-26 as list: [1, 5, 10, 25]
               Þ•   # Dot product of this and the other list
                 J  # Append this to the list
</code></pre>
"
"250003","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>_&amp;›¥D8τṅ$HWṄ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJfJuKAusKlRDjPhOG5hSRIV+G5hCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJfJuKAusKlRDjPhOG5hSRIV+G5hF8m4oC6wqVEOM+E4bmFJEhX4bmEXybigLrCpUQ4z4ThuYUkSFfhuYRfJuKAusKlRDjPhOG5hSRIV+G5hF8m4oC6wqVEOM+E4bmFJEhX4bmEXybigLrCpUQ4z4ThuYUkSFfhuYRfJuKAusKlRDjPhOG5hSRIV+G5hF8m4oC6wqVEOM+E4bmFJEhX4bmEXybigLrCpUQ4z4ThuYUkSFfhuYRfJuKAusKlRDjPhOG5hSRIV+G5hCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online 10 times!</a></p>
"
"250018","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>0w?(:k≈$vß&quot;1Wf)Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwdz8oOmviiYgkdsOfXCIxV2Yp4bqOIiwiIiwiMTUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same idea as the Jelly answer.</p>
"
"250042","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>g</code>, 4 bytes</h1>
<pre><code>¡†&quot;æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBZyIsIiIsIsKh4oCgXCLDpiIsIiIsIjJcbjNcbjRcbjVcbjdcbjExXG4xM1xuMTdcbjcwOVxuODUxXG45OTEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<p>This is the same as the 5 byte answer below except the minimum is taken by the <code>g</code> flag rather than a <code>g</code> element.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>¡†&quot;æg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLCoeKAoFwiw6ZnIiwiO+KAoFtuLF0pIiwiMTUwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqHigKBcIsOmZyIsIiIsIjJcbjNcbjRcbjVcbjdcbjExXG4xM1xuMTdcbjcwOVxuODUxXG45OTEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<p>This makes use of <a href=""https://codegolf.stackexchange.com/questions/94348/prime-counting-function/250044#250044"">Prime counting function</a>, based on <a href=""https://codegolf.stackexchange.com/a/94364/17216"">Dennis's 05AB1E solution</a> to that challenge. This is actually much faster than the other two 5 byte solutions presented below it.</p>
<pre><code>¡  # Factorial
†  # Number of distinct prime factors – when applied to the factorial, this
   # gives the index of the greatest prime ≤ the input number (1-indexed).
&quot;  # Wrap the top two items (the input number, and the above result) in a list.
æ  # Is the number prime? (Vectorized)
g  # Minimum - effectively applies a boolean AND to the list
</code></pre>
<hr />
<p>Alternative 5 bytes:</p>
<pre><code>Þpḟ›æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLDnnDhuJ/igLrDpiIsIjvigKBbbixdKSIsIjEwMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55w4bif4oC6w6YiLCIiLCIyXG4zXG40XG41XG43XG4xMVxuMTNcbjE3XG43MDlcbjg1MVxuOTkxIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<pre><code>Þp  # An infinite list of primes
ḟ   # Index of input number in that list (0-indexed; -1 if not found)
›   # Add 1
æ   # Is the number prime?
</code></pre>
<hr />
<p>Another alternative 5 bytes:</p>
<pre><code>Þp‹ǎc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChuzrsiLCLDnnDigLnHjmMiLCI74oCgW24sXSkiLCIxMDAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55w4oC5x45jIiwiIiwiMlxuM1xuNFxuNVxuN1xuMTFcbjEzXG4xN1xuNzA5XG44NTFcbjk5MSJd"" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/130398/17216"">Datboi's 05AB1E solution</a>. This is much slower than the primary 5 byte solution above, but much faster than its 05AB1E counterpart.</p>
<pre><code>Þp # An infinite list of primes
‹  # Subtract 1 from every item on the list
ǎ  # Nth prime - vectorized to the entire list
c  # Contains - Is the input number a member of that list?
</code></pre>
"
"250044","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, 2 bytes</h1>
<pre><code>¡Ǐ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBbCIsIiIsIsKhx48iLCIiLCIxXG4yXG41Il0="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<p>This is the same as the 3 byte answer below except the length is taken by the <code>l</code> flag rather than an <code>L</code> element.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¡ǏL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67IiwiwqHHj0wiLCI74oCgLCkiLCIyMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¡  # Factorial
Ǐ  # Prime factorization - list of distinct prime factors
L  # Length of that list
</code></pre>
<p>Direct port of <a href=""https://codegolf.stackexchange.com/a/94364/17216"">Dennis's 05AB1E solution</a>, which is the accepted answer, so one would infer that it meets the challenge's specifications.</p>
<p>The element <code>†</code> could be considered a &quot;prime-counting function&quot;, even though it counts the distinct prime factors of the input, not the primes less than or equal to the input. The solution using that built-in is <strong>2 bytes</strong>:</p>
<pre><code>¡†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67IiwiwqHigKAiLCI74oCgLCkiLCIyMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¡  # Factorial
†  # Number of distinct prime factors
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ɾ⟑‹¡²$%;∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLKgChu4oK0YCA9PiBg4oK0bs67Iiwiyb7in5HigLnCocKyJCU74oiRIiwiO+KAoCwpIiwiMjAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>With no factorization built-ins, instead using Wilson's theorem:</p>
<pre><code>ɾ  # Inclusive One Range (from 1 to input)
⟑  # Apply lambda to each individual list item:
‹  # Subtract 1
¡  # Factorial
²  # Square
$  # Swap 
%  # Modulo - this will be (n-1)!² % n
;  # Close lambda
∑  # Sum
</code></pre>
<p>With the <code>r</code> flag this is <strong>8 bytes</strong>: <a href=""https://vyxal.pythonanywhere.com/#WyJyIiwiyoAobuKCtGAgPT4gYOKCtG7OuyIsIsm+4p+R4oC5wqHCsiU74oiRIiwiO+KAoCwpIiwiMjAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a><br />
With the <code>rs</code> flags this is <strong>6 bytes</strong>: <a href=""https://vyxal.pythonanywhere.com/#WyJBcnMiLCIiLCLJvuKfkeKAucKhwrIlIiwiIiwiMFxuMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjExXG4xMlxuMTNcbjE0XG4xNVxuMTZcbjE3XG4xOFxuMTlcbjIwXG4yMVxuMjJcbjIzXG4yNFxuMjVcbjI2XG4yN1xuMjhcbjI5XG4zMFxuMzFcbjMyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250058","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ʀE⋏
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgEXii48iLCIiLCIxNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ʀE⋏
ʀ    # Range from zero to the input number, inclusive
 E   # Calculate 2 to the power of each list item (vectorized)
  ⋏  # Bitwise AND each list element with the input number
</code></pre>
"
"250075","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>₍fb3eṠ2c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLDt+G5oShuzrsiLCLigo1mYjNl4bmgMmMiLCI74oCgW24sXSkiLCJbLTMyLDI1Nl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oKNZmIzZeG5oDJjIiwiIiwiM1xuOVxuMThcbjE5MlxuMjg4XG41MjBcbjUyNDMwNFxuMTFcbjEwMVxuMTAwMVxuMTAxMFxuMTEwMFxuMTAwMDAwMVxuMTEwMDAwMDAwMFxuMTAwMDAwMDAxMFxuMFxuMVxuMTEyXG4yMDBcbjY0OVxuLTFcbi0zIl0="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<pre><code>₍    # Parallel Apply Wrap - applies the following two operations to the input,
     # wrapping the two results in a list.
  f  # Flatten (convert decimal string into list of digits)
  b  # Convert to binary (as a list of digits, which will all be negative if the
     # number is negative)
3e   # Cube (applied to each digit)
Ṡ    # Vectorized Sum (apply individually to each list)
2c   # Does the resulting list (of two items) contain the number 2?
</code></pre>
<p>Alternatively instead of <code>3e</code> to cube each digit, <code>ʀṠ</code> could be used to triangularize each digit, or <code>√√</code> to take the fourth root of each digit.</p>
<p>If not for the fact that the challenge requires that negative numbers be tested (and that they can't be Two Bit Numbers™), this could be 7 bytes, because we could use <code>²</code> to square instead of <code>3e</code> to cube.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 9 bytes</h1>
<pre><code>∆b&quot;vs⌊11c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLDt+G5oShuzrsiLCLiiIZiXCJ2c+KMijExYyIsIjvigKBbbixdKSIsIlstMzIsMjU2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a><br />
<a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oiGYlwidnPijIoxMWMiLCIiLCIzXG45XG4xOFxuMTkyXG4yODhcbjUyMFxuNTI0MzA0XG4xMVxuMTAxXG4xMDAxXG4xMDEwXG4xMTAwXG4xMDAwMDAxXG4xMTAwMDAwMDAwXG4xMDAwMDAwMDEwXG4wXG4xXG4xMTJcbjIwMFxuNjQ5XG4tMVxuLTMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> - test cases only</p>
<pre><code>∆b   # Convert to binary as a string.
&quot;    # Pair that string and the original number as two items in a list.
vs   # Vectorized Sort - sort each individual item in the list (sorts the digits)
⌊    # Floor - in this context, used to interpret strings as decimal and convert
     # them to integers.
11c  # Does the resulting list (of two items) contain the number 11?
</code></pre>
<p>This solution was unusable at the time of my original posting, due to <code>⌊</code> not working on <code>0</code>. The bug has since been fixed.</p>
"
"250081","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>13</s> 10 bytes</h1>
<pre><code>~±ÞKvI~≈fh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwifsKxw55Ldkl+4omIZmgiLCIiLCJcIjAuMTgxOFwiXG5cIjYuNjZcIlxuXCIzLjNcIlxuXCIwLjA1MjYzMTU3ODk0NzM2ODQyMTA1MjYzMTU3ODk0NzM2ODQyMTBcIlxuXCIzNy4wMzcwXCJcblwiODguOTk4ODk5XCJcblwiMTY1Ny43NzcxNjU3Nzc3XCJcblwiNS4wMDAwMDAwXCJcblwiMjU4ODU4ODI1ODguNTg4XCJcblwiOS45OTk5OVwiXG5cIjEuMjIxMTIyXCJcblwiMS4yMTEyMTEzMjExXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>~±ÞKvI~≈fh
~±         # Filter for numeric, to remove the &quot;.&quot;. Converts to list of chars
  ÞK       # Suffixes
    vI     # Split each into a list of two halves
      ~≈   # Filter for all equal
        f  # Flatten
         h # First item
</code></pre>
<p>Original 13 bytes was porting UnrelatedString's Jelly answer, but porting Jonathan Allan's answer saved 3 bytes, so upvote those two!</p>
<p>Alternative:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>goÞK½~≈hhh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZ2/DnkvCvX7iiYhoaGgiLCIiLCJcIjAuMTgxOFwiXG5cIjYuNjZcIlxuXCIzLjNcIlxuXCIwLjA1MjYzMTU3ODk0NzM2ODQyMTA1MjYzMTU3ODk0NzM2ODQyMTBcIlxuXCIzNy4wMzcwXCJcblwiODguOTk4ODk5XCJcblwiMTY1Ny43NzcxNjU3Nzc3XCJcblwiNS4wMDAwMDAwXCJcblwiMjU4ODU4ODI1ODguNTg4XCJcblwiOS45OTk5OVwiXG5cIjEuMjIxMTIyXCJcblwiMS4yMTEyMTEzMjExXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>goÞK½~≈hhh
g          # Minimum (&quot;.&quot;)
 o         # Remove it
  ÞK       # Suffixes
    ½      # Split each into a list of two halves
     ~≈    # Filter for all equal
       h   # First list
        h  # First string
         h # First character
</code></pre>
"
"250136","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆ċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oiGxIsiLCIiLCIxXG4yXG4zXG40XG41XG42XG43XG44XG45Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builtin.</p>
"
"250157","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>øAṅ₄ɾkaĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuEHhuYXigoTJvmthxL8iLCIiLCJqb2JhdCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250160","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>19</s> 17 bytes</h1>
<pre><code>C6+¨pe11%ṅ⁋3l⁺↔SO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDNivCqHBlMTEl4bmF4oGLM2zigbrihpRTTyIsIiIsIltcIiBfIF8gXCIsIFwifF98X3xcIiwgXCJ8X3xffFwiXSJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiQzYrwqhwZTExJeG5heKBizNs4oG64oaUU08iLCIiLCJbXCIgXyBcIixcInxffFwiXVxuW1wiX19fXCIsXCJ8X3xcIl1cbltcIiAgIFwiLFwifF98XCJdXG5bXCIgXyAgXyAgX18gX18gIFwiLFwifF98ICBffCAgX3xffHxcIl1cbltcIiBfICAgXCIsXCJ8X3xfIFwiLFwifF98X3xcIl1cbltcIiBfICAgXCIsXCJ8IHxfIFwiLFwifF98X3xcIl1cbltcIiBfICAgXCIsXCJ8X3xfIFwiLFwifF9fX3xcIl1cbltcIiBfIF8gXCIsXCJ8X3xffFwiLFwifF98X3xcIl0iXQ=="" rel=""nofollow noreferrer"">verify test cases</a>.</p>
<p>-2 bytes thanks to Command Master</p>
"
"250171","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>₀Nτṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoBOz4ThuYUiLCIiLCIyMDQ4Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>  τ   # From base 10 to base
₀     # Ten
 N    # Negated
   ṅ  # Join by nothing
      # Implicitly print
</code></pre>
"
"250209","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 - 5 = 6 bytes</h1>
<pre><code>ɾÞS≬∑?=c\+j
</code></pre>
<p>Just like most of the other answers in golfing languages.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsOeU+KJrOKIkT89Y1xcK2oiLCIiLCIyNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>ɾ            # Range from 1 to n
 ÞS          # All sublists
   ≬         # Three element lambda
    ∑        #   Sum
      =      #   Equals
     ?       #   The input
       c     # First truthy item under function application 
          j  # Join by:
        \+   # &quot;+&quot;
</code></pre>
"
"250214","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 7 bytes</h1>
<pre><code>Zƛ≈[∑|G
</code></pre>
<p><em>-1 byte thanks to <a href=""https://codegolf.stackexchange.com/users/100664/emanresu-a"">@emanresu A</a></em></p>
<p>Add the <code>ḋ</code> flag if you want to see the numbers in decimal format.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJaxpviiYhb4oiRfEciLCIiLCJbLTMuMiwgLTMuMiwgLTIuNCwgNywgLTEwLjFdXG5bMTAwLCAtMy4yLCAyLjQsIC03LCAtMTAuMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>Z        # Zip
 ƛ       # On each pair
   [     # If
  ≈      # All are equal
    ∑    # Sum
     |   # Otherwise
      G  # Get the greatest value
</code></pre>
"
"250215","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ṗṠ'ds?s=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZfhuaAnZHM/cz0iLCIiLCJiYWNjYmEiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Tack on a <code>;U</code> if halves must be unique.</p>
<pre><code>ṗṠ       # Subsequences as strings
  '      # Filtered by
   ds    # It doubled, sorted
       = # Equals...
     ?s  # The input sorted
</code></pre>
"
"250232","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>⇧y_sİ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZiIsIuKHp3lfc8SwIiwi4oiRIiwiYWFhYWJiYmJcbmFiYWJcbmFhYmJhYVxuYWFiYmFhYWFcbmJhY2NiYVxuYWFiYmNjXG5hYmNhYmNcbmFiYWFjYmNhIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of loopy walt's answer. I/O as list of chars.</p>
<pre><code>⇧y_sİ
⇧     # Grade up
 y_   # Every other item starting from the first
   s  # Sort
    İ # Index into the input
</code></pre>
<p><code>y_</code> (uninterleave, pop) could alternatively be <code>2Ḟ</code> (every 2nd item).</p>
"
"250238","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>›3•D⌊=*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLoz4oCiROKMij0qIiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to Steffan.</p>
<p>A different approach that's annoyingly longer.</p>
<pre><code>›       # Increment
 3•     # Log 3
   D⌊=  # Check if it's an integer
      * # Multiply by that
</code></pre>
"
"250243","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>⁽L€*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIuKBvUzigqwqIiwiIiwiW1sxLCAyXSwgWzMsIFs0LCA1XV0sIDZdXG5bWzMsIFsyLCA0XV1dXG5bWzksIFtbMzldLCBbNCwgWzU5XV1dXSwgMjBdXG5bMiwgWzI5XV1cbltbW1tbW1tbOV1dXV1dXV1dIl0="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>⁽L€*
⁽ €  # At each value in the input, all the way down, run the following on the multi-dimensional index of the current value:
 L   # Length. This gets the current depth
   * # Vectorizically (is that a word?) multiply by the input
</code></pre>
"
"250248","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ẋΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuovOoCIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250253","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 5 bytes</h1>
<pre><code>Ṫ(²4Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuaoowrI04bqOIiwiIiwiOCJd"" rel=""nofollow noreferrer"">Try it online</a>, or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmqKMKyNOG6jiIsIiIsIjFcbjhcbjE1XG4yMFxuODAiXQ=="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p>Explanation:</p>
<pre><code>Ṫ      # Pop, push 1 then the input
 (     # [Input] times:
  ²    #   Square
   4Ẏ  #   Get the first 4 digits
</code></pre>
"
"250278","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>{nɾṄ,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyI1IiwiIiwie27JvuG5hCwiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> The <code>5</code> flag makes the online interpreter time out after 5 seconds.</p>
<p>Explanation:</p>
<pre><code>{      # Open a(n infinite) while loop
 n     # Get the loop variable's value
  ɾ    # Push the range from 1 to n
   Ṅ   # Join by spaces (ɾ creates a list)
    ,  # Print
</code></pre>
"
"250281","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>₌Þ∴=›*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigozDnuKItD3igLoqIiwiIiwiWzEsIDIsIDNdXG5bMSwgMywgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₌      # Do both of these...
 Þ∴    # Elementwise maximum
   =›  # Equality, incremented -&gt; list of 1s where unequal, 2s where equal
     * # Multiply by that.
</code></pre>
"
"250285","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Ṗ'Ṙ=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYn4bmYPSIsIiIsImFwb3RhdG8iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> Outputs all possibilities with duplicates. Add <code>;U</code> to remove them. Takes permutations and only keeps those that are equal after reversal.</p>
"
"250339","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ẏ↵*∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/ihrUq4oiRIiwiIiwiMTIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ẏ    # Exclusive range 0-length
 ↵   # 10 to the power of each of those
  *  # Multiply by the input
   ∑ # Sum
</code></pre>
"
"250343","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>₌ẏL+↲›⌊∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oKM4bqPTCvihrLigLrijIriiJEiLCIiLCJcIjFcIlxuXCIxMlwiXG5cIjEyM1wiXG5cIjY3ODlcIlxuXCI0ODE1MTYyMzQyXCIiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>(yes I know there's a 4 byter, but I liked this approach so much I posted it separately)</p>
<p>Kids these days with their &quot;ten to the power of&quot; approaches. Hasn't anyone ever heard of literal spec interpretation? :p</p>
<p>Takes input as a string.</p>
<h2>Explained</h2>
<pre><code>₌ẏL+↲›⌊∑
₌ẏL      # Push the range [0, len(in)) and len(in)
  +      # add those together
   ↲›    # pad the input left with spaces until length for each item in that list and replace all spaces with 0s
     ⌊∑  # convert each item to int and sum
</code></pre>
"
"250366","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>aƛ?0pøĖ¦ε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsImHGmz8wcMO4xJbCps61IiwiIiwiW11cblswXVxuWzEsIDEsIDFdXG5bMSwgMCwgMCwgMV1cblswLCAxLCAwLCAxXVxuWzEsIDAsIDAsIDEsIDEsIDEsIDAsIDAsIDEsIDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>aƛ?0pøĖ¦ε
a         # Are there any ones in the list?
 ƛ        # Map over a list in the range [1, that]. For 0 this will just be an empty array, otherwise [1].
  ?       #  Push input
   0p     #  Prepend a zero
     øĖ   #  Run-length encode: Push their values and their lengths, separately, each onto the stack.
       ¦  #  Cumulative sum of the lengths
        ε #  For each in that, take the absolute difference of it and its corresponding value.
</code></pre>
<p>Returns a singleton list of the list, or in the case of an empty list, an empty list (not <code>[[]]</code>). If that's not allowed:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h2>
<pre><code>a[0pøĖ¦ε|¾
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsImFbMHDDuMSWwqbOtXzCviIsIiIsIltdXG5bMF1cblsxLCAxLCAxXVxuWzEsIDAsIDAsIDFdXG5bMCwgMSwgMCwgMV1cblsxLCAwLCAwLCAxLCAxLCAxLCAwLCAwLCAxLCAxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>a[0pøĖ¦ε|¾
a          # Are there any ones in the list?
 [         # If so:
  0p       #  Prepend a zero to the input
    øĖ     #  Run-length encode: Push their values and their lengths, separately, each onto the stack.
      ¦    #  Cumulative sum of the lengths
       ε   #  For each in that, take the absolute difference of it and its corresponding value.
        |  # Otherwise:
         ¾ #  Push an empty list
</code></pre>
<p>Other solutions:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h2>
<pre><code>ẏ‡?iḊ'h?i;v₍gG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/igKE/aeG4iidoP2k7duKCjWdHIiwiIiwiWzEsIDAsIDAsIDEsIDEsIDEsIDAsIDAsIDEsIDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ẏ‡?iḊ'h?i;v₍gG
ẏ               # Push a list in the range [0, length)
 ‡  Ḋ           # Adjacent group by:
  ?i            #  Index into the input
     '          # Filter for {when this returns 1}:
      h?i;      #  Index the first item of this list into the input
          v₍gG  # For each, get a list [min, max].
</code></pre>
<p>Once <a href=""https://github.com/Vyxal/Vyxal/issues/1349"" rel=""nofollow noreferrer"">a bug</a> is fixed, this will work:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h2>
<pre><code>Ġ?żȮ•*~hv₍gG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEoD/FvMiu4oCiKnbin5E7fmh24oKNZ0ciLCIiLCJbMSwgMCwgMCwgMSwgMSwgMSwgMCwgMCwgMSwgMV0iXQ=="" rel=""nofollow noreferrer"">Try it online!</a> Includes a workaround that costs 3 bytes.</p>
<pre><code>Ġ?żȮ•*~hv₍gG
Ġ            # Group consecutive identical items into their own list (call this x)
 ?ż          # On the input, get a range [1, length] (call this y)
   Ȯ         # Over, push x again
    •        # Mold y like x
     *       # Vectorizically multiply this by x
     v⟑;     # Bug workaround
      ~h     # Filter for where the first item is not 0
        v₍gG # For each, get a list [min, max]
</code></pre>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h2>
<pre><code>k+ƛ?T$Ȯ+F;∩
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrK8abP1QkyK4rRjviiKkiLCIiLCJbMCwxLDAsMSwxLDEsMCwxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<pre><code>k+ƛ?T$Ȯ+F;∩
k+          # Push [1, -1].
  ƛ         # Map over it:
   ?T       #  Get truthy indices in the input (call this X).
     $      #  Swap so the current item (call it Y) is at the top.
      Ȯ     #  Over, push the item next the top item at the stack. Stack: X, Y, X.
       +    #  Vectorizing addition, call this Z.
        F   #  Filter-reject: remove items in X that are in Z.
         ;  # Close map.
          ∩ # Transpose.
</code></pre>
"
"250386","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>vẏΠ'?¨£iÞṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24bqPzqAnP8KowqNpw57huaAiLCI74oGLIiwiW1sxLCA1LCA3LCAxMF0sIFsyLCA2LCA2LCA4LCAxMl0sIFs0LCA1LCA5XV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
"
"250437","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>2ḋṖƛ?$(nnṘĿ;U
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIy4biL4bmWxps/JChubuG5mMS/O1UiLCIiLCJbMCwxLDIsM10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan Allan's new Jelly answer.</p>
"
"250448","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>∑½₌N-Π*√
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJHCveKCjE4tzqAq4oiaIiwiIiwiOSwzLDciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em><a href=""https://vyxal.pythonanywhere.com/#WyLhuItyIiwiIiwi4oiRwr1+Lc6gKuKImiIsIiIsIjksMyw3Il0="" rel=""nofollow noreferrer"">A 7 byter with <code>-r</code></a></em></p>
<p>Outputs as a fraction representation. <a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLiiJHCvSR+Lc6g4oCeKuKImiIsIiIsIjksMyw3Il0="" rel=""nofollow noreferrer"">Try it Online!</a> if you want decimals as output.</p>
<p>Takes the 3 side lengths as a list of numbers.</p>
<p>Quite literal implementation of Heron's formula, with some extra insight from Bubbler's answer.</p>
<h2>Explained</h2>
<pre><code>∑½₌N-Π*√
∑½       # Half sum of the side lengths
  ₌N-    # Push the half sum negated, as well as each side length minus the half sum
     Π*  # Take the product of the subtracted side lengths and multiply it by the negated half sum
       √ # Take the square root of that
</code></pre>
"
"250476","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>ė2ḋƛ∩÷Ṙ¹∇Ȧ;‡⁰꘍∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwixJcy4biLxpviiKnDt+G5mMK54oiHyKY74oCh4oGw6piN4oi1IiwiIiwiXCJhYmNkXCIsIFwiYWRjYlwiXG5cInliZ2hcIiwgXCJlcG1uXCJcblwic2xpbWVcIiwgXCJzbGltZVwiXG5cInllYm9jXCIsIFwieW9xcWFcIlxuXCJ1bm51YVwiLCBcIm11dW5hXCJcblwib29iaXNcIiwgXCJvb2JpXCJcblwieXVhY2VcIiwgXCJ5dWFjXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>ė2ḋƛ∩÷</code> could be <code>ẏ2ḋƛ¹İ</code> for the same byte count.</p>
<pre><code>ė2ḋƛ∩÷Ṙ¹∇Ȧ;‡⁰꘍∵
ė                # Enumerate, make a list [index, x] for each x in the first input.
 2ḋ              # Combinations without replacement of length 2; pairs.
   ƛ             # For each:
    ∩            #  Transpose
     ÷           #  Dump; push both items onto the stack.
      Ṙ          #  Reverse the top pair (the pair of two characters). Call this Y, and the other pair X.
       ¹         #  Push the first input
        ∇        #  Push it under the top two values of the stack, aka c,a,b.
         Ȧ       #  Assign; replace each of the indices in X with the corresponding value in Y.
          ;      # Close map.
           ‡  ∵  # Minimum by:
            ⁰꘍   #  Levenshtein distance with the second input.
</code></pre>
"
"250489","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>‹⋏
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLnii48iLCIiLCI0MyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just a port of Jelly and JS. Bitwise AND with n-1. Returns positive integer for true, 0 for false.</p>
<h1><a href=""http://www.swi-prolog.org"" rel=""nofollow noreferrer"">Prolog (SWI)</a>, 13 bytes</h1>
<pre><code>\N:-0&lt;N-1/\N.
</code></pre>
<p><a href=""https://tio.run/##KyjKz8lP1y0uz/z/P8bPStfAxk/XUD/GTw/INTLV44ox0QMA"" rel=""nofollow noreferrer"" title=""Prolog (SWI) – Try It Online"">Try it online!</a></p>
<p>-4 thanks to Jo King</p>
"
"250497","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Ṅ's¯1J≈;Ṫḃ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmEJ3PCrzFK4omIO+G5quG4gyIsIiIsIjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A non-bitwise answer that doesn't port Javascript.</p>
<h2>Explained</h2>
<pre><code>Ṅ's¯1J≈;Ṫḃ
Ṅ           # Integer partitions of the input
 '     ;    # Filtered by:
  s¯        #  Are the deltas of the sorted partition
    1J≈     #  All 1?
        Ṫḃ  # Remove the tail of the list because that's just the input as a single item and then return whether there's any items in the list.
</code></pre>
"
"250509","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ɾḋṗṘµ⁰vḋÞfUL;t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuG4i+G5l+G5mMK14oGwduG4i8OeZlVMO3QiLCIiLCI0XG4zXG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Basically a port of Jelly, aka extremely slow.</p>
<p>Explanation coming soon.</p>
"
"250536","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>67</s> 64 bytes</h1>
<pre><code>k6:⇧∪ṅ\^pøB?0øṙ₅:ǒ3εǒ+↲›3/?L4&lt;[2↳›|8Nvȯ{:vh0J≈|ƛh0=ßḢ}ƛ₃[0p|2Ẏ}ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiazY64oen4oiq4bmFXFxecMO4Qj8ww7jhuZnigoU6x5IzzrXHkivihrLigLozLz9MNDxbMuKGs+KAunw4TnbIr3s6dmgwSuKJiHzGm2gwPcOf4biifcab4oKDWzBwfDLhuo594bmFIiwiIiwicmVkXG5ydWxlc1xuMTIzNDU2Nzg5MEFCQ0RFMTIzNDU2Nzg5MEFCQ0RFXG5yQURpb0FDdGl2RVxuRkxVRkZcbkZcblxuenFidHR2XG42ZGI2ZWM0OWVmZDI3OGNkMGJjOTJkMWU1ZTA3MmQ2OCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A big mess of unicode and lesser-used overloads of things</p>
<h2>Explained</h2>
<p>There are 10 parts here:</p>
<pre><code>Generating the hex-digit regex: k6:⇧∪ṅ\^pøB
Replacing non-hex with 0: ?0øṙ
Padding to nearest multiple of 3: ₅:ǒ3εǒ+↲›
Splitting into 3 equal parts: 3/
The length 4 conditional branch: ?L4&lt;[
  Making each bit 2 digits with 0s if needed: 2↳›
|
  Getting the last 8 characters: 8Nvȯ
  Removing 0s until something doesn't start with a 0: {:vh0J≈|ƛh0=ßḢ}
  Either prepending a 0 or getting the last 2 chars: ƛ₃[0p|2Ẏ}
Outputting the result: ṅ
</code></pre>
<h3>Generating the hex-digit regex</h3>
<pre><code>k6:⇧∪ṅ\^pøB
k6           # The string &quot;0123456789abcdef&quot;
  :⇧         # Uppercased (&quot;0123456789ABCDEF&quot;)
    ∪ṅ       # Unioned with the lowercase string (&quot;0123456789abcdefABCDEF&quot;)
       \^p   # With a caret prepended (&quot;^0123456789abcdefABCDEF&quot;)
          øB # Surrounded in &quot;[]&quot; (&quot;[^0123456789abcdefABCDEF]&quot;)
</code></pre>
<p>This regex (<code>[^0123456789abcdefABCDEF]</code>, called <code>re</code> from here) will be used in the next step to determine which characters to replace with 0s.</p>
<h3>Replacing non-hex with 0</h3>
<pre><code>?0øṙ # Before this part, the stack is [re]
?    # Push the input : [re, input]
 0   # Push a 0 to the stack : [re, input, 0]
  øṙ # Replace matches of re in input with 0
</code></pre>
<p>This completes the step of replacing invalid characters with 0s, which is common to strings less than 4 chars and strings with at least 4 chars. This string will be called <code>0-str</code> from here.</p>
<h3>Padding to nearest multiple of 3</h3>
<pre><code>₅:ǒ3εǒ+↲› # Before this part, the stack is [0-str]
₅:        # Push two copies of the length of 0-str without popping it
  ǒ3ε     # Modulo the first copy by 3 and take the absolute difference of that and 3 to get how far away the length is from the next multiple of 3. Note that this may result in the result being 3 because a string of length that is divisible by 3 will return 3, as 3 - (length % 3 =&gt; 0) = 3
     ǒ    # Modulo 3 again to make a 3 a 0
      +↲› # Add that to the remaining copy of the length to get how many characters should be in the padded string, left pad 0-str with spaces to that many characters and replace all spaces with 0s.
</code></pre>
<p>The result of this step is common to both string length possibilities and will be referred to as <code>pad-0-str</code>.</p>
<h3>Splitting into 3 equal parts</h3>
<pre><code>3/ # Before this part, the stack is [pad-0-str]
3/ # Divide the string into 3 equal parts
</code></pre>
<p>Yes, there really <em>is</em> a built-in for this. The result will be referred to as <code>3-part-pad</code>.</p>
<h3>The length 4 conditional branch</h3>
<pre><code>?L4&lt;[...|...} # Before this part, the stack is [3-pad-str]
?L            # Is the length of the input
  4&lt;          # Less than 4?
    [...      # If so, move onto the steps for a string with less than 4 characters
        |...} # Otherwise, move onto the steps for a string with at least 4 characters. A `}` is used instead of a `]` because it saves a byte over `;]` later on.
</code></pre>
<p>The stack hasn't changed after this step.</p>
<h4>Less than 4 - Making each bit 2 digits with 0s if needed</h4>
<pre><code>2↳› # Before this part, the stack is [3-pad-str]
2↳  # Right pad each part of 3-pad-str to be two characters, using spaces. This is needed because components of 3-pad-str will be empty if the input is the empty string. In the case of the empty string, this returns &quot;  &quot;. Otherwise, it returns &quot; &quot; + char
  › # Replace the spaces with 0s. This turns &quot;  &quot; into &quot;00&quot; and everything else into &quot;0&quot; + char.
</code></pre>
<p>The result of this will be called <code>res</code>.</p>
<h4>At least 4 - Getting the last 8 characters</h4>
<pre><code>8Nvȯ # Before this part, the stack is [3-pad-str]
8N   # Push -8 to the stack : [3-pad-str, -8]
  vȯ # Push [part[-8:] for part in 3-pad-str]
</code></pre>
<p>The result of this will be referred to as <code>last-8</code></p>
<h4>At least 4 - Removing 0s until something doesn't start with a 0</h4>
<pre><code>{:vh0J≈|ƛh0=ßḢ}   # Before this part, the stack is [last-8]
{                  # While ...
 :vh               # the first character of each part of last-8 (leaving last-8 on the stack)...
    0J≈            # are all equal to 0:
       |ƛh0=       # For each item, check if the first character is 0
            ßḢ}    # And if so, remove the head of that part. The `}` here closes both the map lambda and the while loop.

</code></pre>
<p>This is probably the messiest section. The result of this will be referred to as <code>second-last</code>.</p>
<h4>At least 4 - Either prepending a 0 or getting the last 2 chars</h4>
<pre><code>ƛ₃[0p|2Ẏ} # Before this part, the stack is [second-last]
ƛ         # For each item in second-last, which has leading 0s removed:
 ₃[       # If the length is 1:
   0p     #   Prepend a 0
     |2Ẏ} # Else: take the last two characters.
          # The `}` here closes both this inner if-statement, the map lambda, and the outer if-statement
</code></pre>
<p>The result of this part will be referred to as <code>res</code>. This is analogous to the step taken in the less than 4 branch.</p>
<h3>Outputting the result</h3>
<pre><code>ṅ # Join res on empty string - concatenate into a single string.
</code></pre>
<p>I could have used the <code>s</code> flag here, but at this point, we're already play the long golf game, so I thought I might as well go flagless.</p>
"
"250549","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>51</s> <s>50</s> <s>47</s> 44 bytes</h1>
<pre><code>⇧ƛk^$c∧;ṅ3/\0ÞḞṅ3/8Nvȯ∩\03*:£øl:L2∵Ẏ¥p¥p2Nȯ∩
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oenxptrXiRj4oinO+G5hTMvXFwww57huJ7huYUzLzhOdsiv4oipXFwwMyo6wqPDuGw6TDLiiLXhuo7CpXDCpXAyTsiv4oipIiwiIiwicmVkXG5ydWxlc1xuMTIzNDU2Nzg5MEFCQ0RFMTIzNDU2Nzg5MEFCQ0RFXG5yQURpb0FDdGl2RVxuRkxVRkZcbkZcblxuenFidHR2XG42ZGI2ZWM0OWVmZDI3OGNkMGJjOTJkMWU1ZTA3MmQ2OFxuXCIxMDIzMDA0NTAwNjdcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A huge mess, but at least I outgolfed lyxal.</p>
"
"250551","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>LkhȧẎ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJMa2jIp+G6jiIsIiIsImhvdyBhcmUgeW91Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250557","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kakH¡Ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwia2FrSMKhxL8iLCIiLCJhXG5iXG5jXG5kXG5lXG5mXG5nXG5oXG5pXG5qXG5rXG5sXG5tIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Takes <code>a</code>, <code>b</code>, ... <code>m</code></p>
<pre><code>     Ŀ # Transliterate
ka     # Lowercase alphabet
  kH¡  # To corresponding chars of &quot;Hello, world!&quot;
</code></pre>
"
"250654","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 29 bytes</h1>
<pre><code>S⇩3ẇ3↲∑k6Ǐ~vḟİ∑3/⟑8NȯHH2∆Z2Ẏ₴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJT4oepM+G6hzPihrLiiJFrNsePfnbhuJ/EsOKIkTMv4p+ROE7Ir0hIMuKIhloy4bqO4oK0IiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>S⇩                            # Stringify (&quot;&quot; -&gt; 0 edgecase) and lowercase
  3ẇ                          # Cut into chunks of length 3
     3↲                       # Pad each to length 3 with spaces (will be zeroed)
      ∑                       # Concatenate
       k6                     # Lowercase hex
          Ǐ                   # Append the leading zero
          ~vḟ                 # Without popping, for each char in input, find it in the hex
             İ                # Index into the hex + 0 - ones not found, -1s, get indexed into the end
              ∑               # Concat into a string
               3/             # Divide into 3 parts
                 ⟑            # Over each...
                  8Nȯ         # Get last 8 chars
                     HH       # Convert to/from hex to remove leading zeroes
                       2∆Z    # zfill each to length 2
                          2Ẏ  # Get the first two chars of each
                            ₴ # Print 
</code></pre>
"
"250676","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>Þ∪Þx:ƛ□꘍GN;ÞMİ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKIqsOeeDrGm+KWoeqYjUdOO8OeTcSwIiwiIiwic3RyaW5nXG5yaW5nIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I think <code>Þ∪</code> can be <code>J</code>, but that makes it so slow that it's practically impossible to run.</p>
<p>This is already really, really, really slow.</p>
<pre><code>Þ∪Þx:ƛ□꘍GN;ÞMİ
Þ∪             # Get the multiset union of the two strings
  Þx           # Get all combinations without replacement of all lengths and of all orders
    :          # Duplicate (call this X)
     ƛ         # Over each:
      □꘍       #  For each of the inputs, get the Levenshthein distance between that input and this string
        G      #  Get the maximum of that
         N     #  Negate that
          ;    # Close map
           ÞM  # Get the indices of maximal elements. (If Vyxal had an &quot;indices of minimal elements&quot; builtin, then negate could be removed.)
             İ # Index this into X
</code></pre>
"
"250685","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>k6ḂĿ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrNuG4gsS/IiwiIiwiYTFiMmMzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>k6ḂĿ
k6   # Hex chars - &quot;012356789abcdef&quot;
  Ḃ  # Bifurcate - push its reverse without popping
   Ŀ # Transliterate the input from the hex chars to the reverse hex chars
</code></pre>
"
"250691","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Þ⊍
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiw7ciLCLDnuKKjSIsIuG4gyIsIltcImJvYXRcIiwgXCJib2F0XCJdXG5bXCJ0b2FiXCIsIFwiYm9hdFwiXVxuW1wib2FidFwiLCBcInRvYWJcIl1cbltcImFcIiwgXCJhYVwiXVxuW1wienp6XCIsIFwienp6enp6enpcIl1cbltcInp5eXl6enp6XCIsIFwieXl6enp6enlcIl1cbltcInNsZWVweVwiLCBcInB5ZWxzXCJdXG5bXCJwXCIsIFwicFwiXVxuW1wiXCIsIFwiXCJdXG5bXCJcIiwgXCJ6XCJdXG5bXCJuXCIsIFwiXCJdXG5bXCJhYWFiXCIsIFwiYmJiYVwiXVxuW1wiYWJhYWJjXCIsIFwiYmNhYmFhXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes two strings pushed separately onto the stack as input. Returns inverted output (falsey if the strings are anagrams of each other, truthy if they are not).</p>
<pre><code>Þ⊍  # Multiset Symmetric Difference - yields a list of the characters in A that
    # aren't in B and the characters in B that aren't in A. Will be empty iff A
    # is an anagram of B.
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Þ⊍¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiw7ciLCLDnuKKjcKsIiwiIiwiW1wiYm9hdFwiLCBcImJvYXRcIl1cbltcInRvYWJcIiwgXCJib2F0XCJdXG5bXCJvYWJ0XCIsIFwidG9hYlwiXVxuW1wiYVwiLCBcImFhXCJdXG5bXCJ6enpcIiwgXCJ6enp6enp6elwiXVxuW1wienl5eXp6enpcIiwgXCJ5eXp6enp6eVwiXVxuW1wic2xlZXB5XCIsIFwicHllbHNcIl1cbltcInBcIiwgXCJwXCJdXG5bXCJcIiwgXCJcIl1cbltcIlwiLCBcInpcIl1cbltcIm5cIiwgXCJcIl1cbltcImFhYWJcIiwgXCJiYmJhXCJdXG5bXCJhYmFhYmNcIiwgXCJiY2FiYWFcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes two strings pushed separately onto the stack as input. Returns <code>1</code> if the strings are anagrams of each other and <code>0</code> otherwise.</p>
<pre><code>Þ⊍  # Multiset Symmetric Difference - yields a list of the characters in A that
    # aren't in B and the characters in B that aren't in A. Will be empty iff A
    # is an anagram of B.
¬   # Logical Not - When used on a list (as is the case here) returns 1 for an
    # empty list and 0 for a non-empty list (even a list containing one 0 in it)
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>vs≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidnPiiYgiLCIiLCJbXCJib2F0XCIsIFwiYm9hdFwiXVxuW1widG9hYlwiLCBcImJvYXRcIl1cbltcIm9hYnRcIiwgXCJ0b2FiXCJdXG5bXCJhXCIsIFwiYWFcIl1cbltcInp6elwiLCBcInp6enp6enp6XCJdXG5bXCJ6eXl5enp6elwiLCBcInl5enp6enp5XCJdXG5bXCJzbGVlcHlcIiwgXCJweWVsc1wiXVxuW1wicFwiLCBcInBcIl1cbltcIlwiLCBcIlwiXVxuW1wiXCIsIFwielwiXVxuW1wiblwiLCBcIlwiXVxuW1wiYWFhYlwiLCBcImJiYmFcIl1cbltcImFiYWFiY1wiLCBcImJjYWJhYVwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes a list of two strings as input. Returns <code>1</code> if the strings are anagrams of each other and <code>0</code> otherwise.</p>
<pre><code>vs  # Vectorized sort (sort the characters in each individual item)
≈   # All Equal
</code></pre>
"
"250704","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>∑ṗµ?꘍sṘ;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJHhuZfCtT/qmI1z4bmYO2giLCIiLCJbXCJTdGVmZmFuXCIsXCJTZWdnYW5cIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Kevin Cruijssen's answer, go upvote that!</p>
"
"250715","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Þ□
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiw57ilqEiLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Vyxal literally has a builtin for this.</p>
"
"250727","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ṄvL=∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYR2TD3iiJEiLCIiLCI2XG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 5 bytes</h1>
<pre><code>ŒṗẈ=S
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///opIc7pz/c1WEb/P//f0OD/8YA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Dang it, ninja'd by Kevin because I took the time to get the shortest jelly answer too :p</p>
<p>Exact same approach as the 05ab1e answer, derived independently - both answers get the integer partitions of the first input and then count the number of partitions where the length equals the second input.</p>
"
"250734","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>⁺¤fẋfṗUṠO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiwr3ijIoiLCLigbrCpGbhuotm4bmXVeG5oE8iLCIiLCI4Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The header in the link halves the input to make things faster. It will return the same result if you remove it, but it may time out.</p>
<p><code>⁺¤f</code> could alternatively be <code>30ǐ</code> (prime factors of 30) or <code>5~æ</code> (prime numbers up to 5).</p>
<pre><code>⁺¤fẋfṗUṠO
⁺¤f       # Push the digits of 235: [2, 3, 5]
   ẋf     # Repeat the list the input times
     ṗ    # Powerset
      U   # Uniquify
       Ṡ  # Sum each
        O # Count the number of times the input appears in this array
</code></pre>
"
"250737","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>Ṗ'ḣ∑≥
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmWJ+G4o+KIkeKJpSIsIiIsIlsyLCAzLCA1XVxuWzIsIDQsIDVdXG5bMiwgNCwgNl1cbls5LCAxMCwgMTFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns an empty list for valid triangles, nonempty for invalid ones. Fun fact: This works for any polygon.</p>
<pre><code>Ṗ     # Permutations
 '    # Filtered by
  ḣ   # Head
    ≥ # Is greater than or equal to
  ḣ∑  # Sum of the rest
</code></pre>
"
"250738","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>∑½&lt;A
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oiRwr08QSIsIiIsIlsxMDAsIDEwLCAxMF1cblsxLCAyLCAzXVxuWzIsIDEsIDNdXG5bMSwgMywgMl1cblszLCAyLCAxXVxuWzMsIDEsIDJdXG5bMiwgMiwgMl1cblszLCA0LCA1XVxuWzMsIDUsIDRdXG5bNSwgMywgNF1cbls1LCA0LCAzXVxuWzEsIDEsIDFdXG5bMTAsIDksIDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250739","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, 1 byte</h1>
<pre><code>Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJsIiwiIiwi4bmEIiwiIiwiOCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ṄL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYRMIiwiIiwiOCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250741","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɾÞ×'∑?=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsOew5cn4oiRPz0iLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɾÞ×'∑?=
ɾ       # Get a list in the range [1, input]
 Þ×     # Get all combinations (with replacement) of all lengths
   '    # Filter for:
    ∑?= #  Sum equals the input
</code></pre>
"
"250749","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 17 bytes</h1>
<pre><code>vL↵ʀΠƛ?&quot;ƛΠJṄ:vḟ;≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUcyIsIiIsInZM4oa1yoDOoMabP1wixpvOoErhuYQ6duG4nzviiYgiLCIiLCJbNSwxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This would flaglessly be 19 bytes. It can be shorter flagless, though:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>vL↵ʀΠ?wJƛΠJṄ:vḟ;ṫO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwidkzihrXKgM6gP3dKxpvOoErhuYQ6duG4nzvhuatPIiwiIiwiWzUsMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>vL↵ʀΠ?wJƛΠJṄ:vḟ;ṫO
vL                  # For each number in the input, get its length
  ↵                 # Take 10 to the power of each
   ʀ                # For each, generate an inclusive zero range [0, n]
    Π               # Get the cartesian product of these two lists
     ?wJ            # Append the input to this
        ƛ           # For each:
         Π          #  Get the product of the two
          J         #  Append that onto the list
           Ṅ        #  Join by spaces
            :       #  Duplicate
             vḟ     #  For each in the duplicate, get the first index that it occurs in the other identical copy
               ;    # Close map
                ṫ   # Tail extract - push a[:-1] and a[-1]
                 O  # Count the number of times this a[-1] appears in this a[:-1]
</code></pre>
"
"250754","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ẏ‡?iŻv₍gG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/igKE/acW7duKCjWdHIiwiIiwiWzAsMSwwLDEsMSwxLDAsMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250797","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ṗc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmXYyIsIiIsIid6MDAnLCAnJ1xuJ3owMCcsICd6MDAnXG4nMDB6MCcsICd6MDAnXG4nYW5uYScsICdhYSdcbidiYW5hbmEnLCAnYW5uYSdcbidiYW5hbmEnLCAnQW5uYSciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250866","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>v=ṘÞḋṠA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidj3huZjDnuG4i+G5oEEiLCIiLCJbMSwgMV1cblsxLCAxLCAxXVxuWzMsIDMsIDcsIDNdXG5bMiwgMiwgMSwgMiwgMl1cblsyLCAxLCAyLCAyLCAyXVxuWzEsIDMsIDEsIDMsIDEsIDFdXG5bMSwgMSwgMywgMiwgMywgMSwgMiwgMV1cblsxLCAxLCAxLCAxLCAxLCAxLCAyLCAxXVxuWzEsIDJdXG5bMSwgMiwgMV1cblsxLCAyLCAzLCA0XVxuWzMsIDEsIDMsIDEsIDNdXG5bMywgMSwgMSwgMywgMV1cblsxLCAzLCAxLCAxLCAzLCAxXVxuWzEsIDEsIDIsIDIsIDIsIDIsIDEsIDFdXG5bMSwgMSwgMSwgMSwgMSwgMSwgMSwgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Lyxal never posted my golf, so here goes</p>
"
"250884","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Ḣ'?$%dεṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuKInPyQlZM614bmFIiwiIiwiMzI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 byte thanks to lyxal</p>
"
"250923","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 + 7 = 17 bytes</h1>
<h2>Cartesian to Polar, 10 bytes</h2>
<pre><code>²∑√?Ṙƒ/∆T&quot;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLCsuKIkeKImj/huZjGki/iiIZUXCIiLCIiLCJbMzAwMCwgLTQwMDBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Polar to Cartesian, 7 bytes</h2>
<pre><code>⁰₍∆c∆s*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLigbDigo3iiIZj4oiGcyoiLCIiLCI0LjIzNjMyXG4tMC45Mzk1NyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250935","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ẋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLOuzIkLTtcbjEiLCLhuooiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Builtin lol</p>
"
"250944","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 6 bytes</h1>
<pre><code>øṖ~≈vh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIsO44bmWfuKJiHZoIiwiIiwiYWJjZGFiY2RcbmFhYVxuYWFhYWFhYWEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Unrelated String's Jelly answer.</p>
<p>Porting Kevin Cruijssen's 05AB1E answer would be 6 bytes as well:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>¦'?$o¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIsKmJz8kb8KsIiwiIiwiYWJjZGFiY2RcbmFhYVxuYWFhYWFhYWEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250946","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, 5 bytes</h1>
<pre><code>≬KL-İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJsIiwiIiwi4omsS0wtxLAiLCIiLCIxMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Flagless:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>≬KL-İL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiaxLTC3EsEwiLCIiLCIxMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250948","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>(¦
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIowqYiLCIiLCIzXG5bLTMsIDQsIDcsIC0xLCAxNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250951","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>λKvUfÞu;ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu0t2VWbDnnU7yK90IiwiIiwiMTAxIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250952","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>∆KUṘ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oiGS1XhuZjigbwiLCIiLCJbMjIwLCAyODRdXG5bNTIsIDEwMF1cblsxMDc0NCwgMTA4NTZdXG5bMTc0MjkyLCAyMzQ1XVxuWzEwMCwgMTE3XVxuWzYsIDExXVxuWzQ5NSwgNDk1XVxuWzYsIDZdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250964","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>⁽-ḊƛÞj∷ßw;Þf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb0t4biKxpvDnmriiLfDn3c7w55mIiwiIiwiW1s4LCAyXSwgOSwgNSwgMSwgWzYsIDRdLCBbNCwgNV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"250999","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>v-ÞḊ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidi3DnuG4iiIsIiIsIlsxLCAxXSwgW1syLCAyXSwgWzMsIDNdXVxuWzEsIDFdLCBbWzIsIDJdLCBbMTAsIDEwXV1cblsxMCwgMV0sIFtbMTAsIDJdLCBbMTAsIDNdXVxuWzEsIDEwXSwgW1syLCAxMF0sIFszLCAxMF1dXG5bMSwgMV0sIFtbMiwgMl0sIFszLCA0XV1cblsxLCAxXSwgW1syLCAwXSwgWzIsIDJdXVxuWy01LCA3MF0sIFtbMiwgMF0sIFstMSwgMzBdXVxuWzQ2MCwgMjM2M10sIFtbMTEyNywgMjM5Ml0sIFstMTMzNCwgMjI4NV1dXG5bLTc4OSwgLTIxNV0sIFtbLTc1MywgLTExMF0sIFs1MTgsIC03ODBdXVxuWzIyNzgxNjA4MiwgNDQzMDMwMF0sIFtbMTIxNzA5OTUyLCAzOTc2ODU1XSwgWzEyNzM2OTcxMCwgNDAwMTA0Ml1dXG5bNjQxMDI3LCAzNDU5NDY2XSwgW1s0NzU5ODksIDM0NTg3NjFdLCBbLTY3NTk2MCwgMzQ1MzgzOF1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs <code>0</code> for truthy and any other integer for falsy. Port of fireflame241's Jelly answer. Add <code>¬</code> at the end to get <code>1</code> for truthy and <code>0</code> for falsy.</p>
"
"251038","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>‹&quot;ƛdr‛a *∞øĊ⁋;÷Ǎ(n0øḞ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLlcIsabZHLigJthICriiJ7DuMSK4oGLO8O3x40objDDuOG4niIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Kevin Cruijssen's 05AB1E answer.</p>
"
"251056","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 9 bytes</h1>
<pre><code>SṖ'Ṙ⌊=)ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBQiIsIiIsIlPhuZYn4bmY4oyKPSnIr3QiLCIiLCIxICBcbjIgIFxuMyAgXG40ICBcbjUgIFxuNiAgXG43ICBcbjggIFxuOSAgXG4xMCBcbjQyIFxuMTAwXG4xMjhcbjI1NlxuMjcwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>You say any test case presented in the challenge should pass in under a minute? <em>All</em> test cases presented in the challenge pass in under 30 seconds. That's what I call gaming (no doubt the other answers do too though lol).</p>
<h2>Explained</h2>
<pre><code>SṖ'Ṙ⌊=)ȯt
      )ȯ  # Starting at 1, get the first (input)th numbers where:
SṖ        #   From the permutation of the digits of the number,
  '       #   There exists at least 1 such that:
   Ṙ⌊     #   The reverse (cast to int)
     =    #   Equals that permutation
        t # Print the tail of the list
</code></pre>
"
"251080","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>ṡ'»ƛ∪&amp;»FS‛69*Ṙ=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuaEnwrvGm+KIqibCu0ZT4oCbNjkq4bmYPSIsIiIsIjEwMDBcbjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>end boundary</code> then <code>start boundary</code></p>
<h2>Explained</h2>
<pre><code>ṡ'»ƛ∪&amp;»FS‛69*Ṙ=
ṡ'               # From the range(start, end + 1), keep only items where:
  »ƛ∪&amp;»FS        #  Removing the numbers 1, 2, 3, 4, 5 and 7
         ‛69*    #  Ring translated by the string 69 (6 becomes 9 and 9 becomes 6)
             Ṙ=  #  And reversed equals the original item
</code></pre>
"
"251131","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>8Þ□›0j:v*` €xR`İ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI4w57ilqHigLowajp2KmAg4oKseFJgxLAiLCLhuaDigYsiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another port of Jonah's answer.</p>
"
"251140","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ɾṘḞΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb7huZjhuJ7OoCIsIiIsIjMsIDNcbjMsIDdcbjAsIDFcbjYsIDFcbjksIDJcbjEwLCA4XG40MCwgMjBcbjQyMCwgMzAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251181","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>ɾ?\vdpĖ:vvS$fGL↲Ṡ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvj9cXHZkcMSWOnZ2UyRmR0zihrLhuaDigYsiLCIiLCI0XG4qIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Without strict IO formats, the whole <code>:vvS$fGL↲Ṡ⁋</code> could be omitted</p>
"
"251182","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ʀ:v꘍vvS:fÞGL↳⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgDp26piNdnZTOmbDnkdM4oaz4oGLIiwiIiwiOSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251183","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 <span class=""math-container"">\$\times\$</span> 0.8 = 16 bytes</h1>
<pre><code>ɾ:v*$τkdkAJİṅ:fÞGL↳⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvjp2KiTPhGtka0FKxLDhuYU6ZsOeR0zihrPigYsiLCIiLCIxMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This could actually be 9*0.8=7.2 bytes if Vyxal had a gridify builtin and a buitlin to convert to a base as a string (with letters).</p>
"
"251205","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, The Terrible Bot</h1>
<pre><code>□⁋□⁋###□⁋□⁋
;;}□⁋□⁋□⁋ ėλntt¶ntt=¬;;;Ḋƛ'kwntc¬; λ\#\#\/\#\/JJJJnttc¬;Ẏ;;;Þf℅h :::: □⁋i \   pJ
;;}□⁋□⁋□⁋ ėλntt¶ntt=¬;;;Ḋƛ'kwntc¬; λ\#\#\/\#\/JJJJnttc¬;Ẏ;;;Þf℅h :::: □⁋i \   pJ
;;}□⁋□⁋□⁋ ėλntt¶ntt=¬;;;Ḋƛ'kwntc¬; λ\#\#\/\#\/JJJJnttc¬;Ẏ;;;Þf℅h :::: □⁋i \   pJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLilqHigYvilqHigYsjIyPilqHigYvilqHigYtcbjs7feKWoeKBi+KWoeKBi+KWoeKBiyDEl867bnR0wrZudHQ9wqw7OzvhuIrGmydrd250Y8KsOyDOu1xcI1xcI1xcL1xcI1xcL0pKSkpudHRjwqw74bqOOzs7w55m4oSFaCA6Ojo6IOKWoeKBi2kgXFwgICBwSlxuOzt94pah4oGL4pah4oGL4pah4oGLIMSXzrtudHTCtm50dD3CrDs7O+G4isabJ2t3bnRjwqw7IM67XFwjXFwjXFwvXFwjXFwvSkpKSm50dGPCrDvhuo47OzvDnmbihIVoIDo6Ojog4pah4oGLaSBcXCAgIHBKXG47O33ilqHigYvilqHigYvilqHigYsgxJfOu250dMK2bnR0PcKsOzs74biKxpsna3dudGPCrDsgzrtcXCNcXCNcXC9cXCNcXC9KSkpKbnR0Y8KsO+G6jjs7O8OeZuKEhWggOjo6OiDilqHigYtpIFxcICAgcEoiLCIiLCIgICAgaGVsbG8gYXNkLy9hc2RcbmFzZGFzZGFzZC8vYSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Base64-encoded:</p>
<pre><code>4pah4oGL4pah4oGLIyMj4pah4oGL4pah4oGLCjs7feKWoeKBi+KWoeKBi+KWoeKBiyDEl867bnR0wrZudHQ9wqw7OzvhuIrGmydrd250Y8KsOyDOu1wjXCNcL1wjXC9KSkpKbnR0Y8KsO+G6jjs7O8OeZuKEhWggOjo6OiDilqHigYtpIFwgICBwSgo7O33ilqHigYvilqHigYvilqHigYsgxJfOu250dMK2bnR0PcKsOzs74biKxpsna3dudGPCrDsgzrtcI1wjXC9cI1wvSkpKSm50dGPCrDvhuo47OzvDnmbihIVoIDo6Ojog4pah4oGLaSBcICAgcEoKOzt94pah4oGL4pah4oGL4pah4oGLIMSXzrtudHTCtm50dD3CrDs7O+G4isabJ2t3bnRjwqw7IM67XCNcI1wvXCNcL0pKSkpudHRjwqw74bqOOzs7w55m4oSFaCA6Ojo6IOKWoeKBi2kgXCAgIHBK
</code></pre>
<h3>Installation</h3>
<pre><code>pip install vyxal
</code></pre>
<h3>Running</h3>
<pre><code>vyxal code.vy
</code></pre>
"
"251207","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɾṘ≥:(…ǔ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiyb7huZjiiaU6KOKApseUIiwiIiwiNVxuMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251220","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>LÞefA?LT*?f∑&gt;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiTMOeZWZBP0xUKj9m4oiRPiIsIiIsIltbMSwgMV0sIFsxLCAxXV1cbltbMSwgMSwgMCwgMF0sIFsxLCAxLCAxLCAxXSwgWzAsIDEsIDEsIDBdLCBbMCwgMSwgMCwgMV1dXG5bWzEsIDEsIDAsIDAsIDBdLCBbMSwgMSwgMSwgMCwgMF0sIFswLCAxLCAxLCAxLCAwXSwgWzAsIDAsIDEsIDEsIDFdLCBbMCwgMCwgMCwgMSwgMV1dXG5bWzEsIDEsIDEsIDAsIDBdLCBbMSwgMSwgMCwgMSwgMV0sIFsxLCAwLCAxLCAwLCAwXSwgWzAsIDEsIDAsIDEsIDBdLCBbMCwgMSwgMCwgMCwgMV1dXG5bWzEsIDAsIDEsIDAsIDAsIDEsIDFdLCBbMCwgMSwgMSwgMCwgMSwgMCwgMF0sIFsxLCAxLCAxLCAwLCAwLCAwLCAwXSwgWzAsIDAsIDAsIDEsIDAsIDAsIDFdLCBbMCwgMSwgMCwgMCwgMSwgMCwgMF0sIFsxLCAwLCAwLCAwLCAwLCAxLCAwXSwgWzEsIDAsIDAsIDEsIDAsIDAsIDFdXVxuW1sxLCAxLCAwLCAwXSwgWzEsIDEsIDAsIDBdLCBbMCwgMCwgMSwgMV0sIFswLCAwLCAxLCAxXV1cbltbMSwgMSwgMSwgMF0sIFsxLCAxLCAxLCAxXSwgWzEsIDEsIDEsIDBdLCBbMCwgMSwgMCwgMV1dXG5bWzEsIDEsIDEsIDAsIDBdLCBbMSwgMSwgMSwgMCwgMF0sIFsxLCAxLCAxLCAwLCAwXSwgWzAsIDAsIDAsIDEsIDFdLCBbMCwgMCwgMCwgMSwgMV1dXG5bWzEsIDAsIDEsIDAsIDFdLCBbMCwgMSwgMSwgMCwgMF0sIFsxLCAxLCAxLCAxLCAwXSwgWzAsIDAsIDEsIDEsIDFdLCBbMSwgMCwgMCwgMSwgMV1dXG5bWzEsIDEsIDAsIDAsIDAsIDAsIDBdLCBbMSwgMSwgMCwgMCwgMCwgMCwgMF0sIFswLCAwLCAxLCAxLCAxLCAwLCAwXSwgWzAsIDAsIDEsIDEsIDEsIDAsIDFdLCBbMCwgMCwgMSwgMSwgMSwgMCwgMF0sIFswLCAwLCAwLCAwLCAwLCAxLCAxXSwgWzAsIDAsIDAsIDEsIDAsIDEsIDFdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as an adjacency matrix with 1s on the main diagonal. Port of @loopy walt's second answer from @Command Master, upvote that!</p>
<pre><code>LÞefA?LT*?f∑&gt;
L             # Get the length of the input
 Þe           # Matrix exponentiate it to that
   f          # Flatten
    A         # Are all non-zero? Call this X
     ?L       # Get the length of the input again
       T      # Triple it (multiply by 3)
        *     # Multiply this by X. Call this Y
         ?f∑  # Get the flattened sum of the input
            &gt; # Is Y greater than this?
</code></pre>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, <s>13</s> 12 bytes</h1>
<pre><code>æ*LȦ×L×3&gt;ẎS$
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///wMi2fE8sOT/c5PN3Y7uGuvmCV/0f3OBxuf9S05uikhztnAGkgygJRDXMUbGwVHjXMjfz/Pzo62lBHwTBWRwFCgxhglo6CARDBxCEIxDOA8QwQPAMsOtE1G6DoQDXCAN0GhBiysRhuMkBogvMMMFyGLoDiWhRRDC9iDwcDFB8iOxdmOrp1KIYYICFDdGEsTsTmbbSQQ@OhhRlmJBoSEYmGeCIRW6xicw26g5BsQgtnNEfiShuGuNKGAXq04BBGMRGfsCFB1Xj9DHdiLAA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>-1 byte thanks to Jonathan Allan.</p>
<p>Same.</p>
<pre><code>æ*LȦ×L×3&gt;ẎS$
æ*           - Matrix exponentiate the input to...
  L          - Its length.
   Ȧ         - After flattening, are they all non-zero?
    ×L       - Multiply this by the length of the input.
      ×3     - Multiply by 3.
        &gt;    - Is this greater than...
         ẎS$ - The flattened sum of the input?
</code></pre>
"
"251238","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>vḟÞṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiduG4n8Oe4bmgIiwiIiwiXCIzXCJcblwiNTFcIlxuXCI0NDk5OTkxMVwiXG5cIjEyMzQ1Njc4OVwiXG5cIjIyMjIyMjIyMjIyMjIyMjIyMjIyMlwiXG5cIjgxOFwiXG5cIjg4ODQ0NDMzMzRcIlxuXCI0NTQ1XCJcblwiNTU0NTUzXCJcblwiMTIzNDU2Nzg5MVwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>vḟ  # Index of B in A, vectorized (B will be each individual character in the
    # string / item in the list, and A will be the string/list itself)
ÞṠ  # Is the result sorted?
</code></pre>
<p>Answers that use this method, in chronological order:</p>
<ul>
<li><a href=""https://codegolf.stackexchange.com/a/77624/17216"">Dennis – Python, 33 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/77635/17216"">isaacg – Pyth, 5 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/77640/17216"">Dennis - Julia, 30 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/77705/17216"">Dennis - J, 8 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/251233/17216"">DLosc – BQN, 5 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/251235/17216"">DLosc – Jelly, 5 bytes</a></li>
<li><a href=""https://codegolf.stackexchange.com/a/251241/17216"">Unrelated String – Jelly, 4 bytes</a></li>
</ul>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>₌ÞǓU=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oKMw57Hk1U9IiwiIiwiXCIzXCJcblwiNTFcIlxuXCI0NDk5OTkxMVwiXG5cIjEyMzQ1Njc4OVwiXG5cIjIyMjIyMjIyMjIyMjIyMjIyMjIyMlwiXG5cIjgxOFwiXG5cIjg4ODQ0NDMzMzRcIlxuXCI0NTQ1XCJcblwiNTU0NTUzXCJcblwiMTIzNDU2Nzg5MVwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₌     # Parallel Apply - apply the following two elements to the input and keep
      # both results on the stack.
  ÞǓ  # Connected Uniquify - Remove occurences of adjacent duplicates.
  U   # Uniquify - Remove all duplicates.
=     # Are the two results equal?
</code></pre>
<p>Turned out to be a port of <a href=""https://codegolf.stackexchange.com/a/77651/17216"">Adnan's 05AB1E answer</a>.</p>
"
"251267","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>‹Þp'?c;i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLnDnnAnP2M7aSIsIiIsIjEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251272","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>34</s> 24 bytes</h1>
<pre><code>ṗ'L›:E‹&quot;?↔‹n∑ḟɾ;ƛ∑JEn±-Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZcnTOKAujpF4oC5XCI/4oaU4oC5buKIkeG4n8m+O8ab4oiRSkVuwrEtzqAiLCIiLCJbMywgNCwgNSwgNiwgNywgMTVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>Mess.</s> Well, still a mess, but -10 bytes by porting Jonathan Allan's Jelly answer, upvote that!</p>
"
"251290","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>τR∑Ṙ$%¹β
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLPhFLiiJHhuZgkJcK5zrIiLCIiLCIxMlxuWzEwMDAsIDU3NiwgMjMsIDEsIDE0MV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251353","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>14</s> <s>13</s> 11 bytes</h1>
<pre><code>»;⟑L»ǐE:‹*Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCuzvin5FMwrvHkEU64oC5Ks6gIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 byte thanks to alephalpha and -2 bytes thanks to Mukundan314.</p>
<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, <s>17</s> 16 bytes</h1>
<pre><code>“¤¦¬Œþ=‘2*’æ«21P
</code></pre>
<p><a href=""https://tio.run/##ASYA2f9qZWxsef//4oCcwqTCpsKsxZLDvj3igJgyKuKAmcOmwqsyMVD//w"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>-1 byte thanks to xnor.</p>
"
"251354","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> 13 bytes</h1>
<pre><code>₆¨*≬K₍L∑¨=∆Kc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigobCqCriiaxL4oKNTOKIkcKoPeKIhktjIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><sup>half-</sup>Legitimate calculation <s>is</s> was shorter than hard coding lol. Given enough time and memory, this would eventually output the right number.</p>
<h2>Explained</h2>
<pre><code>₆¨*≬K₍L∑¨=∆Kc
₆¨*≬        c   # From all multiples of 64 (which contains the target number), get the first where:
    K₍L∑        #   The list [len(factors), sum(factors)]
        ¨=∆K    #   Is invariant under sum of proper divisors
</code></pre>
"
"251390","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>Ṙ*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZgqIiwiIiwiMTIiXQ=="" rel=""nofollow noreferrer"">Try it online</a>, or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmYKiIsIiIsIjVcbjEyXG4xMVxuNjU5Il0="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
"
"251395","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>C</code>, 5 bytes</h1>
<pre><code>L꘍¦Ṙʁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJDIiwiIiwiTOqYjcKm4bmYyoEiLCIiLCJCaXJ0aGRheSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Less than half the bytecount of Jelly and 05AB1E, and less than a fourth of the bytecount of emanresu's Vyxal! <em>evil laugh</em></p>
<pre><code>L꘍¦Ṙʁ
 ꘍    # Append as many spaces to the input as...
L     # Its length
  ¦   # Get all prefixes of this
   Ṙ  # Reverse this
    ʁ # Palindromize each (for each x, x + x[::-1][1:])
      # C flag centers and joins on newlines
</code></pre>
<p>Think I'm cheating with flags?</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>L꘍¦Ṙøṗ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJM6piNwqbhuZjDuOG5lyIsIiIsIkJpcnRoZGF5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>L꘍¦Ṙøṗ
 ꘍     # Append as many spaces to the input as...
L      # Its length
  ¦    # Get all prefixes of this
   Ṙ   # Reverse this
    øṗ # Palindromize each (for each x, x + x[::-1][1:]), center, and join on newlines
</code></pre>
"
"251396","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ɖ∨
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJluKIqCIsIiIsIlsxLDAsMiwwLDcsNyw3LDAsNSwwLDAsMCw5XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251412","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ʁǎ'∑æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgceOJ+KIkcOmIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">Try it online</a>, or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyoHHjifiiJHDpiIsIiIsIjJcbjI1XG43Il0="" rel=""nofollow noreferrer"">verify more test cases</a>.</p>
<p>Explanation:</p>
<pre><code>ʁ      # Range from 0 to n-1
 ǎ     # Nth prime (vectorising)
  '    # Filtered by:
   ∑   #   The digit sum
    æ  #   Is prime
</code></pre>
"
"251429","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>λÞjṅ[Þj|vxA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwizrvDnmrhuYVbw55qfHZ4QSIsIiIsIltdXG5bMSwyLDMsNl1cbltbMSwyXSxbWzFdXSxbWzZdLFtbXV1dXVxuW1tdXVxuWzEsWzJdXVxuW1sxLDJdLFtbNl0sNF1dXG5bWzEsWzJdXSxbWzNdLDRdXVxuWzEsW11dIl0="" rel=""noreferrer"">Try it Online!</a></p>
"
"251487","<h1>Vyxal and Jelly, cracks Number Basher's answer</h1>
<ol>
<li>empty program, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://tio.run/##y0rNyan8DwQA"" rel=""nofollow noreferrer"">Jelly</a></li>
<li><code>!</code>, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIhIiwiIiwiIl0="" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://tio.run/##y0rNyan8/1/x/38A"" rel=""nofollow noreferrer"">Jelly</a></li>
<li><code>r</code>, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJyIiwiIiwiIl0="" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://tio.run/##y0rNyan8/7/o/38A"" rel=""nofollow noreferrer"">Jelly</a></li>
<li><code>&quot;</code>, <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcIiIsIiIsIiJd"" rel=""nofollow noreferrer"">Vyxal</a>, <a href=""https://tio.run/##y0rNyan8/1/p/38A"" rel=""nofollow noreferrer"">Jelly</a></li>
</ol>
"
"251489","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>f?⁽L€f‹¨£(w
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmP+KBvUzigqxm4oC5wqjCoyh3IiwiIiwiWzEsIFsyLCAzXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>       ¨£   # Zip
f           # Input flattened
  ⁽L€       # Replace elements with depths
 ?          # in input
     f‹     # Flatten and decrement
       ¨£   # Zipwith...
         (w # Repeatedly wrap
</code></pre>
"
"251517","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>½~æ-æ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIxMDDGmyIsIsK9fsOmLcOm4oiRIiwiO1xcLGoiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> Includes header and footer to produce first 100 results.</p>
"
"251638","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 0 bytes</h1>
<pre><code>
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIiLCIiLCI4LzEyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yes. It really is 0 bytes. It doesn't use any built-in functions, as inputted fractions are simplified by default.</p>
<p>The benefits of using rational numbers internally!</p>
"
"251640","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⇩¨=‡Us
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oepwqg94oChVXMiLCIiLCJhXG5hYmNkZWZHSElqa2xtbm9wcXJTVFVWV1h5eiAgXG5hYVxucHV6XG5wdXp6XG5wdXpaXG5wdVpcblB1WiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>⇩¨=‡Us
⇩¨=    # is the lowercase version of the input invariant under:
  ‡Us  # uniquify and sort? 
</code></pre>
"
"251658","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>£‡¥RİL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCI2ODg4OSDOuzJ8KjsiLCLCo+KAocKlUsSwTCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes inputs from the stack due to technical limits.</p>
<pre><code>£      # Store function to register
 ‡--   # Next two elements as a function...
   R   # Reduce by (implicit digits)...
  ¥    # The function stored in the register
    İ  # Apply that function until the result doesn't change, not including the initial value
     L # Count the number of different values.
</code></pre>
"
"251687","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> <s>8</s> 7 bytes</h1>
<pre><code>Ṅ₀$ḊvΠ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYTigoAk4biKds6g4oiRIiwiIiwiNSJd"" rel=""nofollow noreferrer"">Try it Online!</a>
6 bytes with s flag</p>
<h2>Explained</h2>
<pre><code>Ṅ₀$ḊvΠ∑
Ṅ       # Integer partitions of the input
 ₀$Ḋ    # Does each item in each partition divide 10?
    vΠ  # Product of each partition
      ∑ # Sum that
</code></pre>
"
"251700","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>λ1&gt;[‹x~ġ:ċ[ḭ|++
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwizrsxPlvigLl4fsShOsSLW+G4rXwrKyIsIiIsIjFcbjJcbjNcbjRcbjVcbjZcbjciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251702","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>⇩Þ⇧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oepw57ih6ciLCIiLCJhXG5hYmNkZWZHSElqa2xtbm9wcXJTVFVWV1h5eiAgXG5hYVxucHV6XG5wdXp6XG5wdXpaXG5wdVpcblB1WiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"251713","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>λ‹?+??-ḊA;ṅ‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu+KAuT8rPz8t4biKQTvhuYXigLkiLCIiLCJbNSw4XVxuWzQ4LDM5XVxuWzMxLDNdIl0="" rel=""noreferrer"">Try it online!</a> <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwizrvigLk/Kz8/LeG4ikE74bmF4oC5IiwiIiwiWzEwLDE1XSwgWzIwLDIwXSwgWzEwLDVdXG5bMTAsMF0sIFsyMCwyMF0sIFsxMCw1XVxuWzAsMF0sIFsyMCwyMF0sIFsxMCw1XVxuWzAsMTVdLCBbMjAsMjBdLCBbMTAsNV1cblswLDddLCBbMzAsMjBdLCBbNywxMl1cbls3LDBdLCBbMzAsMjBdLCBbNywxMl1cblsyMywzXSwgWzMwLDIwXSwgWzcsMTJdXG5bMTEsOF0sIFszMCwyMF0sIFs3LDEyXVxuWzEsMV0sIFsyMCwyMF0sIFsxMCw1XVxuWzExLDhdLCBbMjQsNTBdLCBbNywxMl1cblsxMSw4XSwgWzUwLDI0XSwgWzcsMTJdXG5bNSw4XSwgWzQ4LDM5XSwgWzMxLDNdIl0="" rel=""noreferrer"">Test suite.</a></p>
<p>Similar to @att's answer.</p>
<pre><code>λ‹?+??-ḊA;ṅ‹
λ        ;ṅ   # Find the first positive integer t&gt;0 such that:
 ‹?+   ḊA     #  t-1+x for each x in i are both divisible by, respectively...
    ??-       #  g[0]-d[0] and g[1]-d[1].
           ‹  # Subtract one from this.
</code></pre>
"
"251748","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>41</s> <s>39</s> <s>33</s> <s>32</s> <s>31</s> <s>30</s> <s>28</s> <s>26</s> <s>25</s> <s>24</s> <s>23</s> 19 bytes</h1>
<pre><code>1₀?(~p)yNYdÞR8%2×ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIx4oKAPyh+cCl5Tllkw55SOCUyw5fDuOKIpyIsIiIsIjEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>n</code> and draws the nth fibonacci number of steps.</p>
<p>Outputs as ascii art.</p>
<p>I may have forgotten you can use any non-whitespace character :p...</p>
<p><em>-4 thanks to emanresuA even if I somehow didn't notice it for 4 days</em></p>
<h2>Explained (old)</h2>
<pre><code>1₀?(~p)f:ẏu$ed*ÞR8%2×ø∧
1₀                        # Push 1 and 10 to the stack. These will form the initial terms for the Fibonacci words
  ?(  )                   # Input number of times: 
    ~p                    #   Without popping the top two items on the stack, prepend the top to the second-top. This gives [1, 10, 101, 10110, 10110101, 1011010110110, ...] - the sequence but with inverted bits
       f:                 # Push two copies of the top of the stack as a list of digits
         ẏu$e             # Push -1 to the power of each index in the range [0, len(top)]. This determines both a) whether a turn is needed and b) which general direction to make the turn if a turn is needed for each bit in the Fibonacci word. The result will be 0 (no turn, keep going), 1 (turn to the right) or -1 (turn to the left).
             d*           # Double the list so it can be used with the canvas drawing element and multiply the bit list by the direction list. More on the canvas a little later
               ÞR         # Take the cumulative sums of the list, remove the last item, and prepend a 0. Yes, that's a thing that's 2 bytes in Vyxal.
                 8%       # Modulo each item by 8. This is so that each number can be mapped to a canvas direction that is one of [0, 2, 4, 6]. 0 = up, 2 = right, 4 = down, 6 = left
                   2×ø∧   # For each direction in that list, draw a line of *s of length 2 on the global canvas in that direction. Think of the canvas as a kind of turtle but ascii thing, where each direction moves the turtle and leaves a trail of *s behind. The global canvas is implicitly printed at end of execution. This could also be ø^, but ø∧ looks better :p    
</code></pre>
"
"251776","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> <s>14</s> 13 bytes</h1>
<pre><code>mp13l‛≠₈‹∞vcg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwibXAxM2zigJviiaDigojigLniiJ52Y2ciLCIiLCJ0dXQtdHV0XG50dXQtdHV0LXR1dFxudHV0LXR1dHV0LXR1dFxudHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0LXR1dC10dXRcbnR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG50dXQtdHV0dXQtdHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0dXQtdHV0dHV0LXR1dFxudHV0LXR1dHR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG54XG50dXRcbnR1dC1cbi10dXRcbnR1dC10dXR4XG50dXQtdHV0dFxueHR1dC10dXRcbnR0dXQtdHV0XG50dXQtdHUtdHV0XG50dXQtdHV0dHV0XG50dXQtdHV0LXR1dHRcbnR1dC10dXR0dXQtdHVcbnR1dC10dXR1dHV0LXR1dFxudHV0LXR1dHR1dHR1dC10dXRcbnR1dC10dXR1dHV0LXR1dHV0LXR1dCJd"" rel=""nofollow noreferrer"">Try it Online!</a> | <a href=""https://vyxal.pythonanywhere.com/#WyJBZyIsIiIsIm1wMTNs4oCb4omg4oKI4oC54oiedmMiLCIiLCJ0dXQtdHV0XG50dXQtdHV0LXR1dFxudHV0LXR1dHV0LXR1dFxudHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0LXR1dC10dXRcbnR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG50dXQtdHV0dXQtdHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0dXQtdHV0dHV0LXR1dFxudHV0LXR1dHR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG54XG50dXRcbnR1dC1cbi10dXRcbnR1dC10dXR4XG50dXQtdHV0dFxueHR1dC10dXRcbnR0dXQtdHV0XG50dXQtdHUtdHV0XG50dXQtdHV0dHV0XG50dXQtdHV0LXR1dHRcbnR1dC10dXR0dXQtdHVcbnR1dC10dXR1dHV0LXR1dFxudHV0LXR1dHR1dHR1dC10dXRcbnR1dC10dXR1dHV0LXR1dHV0LXR1dCJd"" rel=""nofollow noreferrer"">12 bytes with <code>g</code> flag</a></p>
<p>Returns <code>1</code> for true, or falsy for false (<code>0</code> or an empty list).</p>
<pre><code>mp13l‛≠₈‹∞vcg
m              # Mirror the input - append its reverse
 p             # Append the input to that
  13l          # Get all overlapping strings of length 13
     ‛≠₈‹∞vc   # For each, does it contain &quot;tut-tut&quot;?
            g  # Minimum. Returns an empty list for an empty list (no idea why)
</code></pre>
<p>-3 from porting Jonathan Allan's Jelly answer!</p>
<p>-1 thanks to emanresu A.</p>
<p>Previously:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h2>
<pre><code>6Iø.13l`≠₈-`∞vcA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiNknDuC4xM2xg4omg4oKILWDiiJ52Y0EiLCIiLCJ0dXQtdHV0XG50dXQtdHV0LXR1dFxudHV0LXR1dHV0LXR1dFxudHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0LXR1dC10dXRcbnR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG50dXQtdHV0dXQtdHV0LXR1dHR1dC10dXRcbnR1dC10dXQtdHV0dXQtdHV0dHV0LXR1dFxudHV0LXR1dHR1dC10dXR1dC10dXQtdHV0dXQtdHV0XG54XG50dXRcbnR1dC1cbi10dXRcbnR1dC10dXR4XG50dXQtdHV0dFxueHR1dC10dXRcbnR0dXQtdHV0XG50dXQtdHUtdHV0XG50dXQtdHV0dHV0XG50dXQtdHV0LXR1dHRcbnR1dC10dXR0dXQtdHVcbnR1dC10dXR1dHV0LXR1dFxudHV0LXR1dHR1dHR1dC10dXRcbnR1dC10dXR1dHV0LXR1dHV0LXR1dCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses the same idea as @GammaFunction's Zsh answer.</p>
<pre><code>6Iø.13l`≠₈-`∞vcA
6Iø.              # Surround the input with 6 spaces on both sides
    13l           # Get all overlapping strings of length 13
       `≠₈-`∞vcA  # Do all of them contain &quot;tut-tut&quot;?
</code></pre>
"
"251826","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>9'∆ċ?ṗṠc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiOSfiiIbEiz/huZfhuaBjIiwiIiwic2VydmljZW1hblxub3puZXJvXG50aHJvd2Rvd25cbmluc2lnbmlmaWNhbmNlXG5mYWJ1bG91c1xuYmxhY2tqYWNrXG5kcmlmdHdvb2Rcbnplcm9cbmJvdW5jZVxuZW5jb2RlXG5laWdodCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to EmanresuA</p>
<p>9 bytes but faster:</p>
<pre><code>9'∆ċ:?Þ∩=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiOSfiiIbEizo/w57iiKk9IiwiIiwic2VydmljZW1hblxub3puZXJvXG50aHJvd2Rvd25cbmluc2lnbmlmaWNhbmNlXG5mYWJ1bG91c1xuYmxhY2tqYWNrXG5kcmlmdHdvb2Rcbnplcm9cbmJvdW5jZVxuZW5jb2RlXG5laWdodCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The joys of having number to word built-ins!</p>
<h2>Explained</h2>
<pre><code>9'∆ċ:?Þ∩=
9'        # From the range [1, 9], keep only items n where:
  ∆ċ      #   n as a word
     ?Þ∩  #   under multiset intersection with the input
    :   = #   is the same. 
</code></pre>
"
"251827","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>λ∆ċ‛λ¬-?c;ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwizrviiIbEi+KAm867wqwtP2M74bmFIiwiIiwiZlxuZ1xuaFxubFxueSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very literal implementation of the title.</p>
<h2>Explained</h2>
<pre><code>λ∆ċ‛λ¬-?c;ṅ
λ        ;ṅ  # The first number
 ∆ċ‛λ¬-      #   (converted to words, with any &quot;and&quot;s removed)
       ?c    # to contain the input
</code></pre>
"
"251859","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>µ→λf∆ċ←⁼;Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCteKGks67ZuKIhsSL4oaQ4oG8O+G5hCIsIiIsIltbXCJ0d29cIixcInNldmVuXCJdLFtcIm9uZVwiLFwiZWlnaHRcIl0sW1widHdvXCIsXCJlaWdodFwiXSxbXCJvbmVcIixcImVpZ2h0XCJdLFtcInR3b1wiLFwiZWlnaHRcIl0sW1wiZm91clwiLFwiZml2ZVwiXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Can be a little bit slow for serial numbers that represent larger decimal numbers, as the explanation will show. Who needs lookup strings anyway?</p>
<h2>Explained</h2>
<pre><code>µ→λf∆ċ←⁼;Ṅ
µ          # Sort the input by:
 →         #  putting the item into a temporary variable (needed for scoping purposes)
  λ     ;Ṅ #  and getting the first non-negative integer where:
   f∆ċ     #    converting each of the digits in the number to words
      ←⁼   #    equals the list being considered.
</code></pre>
"
"251951","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>2Ǒ:£E/‹½E¥d›*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyx5E6wqNFL+KAucK9RcKlZOKAuioiLCIiLCI4OCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>2Ǒ            # Multiplicity by 2 = a
  :£          # Store a copy to the register
     /        # Divide the input by...
    E         # 2 ** A
      ‹½      # Decrement and halve = b
        E     # 2 ** b
            * # Multiplied by
         ¥    # a (register)
          d›  # Doubled and incremented
</code></pre>
"
"251970","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>↵2vβO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLihrUyds6yTyIsIiIsIjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Times out after default time online for anything over 4, times out for all inputs over 5 after maximum time.</p>
<p>Kind of similar to caird's jelly answer but much slower.</p>
<h2>Explained</h2>
<pre><code>↵2vβO
↵      # 10 to the power of the input - this will always be longer than the binary representation of the input
 2vβ   # convert each item in the range [1, that] to base 2 - the base converter just happens to be nice with digits greater than the base. 
    O  # Count how many items in that list are equal to the input 
</code></pre>
"
"252010","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>d$ƈ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZCTGiCIsIiIsIjJcbjNcbjRcbjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of all the other answers</p>
<pre><code>  ƈ # Binomial coefficient of...
d   # Double input
 $  # Input
</code></pre>
"
"252011","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 15 bytes</h1>
<pre><code>₌∆p²?:ɾ∆f‡?ε∵Wṁ
</code></pre>
<p><em>-3 bytes thanks to <a href=""https://codegolf.stackexchange.com/users/100664/emanresu-a"">emanresu A</a></em></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoziiIZwwrI/Osm+4oiGZuKAoT/OteKItVfhuYEiLCIiLCIxMyJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>₌                # Parallel apply:
 ∆p              #   Nearest prime
   ²             #   Square
    ?            # Push the input
     :           # Duplicate
      ɾ          # Range from 0 to n
       ∆f        # Nth fibonacci number
            ∵    # Minimum by:
         ‡       # A two element lambda that gets
           ε     #   The absolute difference of it's input
          ?      #   And the program's input
              ṁ  # Mean of
             W   # The stack
</code></pre>
"
"252013","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 78 bytes</h1>
<pre><code>kaf»⌐±ẋ∆ṡẊ⊍¬5=↔ε{→₇-¥Kkṡw¹ǔ„L²Fŀwɖ&quot;≠₌Ǎ›ꜝ%ǐ[Q∑)fĠλ=WτṪṫ¨≤‹r≬|{gǔs⁼∵2»16τ0€v¦øA+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrYWbCu+KMkMKx4bqL4oiG4bmh4bqK4oqNwqw1PeKGlM61e+KGkuKChy3CpUtr4bmhd8K5x5TigJ5MwrJGxYB3yZZcIuKJoOKCjMeN4oC66pydJceQW1HiiJEpZsSgzrs9V8+E4bmq4bmrwqjiiaTigLly4omsfHtnx5Rz4oG84oi1MsK7MTbPhDDigqx2wqbDuEErIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This uses a strategy similar to the CJam answer of storing differences between the second letters and signalling a new first letter with a 0.</p>
<pre><code>   »...»           # Large integer
        16τ        # Convert from base 16
           0€      # Split on zeroes
             v¦    # Take the cumulative sums of each list of numbers
               øA  # For each each number, get the nth letter
                 + # Prepend each of corresponding items of...
kaf                # The lowercase alphabet, as a list of characters
</code></pre>
"
"252014","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ṗµ∑;Iht
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZfCteKIkTtJaHQiLCIiLCJbMSwgMiwgMywgNCwgNSwgNl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/51478/100664"">isaacg's Pyth answer</a>, go upvote that</p>
<pre><code>ṗ       # Subsets
 µ∑;    # Sorted by sum
    I   # Cut in half
     ht # Get the second element of the first half
</code></pre>
"
"252015","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>⇩*+Ǐ∇εJǏ∞⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6kqK8eP4oiHzrVKx4/iiJ7igYsiLCIiLCI3XG4tXG5AXG58XG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> *         # Repeat the horizontal character...
⇩          # Horizontal distance - 2 times
  +Ǐ       # Prepend and append the corner character
    ∇ε     # Push the vertical character repeated by the amount
      J    # Append that to the line
       Ǐ   # Append the first line
        ∞  # Mirror
         ⁋ # Join by newlines
</code></pre>
"
"252036","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>¡
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqEiLCIiLCJoZWxsbyB3b3JsZC5cbkNPREVHT0xGIElTIEZVTi5cbm5vIHBlcmlvZFxudGhlIGJhbGwgd2FzIHJlZC4gc28gd2FzIHRoZSBiYWxsb29uLlxuSSBsb3ZlIGNvZGVnb2xmLnN0YWNrZXhjaGFuZ2UuY29tXG5oZUxMbyEgaE9XIGFyZSB5T1UgdG9EYXk/IGhPcEVmdWxMeSB5T3UgYXJlIG9rYXkhIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>&quot;Nothing like a good old built-in answer!&quot; I suppose not younger lyxal, I suppose not.</p>
<p>Alternatively, a non-trivial 24 byte answer:</p>
<pre><code>`([.?!])`ṡλ⇩⌈:Th~iǐȦṄ;Ẇṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYChbLj8hXSlg4bmhzrvih6nijIg6VGh+aceQyKbhuYQ74bqG4bmFIiwiIiwiaGVsbG8gd29ybGQuXG5DT0RFR09MRiBJUyBGVU4uXG5ubyBwZXJpb2RcbnRoZSBiYWxsIHdhcyByZWQuIHNvIHdhcyB0aGUgYmFsbG9vbi5cbkkgbG92ZSBjb2RlZ29sZi5zdGFja2V4Y2hhbmdlLmNvbVxuaGVMTG8hIGhPVyBhcmUgeU9VIHRvRGF5PyBoT3BFZnVsTHkgeU91IGFyZSBva2F5ISJd"" rel=""noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>`([.?!])`ṡλ⇩⌈:Th~iǐȦṄ;Ẇṅ
`       `ṡ               # Split the input on the regex &quot;[.?!]&quot;, keeping the thing that causes splits (wrapping something in `()` when regex splitting keeps it in the split list)
          λ          ;Ẇ  # To each second item of that list (guaranteed to not be punctuation), starting at index 0:
           ⇩⌈             #   Split the lowercase version of the string on spaces
             :Th~i        #   Get the first word by getting the first truthy index in the splitted string (because it may contain `&quot;&quot;`s) and get the item at that index
                  ǐȦṄ     #   Replace the word at that index with a title-cased version of the string, and join the list on spaces.
                      ṅ   # Join the result on nothing
</code></pre>
"
"252078","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>⌈≠[`NaN`|∆ċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIjiiaBbYE5hTmB84oiGxIsiLCIiLCJ0b3AgdGVuIGJydWggbW9tZW50cyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Easy win when it's a built-in :p</p>
"
"252087","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>14</s> 12 bytes</h1>
<pre><code>Ṗ'L√ẇÞDf?⁼;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnTOKImuG6h8OeRGY/4oG8O2giLCIiLCIxLDY5LDAsMTMiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Math? Sensible methods of putting things into arrays? Programs that finish in reasonable time? Couldn't be me.</p>
<p>Times out for anything bigger than a 2x2 matrix.</p>
<p>Takes input as a flattened list and outputs a flattened list.</p>
<h2>Explained (old)</h2>
<pre><code>f₌ṖL√vẇ'ÞD?⁼;h
f₌ṖL√           # Push all permutations of the flattened input, as well as the square root of the length of the flattened input  
     vẇ         # Split each permutation into chunks of that length
       'ÞD?⁼;   # Keep those only where the diagonals equal the input (this basically means try each and every single possible matrix from the input until one is found with the same diagonals)
              h # Get the first (and only) item
</code></pre>
"
"252104","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Ṗ⌊ṁ
</code></pre>
<p><em>-2 bytes thanks to @lyxal</em></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuaAiLCIiLCLhuZbijIrhuYEiLCIiLCIxMjMiXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation</p>
<pre><code>Ṗ   # Permutations
 ⌊  # Convert each to an integer
  ṁ # Mean
</code></pre>
"
"252105","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 27 bytes</h1>
<pre><code>k⁰kv&quot;:ɾJJƒ*‛ß+k⁰⇧1Ṁ$‡‛eijøṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJr4oGwa3ZcIjrJvkpKxpIq4oCbw58ra+KBsOKHpzHhuYAk4oCh4oCbZWlqw7jhuZkiLCIiLCJcIkhBZWxsbyBXb3JsZFwiIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>This is a bit of a mess.</p>
<pre><code>k⁰kv&quot;                       # Consonants and vowels, paired
     :ɾ                     # Duplicate and make an uppercase copy of each
       J                    # Concatenate to the original
        J                   # Concatenate to the input
         ƒ*                 # Reduce by ring translation, ring translating by each string
           ‛ß+              # &quot;[bcdfghjklmnpqrstvwxyz]+&quot;
                 1Ṁ         # Insert at position 1...
              k⁰⇧           # &quot;BCDFGHJKLMNPQRSTVWXYZ&quot;
                   $        # Put that under the value
                         øṙ # Regex replace that with...
                    ‡       # A function that...
                     ‛eij   # Joins by &quot;ei&quot;
</code></pre>
"
"252144","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ṄvṖÞfUvG∷∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIuG5hHbhuZbDnmZVdkfiiLfiiJEiLCIiLCIxXG4yXG4zXG40XG41XG42XG43Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E. Very slow.</p>
<pre><code>ṄvṖÞfUvG∷∑   # example input: 3
Ṅ            # integer partitions =&gt; [[1, 1, 1], [2, 1], [3]]
 vṖ          # permutations of each =&gt; [[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], [[2, 1], [1, 2]], [[3]]]
   Þf        # flatten by one level =&gt; [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [2, 1], [1, 2], [3]]
     U       # uniquify =&gt; [[1, 1, 1], [2, 1], [1, 2], [3]]
      vG     # max of each =&gt; [1, 2, 2, 3]
        ∷    # modulo each by 2 =&gt; [1, 0, 0, 1]
         ∑   # sum =&gt; 2
</code></pre>
"
"252156","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <del>29</del> 23 bytes</h1>
<pre><code>(ƛh/;ḣ„D&quot;„-‟wJƛǓ:h±*]ƛǓ
</code></pre>
<p>it's so complex that I forget how it works, but it does work I guess...?</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJXIiwiIiwiTCjGm2gvO+G4o+KAnjo6XCLigJ4t4oCfd0rGm8eTO8abaMKxKjspxpvHkzsiLCIiLCJbWzIsMSwxLDE0XSxbLTEsLTMsMiwtMl0sWzQsLTYsMywtNV1dIl0="" rel=""nofollow noreferrer"">29 bytes</a> by me</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJXIiwiIiwiTCjGm2gvO+G4o+KAnkRcIuKAni3igJ93Ssabx5M6aMKxKl3Gm8eTIiwiIiwiW1syLDEsMSwxNF0sWy0xLC0zLDIsLTJdLFs0LC02LDMsLTVdXSJd"" rel=""nofollow noreferrer"">24 bytes</a> by @emanresu A</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJXIiwiIiwiKMabaC874bij4oCeRFwi4oCeLeKAn3dKxpvHkzpowrEqXcabx5MiLCIiLCJbWzIsMSwxLDE0XSxbLTEsLTMsMiwtMl0sWzQsLTYsMywtNV1dIl0="" rel=""nofollow noreferrer"">23 bytes</a>(current) by great god @lyxal</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJXIiwiIiwiKMabaC874bij4oCeRFwi4oCeLeKAn3dKxpvHkzpowrEqXcabx5MiLCIiLCJbWzIsMSwxLDE0XSxbLTEsLTMsMiwtMl0sWzQsLTYsMywtNV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252213","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>'£?ƛ0$b(dn¥*꘍)?=;a
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInwqM/xpswJGIoZG7CpSrqmI0pPz07YSIsIiIsIjM5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
"
"252223","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>∆o2NȯJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIZvMk7Ir0oiLCIiLCIyMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>KΠ
</code></pre>
<p>Explanation:</p>
<pre><code>K  # Gets the divisors of a number
 Π # Product of array
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLzqAiLCIiLCIzMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252327","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ĠøṖvvf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQQSIsIiIsIsSgw7jhuZZ2dmYiLCIiLCJbMSwwXVxuWzEsMSwxLDFdXG5bMSwxLDAsMCwxXSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Port of @UnrelatedString's Brachylog answer.</p>
"
"252354","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ẋÞm⁽≈€
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwi4bqLw55t4oG94omI4oKsIiwiIiwiMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>My first submission, thanks to emanresu for help with the lambda.</p>
"
"252382","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 8 bytes</h1>
<pre><code>H‛ Xτ8↳⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJI4oCbIFjPhDjihrPigYsiLCIiLCJbXCJGRlwiLFwiODFcIixcIjQ3XCIsXCI5OVwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thanks to Steffan</p>
<p>Port of Japt.</p>
"
"252389","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>sh½7+⁰t≥
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwic2jCvTcr4oGwdOKJpSIsIiIsIlsyMCwyMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Inputs are a 2 element list.</p>
"
"252427","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>¨Vv/fU~ṅs⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCqFZ2L2ZVfuG5hXPigYsiLCIiLCI2Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¨Vv/fU~ṅs⁋
¨Vv/        # Create a division table from [1, input]
    fU      # Flatten and uniquify
      ~ṅ    # Keep only elements &lt;= 1
        s   # Sort
         ⁋  # Join on newlines
</code></pre>
"
"252445","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>¨£ẋf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIsKowqPhuotmIiwiIiwiWzEsMiwzXSxbMSwyLDNdXG5bNiwwLDAsNl0sWzUsMSwxLDBdXG5bMTAwLDEwMF0sWzAsMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This two-byte solution should work, but it seems to bork when the length is an array only of zeros: <a href=""https://vyxal.pythonanywhere.com/#WyJBUCIsIiIsIsO44biKIiwiIiwiWzEsMiwzXSxbMSwyLDNdXG5bNSwxLDEsMF0sWzYsMCwwLDZdXG5bMCwwXSxbMTAwLDEwMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252492","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 10 bytes</h1>
<pre><code>⌊∑$E%Π⁰↳›J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIriiJEkRSXOoOKBsOKGs+KAukoiLCIiLCIwMTEwMTAxXG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a>
&quot;<s>11</s> 10 bytes?!&quot; I hear you say. Well you gotta remember that when it comes to doing things with base conversion I don't do the best - so keep that in mind when y'all start giving me golfing suggestions :p</p>
<h2>Explained</h2>
<pre><code>⌊∑$E%Π⁰↳›J
⌊∑         # Sum of the 1s in the input binary
  $E%      # Modulo'd by 2 to the power of n
     Π     # Converted to binary
      ⁰↳   # Padded with spaces to make sure it's of length n
        ›J # With those spaces replaced with 0s and joined to the original binary input
</code></pre>
"
"252496","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>KL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLTCIsIiIsIjEyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252497","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwizqAiLCIiLCJcIjEyMzQ1NlwiLCBcImFiY2RcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Vyxal's built ins are fun!</p>
"
"252500","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ė
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwixJYiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252574","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ɽfhO2&lt;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQQSIsIiIsIsm9ZmhPMjwiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Accepts one line as input, formatted like the test cases.</p>
<p>How it works:</p>
<pre><code>ɽf          # convert input to lowercase and turn into list
  hO        # count the number of times the first item in the list occurs
     2&lt;     # is it less than 2 (should only occur once as the first character)
</code></pre>
"
"252594","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>₁ʀ∆ċvhṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoHKgOKIhsSLdmjhuYUiLCIiLCIiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>₁ʀ∆ċvhṅ
₁ʀ      # Range [0, 100]
  ∆ċ    # Nth cardinal of each
    vh  # First char of each
      ṅ # Join together
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a> <code>sMH</code>, 4 bytes</h1>
<pre><code>ƛ∆ċh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzTUgiLCIiLCLGm+KIhsSLaCIsIiIsIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>(thanks to lyxal)</p>
<p>sMH, why are there flags for everything</p>
<pre><code>H flag  # Preset stack to 100
ƛ       # Map over 100
M flag  # Make that 100 be a range [0, 100] instead of [1, 100]
 ∆ċ     # Convert to cardinal
   h    # Get the first character
s flag  # Join together
</code></pre>
"
"252623","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>½h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiwr1oIiwiIiwiaGVsbG9sbGVoIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Makes a list of each half of the string and takes the first item. Vyxal rounds up when splitting odd numbers in half. Don't think this can be golfed to 1 byte because the code can't be a palindrome :p</p>
"
"252626","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>kḭ²‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwia+G4rcKy4oC5IiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>2^32 squared, minus one.</p>
"
"252655","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>Þxs?ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnnhzP+G4nyIsIiIsIlsxLCAzLCA0LCA2XVxuWzMsIDEsIDRdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p><strong>Explanation</strong>:</p>
<pre><code>Þxs?ḟ
Þx    All possible combinations of the set (without replacements)
  s   Sort
   ?ḟ Output index of the word 
</code></pre>
"
"252722","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ṡƛ'∆K=;Ḋa;∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuaHGmyfiiIZLPTvhuIphO+KIkSIsIiIsIjEwMFxuMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwi4bmhxpsn4oiGSz074biKYSIsIiIsIjEwMFxuMSJd"" rel=""nofollow noreferrer"">9 bytes with <code>s</code> flag</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEluG5ocabJ+KIhks9O+G4imE74oiRIiwiIiwiMSAxMDAiXQ=="" rel=""nofollow noreferrer"">12 bytes accounting for space seperated inputs</a></p>
<h2>Explained</h2>
<pre><code>ṡƛ'∆K=;Ḋa;∑
ṡƛ       ;  # Over each item x in the range [input a, input b]
  '∆K=;     #   Keep items from the range [1, x] that are perfect numbers
       Ḋa   #   And is x divisible by any of those perfect numbers?
          ∑ # Sum the number of numbers that are divisible by a perfect number
</code></pre>
"
"252723","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>żḢ/v≈a
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwixbzhuKIvduKJiGEiLCIiLCJcImFzZGZhc2RmYXNkZlwiXG5cImFzZGZhc2RmYVwiXG5cIsS0xLTEtMS0xLTEtMS0xLTEtFwiXG5cIsS0xLTEtDEyM8S0xLTEtDEyM1wiXG5cImFiY2RlZmdoXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>żḢ/v≈a
  /    # Split the input string into pieces of
żḢ     # range [2, len(input)]
   v≈a # do any of those have all the same item
</code></pre>
"
"252735","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>UÞ⊍h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiVcOe4oqNaCIsIiIsIlsyLCAxLCA0LCAxLCA0XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes the multi-set symmetric difference, which outputs the duplicate values in order that they occur. Outputs <code>0</code> if nothing is found.</p>
"
"252736","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>LJL+LJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQ4bmgIiwiIiwiTEpMK0xKIiwiIiwiYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Append the length of the string, take the length of that, then append the new length to the original. This does work with digit overflows (9, 99, etc...).</p>
"
"252763","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>øA∑\A5ø↳
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw7hB4oiRXFxBNcO44oazIiwiIiwiWzQsIDMsIDIsIDEsIDNdXG5bOCwgNiwgNCwgNV1cblszLCA0LCAyXVxuWzksIDksIDksIDksIDFdXG5bMSwgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Finally, a use for some of the more niche string digraphs. Takes input as a list of digits, outputs a single string.</p>
<h2>Explained</h2>
<pre><code>øA∑\A5ø↳
øA        # Get the nth letter of the alphabet for each digit in the input
  ∑       # Join as a single string
   \A     # Push the string &quot;A&quot; to the stack
     5    # Push the number 5 to the stack
      ø↳  # And left pad the single string from early with &quot;A&quot;s until it's 5 characters long 
</code></pre>
"
"252819","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, score 4, 8 bytes</h1>
<pre><code>¯±ꜝĠL$ß›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqFgID0+IGAvdnbDuErin5FoREQiLCLCr8Kx6pydxKBMJMOf4oC6IiwiOm5oYCwgYGrDuEJgIDw9IGBwSlxcIEokbnQ9W1xc4pyFfFxc4p2MXUosIiwiW10gPT4gMFxuWzFdID0+IDFcblsxLCAxXSA9PiAxXG5bOSwgOSwgOSwgOSwgOSwgOSwgOV0gPT4gMVxuWzUsIDEwXSA9PiAyXG5bMCwgMSwgMl0gPT4gMlxuWzUsIDEwLCAxMCwgNV0gPT4gM1xuWzMsIDEsIDQsIDEsIDUsIDksIDIsIDYsIDUsIDMsIDVdID0+IDlcblsxLCAyLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA2XSA9PiAyXG5bMiwgMiwgMSwgMiwgNSwgNiwgNiwgNV0gPT4gNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of CursorCoercer's Pyth answer, so upvote that!</p>
<p>The bytes are <code>[212, 213, 222, 189, 76, 36, 14, 131]</code>.</p>
"
"252848","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>29</s> 21 bytes</h1>
<pre><code>4Ḋ2&quot;?3≥i???23*9ḭWƒ-7%
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI04biKMlwiPzPiiaVpPz8/MjMqOeG4rVfGki03JSIsIiIsIjIwMDFcbjExXG4xMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E.</p>
"
"252852","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>bṘB
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQQSIsIiIsImLhuZhCIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Converts to a binary string, reverses it, then puts it back in base 10.</p>
"
"252864","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 31 bytes</h1>
<pre><code>\+3-4*\|?b16∆Z\#*2↳ʁ+4ẇṠv&quot;fǏvǏ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXCszLTQqXFx8P2IxNuKIhlpcXCMqMuKGs8qBKzThuofhuaB2XCJmx492x4/igYsiLCIiLCI0MjQyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>        ?                       # Input
         b                      # To binary
          16∆Z                  # Pad to length 16 with 0s
              \#*               # That many #s, for each bit
                 2↳ʁ            # Pad to length 2 with spaces and mirror
      \|            +           # Prepend | to each
                     4ẇṠ        # Divide into rows and stringify each
                        v&quot;f     # Interleave with...
\+3-                            # &quot;+---&quot;
    4*                          # Repeated four times
                           Ǐ    # Append the first line
                            vǏ  # For each line, append the firstt character
                              ⁋ # Join the result by newlines
</code></pre>
"
"252870","<h1><a href=""https://github.com/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<p>Port of <a href=""https://codegolf.stackexchange.com/questions/206158/what-calculator-is-this-datafile-for/206171#206171"">@Daniel H.</a>'s answer.</p>
<pre><code>`TI-`?46fiJ?6i×≠\+*J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYFRJLWA/NDZmaUo/NmnDl+KJoFxcKypKIiwiIiwiKipUSTgzUEdHXG4qKlRJODMqYWZkYVRJMzNQIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<h3>Explained</h3>
<pre><code>`TI-`?46fiJ?6i×≠\+*J
`TI-`                 # Stack &quot;TI-&quot;
     ?46fi            # Stack input[4:6]
          J           # Join
           ?6i×≠\+*J  # Stack &quot;+&quot; and join if input[6] is equal to &quot;*&quot;
</code></pre>
<p>Basically my first vyxal answer, thanks so much to all who helped me, including @lyxal.</p>
<h2>13 bytes @lyxal</h2>
<pre><code>7Ẏ‛P+*×P\-2Ṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiN+G6jsOXb1xcSTrigLlW4oCbUCsqIiwiIiwiKipUSTgzUEdHXG4qKlRJODMqYWZkYVRJMzNQIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
"
"252871","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ƛ‹p⌊
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwixpvigLlw4oyKIiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252885","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ĠḢL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEoOG4okwiLCIiLCJbMSwgMSwgMSwgMiwgMiwgM10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Alternatively:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¯TL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCr1RMIiwiIiwiWzEsIDEsIDEsIDIsIDIsIDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><code>¯ꜝL</code> would also work.</p>
<p>All of these solutions can be 2 bytes by removing <code>L</code> and adding the <code>l</code> flag.</p>
"
"252899","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>17</s> <s>11</s> <s>10</s> 8 bytes</h1>
<pre><code>Ṙ«Wṁ«ḂĿ=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmYwqtX4bmBwqvhuILEvz0iLCIiLCJhdGNnY2dhdFxuYWd0XG5hYWN0Z2NndHR0YWMiXQ="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>Ṙ«Wṁ«ḂĿ=
Ṙ        # Input reverse
 «Wṁ«ḂĿ  # Changes DNA and translate with string compression
       = # If original input is equal to the result output 1/0
</code></pre>
"
"252903","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>bĊ↑h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYsSK4oaRaCIsIiIsIjFcbjJcbjRcbjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>bĊ↑h
b    # binary
 Ċ↑h # most values outputted, if tie then 0
</code></pre>
"
"252907","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>29.9041677?√/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiMjkuOTA0MTY3Nz/iiJovIiwiIiwiMVxuMTBcbjUwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252910","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>⁺»?/∆e‹*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJB4biLIiwiIiwi4oG6wrs/L+KIhmXigLkqIiwiIiwiMjQsMTAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252912","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>Ṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJB4biLIiwiIiwi4bmYIiwiIiwiXCJRdWljayBicm93biBmb3hcXG5IZSBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252913","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJB4biLIiwiIiwidCIsIiIsIjVcbjUxNDEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252914","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ʀ¨pJ⌊
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJB4biLIiwiIiwiyoDCqHBK4oyKIiwiIiwiNFxuMTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>ʀ¨pJ⌊
ʀ     # Inclusive zero range
 ¨p   # each overlapping pair
   J  # merge
    ⌊ # floor
</code></pre>
"
"252915","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 Bytes</h1>
<pre><code>0       # 0000: 1 byte
∧      # 0001: 1 byte
¬∧     # 0010: 2 bytes
¹      # 0011: 1 byte
∧¬     # 0010: 2 bytes
²      # 0101: 1 byte
^      # 0110: 1 byte
∨      # 0111: 1 byte
+±     # 1000: 2 bytes
=      # 1001: 1 byte
²¬     # 1010: 2 bytes
∧²¬   # 1011: 3 bytes
¬      # 1100: 1 byte
¬∨    # 1101: 2 bytes
+&lt;2   # 1110: 3 bytes
1     # 1111: 1 byte

</code></pre>
<p>Port of Emigna's <a href=""https://codegolf.stackexchange.com/a/82980/96266"">05ab1e answer</a>.</p>
"
"252987","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 9 bytes</h1>
<pre><code>\=*\:øb‹+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiXFw9KlxcOsO4YuKAuSsiLCIiLCIyXG43Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"252994","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>q
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJxIiwiIiwiXCJoZWxsbyB3b3JsZFwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Note Vyxal uses backticks for strings, not the usual quotes.</p>
"
"252995","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>wJ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ3SuKIkSIsIiIsIjYzXG4xMTEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>wJ∑
w   # list
 J  # merge
  ∑ # sum
</code></pre>
"
"252996","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>C∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oiRIiwiIiwiSGVsbG8gV29ybGQhIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>C∑
C  # char
 ∑ # sum
</code></pre>
"
"252997","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>bḢB
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYuG4okIiLCIiLCIxXG4yXG4xMFxuMTZcbjUwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>bḢB
b   # binary
 Ḣ  # remove first item
  B # binary back to base 10
</code></pre>
"
"252999","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɾ²∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb7CsuKIkSIsIiIsIjRcbjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>ɾ²∑
ɾ   # range 1 inclusive [1...n]
 ²  # square
  ∑ # sum
</code></pre>
"
"253002","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>¯k₁⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwq9r4oKB4oG8IiwiIiwiMTIzXG4yMzRcbjFcbjJcbjNcbjEyMzQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>¯k₁⁼
¯    # Deltas
 k₁  # [1,1]
   ⁼ # compare lists
</code></pre>
"
"253003","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>bL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYkwiLCIiLCIzNDEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>bL
b  # binary
 L # length
</code></pre>
"
"253028","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>Lk•÷Y$Ṙp*?‛€?jẎh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiTGvigKLDt1kk4bmYcCo/4oCb4oKsP2rhuo5oIiwiIiwieWVzXG5jYXRcbmhpXG5wb2xsXG53YXMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Lk•÷Y$Ṙp*?‛€?jẎh
 k•              # List of rows on the keyboard: [&quot;qwertyuiop&quot;, &quot;asdfghjkl&quot;, &quot;zxcvbnm&quot;]
   ÷             # Push each item onto the stack
    Y            # Interleave the top two: &quot;azsxdcfvgbhnjmkl&quot;
     $           # Swap so &quot;qwertyuiop&quot; is on top
      Ṙ          # Reverse it
       p         # Prepend it to the other string
L       *        # Repeat it input-length number of times
         ?‛€?j   # Join each character in the input by &quot;.*?&quot;
              Ẏh # Get the first regex match
</code></pre>
"
"253029","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<p><em>-2 bytes thanks to Steffan</em></p>
<pre><code>2$(:‹*›
</code></pre>
<p><strong>Explanation:</strong></p>
<pre><code>2$(:‹*›
2$          Push 2 and swap it with the input
   (:       Loop through input and duplicate value
     ‹*     Decrement the value and multiply
       ›    Increment value
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyJCg64oC5KuKAuiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253036","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ɾ(nf∑)W∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvihuZuKIkSlX4oiRIiwiIiwiMTIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253038","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>(ÞẇḢṪj
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIow57huofhuKLhuapqIiwiIiwiM1xuQUJDREVGR0hJSktMTU5PUCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>(      # N times...
 Þẇ    # Unwrap (push first+last and rest
   ḢṪ  # Remove first and last chars of rest
     j # Insert back into the first + last
</code></pre>
"
"253039","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 4 bytes</h1>
<pre><code>µb∑⌐
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCtWLiiJHijJAiLCIiLCJbMTUzNDIsMjg5NDMsMTYzNzUsMzk0NCwxMTc0Niw4MjUsMzI0MjUsMjg0MzYsMjE4MjYsMTU3NTIsMTk5NDRdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>µb∑⌐
µ     # lambda
 b    # binary
  ∑   # sum (basically adds everything inside the binary, which is equivalent to the number of 1's
   ⌐  # reverse
</code></pre>
"
"253040","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>15ġ⁰=)ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiMTXEoeKBsD0pyK90IiwiIiwiMywgM1xuNCwgNVxuMiwgMTVcbjMxMiwgMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the other answers.</p>
"
"253041","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>@f:*|!;
</code></pre>
<p><a href=""https://lyxal.pythonanywhere.com?flags=&amp;code=%40f%3A*%7C!%3B&amp;inputs=&amp;header=&amp;footer=1%202%203%203%20%40f%3B%2C%0A3%203%203%203%204%20%40f%3B%2C"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Note the last number before the input called is the no. of arguments.</p>
<p><sub>shoutout to @lyxal for helping me!</sub></p>
"
"253042","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 4 bytes</h1>
<pre><code>‹₁ḭ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oC54oKB4bit4oC6IiwiIiwiMjAwMFxuMjAwMVxuMTk0NlxuMTcwNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>‹₁ḭ›
‹    # decrement
 ₁ḭ  # divide floor by 100
   › # increment
</code></pre>
"
"253043","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiaSIsIiIsIjAsIFwiYWJjZGVcIlxuMywgXCJhYmNkZVwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Can't get much simpler than this.</p>
"
"253044","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>↵S$ċ[ǔ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oa1UyTEi1vHlCIsIiIsIjFcbjJcbjNcbjRcbjVcbjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253049","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>⁽₂Ḋ¾wJh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oG94oKC4biKwr53SmgiLCIiLCJbMTQsIDQyLCAyMzI0LCA5NzA5MCwgNDA4MDYyMiwgMTcxNDgwMzcyXVxuWzQyLCAxNCwgNDIsIDQzLCA0MSwgNDA4MDYyMiwgMTcxNDgwMzcyXVxuW10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>⁽₂Ḋ¾wJh
⁽       # 1-element lambda
 ₂      # check if even
  Ḋ     # group if true
   ¾wJ  # add empty list to end
      h # get head of the list
</code></pre>
"
"253057","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¦=*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqY9KiIsIiIsIlswLDEsMCwxLDAsMCwxXVxuWzAsMCwwLDBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>¦=*
¦   # cumulative sum
 =  # equal
  * # multiply bits
</code></pre>
"
"253059","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>₁'2c¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoEnMmPCrCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>₁'2c¬
₁     # push 100 to stack
 '    # filter lambda
  2c  # contains 2
    ¬ # logical NOT
</code></pre>
"
"253060","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>fḊg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZuG4imciLCIiLCIxMjhcbjEyXG4xM1xuMjA0XG4xNjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>fḊg
f   # flatten input to get list of digits
 Ḋ  # divisible by
  g # minimum value of the individual lists whether the digit is divisible or not. 
    #   If it is, `1`, if not `0`. So if 1 digit is not divisible, it returns `0` in the list, and the program takes it as the minimum.
</code></pre>
"
"253061","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>ɾḂYṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb7huIJZ4bmFIiwiIiwiMVxuNFxuMjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>ɾḂYṅ
ɾ     # range of [1,input+1]
 Ḃ    # dupe and reverse
   Y  # interleave
    ṅ # join with no spaces
</code></pre>
"
"253062","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>'?$Oṅ;G
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJB4bmgIiwiIiwiJz8kT+G5hTtHIiwiIiwiMTJcbjBcbjQ4NTkwMlxuNDk1OTAyXG45OTk5OTlcbjk5OTA5OVxuMTk0ODcxMDQ5OCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as a string.</p>
<h3>Explained</h3>
<pre><code>'?$Oṅ;G
'    ;  # From the input, keep only items where:
 ?$O    #   The count of the item in the input
    ṅ   #   Is &lt;= 1
      G # Get the biggest digit from the remaining items.
</code></pre>
"
"253063","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 5 bytes</h1>
<pre><code>ɖ∴=Tİ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyZbiiLQ9VMSwIiwiIiwiWzEsIDIsIDUsIDQsIDMsIDddXG5bMTAsIC0xLCAxMl1cblstNywgLTgsIC01LCAwLCAtMSwgMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explanation</h3>
<pre><code>ɖ∴=Tİ
ɖ     # Cumulatively reduce by an element
 ∴    # Dyadic Maximum
  =   # equal
   T  # Get indices of truthy elements
    İ # Index into list at indices
</code></pre>
"
"253064","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>fꜝΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZuqcnc6gIiwiIiwiMzYxMjE4NDAyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Pyt isn't the only language to do 3 bytes :3</p>
<h3>Explained</h3>
<pre><code>fꜝΠ
f   # flatten to a list
 ꜝ  # remove all 0's
  Π # product
</code></pre>
"
"253065","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>39</s> 27 bytes</h1>
<pre><code>`It's % ×ġ, ṗḊ, go λ∵.`kðt%
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSXQncyAlIMOXxKEsIOG5l+G4iiwgZ28gzrviiLUuYGvDsHQlIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Surely golfable?</p>
"
"253068","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>41</s> <s>19</s> 18 bytes</h1>
<pre><code>`!±∵ ,∴İ``İ∴, ∵±!`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgIcKx4oi1ICziiLTEsGBgxLDiiLQsIOKItcKxIWAiLCIjYEdyZWV0aW5ncywgUGxhbmV0IWDDuERcbiNgIXRlbmFsUCAsc2duaXRlZXJHYMO4RCIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>We can achieve this via <a href=""https://codegolf.stackexchange.com/questions/223918/tips-for-golfing-in-vyxal/245348#245348"">string compression</a>. By entering</p>
<pre><code>`Greetings, Planet!`øD
</code></pre>
<p>We get:</p>
<pre><code>`İ∴, ∵±!`
</code></pre>
<p>We therefore just reverse it to get:</p>
<pre><code>`!±∵ ,∴İ`
</code></pre>
<p>The reason why I had to enter <code>!±∵ ,∴İ</code> is to fulfill the palindrome requirement.</p>
<p>Vyxal prints the last string outputted to stack, in this case ignoring the first one.</p>
"
"253100","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 7 bytes</h1>
<pre><code>Ḃ+⁺6oLṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiZkMiLCLhuIIr4oG6Nm9M4bmFIiwiIiwiQVxuQUJBXG5BQlpcbkFCQkFcbkJFVllcbkdPTEZcblpPTEFcbldJWkFSRFxuQklHT1RSWVxuUkFDRUNBUlxuQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to a trick from @Kevin Cruijssen's 05AB1E answer.</p>
"
"253123","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>6</s> 5 bytes</h1>
<pre><code>\0d0V
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiXFwwZDBWIiwiIiwiMTAwMTAwMVxuMTExIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thx to @Steffan</p>
"
"253125","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>32</s> 30 bytes</h1>
<pre><code>∆/`λƛ h⁼Ǐ¢Ṗλ₇ of λ× ¬ẋ Ȧ⇩ is Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oiGL2DOu8abIGjigbzHj8Ki4bmWzrvigocgb2YgzrvDlyDCrOG6iyDIpuKHqSBpcyDOoCIsIiIsIlszLCA0XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253126","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ÞG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55HIiwiIiwiW1widGlueVwiLFwiYmlnZ2VzdFwiXVxuW1wib25lXCIsXCJ0d29cIl1cbltcInR3b1wiLFwib25lXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253129","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>N&quot;i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJOXCJpIiwiIiwiMlxuMVxuWzEsMiwzLDQsNSw2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253131","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>34</s> 33 bytes</h1>
<pre><code>`&quot;λŀ λƈ `*‛⇧Ṫ⇧+` λ¬ I'm λ₅&quot;`?*+ḢṪ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYFwizrvFgCDOu8aIIGAq4oCb4oen4bmq4oenK2AgzrvCrCBJJ20gzrvigoVcImA/KivhuKLhuaoiLCIiLCIxXG4yXG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thx to @steffan</p>
"
"253133","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>vṄΠ'fs12ɾ⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24bmEzqAnZnM0yb7igbwiLCIiLCJbMiwgMywgNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> Outputs an empty list for falsy, a non-empty list for truthy. Link is for a much smaller version as this is <span class=""math-container"">\$O\left(\prod_{i=0}{n_i}^2\right)\$</span>, that is, takes time proportional to the square of the product of the inputs. -1 by stealing some ideas from <a href=""https://codegolf.stackexchange.com/a/253383/100664"">Kevin Cruijssen's 05AB1E answer</a>.</p>
<pre><code>vṄ         # Take the integer partitions of each number
  Π        # Take the cartesian product of this
   '       # Filter all possible partitions by...
    fs     # Flattened and sorted
         ⁼ # Is the result equal to...
      12ɾ  # range(1, 12)?
</code></pre>
"
"253140","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>¦∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqbiiJEiLCIiLCIxMDAwMDBcbjY1NDMyMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>¦∑
¦  # cumulative sum
 ∑ # sum
</code></pre>
"
"253154","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>kP'Cb∑?=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwia1AnQ2LiiJE/PSIsIiIsIjFcbjJcbjNcbjRcbjVcbjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>kP'Cb∑?=
kP       # printable ACSI characters with no spaces in between them
  '      # lambda filter
   C     # char
    b    # binary
     ∑   # summate
      ?  # input
       = # equal?
</code></pre>
"
"253155","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 9 bytes</h1>
<pre><code>kðt:122-r
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrw7B0OjEyMi1yIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-2 thx to @lyxal</p>
"
"253157","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 31 bytes</h1>
<pre><code>`⋏ż⋎₈Ǐḋ ∴» ⟇ǒ ¢¨ ʁż ∪Ǒƛ²`⌈~ḟ1꘍i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYOKLj8W84ouO4oKIx4/huIsg4oi0wrsg4p+Hx5IgwqLCqCDKgcW8IOKIqseRxpvCsmDijIh+4bifMeqYjWkiLCIiLCJcIndhclwiXG5cInBlYWNlXCJcblwiZnJlZWRvbVwiXG5cInNsYXZlcnlcIlxuXCJpZ25vcmFuY2VcIlxuXCJzdHJlbmd0aFwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253158","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 73 bytes</h1>
<pre><code>`Hλ½ K≥τ⇧¨ Hλ½ K≥τ⇧¨
K≥τ⇧¨ K≥τ⇧¨ Hλ½ Hλ½
Hλ½ R□• Hλ½ R□•
R□• R□• Hλ½ Hλ½`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgSM67wr0gS+KJpc+E4oenwqggSM67wr0gS+KJpc+E4oenwqhcbkviiaXPhOKHp8KoIEviiaXPhOKHp8KoIEjOu8K9IEjOu8K9XG5IzrvCvSBS4pah4oCiIEjOu8K9IFLilqHigKJcblLilqHigKIgUuKWoeKAoiBIzrvCvSBIzrvCvWAiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253179","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>‛ėġ⇧$F
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJvEl8Sh4oenJEYiLCIiLCJBQiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>     F # Remove from...
‛ėġ⇧   # &quot;ABC&quot;
    $  # The input
</code></pre>
"
"253180","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>≬ĠvṪfİL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazEoHbhuapmxLBMIiwiIiwiWzAsIDAsIDAsIDEsIDEsIDAsIDMsIDMsIDMsIDIsIDJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>     İL # Count number of times until the result repeats
≬----   # By applying the following
 Ġ      # Group consecutive elements
  vṪ    # Remove the last item from each group
    f   # Flatten
</code></pre>
"
"253189","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>żvẇ∞⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLFvHbhuofiiJ7igYsiLCIiLCJhYmNkZWYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  ẇ   # Cut into slices of length...
 v    # Each of...
ż     # Range from 1 to length of input
   ∞  # Mirror
    ⁋ # Join by newlines, joining each line with spaces
</code></pre>
"
"253192","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> <s>6</s> 4 bytes</h1>
<pre><code>ƛẋ;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwixpvhuos7ZiIsIiIsIjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>ƛẋ;f
ƛ    # mapping lambda
 ẋ   # Repeat
  ;  # end lambda
   f # flatten
</code></pre>
"
"253193","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>‹rI÷ṘY
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oC5cknDt+G5mFkiLCIiLCItNTAsNTAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>‹rI÷ṘY
‹      # decrement
 r     # range
  I÷   # split into two halves
    Ṙ  # reverse
     Y # interleave
</code></pre>
"
"253194","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>≠
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4omgIiwiIiwiMSwxLDFcbjIsMywxXG4zLDMsMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Easy peasy</p>
"
"253198","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 7 bytes</h1>
<pre><code>1u0W2↔Ṫ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxdTBXMuKGlOG5qiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>1u0W2↔Ṫ
1u0W    # list of [1,-1,0]
    2↔  # combinations of length 2
      Ṫ # remove tail which is [0,0] which is not needed in the challenge
</code></pre>
"
"253201","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>&quot;⌊≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcIuKMiuKJiCIsIiIsIlwiMDAwMVwiXG5cIjEgICBcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>&quot;⌊≈
&quot;   # pair both inputs into list
 ⌊  # floor
  ≈ # all items equal?
</code></pre>
"
"253240","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>ÞȮ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw57IriIsIiIsIlwiQUJDREVGXCJcblwiWllYXCJcblwibm9cIlxuXCJ0cmVlXCJcblwicVwiXG5cIkFCQ0RDXCJcblwieWVzXCJcblwiZGVlZFwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simple means <code>is ordered?</code></p>
"
"253244","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>0P
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwUCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>What it says on the box. Stri<code>P</code>s <code>0</code>s.</p>
"
"253252","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>⟨`⟩τ •› °ʀ`||` - λƛ ∵∷⟑⌈th ₁ḋ`⟩:£ṅ\+c[¥h|¥ṅ]
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLin6hg4p+pz4Qg4oCi4oC6IMKwyoBgfHxgIC0gzrvGmyDiiLXiiLfin5HijIh0aCDigoHhuItg4p+pOsKj4bmFXFwrY1vCpWh8wqXhuYVdIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>When removing the 19th byte it gives:</p>
<pre><code>⟨`⟩τ •› °ʀ`||` - λ ∵∷⟑⌈th ₁ḋ`⟩:£ṅ\+c[¥h|¥ṅ]
</code></pre>
"
"253253","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>vO2J≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidk8ySuKJiCIsIiIsIls3LDEzLDksMiwxMCwyLDQsMTAsNywxMyw0LDldXG5bMSwyLDMsMSwyLDNdXG5bMTAsMTAwLDEwMDAsMSwxMDAsMTAsMTAwMCwxXVxuWzEyMywxMjNdXG5bOCwyMiw1NzE4OSw0OTIsMjIsNTcxODgsOCw0OTIsNTcxODgsNTcxODksMSwxXVxuWzYsNCw0LDYsNCw3LDQsN11cblsyLDIsMiwyLDIsMl1cbls1LDEsNCw1LDEsMSw0XVxuWzc3LDMxLDUsMzEsODAsNzcsNSw4LDhdXG5bMSwyLDMsMiwxXVxuWzQ0LDQsNF1cbls1MDAsMzAsMV1cblsxLDIsMSwxXVxuWzIsNCw2LDQsNCw0XVxuWzIsMjMsMzQsNF1cblsyLDIzLDMsMywzNCw0XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Makes a list of how many times the integer exists in the list, adds <code>2</code> to the list and checks if everything is equal. A sneaky way to check if all the items are equal, <strong>and</strong> that they are all 2.</p>
"
"253255","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 5 bytes</h1>
<pre><code>S32↳›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiUzMy4oaz4oC6IiwiIiwiMFxuMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253262","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>‹¡›$%¬
</code></pre>
<p>No shady built-ins, just pure, beautiful maths.<br />
Basically <a href=""https://en.wikipedia.org/wiki/Wilson%27s_theorem"" rel=""nofollow noreferrer"">Wilson's theorem</a></p>
<p><span class=""math-container"">\$\large{(n-1)!+1 } \equiv 0 \left(\mod n\right)\$</span></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLnCoeKAuiQlwqwiLCIiLCIxMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>Explanation</strong>:</p>
<pre><code>‹¡›$%¬ 
‹¡       push n-1 factorial
  ›      push n+1
   $%    modulo top two items swapped
     ¬   apply logical not
</code></pre>
"
"253268","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<p><sup>Thanks to <a href=""https://codegolf.stackexchange.com/users/92689/steffan"">Steffan</a> for removing the flag!</sup></p>
<pre><code>9ε:ẏǎ*∑›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiOc61OuG6j8eOKuKIkeKAuiIsIiIsIlsyLDEsM11cbls4LDksNSw2LDFdXG5bOSw5LDksOSw5LDldXG5bNSwzLDIsNiwwLDgsMyw1LDJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>Explanation:</strong></p>
<pre><code>9ε:ẏǎ*∑› # whole program

9ε       # absolute of n-9 (vectorized)
  :ẏ     # push range of the list length
    ǎ    #  and convert into primes
     *   # multiplication (vectorized)
      ∑  # sum the result
       › # and increment it
</code></pre>
"
"253311","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>Þ∞:ɾ•y_ƛy$;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyI1IiwiIiwiw57iiJ46yb7igKJ5X8abeSQ7ZiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the sequence forever.</p>
<h2>Explained</h2>
<pre><code>Þ∞:ɾ•y_ƛy$;f
Þ∞:          # Push two copies of an infinite list of positive integers
   ɾ         # In the second copy of the infinite list, push range [1, n] for each item
    •        # And mold the first copy of the infinite list to the shape of the second
     y_      # uninterleave the infinite list, giving two lists: the list of every second row starting at row 0, and the list of every second row starting at row 1. Discard the list starting at row 1.
       ƛy$;f # To each row in the remaining list, uninterleave the row, and return the list of every second item starting at index 0. Then flatten the result.
</code></pre>
"
"253313","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Þ∞:ẇ2Ḟ2vḞf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInjrhuocy4bieMnbhuJ5mIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Outputs (theoretically) infinitely but crashes due to hitting the recursion limit caused by a bug.</p>
<pre><code>Þ∞         # All positive integers
   ẇ       # Cut into slices of lengths...
Þ∞:        # Positive integers
    2Ḟ     # Get every second item
      2vḞ  # Get every second item of each
         f # Flatten the final array
</code></pre>
"
"253316","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>16</s> 15 bytes</h1>
<pre><code>₌ɾ²›↔'2l?:Ẋ⊍¬;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwi4oKMyb7CsuKAuuKGlCcybD864bqK4oqNwqw7aCIsIiIsIjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So remember the last time I solved an array challenge with a brute force algorithm and it timed out for anything larger that a 2x2 matrix? Well I've made an improvement! This algorithm times out for anything larger than <code>n=3</code>.</p>
<h2>Explained</h2>
<pre><code>₌ɾ²›↔'2l?:Ẋ⊍¬;h
₌ɾ²›↔            # From the range [1, input], choose all combinations with repetition of length (input**2) + 1
     '       ;h  # And get the first combination where:
      2l         #   A list of all windows of length 2
        ?:Ẋ⊍¬    #   set xor'd with the cartesian product of the range [1, input] with itself is empty
</code></pre>
"
"253325","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>vtCƒ-19+ǒ‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidnRDxpItMTkrx5LigLkiLCIiLCJbXCJSb2NrXCIsIFwiUm9ja1wiXVxuW1wiUm9ja1wiLCBcIlNjaXNzb3JzXCJdXG5bXCJTY2lzc29yc1wiLCBcIlBhcGVyXCJdXG5bXCJQYXBlclwiLCBcIlNjaXNzb3JzXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>vtCƒ-19+ǒ‹
v          # vectorise
 t         # tail
  C        # char
   ƒ-      # reduce by substraction
     19+   # +19
        ǒ  # modulus 3
         ‹ # decrement
</code></pre>
"
"253327","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>$(w
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiJCh3IiwiIiwiXCJzdGFja292ZXJmbG93XCIsIDJcblwic3RhY2tvdmVyZmxvd1wiLCA1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253333","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ɾɾRṅṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb7JvlLhuYXhuYUiLCIiLCIxXG4yXG4zXG40XG41XG42Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Tied with first :(</p>
<h3>Explained</h3>
<pre><code>ɾɾRṅṅ
ɾɾ    # range of range of [1...input]
  R   # reduce (reverse each of list)
   ṅṅ # join by nothing twice
</code></pre>
"
"253336","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>$o(…:⁰v≠TḢh⋎
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIkbyjigKY64oGwduKJoFThuKJo4ouOIiwiIiwiY29kZWdvbGYuc3RhY2tleGNoYW5nZS5jb21cbmUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h3>Explained</h3>
<pre><code>$o(…:⁰v≠TḢh⋎
$            # swap top 2 items
 o           # remove
  (          # loop
   …         # print without popping
    :        # duplicate
     ⁰       # last input
      v      # vectorise
       ≠     # not equal
        T    # truthy indices
         Ḣ   # remove head [0]
          h  # head
           ⋎ # bitwise or
</code></pre>
"
"253338","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>$O
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIkTyIsIiIsIlwidHR0Z2dsb3lvaVwiXG5cInRcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253339","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>`e`c[1|u
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYGVgY1sxfHUiLCIiLCJcImhlYWRzXCJcblwidGFpbHNcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>u is <code>-1</code>.</p>
"
"253341","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>Ċ⟑`%: %`$%,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEiuKfkWAlOiAlYCQlLCIsIiIsIlwiVGhlIGRlZmluaXRpb24gb2YgaW5zYW5pdHkgaXMgcXVvdGluZyB0aGUgc2FtZSBwaHJhc2UgYWdhaW4gYW5kIGFnYWluIGFuZCBub3QgZXhwZWN0IGRlc3BhaXIuXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253344","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>∷Ċvt≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oi3xIp2dOKJiCIsIiIsIls1LCAxLCAwLCAyXVxuWzUsIDEsIDAsIDIsIDExXVxuWzExLCAxLCAzLCAyXVxuW10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253348","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>UÞ⊍U
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiVcOe4oqNVSIsIiIsIlstMzQsIDAsIDEsIC0zNCwgNCwgOCwgNF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Multiset Symmetric difference is very powerful</p>
"
"253374","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>⌈₅(ʁ):ẏ¨£i∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIjigoUoyoEpOuG6j8KowqNp4oiRIiwiIiwiVGhpcyBpcyBhIGZ1biB0YXNrISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>⌈           # Input split on spaces
 ₅( )       # repeat len(that) times...
   ʁ        # Palindromise each word
       ¨£   # Zipping...
     :      # Words
      ẏ     # range(0, len(words))
         i  # Index the numbers into the words
          ∑ # Stringify
</code></pre>
"
"253375","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>CÞǔ0€∩L
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDw57HlDDigqziiKlMIiwiIiwiYW50aWRpc2VzdGFibGlzaG1lbnRhcmlhbmlzbSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
"
"253389","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>2-1
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyLTEiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Running it forward gives <code>1</code>, running it backwards gives <code>2</code>.</p>
<p>This because vyxal's syntax is weird:</p>
<pre><code>ab- (vyxal) = a-b (py)
</code></pre>
"
"253394","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ɾ∑²⁰ɾ²∑-
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiyb7iiJHCsuKBsMm+wrLiiJEtIiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>literal solution, squares the sum and subtracts the sum of the squares.</p>
"
"253420","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>d:√ṙ‹²+‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIyNcabIiwiZDriiJrhuZnigLnCsivigLkiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of 05AB1E, which is a port of Rust, so make sure to upvote those answers!</p>
"
"253426","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>3ȯ`HiΠ, I'm ₴ŀ!
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzyK9gSGnOoCwgSSdtIOKCtMWAISIsIiIsIkknbSBmYXQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253427","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Þ::ʀ+3ḊfT›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnjo6yoArM+G4imZU4oC6IiwiMTAw4bqOIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the infinite sequence.</p>
<p>-6 bytes (compared to my previous answer below) thanks to porting @Jonathan Allan's Jelly answer, so make sure to upvote that!</p>
<pre><code>Þ::ʀ+3ḊfT›
Þ:         # Push an infinite list of non-negative integers
  :        # Duplicate
   ʀ+      # For each n in this list, add n to each item in a range [0..n]. This produces an infinite list like [[0], [1, 2], [2, 3, 4], [3, 4, 5, 6], ...]
     3Ḋ    # For each inner item, is it divisible by three?
       f   # Flatten
        T  # Get truthy (0-based) indices
         › # Increment
</code></pre>
<p>Previously:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h2>
<pre><code>Þ∞ƛʀ+'ǒ1=;nɽ∑+;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInsabyoArJ8eSMT07bsm94oiRKztmIiwiMTAw4bqOIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the infinite sequence.</p>
<pre><code>Þ∞ƛʀ+'ǒ1=;nɽ∑+;f
Þ∞ƛ               # Map n over positive integers:
   ʀ+             #  For each in [0..n], add n
     '            #  Filter for:
      ǒ           #   Modulo 3
       1=         #   Equals one?
         ;        #  Close filter
          nɽ∑+    #  For each, add the sum of [0..n-1]
              ;   # Close map
               f  # Flatten
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>24*›√6%₅$T+›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIzMMqAxpsiLCIyNCrigLriiJo2JeKChSRUK+KAuiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the <span class=""math-container"">\$n\$</span>th  element of the sequence. Port of @dingledooper's answer, so uvpote that!</p>
<pre><code>24*›√6%₅$T+›
24*          # Multiply the input by 24
   ›         # Increment
    √        # Square root
     6%      # Modulo 6
       ₅     # Is it divisible by 5? (Returns 1 or 0)
        $T+  # Add input * 3
           › # Increment
</code></pre>
"
"253430","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>k1k2r'∑9=n0c∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwiazFrMnIn4oiROT1uMGPiiKciLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Extremely slow.</p>
"
"253431","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>$•⌊
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiJOKAouKMiiIsIiIsIjQsIDVcbjMzLCA1XG4xMDAwLCAxMFxuNDAwLCAyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>$•⌊
$   # swap input
 •  # log
  ⌊ # floor
</code></pre>
"
"253432","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>¯ꜝL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwq/qnJ1MIiwiIiwiWzBdXG5bMCwgMF1cblswLCAxXVxuWzEsIDIsIDMsIDE3XVxuWzEsIDEsIDEsIDIsIDIsIDNdXG5bLTMsIDMsIDMsIC0zLCAwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¯ꜝL
¯   # delta (consecutive diff)
 ꜝ  # non-zero
  L # length
</code></pre>
"
"253445","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes, Score = 0</h1>
<p>Program 1 (14 bytes):</p>
<pre><code>wJƛfÞS;Π'÷⁼;żt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwid0rGm2bDnlM7zqAnw7figbw7xbx0IiwiIiwiXCJhXCIsXCJiXCJcblwidGVzdFwiLFwiZW50ZXJcIlxuXCJoZWxsb1wiLFwiaGVsbG9cIlxuXCJ5ZXNcIixcInlleWV5ZWFoXCJcblwid0rGm2bDnlM7zqAnw7figbw7xbx0XCIsXCLHjiTHjuG6in7iiYhMXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Program 2 (7 bytes):</p>
<pre><code>ǎ$ǎẊ~≈L
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwix44kx47huop+4omITCIsIiIsIlwiYVwiLFwiYlwiXG5cInRlc3RcIixcImVudGVyXCJcblwiaGVsbG9cIixcImhlbGxvXCJcblwieWVzXCIsXCJ5ZXlleWVhaFwiXG5cIndKxptmw55TO86gJ8O34oG8O8W8dFwiLFwix44kx47huop+4omITFwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm very good at golfing language design as you can tell by the fact that there's multiple built-ins to do the same thing.</p>
<p>Both programs take 2 strings.</p>
<h2>Explained</h2>
<pre><code>wJƛfÞS;Π'÷⁼;żt
wJ             # Put the two inputs into a list
  ƛfÞS;        # Get the sublists of each - returns a list of lists
       Π       # Cartesian product of the two lists
        '÷⁼;   # Keep only those where all the items are equal
            żt # Length of list
</code></pre>
<pre><code>ǎ$ǎẊ~≈L
ǎ       # Get the substrings of the first input
 $ǎ     # and of the second input - leaves two strings on the stack
   Ẋ    # Cartesian product of the two lists
    ~≈  # Keep only those where all the items are equal
      L # Length of list
</code></pre>
"
"253473","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>żvǓ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwixbx2x5MiLCIiLCJKb2huIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253476","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>0ṡṅL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiMOG5oeG5hUwiLCIiLCI4XG4xMDFcbjEwMlxuLTEwIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>0ṡ    # Range from 0 to n
  ṅ   # Join by nothing
   L  # Get the length of that
</code></pre>
"
"253490","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ÞRs¯0p
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiw55Sc8KvMHAiLCIiLCJbMiwxLC0yLC0xXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253496","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>W?(p:ḣḟ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiVz8ocDrhuKPhuJ/igLoiLCIiLCIxXG44XG4xOVxuMjdcbjUyXG42NCJd"" rel=""nofollow noreferrer"">Try it Online!</a> 1-indexed.</p>
<p><strong>Explanation:</strong></p>
<p>Since <span class=""math-container"">\$a(n) &lt; n\$</span>, we can push <span class=""math-container"">\$n\$</span> to the beginning of the list. Also builds the sequence backwards.</p>
<pre><code>W?(p:ḣḟ› # whole program

W        # []
 ?       #            input
  (      # repeat for       times:
   p     #  prepend to list (uses implicit input the first time)
    :    #  duplicate
     ḣ   #  split head from the rest
      ḟ  #  find its index on the list (-1 if none)
       › #  increment
         # as we didn't prepend the last item, output it 
</code></pre>
"
"253501","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>UÞ⊍UL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiVcOe4oqNVUwiLCIiLCJbMjM0LCAyLCAxMiwgMjM0LCA1LCAxMCwgMTAwMCwgMiwgOTksIDIzNF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Typical symmetric difference with the unique values in the list, take the length of the unique values in that list.</p>
"
"253503","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ʀA[⁰øA∑|u
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiyoBBW+KBsMO4QeKIkXx1IiwiIiwiaGl1NyJd"" rel=""nofollow noreferrer"">Try it Online!</a>
Ties with jelly but pushes -1 if there is an error.</p>
<pre><code>ʀA             # check if every character is in the alphabet
  [⁰øA∑        # if true, sum the character values of the input string
        |u     # else, return -1
</code></pre>
"
"253516","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>4(∩ṘǏǔ)3vl3lƛ∩ṠCvṁṙC
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI0KOKIqeG5mMePx5QpM3ZsM2zGm+KIqeG5oEN24bmB4bmZQyIsIiIsIltcIicnJyNcIiwgXCInJyMnXCIsIFwiJyMnJ1wiLCBcIiMnJydcIl1cbiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>A mess. Input as a list of rows, output as a char matrix.</p>
<pre><code>4(    )              # Four times...
  ∩Ṙ                 # Rotate 90°
    Ǐǔ               # Prepend the first item
       3vl           # Cut each into chunks of length 3
          3l         # Cut into chunks of length 3
            ƛ        # Over each list of lists of chunks...
             ∩       # Transpose into a list of 3x3 chunks
              Ṡ      # Stringify each chunk
               C     # Take the charcodes
                vṁṙ  # Take the mean of each and round back to integers
                   C # Convert back to characters
</code></pre>
"
"253517","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>krv↔⁽LġṠÞṡ)Ẋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJhaiIsIiIsImtyduKGlOKBvUzEoeG5oMOe4bmhKeG6iiIsIiIsIkFcbnNtYWxsITBcbm9uZVxudGhhdCxcbmNvbnRhaW5zXG5lcXVhbFxubGVuZ3RoXG5zdHJpbmdzXG5mb3JcbnRoZVxuc3BlY2lhbFxucnVsZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I/O as lists of lines</p>
<pre><code>          )Ẋ # Repeat until no change...
  v          # To each...
   ↔         # Keep only characters from...
kr           # Alphanumeric chars
      ġ      # Group by...
    ⁽L       # Length
       Ṡ     # Concatenate each
        Þṡ   # Sort by length
</code></pre>
"
"253537","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>'ǐ₂;L~ε&quot;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiJ8eQ4oKCO0x+zrVcIiIsIiIsIjFcbjJcbjNcbjRcbjVcbjZcbjdcbjhcbjlcbjEwXG4xMVxuMTJcbjEzXG4xNFxuMTVcbjE2XG4xN1xuMThcbjE5XG4yMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A flagless 8 byter that uses a method that is a little different to the other answer.</p>
<p>7 bytes using this approach with a flag:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>o</code>, 7 bytes</h2>
<pre><code>'ǐ₂;L…ε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBbyIsIiIsIifHkOKCgjtM4oCmzrUiLCIiLCIxXG4yXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMTFcbjEyXG4xM1xuMTRcbjE1XG4xNlxuMTdcbjE4XG4xOVxuMjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253573","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>øA‹∑₄%›øA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuEHigLniiJHigoQl4oC6w7hBIiwiIiwic3RhY2tleGNoYW5nZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>øA‹∑₄%›øA
øA          Letter to number (1-indexed)
  ‹         Decrement each value in list
   ∑        Sum it up
    ₄%›     Modulo by 26 and increment
       øA   Number to letter
</code></pre>
"
"253687","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>ʀEĖeæa)ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyoBFxJZlw6ZhKcivIiwiIiwiMVxuMlxuM1xuNFxuNVxuNlxuN1xuOFxuOVxuMTBcbjIwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Times out for numbers larger than 20. 1-indexed.</p>
<p><em>-1 thanks to @Shaggy</em></p>
<h2>Explained</h2>
<pre><code>ʀEĖeæa)ȯ  # takes a single integer n
      )ȯ  # first n numbers where:
ʀ         #   the range [0, that number]
 EĖe      #   to the power of 1/(2 to the power of each number in that range) 
    æa    #   contains a prime number
</code></pre>
"
"253717","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>›&quot;ƛȧ‹*[½₍⌊⌈Uvx∑;÷ȧ&quot;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oC6XCLGm8in4oC5KlvCveKCjeKMiuKMiFV2eOKIkTvDt8inXCIiLCIiLCItNFxuLTNcbi0yXG4tMVxuMFxuMVxuMlxuM1xuNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A mess. Uses the Stern-Brocot sequence and works in theory...</p>
<p>Given an integer, outputs a pair of integers.</p>
<pre><code>›&quot;                  # [n, n+1]
  ƛ            ;    # Map to...
      [             # If ....
   ȧ‹               # |a| - 1
     *              # * a
       ½            # Then take a/2
        ₍⌊⌈         # [floor(a/2), ceil(a/2)
           U        # Uniquify (if even, just n/2)
            vx      # Recurse on each
              ∑     # Sum
                ÷ȧ&quot; # Take the absolute value of the second.
</code></pre>
"
"253719","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>⌊d-‹Ė)1Ḟ:NY‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIpkLeKAucSWKTHhuJ46TlnigLkiLCIiLCIiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>A completely different tactic, using an alternating form of the <a href=""https://en.wikipedia.org/wiki/Calkin%E2%80%93Wilf_tree#Breadth_first_traversal"" rel=""noreferrer"">Calkin-Wilf</a> sequence inspired by <a href=""https://codegolf.stackexchange.com/a/253718/100664"">Jordan's answer</a>. Append an <code>i</code> if outputting an infinite sequence is not allowed.</p>
<pre><code>       Ḟ    # Generate a sequence...
      1     # Starting with 1
-----)      # Each value is the previous value n, put into the following...
⌊           # floor(n)
 d          # 2 * floor(n)
  -         # n - 2 * floor(n)
   ‹        # n - 2 * floor(n) - 1
    Ė       # 1 / (n - 2 * floor(n) - 1)
         Y  # Interleave with
       :N   # The sequence negated
          ‹ # Decrement every term to add a 0
</code></pre>
"
"253730","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>fG›β)Ẋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZkfigLrOsinhuooiLCIiLCI1XG4xN1xuOTk5XG44NzY1NDMyMVxuNDEyNTMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Will be 5 bytes once a <a href=""https://github.com/Vyxal/Vyxal/pull/1480"" rel=""nofollow noreferrer"">bug fix</a> is made.</p>
<h2>Explained</h2>
<pre><code>fG›β)Ẋ
    )Ẋ # Until the result of applying the following does not change:
fG     #   Get the biggest digit of the current value - should just be G, but bugs
  ›β   #   and convert the current value from base (the biggest digit + 1) to base 10
</code></pre>
"
"253738","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>Ṅ'L5≤næA∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYQnTDXiiaRuw6ZB4oinIiwiIiwiMjciXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs all possible sums.</p>
<h2>Explained</h2>
<pre><code>Ṅ'L5≤næA∧   # Takes a single integer n and returns a list of lists
Ṅ           # Push all the integer partitions (ways to sum to) of n
 '          # and keep only those where:
  L5≤       #   the length of the partition is less than or equal to 5 (can also be 6&lt;)
        ∧   #   and
     næA    #   all integers in the partition are prime
</code></pre>
"
"253794","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɾ:∑p²ƒ-
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyb464oiRcMKyxpItIiwiIiwiMVxuMlxuM1xuMTBcbjI0XG4xMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of Fig which is a port of 05ab1e</p>
<h2>Explained</h2>
<pre><code>ɾ:∑p²ƒ-
ɾ:∑p     # prepend the sum of the range [1, n] to the range [1, n]
   ²ƒ-  # square everything and reduce by subtraction
</code></pre>
"
"253810","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⁽Tẇ∑N₀%J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb1U4bqH4oiRTuKCgCVKIiwiIiwiOTc4MDMwNjQwNjE1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly</p>
<h2>Explained</h2>
<pre><code>⁽Tẇ∑N₀%J
⁽Tẇ       # Triple every second digit
   ∑N     # -sum of that
     ₀%   # modulo by 10
       J  # append that result to the original input
</code></pre>
"
"253872","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>14</s> 13 bytes</h1>
<pre><code>ÞKvḟǓṘ†Tt~ȯẋJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55LduG4n8eT4bmY4oCgVHR+yK/huotKIiwiIiwib25pb25cbmphY2toYW1tZXJcbmFicmFjYWRhYnJhXG5cbnp2aW96XG5hbGZhbGZhXG5hYWFhIl0="" rel=""nofollow noreferrer"">Try it Online! (test suite)</a></p>
<p><strong>Explanation:</strong></p>
<pre><code>ÞKvḟǓṘ†Tt~ȯẋJ # whole program

ÞK            # get all suffixes of implicit input
  vḟ          # then find each first occurrence in the input 
    Ǔ         # rotate the list to the left
     Ṙ        # then reverse
      †       # logical NOT each item
       T      # get indices of elements which are truthy
        t     # get tail
          ȯ   # slice the input from it until the end 
         ~    #  just push it, do not pop the used items yet
           ẋ  # repeat the sliced input tail amount of times
            J # then join with the input
</code></pre>
"
"253895","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oCgIiwiIiwiW1wiYVwiXVxuW1wiYVwiXCJhXCJdXG5bXCJcIlwiXCJdXG5bXCJhXVxuW1wiXCJcIlwiXCJhYWFcIlwiXCJcIlwiXCJcIlwiXCJdXG5bYV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Python <code>eval</code> and inputs as a list. Returns a a list <code>[0]</code> if true and an empty list <code>[]</code> if false.</p>
"
"253897","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>¯vṅA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwq924bmFQSIsIiIsIlsxLDIsMyw0LDUsNiw3LDgsOSw4XVxuWzEwLDIwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>¯vṅA
¯    # delta (consecutive diff)
 vṅ  # abs(a) ≤ 1
   A # all truthy?
</code></pre>
<p>-1 thx to @Sʨɠɠan</p>
"
"253926","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>₌∑²∑=)ȯt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoziiJHCsuKIkT0pyK90IiwiIiwiOCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Alternate 8 byter that uses a more obvious approach, 1-indexed.</p>
<h2>Explained</h2>
<pre><code>₌∑²∑=)ȯt
     )ȯ  # first n numbers where:
₌∑       #  the sum of the number
₌ ²∑     #  and the sum of the square of the number
    =    #  are equal
       t # last item
</code></pre>
"
"253971","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>₀ẇ⟑ẏ℅kP¤&quot;℅℅Ȧ₴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoDhuofin5Hhuo/ihIVrUMKkXCLihIXihIXIpuKCtCIsIiIsIlwiR28gaG9tZSBjYXQhIFlvdSdyZSBkcnVuayFcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>₀ẇ            # Chunks of length 10...
  ⟑           # Over each...
           Ȧ  # Replace at ...
   ẏ℅         # random index in the input
          ℅   # A random item of...
         ℅    # A random item of...
     kP       # Printable ascii
       ¤&quot;     # Or the empty string
            ₴ #
</code></pre>
"
"253973","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>(Ǔ…
</code></pre>
<h3>Explanation:</h3>
<pre><code>(   # For each char in the input
 Ǔ  # Rotate left
  … # Print without popping
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIox5PigKYiLCIiLCJqb2huIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"253974","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ẏvǔg=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo92x5RnPSIsIiIsIlwiMDAxMDExXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> vǔ   # Rotate by each of...
ẏ     # 0 to len(x)
   g  # Does the (lexicographic) minimum
    = # Equal the input?
</code></pre>
"
"253986","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>⇩⌈krF3lĊ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6nijIhrckYzbMSKIiwiIiwiXCI5OSBib3R0bGVzIG9mIGJlZXJcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs a list of <code>⟨ triplet | count ⟩</code></p>
<h2>Explained</h2>
<pre><code>⇩⌈krF3lĊ
⇩⌈         # Split the lowercase input on spaces
  krF      # remove all non-alphabet/non-number characters and keep only strings with alphabet letters
     3l    # group into windows of 3
        Ċ  # get the count of each triplet.
</code></pre>
"
"253987","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>₌LżḭvẇUṪ\|vj⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoxMxbzhuK124bqHVeG5qlxcfHZq4oGLIiwiIiwiMDEyMzQ1Njc4OTBhYmNkZWYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>12 with <code>j</code> flag</p>
<h2>Explained</h2>
<pre><code>₌LżḭvẇUṪ\|vj⁋
₌Lż            # Push len(input) and [1..len(input)]
   ḭ           # Floor divide the length by each number in the range
    vẇ         # And wrap the input into chunks of each length
      UṪ       # Uniquify the list and remove the last item (which will be the input split into chunks of length 1)
        \|vj   # Join each list on &quot;|&quot;
            ⁋  # And join that on newlines
</code></pre>
"
"253992","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>Þ∞$e$(¯
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLigKYiLCIiLCLDnuKIniRlJCjCryIsIiIsIjRcbjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>&quot;Make infinite lists of numbers a digraph&quot; they said. &quot;It doesn't need to be 1 byte&quot; they said. Well look where that got us :p. Could be 6 bytes in 2.4.1 but I don't know if it actually prints.</p>
<h2>Explained</h2>
<pre><code>Þ∞$e$(¯
Þ∞$e    # [1 ** x, 2 ** x, 3 ** x, ...]
    $(  # d times:
      ¯ #   deltas
</code></pre>
"
"254047","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes [uses built-in]</h1>
<pre><code>\=/÷∆q
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiXFw9L8O34oiGcSIsIiIsIjMrND14XG4zeC00PTcrMnhcbjMtLTE9eFxuMyszKjM9eFxuNCt4PTVcbjEuMisyLjN4PTUuOFxuMTA9NHhcbjEvKHgtMyk9NVxuNSh4KzMpPTIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>As a bonus, it can even handle some of the invalid input cases.</p>
<h2>Explained</h2>
<pre><code>\=/÷∆q
\=/÷   # Split the input on &quot;=&quot; and dump to the stack
    ∆q # Pop two items a and b and solve x in a = b
</code></pre>
"
"254145","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> 7 bytes</h1>
<pre><code>f0₄V∑)↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmMOKChFbiiJEp4oaUIiwiIiwiMTIwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the whole list. I may have forgotten there's a built in for 26 lol.</p>
<h2>Explained</h2>
<pre><code>f026V∑)↔
      )↔ # Until applying the following doesn't result in a different value, collect intermittent values. 
f         #   flatten the function argument
 026V     #   and replace 0s with 26 (the 0 and 26 are pushed separately)
     ∑    #   sum the resulting list
</code></pre>
"
"254201","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>ɾ↔ƛż¨VǓ:RJg;UvĠvLO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiyb7ihpTGm8W8wqhWx5M6UkpnO1V2xKB2TE8iLCIiLCIzXG41XG40Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same as my Jelly answer, so ports 05AB1E.</p>
"
"254254","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>0ẆRṅ
</code></pre>
<p>Takes input as a string instead. If that's not allowed then the <code>Ṡ</code> flag can be added.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiMOG6hlLhuYUiLCIiLCJcIjRcIlxuXCIwMFwiXG5cIjEyM1wiXG5cIjAwMTBcIlxuXCIxMjAwMDM0NVwiXG5cIjE4MTYxNjA0XCJcblwiOTU4ODMwMDc0MTQ4MzBcIlxuXCIwMTAyMzA0NTYwNzg5MTJcIlxuXCIzNTc1MDk5MDIwMDM1NTBcIlxuXCIyNDkyODgyMzc3Njc1MDQ2XCJcblwiMDMwMjYzMDIwNTMwMDAzNTcwOTlcIiJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>0     # Push the literal digit 0
 Ẇ    # Split and keep delimiter
  R   # Reverse each one
   ṅ  # Join by nothing
</code></pre>
"
"254261","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>⁽¯İ~aL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oG9wq/EsH5hTCIsIiIsIlsxLDIsMyw0LDUsNiw3LDgsOSwxMF1cblsxLDQsOSwxNiwyNSwzNl1cblsxLDIsMV1cblsxLDEsMSwxLDEsMSwxLDEsMV1cblsxLCAzLCA5LCAyNiwgNjYsIDE1MCwgMzEzLCA2MTBdIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>⁽¯      # Single element lambda that gets the differences
  İ     # Apply that and collect results until no change
   ~    # Filter by:
    a   #   Any truthy?
     L  # Get the length of those
</code></pre>
"
"254279","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>∆Ė
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIbEliIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Built in solution.</p>
"
"254282","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ɾ8ẇvL9616εCṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvjjhuod2TDk2MTbOtUPhuYUiLCIiLCIxNyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Yet another port of Jonathan Allan's Jelly answer.</p>
"
"254292","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ɾ²$%U
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsKyJCVVIiwiIiwiMTIwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɾ     # 1...n
 ²    # Each squared
   %  # Modulo...
  $   # input
    U # Uniquify the result
</code></pre>
"
"254343","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>«⟇&gt;βX⋏⋏ƈ«=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCq+Kfhz7Osljii4/ii4/GiMKrPSIsIiIsImhpIHdoYXRzIHVwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Base 255 compressed string for the phrase <code>&quot;hi whats up&quot;</code> compared against the input.</p>
"
"254345","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>9ʀṘǔmkrf*ꜝøṗ↵§
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI5yoDhuZjHlG1rcmYq6pydw7jhuZfihrXCpyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p><strong>Explanation</strong></p>
<p>A transposition approach.</p>
<pre><code>9ʀ             # range from 0 to 9 inclusive
  Ṙ            #  reversed
   ǔ           #  rotated right (last item goes to first)
    m          #  and concatenated with its reverse
     kr        # string of digits, lowercase alphabet, and uppercase alphabet
       f       #  into a list of characters
        *      # repeat (vectorises)
         ꜝ     # remove empty strings in the list
          øṗ   # palindromise each item, center, and join by newlines
            ↵  # split on newlines
             § # vertically join
</code></pre>
"
"254352","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>⁽R‡'tċ;vh‡'tċ¬;vh≬'tċ;ƛ÷$wẋ;fW‛Ǎ⟇?tḟi$sĊ$†W⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb1S4oChJ3TEizt2aOKAoSd0xIvCrDt2aOKJrCd0xIs7xpvDtyR34bqLO2ZX4oCbx43in4c/dOG4n2kkc8SKJOKAoFfigYsiLCIiLCJcIi1EXCJcbltcImFhXCIsIFwiYWFcIiwgXCJiYlwiLCBcImJiXCIsIFwiYmJcIiwgXCJ4eFwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A fun little answer that gets to use a list of lambdas. Takes input as <code>flag</code>, <code>list of lines</code>.</p>
<h2>Explained</h2>
<pre><code>⁽R‡'tċ;vh‡'tċ¬;vh≬'tċ;ƛ÷$wẋ;fW‛Ǎ⟇?tḟi$sĊ$†W⁋
                             W               # Wrap the stack into a single list:
⁽R                                           # A function that reverses each item in a list
  ‡'tċ;vh                                    # A function that keeps only non-unique items
         ‡'tċ¬;vh                            # A function that keeps only unique items
                 ≬'tċ;ƛ÷$wẋ;f                # A function that repeats non-unique items by their count
                              ‛Ǎ⟇?tḟi        # Get the function at index &quot;cdu&quot;.find(input[-1])
                                     $sĊ$†   # Call that function on a list of the counts of each item in the input, sorted alphabetically
                                          W⁋ # Wrap into a single list (needed because of a bug) and join on newlines.
</code></pre>
"
"254386","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>‛ %İṠ⁋$%
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJsgJcSw4bmg4oGLJCUiLCIiLCJbWzAsIDAsIDEsIDAsIDBdLCBbMCwgMSwgMCwgMSwgMF0sIFsxLCAwLCAwLCAwLCAxXSwgWzAsIDEsIDAsIDEsIDBdLCBbMCwgMCwgMSwgMCwgMF1dXG5bXCJQXCIsXCJQXCIsXCJDXCIsXCJHXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>   İ     # Index into...
‛ %      # &quot; %&quot;
    Ṡ⁋   # Join each into a string, join by newlines
      $% # Replace %s with corresponding elements of the input
</code></pre>
"
"254396","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>(!ṅ‛+*‛12&quot;inC∑iĖ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIoIeG5heKAmysq4oCbMTJcImluQ+KIkWnEliIsIiIsIjo6Li4uOi46LiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Surely there's a byte save somewhere here</p>
<h2>Explained</h2>
<pre><code>(!ṅ‛+*‛12&quot;inC∑iĖ
(                # For each character n in the string:
 !ṅ              #   is the length of the stack &lt;= 1?
   ‛+*‛12&quot;i      #   indexed into the list [&quot;+*&quot;, &quot;12&quot;]
           nC∑   #   Digital sum of the character code of n
              i  #   indexed into the result of the first index
               Ė #   execute that on the stack.
</code></pre>
"
"254407","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>14</s> 13 bytes</h1>
<pre><code>ʁṖƛÞSƛṖ⁰vβ]fU
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgeG5lsabw55TxpvhuZbigbB2zrJdZlUiLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ʁṖƛÞSƛṖ⁰vβ]fU
ʁ             # Range [0, n)
 Ṗƛ       ]   # For each permutation:
   ÞSƛ        # For each sublist in the permutation:
      Ṗ         # Generate the permutations of that
        v       # For each permutation:
         β        # Treating it as a list of digits, convert to base 10 from base
       ⁰          # &lt;the input&gt;
           f  # Flatten the resulting list
            U # Remove duplicates
</code></pre>
"
"254412","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>eʁ'?τÞu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJlyoEnP8+Ew551IiwiIiwiMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code> ʁ      # Range(0, 
e       # n**n
  '     # Filtered by...
   ?τ   # Convert to base n
     Þu # All unique?
</code></pre>
"
"254420","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>Ẏ∑£ȯÞK≬∑¥≤∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo7iiJHCo8ivw55L4oms4oiRwqXiiaTiiLUiLCIiLCJbMTAsIDUsIDUsIDNdXG4yIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Fixed thanks to one of the Sʨɠɠans.</p>
<pre><code> ∑          # Sum
Ẏ           # Of first n
  £         # Stored to register
   ȯÞK      # Suffixes of rest
          ∵ # Maxmimum by...
      ≬---  # Next 3 as lambda...
       ∑    # Sum
         ≤  # Is less than (or equal to)
        ¥   # Register?
</code></pre>
"
"254423","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>fṘ⁽dẇṠ∑t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJm4bmY4oG9ZOG6h+G5oOKIkXQiLCIiLCI0OTkyNzM5ODcxNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs 0 for truthy, any positive integer for falsey.</p>
<h2>Explained</h2>
<pre><code>fṘ⁽dẇṠ∑t
fṘ       # reverse the list of digits of the input
  ⁽dẇ    # double each odd-indexed digit
     Ṡ∑t # sum each number, and take the tail of the sum
</code></pre>
"
"254425","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>¨²›5l¨VF~₃h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqjCsuKAujVswqhWRn7igoNoIiwiIiwiWzUsOSwxNywzMyw4MjldXG5bOSw1LDE3LDgyOSwzM11cblszMywxNyw1LDcsNjVdXG5bNSw5LDE3NywzMyw2NV1cbls2NSwxMjksMjU5LDUxMywxMDI1XVxuWzEyOSwyNTksNTEzLDEwMjUsNjVdXG5bNjMsMTI5LDI1Nyw1MTMsMTAyNV1cbls2NSwxMjksMjU3LDUxMyw0MDk3XVxuWzUsIDksIDIsIDE3LCAzM11cbls1MzY4NzA5MTMsIDY3MTA4ODY1LCAxMDczNzQxODI1LCAxLCAyNjg0MzU0NTddIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"254463","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>K:?e↔∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLOj9l4oaU4oiRIiwiIiwiNDY2NTZcbjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"254469","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>¡Dʀvġḭ?ɾ↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCoUTKgHbEoeG4rT/JvuKGlCIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/questions/254429/prime-pyramid/254446#254446"">Jonathan Allan's Jelly answer</a></p>
<pre><code>¡D        # n!, 3 times
   vġ     # Gcd with
  ʀ       # Range(0, n+1)
     ḭ    # Integer divide n by that
      ?ɾ↔ # Keep those from range(1, n+1)
</code></pre>
"
"254506","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, at least n=116</h1>
<pre><code>ƛkdn1-v*9ʀẊ'ƒc¬;9ʀẊƛf÷$Ṁ;U'⌊=$⌊æ∧;h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwixptrZG4xLXYqOcqA4bqKJ8aSY8KsOznKgOG6isabZsO3JOG5gDtVJ+KMij0k4oyKw6biiKc7aCIsIiIsIjIwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A simple modification of my answer to a CMC for near-rep numbers of length 8.</p>
<p>It can do up to n=116 in a minute on the online interpreter. Maybe more depending on where you run it.</p>
<p>The score here is cumulative total. If you want individual limits of <code>n</code>, it can handle at least n=200 in less than 10 seconds with a few modifications.</p>
<p>I'll explain this properly a bit later, but basically:</p>
<p><code>kd7v*9ʀẊ</code> gets the Cartesian product of each digit from 0 to 9 repeated n times and the range [0, 9].</p>
<p><code>'ƒc¬;</code> keeps items where the digit from the range isn't in the string (because this Cartesian product is [repeated digit, number to insert at every position])</p>
<p><code>9ʀẊ</code> is once again Cartesian product with range [0, 9]. It gives a list of [[repeated digit, number to insert], location to insert]</p>
<p><code>ƛf÷$Ṁ;</code> flattens each list, swaps the order of the number to insert and the position and performs the insertion</p>
<p>Finally, <code>'⌊=$⌊æ∧;</code> uniquifies the result and keeps only those invariant under conversion to int and which are also prime.</p>
"
"254510","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>□Ṙ∩∩Ṙ⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLilqHhuZjiiKniiKnhuZjigYsiLCIiLCJQcm9ncmFtbWluZ1xuUHV6emxlc1xuJlxuQ29kZVxuR29sZiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses the same idea as Pyth answer</p>
<h1>Explanation:</h1>
<pre><code>□      Input as a list separated by newlines
 Ṙ     Reverse
  ∩    Transpose rows and columns
   ∩   Same as above
    Ṙ  Reverse
     ⁋ Join by newlines
Implicit output the result
</code></pre>
"
"254527","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>ẏṘ↵*ꜝ\+j
</code></pre>
<p>Takes input as a list of digits.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo/huZjihrUq6pydXFwraiIsIiIsIlsxLCAwLCAxXSJd"" rel=""nofollow noreferrer"">Try it online</a>, or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bqP4bmY4oa1KuqcnVxcK2oiLCIiLCJbMSwgMl1cbls5XVxuWzEsIDIsIDNdXG5bMSwgMF1cblsxLCAwLCAxXSJd"" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p>Explanation:</p>
<pre><code>   *       # Multiply each digit in the input by the corresponding value in:
ẏ          # the range from 0 to the length of the input
 Ṙ         # reversed
  ↵        # with each value mapped to 10^n.
    ꜝ      # Remove falsey values.
     j     # Join on
       \+  # &quot;+&quot;
</code></pre>
"
"254528","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>sµ?Cg∷=;t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwic8K1P0Nn4oi3PTt0IiwiIiwiQSsxXG5CK0JcblIrMFxuMSsxXG4wKzBcblwiMC4wXCJcblEuUVxuMC5BXG4xLkNcblwiMS4xXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan  Allan's Jelly answer, so upvote that!</p>
<pre><code>sµ?Cg∷=;t
s         # Sort
 µ     ;  # Sort by:
  ?Cg     #  Minimum charcode of input
     ∷    #  Modulo two
      =   #  Equals the current item
        t # Last item
</code></pre>
"
"254531","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>⁽y↔≬y*≈MA=h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb154oaU4omseSriiYhNQT1oIiwiIiwiWzEsIC0xLCAtMSwgMSwgLTEsIDEsIDEsIC0xLCAxLCAtMSwgLTEsIDEsIC0xLCAxLCAxLCAtMV0iXQ=="" rel=""nofollow noreferrer"">Try it online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oG9eeKGlOKJrHkq4omITUE9aCIsIiIsIltdXG5bMV1cblstMV1cblsxLCAxXVxuWzEsIC0xXVxuWy0xLCAxXVxuWy0xLCAtMV1cblsxLCAxLCAxLCAxXVxuWzEsIDEsIDEsIDEsIDFdXG5bMSwgLTEsIC0xLCAxLCAtMSwgMSwgMSwgLTFdXG5bMSwgMSwgMSwgMSwgLTEsIC0xLCAtMSwgLTEsIDEsIDEsIDEsIDFdXG5bMSwgMSwgMSwgMSwgLTEsIC0xLCAtMSwgLTEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdXG5bMSwgMSwgMSwgMSwgLTEsIC0xLCAtMSwgLTEsIDEsIDEsIDEsIDEsIC0xLCAtMSwgLTEsIC0xXSJd"" rel=""nofollow noreferrer"">Test suite.</a> Returns 1 for truthy and 0 for falsy.</p>
<h2>Explanation</h2>
<p>Essentially compares the odd indices to even indices, then applying it again with even indices, until arriving with an empty list.</p>
<pre><code>⁽y          # a lambda that returns the even indices only
  ↔         # apply to the input until empty, returning a new list containing
            #  the values each time it was applied. Includes the input
   ≬        # a lambda that:
    y       #  uninterleaves (pushes odd indices then even indices)
     *      #  multiplies (vectorises)
            #  - in the case that the length of the input is not a power of two,
            #    it pads a 0 to the shorter list
      ≈     #  then checks if all are equal
       M    # map to each element
        A   # check if all are truthy
         =  # is the number equal to the input? (vectorises)
            # - -1 is always 0
            # - 0 never appears in the input
            # - 1 is 1 if it satisfies OVSF code, otherwise 0
            # - an input of [] returns []
          h # get first element
            # - [] outputs 0
            # - [-1,...] outputs 0
            # - [1,...] outputs 1 if it is valid
</code></pre>
"
"254580","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>æ[›¨²c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDplvigLrCqMKyYyIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>If N is prime, check if <code>n+1</code> is a power of 2.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>æ⁰bJΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiw6bigbBiSs6gIiwiIiwiMzEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the Jelly 5 byte answer.</p>
"
"254594","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>⁽+dḞi
</code></pre>
<p>Takes input as <code>[x, y]</code> then <code>n</code>.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oG9K2ThuJ5pIiwiIiwiWzAsIDBdLCA1XG5bMCwgMV0sIDZcblsxLCAxXSwgNlxuWzUsIDVdLCAyXG5bMiwgMl0sIDEwXG5bMywgMTBdLCAzXG5bMjMwOCwgNDI2MV0sIDEzXG5bMCwgMV0sIDBcblswLCAxXSwgMSJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>   Ḟ   # Create an infinite list from the initial vector [x, y] from:
  d    # a dyadic,
⁽      # single element lambda
 +     # which adds its two arguments.
    i  # Index into that list with the second input (n).
</code></pre>
"
"254665","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>v₍ʁ²ṠfJi
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ24oKNyoHCsuG5oGZKaSIsIiIsIjIyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Would beat Jelly if zero-indexing were allowed (remove <code>J</code>).</p>
<pre><code>v₍ʁ²ṠfJi
v        # For each in a range [1, n]:
 ₍       #  Apply both of the next two elements and wrap in a list:
  ʁ      #   Range [0, n), and:
   ²     #   Square n
    Ṡ    # Sum each (vectorizing)
         # For an input of 4, this will give [[1], [4, 5], [9, 10, 11], [16, 17, 18, 19]]
         # Basically, for each x in [1, n], add x^2 to each in [0, x)
     f   # Flatten
      J  # Prepend the input to the beginning (doesn't matter what we prepend)
       i # Index the input into this
</code></pre>
"
"254678","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>12</s> <s>10</s> 9 bytes</h1>
<p><em>-1 byte thanks to Jonathan Allan!</em></p>
<pre><code>¦:R⋎ḟꜝȯḂ⋎
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqY6UuKLjuG4n+qcnciv4biC4ouOIiwiIiwiJ2dpcmFmYXJpZydcbidmYXJpZ2lyYWYnXG4ncmFjZWNhcidcbidBQkJBJ1xuJydcbidhJ1xuJ2FhJ1xuJ2FiYSdcbidhYWEnXG4nMTIzMzMyMSdcbicxMTIxMSdcbidBQkFCQSdcbidDQkFCQ0NCQUJDJyAiXQ=="" rel=""noreferrer"">Test suite</a></p>
<h2>Explanation</h2>
<pre><code>¦         # prefixes of input
 :        # duplicate
  R       # reverse of each element
   ⋎      # merge join (vectorises)
          # - combines the strings on their longest common
          #   suffix and prefix respectively
    ḟ     # find the first index of the original input
     ꜝ    # bitwise not
      ȯ   # get this last number of characters in the input
       Ḃ  # push the reverse
        ⋎ # merge join
</code></pre>
"
"254769","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>ɾ:v≤Ṗv∩vṖÞf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvjp24omk4bmWduKIqXbhuZbDnmYiLCJ24oGLwrZkaiIsIjMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ɾ           # Push range(1, n+1)
  v         # Over each...
ɾ: ≤        # Check if it's less than each of range(1, n+1)
    Ṗ       # Get all permutations
     v∩     # Transpose each
       vṖ   # Get permutations of each
         Þf # Flatten by one layer
</code></pre>
"
"254781","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>½₍⌈⌊vUvLs
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCveKCjeKMiOKMinZVdkxzIiwiIiwiNyw4LDEwMCwxMDEsMjIyLDIyMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Append a <code>\/j</code> for strict I/O compliance (12 bytes)</p>
<pre><code>½         # Halve each
 ₍⌈⌊      # Floor and ceiling of each, paired
    vUvL  # Count unique items in each
        s # Sort
</code></pre>
"
"254782","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code>2lṠ)↔ðdvj:ẏ$꘍⁋ð9CV
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIybOG5oCnihpTDsGR2ajrhuo8k6piN4oGLw7A5Q1YiLCIiLCIxLCAyLCAzLCA0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I <em>think</em> this works? Output format is annoying.</p>
<pre><code>   )↔              # Repeat until no change, collecting values
  Ṡ                # Sums of
2l                 # Consecutive pairs
       vj          # Join each by...
     ðd            # Double spaces
           $꘍      # Pad left with spaces by
         :ẏ        # range(0, len(list)
             ⁋     # Join by newlines
                 V # Replace
              ð    # Spaces
               9C  # With tabs
</code></pre>
"
"254783","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>≈[¤|G
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiYhbwqR8RyIsIiIsIjYyNywzODk0LDg2Myw1MTk1LDc3ODksNTI2OSw4ODg3LDMyNjIsMTQ0OCwzMTkyIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>≈[    # If all same 
  ¤   # &quot;&quot;
   |G # Else max
</code></pre>
"
"254809","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Cæ:d⌐¦+↳
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDw6Y6ZOKMkMKmK+KGsyIsIuKBiyAjIGpvaW4gYnkgbmV3bGluZXMgKG91dHB1dHMgbGlzdCBvZiBsaW5lcykiLCJbXCJcXFxcXCIsXCJcXFxcXCIsXCIvXCIsXCJcXFxcXCIsXCJcXFxcXCIsXCIvXCIsXCIvXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a> Outputs as a list of lines, formatting in footer</p>
<pre><code>C        # Charcodes: &quot;/&quot; -&gt; 47, &quot;\&quot; -&gt; 92
 æ       # Are prime? &quot;/&quot; -&gt; 1, &quot;\&quot; -&gt; 0
   d⌐    # Double and take one's complement &quot;/&quot; -&gt; -1, &quot;\&quot; -&gt; 1
     ¦   # Cumulative sums
      +  # Add...
 æ:      # Is prime? (indents &quot;/&quot; by one extra space)
       ↳ # Pad to these lengths
</code></pre>
"
"254825","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>«ƛ₇⇩⇧ɽ¬Ẏ₁5≬*⋎ǑṄǑz!«vḟ4ḭ3-∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiwqvGm+KCh+KHqeKHp8m9wqzhuo7igoE14omsKuKLjseR4bmEx5F6IcKrduG4nzThuK0zLeKIkSIsIiIsInJhcml0eVxuYWFyZHZhcmtcbnF1aW5lXG53b3dcbndoeVxucHVwcHlcbm15bmFtZWplZmZcbmx5eGFsZ29sZmluZ1xuYnJ1aG1vbWVudCJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Port of Kevin's 05AB1E answer.</p>
<h2>Explained (old)</h2>
<p><em>I'll rework this tomorrow when it's not 12:59am</em></p>
<pre><code>ƛ«∧Ǒ₄ẇ*§,(ε±ẏt∩⁽→«6/$vcT›h3ɾḂNJ0pi
ƛ                                   # To each character in the input
 «∧Ǒ₄ẇ*§,(ε±ẏt∩⁽→«                  #    Push the string &quot;wfgykvbpjqxzeatoinshrdlc&quot; - this corresponds to the groups [+1, +2, +3, -3, -2, -1]
                  6/                #    And split that string into 6 equal length pieces.
                    $vcT›h          #    Get the 1-based index of where the character is in the +- grouped string (u and m will return 0)
                          3ɾḂNJ0p   #    The list [0, 1, 2, 3, -3, -2, -1]
                                 i  #    Indexed by the previous number
# At the end of execution, the `s` flag sums the list of numbers                          
</code></pre>
"
"254855","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>æ*∑8=)₀ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDpiriiJE4PSnigoDIryIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
"
"254874","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>λǐÞpvḟ›vx1w$∨
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQQSIsIiIsIs67x5DDnnB24bif4oC6dngxdyTiiKgiLCIiLCIxXG4yXG4zXG40XG41XG42XG4xMFxuMTNcbjI1NSJd"" rel=""noreferrer"">Try it Online!</a>
Output is an array, so there is an extra pair of brackets on the outside. <code>1w$∨</code> can be removed if we can omit the <code>1</code>s.</p>
<pre><code>λǐÞpvḟ›vx1w$∨
λ               # Open a lambda for recursion
 ǐ              # Get the prime factors
  Þpvḟ›         # Find the one-indexed index of each in an infinite list of primes
       vx       # Recurse over each
         1w$∨   # Logical OR with [1] (replace empty lists with [1])
</code></pre>
"
"254917","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>KLn∑=)ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJLTG7iiJE9KcivIiwiIiwiMjAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>      ȯ # First n integers
-----)  # Where...
 L      # Length of
K       # Factor count
    =   # Equals
  n∑    # Digit sum
</code></pre>
"
"254926","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ṡ‡ǐt∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuaHigKHHkHTiiLUiLCIiLCI1XG4xMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>ṡ     # Range from a to b
    ∵ # Minimum by...
 ‡--  # Next two as function
   t  # Last
  ǐ   # Prime factor
</code></pre>
"
"254962","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes + 67 = score 73</h1>
<pre><code>C:G$g-
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiQzpHJGctIiwiIiwiXCJIZWxsbywgV29ybGQhXCJcblwiQzpHJGctXCJcblwiYVwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"255020","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>ʁ2꘍∑374f?vLz4jø^↵vøR⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgTLqmI3iiJEzNzRmP3ZMejRqw7he4oa1dsO4UuKBiyIsIiIsIltcInByb2dyYW1taW5nXCIsXCJwdXp6bGVzXCIsXCJhbmRcIixcImNvZGVcIixcImdvbGZcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>              ø^      # Using the canvas, draw...
ʁ                     # Text: Palindromise each
 2꘍                   # Append two spaces to each
   ∑                  # Concatenate into a single string
    374f              # Directions: [3, 7, 4] - down-left, up-right, down
        ?vL           # Lengths: Lengths of each word in input
           z          # Zip with self
            4j        # Join with 4s
                ↵vøR⁋ # Strip trailing whitespace (ugh)
</code></pre>
"
"255040","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>‡k¹↔ḟ~İṘȦ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKFrwrnihpThuJ9+xLDhuZjIpiIsIiIsInJldmVyc3kgdGhlIGNvbnNvbmFudHMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"255045","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>gʁ$vεƛΠε∑;:›&quot;Ṡ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJnyoEkds61xpvOoM614oiROzrigLpcIuG5oCIsIiIsIls1LCAzXSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>The main observation here is that the amount of white chocolate <span class=""math-container"">\$w\$</span> and dark chocolate <span class=""math-container"">\$d\$</span> in a layer of size (a, b) is:
<span class=""math-container"">$$
w = ab +(a-1)(b-1) = 2ab - a - b + 1\\
d = (a-1)b+(b-1)a = 2ab - a - b
$$</span></p>
<p>In other words, the difference between white chocolate and dark chocolate for a layer is 1</p>
<pre><code> ʁ             # Range from 0 to...
g              # Minimum dimension of input
  $vε          # Subtract each from the input, creating a list of pairs of bases
     ƛ   ;     # Over each base pair [a, b]
      Π        # Product ab
       ε       # Take the absolute difference - [ab - a, ab - b]
        ∑      # Sum
          :›&quot;  # Create an incremented pair for white
             Ṡ # Sum each into the final amounts
</code></pre>
"
"255052","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>u$eÞ•ȧ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidSRlw57igKLIpyIsIiIsIlsxXVxuWzBdXG5bMSwyXVxuWzMsMywzXVxuWzQsNSw5XVxuWzIsNCw2LDldXG5bMSwyLDMsNF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jelly.</p>
<pre><code>u$eÞ•ȧ
u$e     # Raise -1 to the power of each
   Þ•   # Dot product with the input
     ȧ  # Absolute value
</code></pre>
"
"255059","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>?+n›%)Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiPytu4oC6JSnhuYQiLCIiLCIyXG4zXG40XG41XG42XG43XG44XG45XG4xMFxuMjUyMSJd"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Explanation:</p>
<pre><code>     )   # Lambda f from beginning of program
      Ṅ  # First non-negative integer n such that f(n) is truthy
?        # Push the input
 +       # Add n to it
    %    # Modulo
  n›     # N incremented
</code></pre>
"
"255178","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 16 bytes</h1>
<pre><code>vlvṠλĠ~•vA⋎f;RA¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqHhuKN2ZuKMiiAjIGxpc3Qgb2YgaW5wdXRzID0+IGNoaW1uZXksIHdpZHRoIiwidmx24bmgzrvEoH7igKJ2QeKLjmY7UkHCrCIsIiIsIjFcblwiMTAxMTExMVwiXG5cIjEwMTAwMDFcIlxuXCIxMDAwMTAxXCJcblwiMTExMTEwMVwiIl0="" rel=""nofollow noreferrer"">Try it online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidmx24bmgzrvEoH7igKJ2QeKLjmY7UkHCrCIsIiIsIjEsW1sxLDAsMV0sWzEsMCwxXSxbMSwwLDFdXVxuMixbWzEsMSwwLDAsMSwxXSxbMSwxLDAsMCwxLDFdLFsxLDAsMCwwLDEsMV0sWzEsMCwwLDEsMSwxXSxbMSwwLDAsMCwwLDFdLFsxLDEsMCwwLDAsMV0sWzEsMSwxLDAsMCwxXSxbMSwxLDEsMCwwLDFdXVxuMSxbWzEsMCwxXSxbMCwxLDBdLFsxLDAsMV1dXG4yLFtbMSwwLDAsMSwxLDFdLFsxLDAsMCwxLDEsMF0sWzEsMCwwLDEsMSwwXSxbMSwwLDAsMCwxLDBdLFsxLDEsMSwwLDEsMF0sWzEsMSwxLDAsMSwwXSxbMSwxLDEsMCwxLDBdLFsxLDEsMSwwLDEsMF1dXG4xLFtbMCwxLDEsMV0sWzEsMSwxLDBdLFsxLDEsMSwwXV1cbjEsW1sxLDAsMSwxLDEsMSwxXSxbMSwwLDEsMCwwLDAsMV0sWzEsMCwwLDAsMSwwLDFdLFsxLDEsMSwxLDEsMCwxXV0iXQ=="" rel=""nofollow noreferrer"">Test suite.</a></p>
<p>Takes input as width and a matrix of 0's and 1's, in either order.</p>
<h2>Explanation</h2>
<p>Since Santa cannot move up the chimney, we can iterate through each chimney's row until we arrive into a result. To check if we can move down then sideways to the 0's: (Assuming width 1)</p>
<pre><code>[1 0] [0 1 1] [1] [1] [1] =&gt; previous (molded to current)
  0      0     1   1   1  =&gt;   are all of them true?
  OR     OR    OR  OR  OR  (bitwise)
[1 1] [0 0 0] [1] [0] [1] =&gt; current
  =      =     =   =   =
[1 1] [0 0 0] [1] [1] [1] =&gt; new
</code></pre>
<h4>Commented code</h4>
<pre><code>vl               # cumulative groups (vectorise)
  vṠ             # sum (doubly vectorise)
                 # - this is &quot;any?&quot; as truthy/falsy only matters in this case
             R   # reduce by
    λ       ;    # a lambda taking two elements:
     Ġ           #   group the current consecutively
       •         #   mold the previous
      ~          #   do not pop the items
        vA       #   all? (vectorise)
          ⋎      #   bitwise or (vectorises)
           f     #   flatten
              A¬ # is not all true?
</code></pre>
"
"255191","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>3(Lp
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIzKExwIiwiIiwiaGVsbG8gd29ybGQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> -1 thanks to lyxal, -2 thanks to Kevin Cruijjsen.</p>
<pre><code>3(   # Three times
   p # Prepend to input
  L  # Length of current value
</code></pre>
"
"255241","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>fÞ℅$•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmw57ihIUk4oCiIiwiIiwiW1sxLDIsM10sWzRdLFs5LDEwXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>f     # Flatten
 Þ℅   # Shuffle
   $• # Mold to original shape
</code></pre>
"
"255280","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>13</s> 7 bytes</h1>
<pre><code>ẏD›⋏ṡİṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuo9E4oC64ouP4bmhxLDhuaAiLCIiLCJbMywxLDQsMSw1LDksMiw2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Half porting python. TIL <code>ṡ</code> vectorises zip-wise between two lists.</p>
<h2>Explained</h2>
<pre><code>ẏD›⋏ṡİṠ
ẏ       # The range [0, len(input))
 D      # pushed three times to the stack
  ›     # increment the top copy
   ⋏    # and get the bitwise-and of each pair of n and n-1 in each list
# At this point the stack is: [[0, 1, 2, ..., len(input) - 1], [1 bitand 0, 2 bitand 3, 3 bitand 4, ..., len(input) bitand len(input - 1)]
    ṡ   # create the range [x, y] for each x and y pair in the top two stack items: [[0], [1, 0], [2], [3, 2, 1, 0], ...]
     İ  # get the nth item in the input at each atomic index in the above list: [[input[0]], [input[1], input[0]], ...]
      Ṡ # sum each sublist and implicitly print
</code></pre>
"
"255303","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>\1*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXDEqIiwiIiwiNCJd"" rel=""nofollow noreferrer"">Try it Online!</a>
Literally prints that many 1s.</p>
"
"255309","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 15 bytes</h1>
<pre><code>₌LGɾ↔'ẏD›⋏ṡİṠ?⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoxMR8m+4oaUJ+G6j0TigLrii4/huaHEsOG5oD/igbwiLCIiLCJbMywgNCwgNF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Math? Clever ways of inverting things? No, couldn't be me!</p>
<p>Times out for inputs longer than about 4 or 5 or where there's a sum that's kinda large (like 32).</p>
<p>Builds upon my <a href=""https://codegolf.stackexchange.com/a/255280/78850"">answer from yesterday</a></p>
<h2>Explained</h2>
<pre><code>₌LGɾ↔'ẏD›⋏ṡİṠ?⁼
  Gɾ              # From the range [1, max(input)] - already making inputs with large numbers take a while
₌L  ↔             # Get all combinations with repetition of length(input) - meaning that only short lists with small numbers will be solved quickly
     '            # Keep only the combinations where:
      ẏD›⋏ṡİṠ     # Applying the solution to yesterday's challenge
             ?⁼   # is equal to the input - only returns a single list
</code></pre>
"
"255325","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>75</s> <s>79</s> 76 bytes</h1>
<pre><code>Þ¾0£00&quot;n`^v`*¨^(n+D→ Du&gt;A[÷?ii:u≠[¾← c¬[&amp;+|_]]|X]⅛)¥?f1O=)`&lt;&gt;^v`₈*Þ×vṖ1Þf¤pc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnsK+MMKjMDBcIm5gXnZgKsKoXihuK0TihpIgRHU+QVvDtz9paTp14omgW8K+4oaQIGPCrFsmK3xfXV18WF3ihZspwqU/ZjFPPSlgPD5edmDigogqw57Dl3bhuZYxw55mwqRwYyIsIiIsIltbMCwgMCwgMCwgMCwgMF0sIFswLCAwLCAwLCAwLCAwXSwgWzAsIDAsIDAsIDAsIDBdLCBbMCwgMCwgMCwgMCwgMF0sIFswLCAwLCAwLCAwLCAwXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Times out for solutions longer than 3 moves. Takes a list of lists where <code>0</code> represents a blank space, <code>1</code> represents a village and <code>-1</code> represents an obstacle. Returns a string of <code>&gt;&lt;^v</code> if it does return a solution, indicating the directions to move.</p>
<p>Because it's 12:57am, I'll give a quick high-level explanation. The algorithm here is to:</p>
<ul>
<li>Generate all possible combinations of directions of all possible lengths less than or equal to 256 (<code><code>&lt;&gt;^v</code>256*Þ×vṖ1Þf</code>)</li>
<li>Find the first solution (which will be the first shortest) where (<code>...)...c</code>):
<ul>
<li>After a little initalisation of some variables (<code>Þ¾0£</code>)</li>
<li>And starting at [0, 0] (<code>00&quot;</code>)</li>
<li>Moving around the grid in the directions provided by each string (<code><code>^v</code>*¨^(n+D→ Du&gt;A[÷?ii</code>)</li>
<li>Making sure no obstacles are hit in the path (<code>:u≠</code>)</li>
<li>And tallying the villages that have been visited (<code>[¾← c¬[&amp;+|_]]</code>)</li>
<li>Results in visiting a number of villages that is equal to the count of villages in the input (<code>¥?f1O=</code>)</li>
</ul>
</li>
</ul>
<p>So basically, get the first solution by brute force from all possible solution strings.</p>
"
"255347","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>bĠ∩Ṡ⁰c)ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJixKDiiKnhuaDigbBjKcivIiwiIiwiMTBcbjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>k</code> and <code>n</code> and returns the first <code>k</code> items.</p>
<p>Port of Jelly.</p>
<h2>Explained (old)</h2>
<pre><code>b0€ꜝL⁰=)ȯ
-------)ȯ # first k integers where:
b0€       #   the binary representation of the number
   ꜝ      #   with empty lists removed
    L⁰=   #   is of length n
</code></pre>
"
"255386","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 9 bytes</h1>
<pre><code>E?ẇ∩v≈A)Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiRT/huofiiKl24omIQSnhuYQiLCIiLCInMSdcbicxMDEwMTAxJ1xuJzEwMTAxMSdcbicwMTAwMTExMDAxMDEnXG4nMTAxMTAwMTEwMTExMDAwMTEwMTAxMTEwMCciXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<h3>Explanation</h3>
<p>Based upon <a href=""https://codegolf.stackexchange.com/a/255383/81098"">Jonah's observation.</a></p>
<pre><code>       )  # a lambda taking N:
E         #   2 ** N
 ?        #   push input
  ẇ       #   wrapped in chunks of length 2 ** N
   ∩      #   transposed
    v≈    #   is every element the same? (vectorise)
      A   #   all?
        Ṅ # first non-negative integer where it is true
</code></pre>
"
"255445","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>›(W:
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oC6KFc6IiwiIiwiMVxuMlxuMyJd"" rel=""nofollow noreferrer"">Try it online!</a> One-indexed. Returns a nested list.</p>
<pre><code>›    # increment
 (   # repeat for n+1 times (n+1 is popped):
  W  #   wrap stack into single list (initially [])
   : #   duplicate
     # implicit output
</code></pre>
<hr />
<h3><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>W</code>, 3 bytes</h3>
<pre><code>(W:
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBVyIsIiIsIihXOiIsIiIsIjFcbjJcbjMiXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Here, it repeats <code>n</code> times, and before outputting implicitly, the <code>W</code> flag wraps the stack into a single list.</p>
"
"255501","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>₌ẏĠ•~Ḣ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigozhuo/EoOKAon7huKIiLCIiLCJBQkJCQkNERCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Similar stuff to the other answers but independently derived.</p>
<h2>Explained</h2>
<pre><code>₌ẏĠ•~Ḣ
₌ẏĠ    # range(0, len(input)) and group_consecutive(input)
   •   # mold the length range to the shape of the consecutive groups
    ~Ḣ # keep only lists where there's more than one item
</code></pre>
"
"255518","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>≬ṗ⁰cFsµ₌ǎṗJ⁰ḟ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiazhuZfigbBjRnPCteKCjMeO4bmXSuKBsOG4nyIsIiIsIltcIigoKSkoKVwiLCBcIigpKClcIiwgXCIoKCgpKSlcIiwgXCIoKCkpXCIsIFwiKCkoKCkpXCIsIFwiKCkoKSgpXCJdXG5cIigoKSlcIiJd"" rel=""nofollow noreferrer"">Try it online!</a> Input as <code>a</code> then <code>s</code>. Inefficient approach.</p>
<pre><code>≬             # a 3-element lambda:
 ṗ            #   get all subsets
   c          #   does it contain
  ⁰           #   the last input (s)?
    F         # filter according to lambda
     s        # sort alphabetically (handles ordering of 1 and 2)
      µ       # a sorting lambda:
       ₌      #   parallel apply:
        ǎ     #     substrings (handles 1, 2, and 3)
         ṗ    #     subsets (handles 4)
          J   #   join together
            ḟ #   find the first occurrence of
           ⁰  #   last input
</code></pre>
"
"255522","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 776 bytes, score = 0</h1>
<pre><code>⟨1.0079|4.0026|6.941|9.0122|10.811|12.0107|14.0067|15.9994|18.9984|20.1797|22.9897|24.305|26.9815|28.0855|30.9738|32.065|35.453|39.948|39.0983|40.078|44.9559|47.867|50.9415|51.9961|54.938|55.845|58.9332|58.6934|63.546|65.39|69.723|72.64|74.9216|78.96|79.904|83.8|85.4678|87.62|88.9059|91.224|92.9064|95.94|98|101.07|102.9055|106.42|107.8682|112.411|114.818|118.71|121.76|127.6|126.9045|131.293|132.9055|137.327|138.9055|140.116|140.9077|144.24|145|150.36|151.964|157.25|158.9253|162.5|164.9303|167.259|168.9342|173.04|174.967|178.49|180.9479|183.84|186.207|190.23|192.217|195.078|196.9665|200.59|204.3833|207.2|208.9804|209|210|222|223|226|227|232.0381|231.0359|238.0289|237|244|243|247|247|251|252|257|258|259|262|261|262|266|264|277|268|281|282|285|286|289|290|293|294|294⟩i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLin6gxLjAwNzl8NC4wMDI2fDYuOTQxfDkuMDEyMnwxMC44MTF8MTIuMDEwN3wxNC4wMDY3fDE1Ljk5OTR8MTguOTk4NHwyMC4xNzk3fDIyLjk4OTd8MjQuMzA1fDI2Ljk4MTV8MjguMDg1NXwzMC45NzM4fDMyLjA2NXwzNS40NTN8MzkuOTQ4fDM5LjA5ODN8NDAuMDc4fDQ0Ljk1NTl8NDcuODY3fDUwLjk0MTV8NTEuOTk2MXw1NC45Mzh8NTUuODQ1fDU4LjkzMzJ8NTguNjkzNHw2My41NDZ8NjUuMzl8NjkuNzIzfDcyLjY0fDc0LjkyMTZ8NzguOTZ8NzkuOTA0fDgzLjh8ODUuNDY3OHw4Ny42Mnw4OC45MDU5fDkxLjIyNHw5Mi45MDY0fDk1Ljk0fDk4fDEwMS4wN3wxMDIuOTA1NXwxMDYuNDJ8MTA3Ljg2ODJ8MTEyLjQxMXwxMTQuODE4fDExOC43MXwxMjEuNzZ8MTI3LjZ8MTI2LjkwNDV8MTMxLjI5M3wxMzIuOTA1NXwxMzcuMzI3fDEzOC45MDU1fDE0MC4xMTZ8MTQwLjkwNzd8MTQ0LjI0fDE0NXwxNTAuMzZ8MTUxLjk2NHwxNTcuMjV8MTU4LjkyNTN8MTYyLjV8MTY0LjkzMDN8MTY3LjI1OXwxNjguOTM0MnwxNzMuMDR8MTc0Ljk2N3wxNzguNDl8MTgwLjk0Nzl8MTgzLjg0fDE4Ni4yMDd8MTkwLjIzfDE5Mi4yMTd8MTk1LjA3OHwxOTYuOTY2NXwyMDAuNTl8MjA0LjM4MzN8MjA3LjJ8MjA4Ljk4MDR8MjA5fDIxMHwyMjJ8MjIzfDIyNnwyMjd8MjMyLjAzODF8MjMxLjAzNTl8MjM4LjAyODl8MjM3fDI0NHwyNDN8MjQ3fDI0N3wyNTF8MjUyfDI1N3wyNTh8MjU5fDI2MnwyNjF8MjYyfDI2NnwyNjR8Mjc3fDI2OHwyODF8MjgyfDI4NXwyODZ8Mjg5fDI5MHwyOTN8Mjk0fDI5NOKfqWkiLCIiLCIyMyJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Prints the exact average for each element, so each <span class=""math-container"">\$(p_{el} - w_{el})\$</span> = 0, meaning the fraction sums to <code>0/118</code>, and multiplication gives score = 0</p>
<p>The scoring of this answer was correct at 2:27pm 15 Dec 2022 UTC. If by some chance the question has been edited to make the score invalid, I won't be available to change it for another 8 or so hours. Therefore, if the score is invalidated, I'll update this when I can.</p>
"
"255556","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>bI∩v≈A)ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiSeKIqXbiiYhBKcivIiwiIiwiMTgiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>       ȯ # First N integers
------)  # Where...
b        # Binary
 I       # Split into two halves
  ∩      # Transposed
     A   # Are all...
   v     # Pairs... 
    ≈    # Each all the same element?
</code></pre>
"
"255592","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>ṖvøṖÞf'Ṡ?G=A;hÞṡ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwi4bmWdsO44bmWw55mJ+G5oD9HPUE7aMOe4bmhIiwiIiwiWzUsIDEsIDIsIDYsIDQsIDMsIDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Extremely inefficient. Simply brute-forces it.</p>
<pre><code>ṖvøṖÞf'Ṡ?G=A;hÞṡ
Ṗ                 # All permutations
 vøṖ              # For each, get a list of all ways to partition the list
    Þf            # Shallow flatten
      '           # Filter:
       Ṡ          #  Sum each
        ?G=A      #  All are equal to the max of the input?
            ;     # End filter
             h    # First item
              Þṡ  # Sort by length
</code></pre>
"
"255607","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>\zp⁽AḊ⁽ǐẆṅḢ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiXFx6cOKBvUHhuIrigb3HkOG6huG5heG4oiIsIiIsImhlbGxvd29ybGRhbmRoZWxsb2NvZGVnb2xmXG5hYWJlZWthZCJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>This is a terrible way to do it but it works.</p>
<pre><code>\zp⁽AḊ⁽ǐẆṅḢ
\zp         # Prepend &quot;z&quot; so that there is a leading consonant
   ⁽AḊ      # Adjacent-group by is-vowel
      ⁽ǐẆ   # Title-case every second item, starting on the first item
         ṅḢ # Join by nothing and remove the leading &quot;z&quot;
</code></pre>
"
"255610","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>`° ß`$‡ǐNøṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgwrAgw59gJOKAoceQTsO44bmZIiwiIiwiaGVsbG93b3JsZGFuZGhlbGxvY29kZWdvbGYiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>An alternate 11 byter that uses regex</p>
<p>See <a href=""https://codegolf.stackexchange.com/a/238374/78850"">this golfing tip of mine</a> that explains why the string <code>&quot;° ß&quot;</code> is <code>&quot;[aeiou] [bcdfghjklmnpqrstvwxyz]&quot;</code></p>
<h2>Explained</h2>
<pre><code>`° ß`$‡ǐNøṙ
`° ß`       # The string `[aeiou] [bcdfghjklmnpqrstvwxyz]`
     $      # Make the stack input, ^
      ‡ǐN   # Push a function that title cases a string and then swapscase.
            # This is because regex matches will be vowel-consonant, and title case makes the vowel uppercase, consonant lowercase, swapcase inverts that for the desired result 
         øṙ # Apply that function to regex matches in the input
</code></pre>
"
"255665","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>y∑
</code></pre>
<p>well.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ54oiRIiwiIiwiNTQ4OTE1MzgxIl0="" rel=""noreferrer"">Try it Online!</a> | <a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwieSIsIiIsIjU0ODkxNTM4MSJd"" rel=""noreferrer"">1 byte with <code>s</code></a></p>
<p><strong>Explanation</strong></p>
<pre><code>y∑
y   Uninterleave, push two lists with every second and every second+1 digit
 ∑  Sum the first list
</code></pre>
"
"255766","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>⟑A[kv¥i$•&amp;›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLin5FBW2t2wqVpJOKAoibigLoiLCIiLCJUaGlzIGlzIGEgdGVzdCEgVGhpcyBpcyBleGFtcGxlIG51bWJlciB0d28uIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>If I had a nickel for every time I'd answered a vowel-related challenge with an 11 byte Vyxal answer in the last 2 weeks, I'd have 2 nickels, which isn't a lot but it's weird that it's happened twice. Outputs as a list of characters (add the <code>s</code> flag if you want a string object).</p>
<h2>Explained</h2>
<pre><code>⟑A[kv¥i$•&amp;›
⟑           # To each character:
 A[         #  if it is a vowel:
   kv¥i     #    get the (register)th item of the string &quot;aeiou&quot; - wraps around if the register &gt; 5
       $•   #    and give it the same case of the current character
         &amp;› #    increment the register to get the next vowel
</code></pre>
"
"255805","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 6 bytes</h1>
<pre><code>(d1$&quot;ꜝ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCI2IiwiKGQxJFwi6pydIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses the fact that <a href=""https://codegolf.meta.stackexchange.com/a/22106/78850"">stack languages can have their input placed on the stack before execution</a></p>
<p><a href=""https://web.archive.org/web/20221221235837/https://codegolf.meta.stackexchange.com/questions/2447/default-for-code-golf-input-output-methods/22106"" rel=""nofollow noreferrer"">Proof the meta proposal was +6 at the time of posting</a></p>
<h2>Explained</h2>
<p>A port of Jelly</p>
<pre><code>(d1$&quot;ꜝ
(      # repeat input times
 d     # double
  1$&quot;  # [1, that]
     ꜝ #  keep only truthy items
</code></pre>
"
"255873","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>\:/H16β
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiXFw6L0gxNs6yIiwiIiwiMDAwMDowMDAwXG4xMTExOjExMTFcbkZGRkY6MDAwMFxuRkZGRjowMDEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>\:/H16β
\:/     # Split on colon
   H    # Convert each from hex string to int
    16β # Convert list from base 16 to decimal
</code></pre>
"
"255905","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 6 bytes</h1>
<pre><code>'sĠ'ḢḢ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInc8SgJ+G4ouG4oiIsIiIsIlsncmVmZXJlbmNlJywgJ3RvbW9ycm93JywgJ3RvZGF5J10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>'sĠ'ḢḢ
'      # Filter input where:
 sĠ    #   sorted and grouped by consecutive
   'ḢḢ #   has items where length &gt;= 3
</code></pre>
"
"255958","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>rfĊ↑t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJyZsSK4oaRdCIsIiIsIigxLCAyLCA2LCA1LCA0KVxuKDUsIDgsIDksIDcsIDYpIl0="" rel=""nofollow noreferrer"">Try it online!</a> Takes a list of start stations and a list of end stations.</p>
<pre><code>r     # range (vectorises)
 f    # flatten
  Ċ   # counts of every element
   ↑  # get the maximum element by its tail
    t # tail
</code></pre>
<hr />
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h2>
<pre><code>∩÷rfĊ↑t
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiKnDt3JmxIrihpF0IiwiIiwiWygxLCA1KSwgKDIsIDgpLCAoNiwgOSksICg1LCA3KSwgKDQsIDYpXSJd"" rel=""nofollow noreferrer"">Try it online!</a> The original solution, taking a list of pairs. This transposes <code>∩</code> then item splits <code>÷</code> first, before continuing with the solution above.</p>
"
"255990","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>k□0zJẋΠṠUMṠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJr4pahMHpK4bqLzqDhuaBVTeG5oCIsIiIsIjJcblsyLCAyXSJd"" rel=""nofollow noreferrer"">Try it online!</a> Takes <span class=""math-container"">\$r\$</span> then the coordinate.</p>
<pre><code>k□          # cardinal directions [[0,1],[1,0],[0,-1],[-1,0]]
  0z        # 0 zipped into self  [[0,0]]
    J       # join                [[0,1],[1,0],[0,-1],[-1,0],[0,0]]
     ẋ      # repeated into a list r times
      Π     # reduce by cartesian product
       Ṡ    # vectorising sum
        U   # remove duplicates
         M  # pair each direction into the input coordinate
          Ṡ # and sum to it
</code></pre>
"
"256004","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>fÞȮ¬)ȯ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJmw57IrsKsKciv4oiRIiwiIiwiNSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>      ∑ # Sum of...
     ȯ  # First n integers...
----)   # Where...
f       # Digits
   ¬    # Are not
 ÞȮ     # Sorted
</code></pre>
"
"256022","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>?*?+?~%/≈)ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI/Kj8rP34lL+KJiCnhuYUiLCIiLCJbMSwgNSwgM11cblswLCAxLCAwXVxuWzQsOCwxMl0iXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>          ṅ # First integer
---------)  # where...
?*          # Multiply by speeds
  ?+        # Add initial positions
    ?~%     # Modulo by orbit sizes, without popping
       /    # Divide by orbit sizes
        ≈   # Are they all equal?
</code></pre>
"
"256069","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<h3>Program A, 2 bytes</h3>
<pre><code>0c
</code></pre>
<h3>Program B, 2 bytes</h3>
<pre><code>1c
</code></pre>
<h3>Test cases</h3>
<ul>
<li><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwYyIsIiIsIjBjIl0="" rel=""nofollow noreferrer"">Program A, Input A</a></li>
<li><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIwYyIsIiIsIjFjIl0="" rel=""nofollow noreferrer"">Program A, Input B</a></li>
<li><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxYyIsIiIsIjBjIl0="" rel=""nofollow noreferrer"">Program B, Input A</a></li>
<li><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIxYyIsIiIsIjFjIl0="" rel=""nofollow noreferrer"">Program B, Input B</a></li>
</ul>
<h3>Explanation</h3>
<p><code>0c</code> checks whether <code>0</code> is in the input, and <code>1c</code> checks whether <code>1</code> is in the input.</p>
"
"256123","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 9 bytes</h1>
<p>-1 byte thanks to @lyxal</p>
<pre><code>k□02vV:NJ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJr4pahMDJ2VjpOSiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>    k□   # [[0,1],[1,0],[0,-1],[-1,0]]
   02vV # replace all 0 with 2 in elements of list (v applies next operation to elents of list)
    :    # duplicate 
    N  # negation (* -1) in  elements of list
    J    # join it
</code></pre>
"
"256142","<h1><a href=""https://github.com/Vyxal/Vyxal/"" rel=""nofollow noreferrer"">Vyxal</a>, <s>58 48</s> 33 bytes</h1>
<pre><code>5D:N20WĖ⁰»+gḊ6ß/ċi∴o@t»k4τ-:0≥**∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI1RDpOMjBXxJbigbDCuytn4biKNsOfL8SLaeKItG9AdMK7azTPhC06MOKJpSoq4oiRIiwiIiwiMTIwMDAwIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<ul>
<li>-15 thanks to lyxal</li>
</ul>
<p>Port of Neil's Charcoal answer</p>
<h3>Explanation</h3>
<pre class=""lang-python prettyprint-override""><code>5D:                             # Push 5 and quadruplicate
   N                            # Negate the top one
    20                          # Push 20
      W                         # Wrap the stack in a list
       Ė                        # Reciprocal of each
        ⁰                       # Push the input
         »...»                  # Push the base-255 compressed integer 12570050270100000125140137430
              k4τ               # Convert to list: [12570,50270,100000,125140,137430]
                 -              # Subtract each from the input
                  :             # Duplicate this list
                   0≥           # Check if each element is ≥0
                     *          # Multiply with the list so negative values are now 0
                      *         # Multiply together
                       ∑        # And sum, outputting implicitly
</code></pre>
"
"256148","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>∆ǐsṘ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIbHkHPhuZgiLCIiLCIxMjM0NTYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>So uh turns out the prime exponents built-in doesn't include 0s by complete accident - it's not a bug, just a consequence of how it's implemented and a different understanding of what a prime exponents built-in should do lol.</p>
<h2>Explained</h2>
<pre><code>∆ǐsṘ
∆ǐ   # prime exponents of the input
  s  # sorted
   Ṙ # reversed
</code></pre>
"
"256178","<h1><a href=""//github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>`+- `₈ĿṅsEḃ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgKy0gYOKCiMS/4bmFc0XhuIMiLCIiLCJcIiswXCIiXQ=="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Port of Kevin Cruijssen's 05AB1E (legacy) answer.</p>
<h3>Explanation</h3>
<pre class=""lang-python prettyprint-override""><code>`+- `₈ĿṅsEḃ
      Ŀ     # Transliterate the (implicit) input,
`+- `       # Replacing the characters &quot;+&quot;, &quot;-&quot; and &quot; &quot;
     ₈      # With the characters &quot;2&quot;, &quot;5&quot; and &quot;6&quot; respectively
       ṅ    # Join the list created by nothing
        s   # Sort the string
         E  # Evaluate the string
          ḃ # And convert to a boolean (Python-style)
</code></pre>
"
"256233","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>Þ∞KƛƛÞ∞K$›eĖṠ2l≬₈vḞ≈c*n¡*?∆Lne$/;∑;2l≬₈vḞ≈c›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInkvGm8abw57iiJ5LJOKAumXEluG5oDJs4oms4oKIduG4nuKJiGMqbsKhKj/iiIZMbmUkLzviiJE7Mmziiazigoh24bie4omIY+KAuiIsIiIsIjEwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I think this is correct. <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInkvGm8abw57iiJ5LJOKAumXEluG5oDJs4oG94omIYypuwqEqP+KIhkxuZSQvO+KIkTsybOKBveKJiGPigLoiLCIiLCIxMCJd"" rel=""nofollow noreferrer"">Might be 38 if there's an exact limit convergance somehow</a>.</p>
<p>Precision is met by having a) things evaluated to 256 decimal places when approximating and b) exact values used until an approximation is needed. Good luck getting this to return an actual answer in the time we have left in the universe. The algorithm should be correct though.</p>
<h2>Explained</h2>
<p>The main idea to find the sums of things with an infinite upper bound is to check every overlapping pair of items in an infinite list of the sum applied from <code>1..1</code>, <code>1..2</code>, <code>1..3</code>, and so on until the pair has all the same items. This is basically checking for convergence manually.</p>
<pre><code>Þ∞Kƛ...;2l≬₈vḞ≈c›
Þ∞Kƛ   ;          # Calculate the gram series for all possible upper bounds
        2l        # get all the overlapping pairs
          ≬₈vḞ≈c  #  and get the first where the items to 256 decimal places are the same
                › # increment
</code></pre>
<pre><code>ƛÞ∞K$e›ĖṠ2l≬₈vḞ≈c*n¡*?∆Lne$/;∑  # Note that the context variable is set to whatever number in a prefix in the prefix is being gram seriesed is being zeta'd
 Þ∞K                            # To each prefix of an infinite list of positive integers
    $e›ĖṠ2l≬₈vḞ≈c                # Zeta function
                 *              # times k
                  n¡*           # times k!
                     ?∆Lne$/    # log(input) ** k divided by above
                            ;∑  # sum the result of apply to each k
</code></pre>
<pre><code>$e›ĖṠ2l≬₈vḞ≈c # the top of the stack is the prefix list
$e›           # each number in each prefix to the power of k + 1
   Ė          # reciprocal of each number in each prefix
    Ṡ         # sum of each prefix
     2l       # overlapping pairs of sums
       ≬₈vḞ≈c # first item where pair is all the same to 256 decimal places.
</code></pre>
"
"256247","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18</s> 9 bytes</h1>
<pre><code>69f⁼[42|Π
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiNjlm4oG8WzQyfM6gIiwiIiwiWzksNl1cbls2LDldXG5bNCwyXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Sigh terrible first re-try at Vyxal after a few months.</p>
<h2>Explanation</h2>
<pre><code>69f⁼[42|Π
69f⁼      # list equals [6,9]
    [     # if statement block
     42   # return 42 if true
          # else product of list
</code></pre>
<p>-9 thx to @Lyxal</p>
"
"256260","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>dɾ:ẇRfJi
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJkyb464bqHUmZKaSIsIiIsIjQwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"256279","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>₌0b(dn⁰*꘍
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oKMMGIoZG7igbAq6piNIiwiIiwiMTMsIDE0XG4wLCAxXG4xLCAyXG4xMywgMTFcbjE5LCAxXG42MywgNjNcbjIsIDUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ports the 05AB1E answer, so go upvote that too</p>
<h2>Explained</h2>
<pre><code>₌0b(dn⁰*꘍
₌0b       # Push 0 and the binary of the first input
   (      # to each bit:
    d     # double the top of the stack
     n⁰*  # multiply the bit by the second input
        ꘍ # and bit xor
</code></pre>
"
"256288","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>2Nτ∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIyTs+E4oiRIiwiIiwiLTgiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/216718/100664"">Makonede's 05AB1E answer</a>, outputting 1 for truthy and anything else for falsy.</p>
<pre><code>   ∑ # Is exactly one of
  τ  # Digits in base...
2N   # -2
     # Truthy?
</code></pre>
"
"256290","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>y&quot;f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwieVwiZiIsIiIsIlswLCAxLCAyLCAzLCA0XVxuWzExMCwgMjIsIDMzMzAsIDQ0NDQsIDU1NTU1LCA2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uninterleave, pair the results and flatten</p>
"
"256321","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 - 40 = -22 bytes</h1>
<pre><code>Ṗ'¯±:k+$•⁼;:?c[_|℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZYnwq/CsTprKyTigKLigbw7Oj9jW1984oSFIiwiIiwiNSw3LDMsNCwyLDEsOSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is why bonuses are a bad idea</p>
"
"256356","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ȧ•?0&lt;[Ṙ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyKfigKI/MDxb4bmYIiwiIiwiLTMsIFwiaGVsbG8gd29ybGRcIlxuMywgXCJoZWxsbyB3b3JsZFwiXG4wLCBcImhlbGxvIHdvcmxkXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>There's gotta be a better way to do this.</p>
<pre><code> •      # Repeat each char by...
ȧ       # absolute value of input
  ?0&lt;[  # If it's negative
      Ṙ # Reverse
</code></pre>
"
"256364","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>'L5=;5ḋ'∑Þu
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInTDU9OzXhuIsn4oiRw551IiwiIiwiW1wiZmpvcmRcIiwgXCJ2aWJleFwiLCBcIndhbHR6XCIsIFwibnltcGhcIiwgXCJndWNrc1wiLCBcImd5bXBzXCIsIFwiY2h1bmtcIiwgXCJhYmNcIl0iXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>Get all 5 letter words, and all 5 word combinations where all the letters are unique.</p>
<h2>Explained</h2>
<pre><code>'L5=;5ḋ'∑Þu
'L5=;       # keep only words that are length 5
     5ḋ     # combinations without replacement of size 5
       '∑Þu # keep only those where the sum of all strings has all unique letters
</code></pre>
"
"256423","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ȧ¹•nṠ¬ßṘ⁰=)N
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyKfCueKAom7huaDCrMOf4bmY4oGwPSlOIiwiIiwiYWJjLCBhYWJiY2NcbmFiYywgY2NiYmFhXG5hYWEsIGFhYWFhYVxuXCJcIixcIlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Outputs the smallest integer needed, with preference given to positive integers if there are 2 possible answers.</p>
<h2>Explained</h2>
<pre><code>ȧ¹•nṠ¬ßṘ⁰=)N
          )N # Find the first integer n (pos or neg) where:
 ¹•          #   the divisor with characters repeated
ȧ            #   abs(n) times
      ßṘ     #   reversed if:
   nṠ¬       #     n is negative
        ⁰=   #   equals the dividend
</code></pre>
"
"256426","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 11 bytes</h1>
<pre><code>↵:₀/ṡ~æ'⁰øp
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLihrU64oKAL+G5oX7DpifigbDDuHAiLCIiLCI0XG4yMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>n</code> then <code>m</code>. Prints the primes in order from largest to smallest.</p>
<h2>Explained</h2>
<pre><code>↵:₀/ṡ~æ'⁰øp
↵:₀/         # 10 ** n, 10 ** (n - 1)
    ṡ        # range(^, ^)
     ~æ      # filtered to only include primes
       '⁰øp  # and filtered to only keep numbers which start with m
</code></pre>
"
"256432","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>Lε↵~*~+ṡ~æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJMzrXihrV+Kn4r4bmhfsOmIiwiIiwiMjJcbjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>
  ↵        # 10 **
 ε         # Digit count minus
L          # Length of starting digits
   ~*      # Multiply by starting digits (without popping)
     ~+    # Add to starting digits (without popping)
       ṡ   # Range from ^^ to ^
        ~æ # Filter by isprime
</code></pre>
"
"256435","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes, score 2</h1>
<pre><code>Þp:d›↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnnA6ZOKAuuKGlCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>     ↔ # Union of...
Þp     # Primes
  :d›  # Primes * 2 + 1
</code></pre>
<p>-10 score because it prints an infinite list.</p>
"
"256443","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>⁽hġ‡tṘv∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigb1oxKHigKF04bmYduKItSIsIiIsIlsoXCJMYXRpblwiLCBcIkFcIiksICAoXCJGcmVuY2hcIiwgXCJBKlwiKSwgIChcIk1hdGhcIiwgXCJCXCIpLCAoXCJMYXRpblwiLCBcIkEqXCIpXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Sort by the reverse of each grade, group by subject, best of each subject group</p>
<p><em>-1 thanks to emanresuA</em></p>
<h2>Explained</h2>
<pre><code>⁽hġ‡tṘv∵
⁽hġ       # Group subjects by their subject
      v∵  # Get the maximum of each group by
   ‡tṘ    # Reversed grade.
</code></pre>
"
"256484","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>9℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI54oSFIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Outputs a random integer from 0 to 9.</p>
"
"256485","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 13 bytes</h1>
<pre><code>∴ƛ□$%∑¬;¦:Gḟ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiLTGm+KWoSQl4oiRwqw7wqY6R+G4n+KAuiIsIiIsIjIxXG4xMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Thanks to <em>@Fhuvi</em> for pointing out a bug.</p>
<p><strong>Explanation:</strong></p>
<pre class=""lang-python prettyprint-override""><code>∴ƛ□$%∑¬;¦:Gḟ›  # Implicit inputs
∴              # Maximum input
 ƛ     ;       # Map over range(1, ^ + 1):
  □$           #  Push input list and swap
    %∑         #  Sum of each input mod the number
      ¬        #  Equals 0?
        ¦      # Cumulative sums of the list
         :G    # Maximum of that list
           ḟ   # Index of that in the cumulative sums
            ›  # Plus one to account for 0-indexing
               # Implicit output
</code></pre>
"
"256486","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 7 bytes</h1>
<pre><code>ṘėRvƒ↲∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZjEl1J2xpLihrLiiJEiLCIiLCIxMTAxMTExMTExMDEwMTAxMTAwMTAxMTEwMTExMDAxMTEwMDAxMDAwMTEwMTAwMTEwMDExMTAwMDAwMTExIl0="" rel=""nofollow noreferrer"">Try it online!</a></p>
<ul>
<li>-2 thanks to Steffan</li>
</ul>
<p><strong>Explanation:</strong></p>
<pre class=""lang-python prettyprint-override""><code>ṘėRvƒ↲∑    # Implicit input
Ṙė         # Reverse and enumerate
  R        # Reverse each
   vƒ      # Vecorised reduce over:
     ↲     # Left bit-shift
      ∑    # Sum
           # Implicit output
</code></pre>
"
"256498","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>ċ[₆(n⁰eĖ⅛)¾∑øḋ7Ẏ|\∞
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwixItb4oKGKG7igbBlxJbihZspwr7iiJHDuOG4izfhuo58XFziiJ4iLCIiLCI0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No builtins used, used 4 bytes on the decimal places</p>
"
"256504","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> 7 bytes</h1>
<pre><code>vOÞMİÞg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwidk/Dnk3EsMOeZyIsIiIsIltcIldlJ3JlIG5vIHN0cmFuZ2VycyB0byBsb3ZlXCIsIFwiWW91IGtub3cgdGhlIHJ1bGVzIGFuZCBzbyBkbyBJXCIsIFwiQSBmdWxsIGNvbW1pdG1lbnQncyB3aGF0IEknbSB0aGlua2luZyBvZlwiLCBcIllvdSB3b3VsZG4ndCBnZXQgdGhpcyBmcm9tIGFueSBvdGhlciBndXlcIiwgXCJJIGp1c3Qgd2FubmEgdGVsbCB5b3UgaG93IEknbSBmZWVsaW5nXCIsIFwiR290dGEgbWFrZSB5b3UgdW5kZXJzdGFuZFwiLCBcIk5ldmVyIGdvbm5hIGdpdmUgeW91IHVwXCIsIFwiTmV2ZXIgZ29ubmEgbGV0IHlvdSBkb3duXCIsIFwiTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQgZGVzZXJ0IHlvdVwiLCBcIk5ldmVyIGdvbm5hIG1ha2UgeW91IGNyeVwiLCBcIk5ldmVyIGdvbm5hIHNheSBnb29kYnllXCIsIFwiTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3VcIiwgXCJXZSd2ZSBrbm93biBlYWNoIG90aGVyIGZvciBzbyBsb25nXCIsIFwiWW91ciBoZWFydCdzIGJlZW4gYWNoaW5nIGJ1dFwiLCBcIllvdSdyZSB0b28gc2h5IHRvIHNheSBpdFwiLCBcIkluc2lkZSB3ZSBib3RoIGtub3cgd2hhdCdzIGJlZW4gZ29pbmcgb25cIiwgXCJXZSBrbm93IHRoZSBnYW1lIGFuZCB3ZSdyZSBnb25uYSBwbGF5IGl0XCIsIFwiQW5kIGlmIHlvdSBhc2sgbWUgaG93IEknbSBmZWVsaW5nXCIsIFwiRG9uJ3QgdGVsbCBtZSB5b3UncmUgdG9vIGJsaW5kIHRvIHNlZVwiLCBcIk5ldmVyIGdvbm5hIGdpdmUgeW91IHVwXCIsIFwiTmV2ZXIgZ29ubmEgbGV0IHlvdSBkb3duXCIsIFwiTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQgZGVzZXJ0IHlvdVwiLCBcIk5ldmVyIGdvbm5hIG1ha2UgeW91IGNyeVwiLCBcIk5ldmVyIGdvbm5hIHNheSBnb29kYnllXCIsIFwiTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3VcIiwgXCJOZXZlciBnb25uYSBnaXZlIHlvdSB1cFwiLCBcIk5ldmVyIGdvbm5hIGxldCB5b3UgZG93blwiLCBcIk5ldmVyIGdvbm5hIHJ1biBhcm91bmQgYW5kIGRlc2VydCB5b3VcIiwgXCJOZXZlciBnb25uYSBtYWtlIHlvdSBjcnlcIiwgXCJOZXZlciBnb25uYSBzYXkgZ29vZGJ5ZVwiLCBcIk5ldmVyIGdvbm5hIHRlbGwgYSBsaWUgYW5kIGh1cnQgeW91XCIsIFwiKE9vaCwgZ2l2ZSB5b3UgdXApXCIsIFwiKE9vaCwgZ2l2ZSB5b3UgdXApXCIsIFwiKE9vaClcIiwgXCJOZXZlciBnb25uYSBnaXZlLCBuZXZlciBnb25uYSBnaXZlXCIsIFwiKEdpdmUgeW91IHVwKVwiLCBcIihPb2gpXCIsIFwiTmV2ZXIgZ29ubmEgZ2l2ZSwgbmV2ZXIgZ29ubmEgZ2l2ZVwiLCBcIihHaXZlIHlvdSB1cClcIiwgXCJXZSd2ZSBrbm93biBlYWNoIG90aGVyIGZvciBzbyBsb25nXCIsIFwiWW91ciBoZWFydCdzIGJlZW4gYWNoaW5nIGJ1dFwiLCBcIllvdSdyZSB0b28gc2h5IHRvIHNheSBpdFwiLCBcIkluc2lkZSB3ZSBib3RoIGtub3cgd2hhdCdzIGJlZW4gZ29pbmcgb25cIiwgXCJXZSBrbm93IHRoZSBnYW1lIGFuZCB3ZSdyZSBnb25uYSBwbGF5IGl0XCIsIFwiSSBqdXN0IHdhbm5hIHRlbGwgeW91IGhvdyBJJ20gZmVlbGluZ1wiLCBcIkdvdHRhIG1ha2UgeW91IHVuZGVyc3RhbmRcIiwgXCJOZXZlciBnb25uYSBnaXZlIHlvdSB1cFwiLCBcIk5ldmVyIGdvbm5hIGxldCB5b3UgZG93blwiLCBcIk5ldmVyIGdvbm5hIHJ1biBhcm91bmQgYW5kIGRlc2VydCB5b3VcIiwgXCJOZXZlciBnb25uYSBtYWtlIHlvdSBjcnlcIiwgXCJOZXZlciBnb25uYSBzYXkgZ29vZGJ5ZVwiLCBcIk5ldmVyIGdvbm5hIHRlbGwgYSBsaWUgYW5kIGh1cnQgeW91XCIsIFwiTmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXBcIiwgXCJOZXZlciBnb25uYSBsZXQgeW91IGRvd25cIiwgXCJOZXZlciBnb25uYSBydW4gYXJvdW5kIGFuZCBkZXNlcnQgeW91XCIsIFwiTmV2ZXIgZ29ubmEgbWFrZSB5b3UgY3J5XCIsIFwiTmV2ZXIgZ29ubmEgc2F5IGdvb2RieWVcIiwgXCJOZXZlciBnb25uYSB0ZWxsIGEgbGllIGFuZCBodXJ0IHlvdVwiLCBcIk5ldmVyIGdvbm5hIGdpdmUgeW91IHVwXCIsIFwiTmV2ZXIgZ29ubmEgbGV0IHlvdSBkb3duXCIsIFwiTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQgZGVzZXJ0IHlvdVwiLCBcIk5ldmVyIGdvbm5hIG1ha2UgeW91IGNyeVwiLCBcIk5ldmVyIGdvbm5hIHNheSBnb29kYnllXCIsIFwiTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3VcIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>vOÞMİÞg
vO       # [input.count(item) for item in input]
  ÞM     # indices of maximal items
    İ    # indexed into the input
     Þg  # shortest by length
</code></pre>
"
"256510","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>Þṡ∆M
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJQIiwiIiwiw57huaHiiIZNIiwiIiwiW1wiSGVsbG8sIHdvcmxkXCIsXCJIZWxsbywgd29ybGRcIixcIkkganVzdCBnb3QgdG8gc2F5IGl0LCBoZWxsbyB3b3JsZFwiLFwiR29vZGJ5ZSwgd29ybGRcIixcIkdvb2RieWUsIHdvcmxkXCIsXCJHb29kYnllXCJdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<pre><code>Þṡ   # Sort by length
  ∆M # Get the most common item (order overrides repetitions)
</code></pre>
"
"256597","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>⁽₂Ḋh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oG94oKC4biKaCIsIiIsIlsxNCwgNDIsIDIzMjQsIDk3MDkwLCA0MDgwNjIyLCAxNzE0ODAzNzJdXG5bNDIsIDE0LCA0MiwgNDMsIDQxLCA0MDgwNjIyLCAxNzE0ODAzNzJdXG5bXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>  Ḋ  # Group adjacent by
⁽₂   # Is even?
   h # First group
</code></pre>
"
"256615","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>∆Q:[vt|`ċ₃
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIZROlt2dHxgxIvigoMiLCIiLCIxeCsxeT0xXG4xeC0xeT0xIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiIZROsKsw59gxIvigoMiLCIiLCIxeCsxeT0xXG4xeC0xeT0xIl0="" rel=""nofollow noreferrer"">8 if the format can be <code>⟨ ⟨ `x` | xval ⟩ | ⟨ `y` | yval ⟩ ⟩</code>
</a>. Returns fraction representation of all numbers if not integer.</p>
<h2>Explained</h2>
<pre><code>∆Q:[vt|`ċ₃
∆Q          # Solve the two input equations simultaneously
  :[        # If there's a solution
    vt      #   get the last values of each two item tuple
      |`ċ₃  # else, push the string &quot;parallel&quot;
</code></pre>
"
"256680","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 5 bytes</h1>
<p>Inspired by <a href=""https://codegolf.stackexchange.com/users/52210/kevin-cruijssen"">Kevin Cruijssen's</a> <a href=""https://codegolf.stackexchange.com/a/256676/96037"">05AB1E answer</a><br />
6 bytes without the bonus:</p>
<pre><code>{7Þ℅⟑,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7N8Oe4oSF4p+RLCIsIiIsIiJd"" rel=""noreferrer"">Try it Online!</a></p>
<p><strong>Explanation</strong></p>
<pre><code>{7Þ℅⟑,
{         Loop forever
 7Þ℅      Random permutaton of range(7)
    ⟑,    Lazily evaluated lambda, print each item
</code></pre>
<p>Bonuses:</p>
<ul>
<li>5 bytes for <em>Arbitrary n items</em>: <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7w57ihIXin5EsIiwiIiwiNSJd"" rel=""noreferrer""><code>{Þ℅⟑,</code></a>. Implicitly takes an integer as the input.</li>
<li>5 bytes for <em>Generic bag</em>: <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7w57ihIXin5EsIiwiIiwiW1wiY29va2llXCIsIFwiY29va2lcIiwgXCJjb2tpZVwiXSJd"" rel=""noreferrer""><code>{Þ℅⟑,</code></a>. Implicitly takes a list as the input. Same program as above :P</li>
<li>8 bytes for <em>Draw n items</em>: <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7N8Oe4oSFP+G6juKfkSwiLCIiLCI1Il0="" rel=""noreferrer""><code>{7Þ℅?Ẏ⟑,</code></a>. Slices the list until the input before applying it to the lambda.</li>
</ul>
"
"256717","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɾẊƛΠ;Us
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuG6isabzqA7VXMiLCIiLCI2Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"256772","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>⇩:ǍU=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oepOseNVT0iLCIiLCJEZXJtYXRvZ2x5cGhpY3NcbmFiXG5hYmFcbm1vMHNlXG5hYmMxXG5cIlwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>⇩:ǍU=
⇩     # input to lowercase
 :    # dup
  ǍU  # remove non-letters and uniquify
    = # are the top two stack items equal?
</code></pre>
"
"256816","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>50</s> <s>21</s> 19 bytes</h1>
<pre><code>ƛk-:dẊ:RJ$Cv+C;Þf∆M
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm2stOmThuoo6UkokQ3YrQzvDnmbiiIZNIiwiIiwiXCJkNlwiLCBcImY2XCIsIFwiZzNcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>One of the programs ever written. Luckily, there's no enpassant with horseys, so there's no bricks needed. However, I will note that this doesn't account for knightboosting. Also doesn't account for knook movements.</p>
<p>Uses the simplification of the problem pointed out by @mousetail in the comments.</p>
<h2>Explained</h2>
<pre><code>□ƛ # To all squares in the input


k-:dẊ:RJ  # Generate all vector directions of how the horsey moves. This is the hardest part because until recently, not even the smartest scientists knew how the horsey moved.
# This will be a list of [horizontal spaces, vertical spaces]
# [[-1, 2], [2, 1], ...]]

# Generated by:
# Doubling the list [1, -1] (k-:d)
# Getting the cartesian product of those two lists (Ẋ)
# Pushing a second copy and reversing each list in it (R)
# And joining it to the cartesian product (J)

Cv+C # To a list of ordinal points of where the horsey is, add each horsey move

ÞfĊ↑h # Flatten by a layer and get the most common square.
</code></pre>
<p>If you can't tell from that, I am somewhat of a chess anarchist :p</p>
"
"256841","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ÞD₌~aḢ~AẊ₃
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnkTigox+YeG4on5B4bqK4oKDIiwiIiwiW1swLCAxXSwgWzAsIDBdXSJd"" rel=""nofollow noreferrer"">Try it online</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiw55E4oKMfmHhuKJ+QeG6iuKCgyIsIiIsIltbMV1dXG5bWzAsIDFdLCBbMCwgMF1dXG5bWzAsIDAsIDBdLCBbMSwgMCwgMF0sIFswLCAxLCAwXV1cbltbMCwgMSwgMF0sIFsxLCAwLCAwXSwgWzAsIDAsIDBdXVxuW1swLCAxLCAwXSwgWzAsIDAsIDFdXVxuW1swLCAwXSwgWzAsIDBdXVxuW1swLCAwLCAwLCAwXSwgWzEsIDAsIDAsIDBdLCBbMCwgMCwgMCwgMF0sIFswLCAwLCAxLCAwXV1cbltbMSwgMV0sIFsxLCAxXV1cbltbMCwxLDAsMF0sIFsxLDAsMSwwXSwgWzAsMSwwLDFdLCBbMCwwLDEsMF1dIl0="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<pre><code>ÞD         # list of all diagonals
  ₌        # apply the next two elements in parallel:
   ~a      #   filter by Any
     Ḣ     #   remove head (removes the main diagonal)
      ~A   # filter by All
           # Now the stack has the the list of diagonals that have at least one 1
             and list of all sub/superdiagonals that don't contain 0
        Ẋ  # cartesian product
         ₃ # is length equal to 1?
</code></pre>
"
"256849","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>Ṗ'ɽ⌈Ǎ¨p‡↔ḢA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4bmWJ8m94oyIx43CqHDigKHihpThuKJBIiwiIiwiW1wiT25jZSB1cG9uIGEgdGltZSBnaXJhZmZlcyByb2FtZWQgdGhlIGxhbmQgZnJlZWx5LlwiLCBcIkFuIGF3ZnVsIGxvdCBvZiBzdG9yaWVzIHN0YXJ0IHdpdGggdGhlIHBocmFzZSBvbmNlIHVwb24gYSB0aW1lLlwiLCBcIkFub3RoZXIgc3BlY2llcyB0aGF0IHJvYW1lZCBmcmVlbHkgd2VyZSBlbGVwaGFudHMuXCJdXG5bXCJJIGhlYXIgdGhhdCBoZSBpcyB0aGUgd29yc3QuXCIsIFwiRGlkIHlvdSBoZWFyIHRoYXQgTXIuIEpvbmVzIGlzIHJ1bm5pbmcgZm9yIHByZXNpZGVudC5cIiwgXCJIZSBzaG91bGQgbm90IGJlIGluIGNoYXJnZSBvZiBtYWtpbmcgb3VyIHNhbmR3aWNoZXMuXCIsIFwiVGhlIHdvcnN0IHNhbmR3aWNoZXMgaW4gdGhlIHdvcmxkLlwiXSJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Inputs list of all sentences, outputs all ways the sentences could be joined together as sentences.</p>
<h2>Explained</h2>
<pre><code>Ṗ'ɽ⌈Ǎ¨p‡↔ḢA
Ṗ'           # Keep permutations of the input where:
  ɽ⌈Ǎ        #   Each lowercased sentence split on spaces with punctuation removed
       ‡     #   With:
        ↔Ḣ   #     Set intersection and head remove (which can be used as a len(x) &gt; 1 check)
     ¨p      #   Applied to all overlapping pairs
          A  #   Is all truthy.
</code></pre>
"
"256870","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>10</s> 6 bytes</h1>
<pre><code>UÞx↔tL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBVCIsIiIsIlXDnnjihpR0TCIsIiIsImFiY2RlZmdhYmNcbmFhYWFhYVxuYWJlY2RlYWJhYmNhYmFhXG5hYmFkYWNcbmFiYWJhYmFiXG5oZWxsb3dvcmxkXG5sb25nZXN0XG5ub25yZXBlYXRpbmdcbnN1YnN0cmluZ1xuaGVycmluZ1xuYWJyYWNhZGFicmFcbmNvZGVnb2xmIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Shorter than the Vyxal answer in the original challenge. <span class=""math-container"">\$O(nk!)\$</span> where <span class=""math-container"">\$n\$</span> is the length of the string and <span class=""math-container"">\$k\$</span> is the number of unique characters so it times out when <span class=""math-container"">\$k\geq 10\$</span>.</p>
<pre><code>U      # uniquify
 Þx    # combinations without replacement
   ↔   # keep only those that are in input
    t  # tail
     L # length
</code></pre>
"
"256891","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>U</code>, 24 bytes</h1>
<pre><code>01?ŀ¬∨:⌐&quot;₀*⌈`ǐẏḭ≈≠ṙ₅`½*∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBVSIsIiIsIjAxP8WAwqziiKg64oyQXCLigoAq4oyIYMeQ4bqP4bit4omI4omg4bmZ4oKFYMK9KuKIkSIsIiIsIjBcbjAuMVxuMC4yXG4wLjNcbjAuNFxuMC41XG4wLjZcbjAuN1xuMC44XG4wLjlcbjFcbi0xXG4wLjMxIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Utf-8 emojis amiright</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h2>
<pre><code>01?ŀ[₀*⌊×*₀↲|×₀*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiMDE/xYBb4oKAKuKMisOXKuKCgOKGsnzDl+KCgCoiLCIiLCIwXG4wLjFcbjAuMlxuMC4zXG4wLjRcbjAuNVxuMC42XG4wLjdcbjAuOFxuMC45XG4xXG4tMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Uses <code>*</code> for 🔵 and <code> </code> for ⚪, otherwise I'd have to score this in utf 8.</p>
"
"256906","<h1>400. <a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16640 bytes</h1>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code># 6 ""($11k_rv+'50;+'51;5 5 %$\--$[0=@$a a tqx\""  /*4veDhfdIg/\"""" 3 4//*{{{'F*Pi^5 6-di26qxy}363qx}318qkp16[.qx]""8=,k] PPX~_~)""xvyq""\(2#CO|""14""   #:9 {?63#k9 #  a   k zzzzkf kf k zzzzzd kf k zzzzza kf bfz ""'"" #\\
# 1""7""//['][']     ````      [&gt;.&gt;.?]~~)[aatxy iiipsddpsdoh (22)S ## &amp;rem      / \     &lt;!--     mxf                  5  xAegguEa&gt;2.8.7.@_;yiuFtMZWWWWWWWWWUUUUUzR           z      ]++(--[                   :_a5# 202ø!},{P_&lt;Ám/e!&lt;ÁmOe!&lt;É}M&lt;ÁmS15%!!%BB44,222%!!%BBPZPYAAA4D,5P[5?4-0!&lt;½!!22&lt;2/!]ss1]'[kkX""204"".â'_PPQss&gt;3Ā~&gt;1Ā~&gt;7Ā~v 7 999993 1 7 3 1 8 1 1 55                                         #z#1111#y#y#y#_#        {! 1&gt;?7ДOq#t#&gt;2/Wr#t#t#q#68#r#t#t#68#q#63#r#t#t#6v#&gt;#&lt;/Wr#6}#y/===Wr#7ЯOq#&gt;J7Д/Wr#y&lt;Wr#&gt;5/Wr#t#t#6y#&gt;-=/Wr#6|#&gt;6/Wr122! 1退           coding=utf8         @ [[[[""472""?]]]]******&lt;
# if-0//        nthteo 18&amp;1&amp; nthieo nthneo anet\#184 O@   R[+++]._----.^    p/112\11&amp;if -%*==-* (echo 335&amp;exit)else goto e&amp;WWWWWWWWWWWWWW#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW#WWWWWWWWWWWWWWWWWWWW;WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWR
#6!@`D&gt;&gt;if 3&gt;3*&gt;++++++ \        / 78""oo@"" , `'[]'[]` ;L    &gt;""082"",,,@_     xx-----xx       ##### #######     #### ##  ######     ####&gt;   []   ###### # ####  #######     ####         ###### # ####  #######    #EEEEEδΘΔΔΔΘΔΘλ
# endif/*   v 1 &gt;&gt;&gt;&gt;@::c&gt;&gt;""&gt;r""{\&gt;&gt;&gt;&gt;&gt; @ 0:8:8/_}\(*[&gt;]R 10G|'53'S  1111    \)\[ &gt;&gt;&gt;&gt;&gt;#####&gt;#######&gt;&gt;&gt;#&gt;#&gt;&gt;&gt;&gt;#####&gt;&gt;#&gt;&gt;&gt;#&gt;&gt;&gt;#&gt;&gt;&gt;&gt;#####&gt;####&gt;&gt;###&gt;&gt;&gt;####&gt;#&gt;&gt;# #####  #    ##### ####  ###   #### #  # #####  #    #
#comment -[v&gt;]-main=-[165]-   ###[@,,,""279""_]#-$y2222]&gt;252O @&gt;&gt;&gt;&gt;&gt;&gt;&gt; h$s o#&gt;&gt;&gt;326&gt;########&gt;&gt;&gt;&gt;##&gt;###&gt;######&gt;########&gt;####&gt;#####&gt;#######&gt;#####&gt;###&gt;&gt;&gt;&gt;#&gt;#&gt;####&gt;###&gt;#####&gt;#######&gt;#####&gt;###&gt;&gt;&gt;&gt;#&gt;#&gt;####&gt;###&gt;#####&gt;#&gt;&gt;&gt;&gt;&gt;&gt;&gt;9
#[[/]e]    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; @!:!8:6:2/_&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;_&gt;&gt;&gt;&gt;eeePs#v##########; ### ## #####  ## #### ## # #####  ##^##### ####   ##### ## # ##  ## ####  ## ##### ####   ##### ## # ##  ## ####
#cse                            2222 @,,,""361"";@,,,""362_"" ;&gt;# 23-2g_""01"",,@_       #  ????!?!??!??!!!!???!?!??!!?!?!!!!!?!!!!?????!????????????????????! :1*23/5%6E2 iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii            
#11 cbbbzcba aaabaca1tauaxayatbubxbtcuc 11         xx xx r3o5o8ox xx xx .-#351$#&amp;  # 329284   38839237137637028538937437711 37239942236736836636911 289364373   375393
#~[! R++++++] +++++++++\++++++++++++++++++++++++++++++++++U.._+++++++._+++o+++o--ox#
####################################################################################&gt;121 *1220*1211k*1220 2 2 2 11
 #{{{{]~*[~* -[&gt;+&lt;-----]&gt;-._+++++._+._@]+-}}[._+;;+;;+;;+&lt;&gt;;;+;;+;;+;;;;;;+;;+;;.._]}++&lt;^&gt;--[^&gt;[+[&gt;+^-----]&gt;.- ._+++._&gt;]&lt;[+[&gt;+&lt;-----]&gt;--._++++._+++._&lt;] ]+-+&lt;[&lt;=oC&lt;=oC&lt;._&gt;&gt;&gt;&gt;-'4o'6o@]^&gt;[&lt;-[&gt;+&lt;-----]&gt;-@@+.---@._+&gt;$]  )++$--![+++[&gt;+++++++&lt;-]&gt;+._+++++.._&gt;](  {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{{ {{ &lt;&lt;&gt;&gt; }&lt;}&gt;}[&lt;}}&lt;&lt;}&lt;&lt;&lt;&lt;&lt;}&lt;&lt;}&lt;&lt;&lt;&lt;}&lt;&lt;&lt;}}}&lt;}}&lt;}}&lt;}}&lt;}}&lt;}}&lt;}}}&lt;}}&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;}}}&lt;}}&lt;}}&lt;}}&lt;}}&lt;}}&lt;}}}&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;}]  &gt;&gt;\[/&gt;\/\&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;\[./&gt;&gt;\/\./\/&gt;&gt;&gt;\./]  [328][]  [[[[.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.][.].,][.].,][.][.][.].,]  [[].[[[
#* *#p 173#*
#`⟪`⟪\⟫9999 9 9e:
#{  
#/*9 999 99 9999  nMn MMMMMMMnnMnnnMnMMMMMMMnMMnnnnnM&gt;MnMnMnnMnMnnnn   //`. :-print(186). end_of_file. `MnM             @,,, ""286""_+1y2 #&lt;""67"",,@_␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋'''␌`297'print quit`sssMMMMMMMMnnMnMnnnMnMMMM''';201-1|&gt;print;exit 0␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␌␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋␋
#|9 e: 
#( 9 9999
#&lt;&lt;&lt;#//--&gt;
#&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=99&gt;&lt;!--e$P+++++*D*+++1++1E!sss \font\f=cmr12\f352\end
#-bqbqbqLzLzLz TcTcTcRqRqRq TzTzTzRtRtRt MbMbMbTqTqTqAbAbAbTmTmTmBqBqBqMzMzMzUgUgUg\␍331;""${print+191}$x"";exit;# ?&gt;\␍try:eval(""2?2""  );print(349)#\␍except:import inspect;a=9;b=2;print(not inspect.isfunction(lambda:2 )and 395or-a is-a and+391or'𒁁'=='-'and 241or-b is-b and+1or 394)#\␍exit(0 );'''ss';@'␍[puts 59][exit]'''
#= $1$10l0c01b1b0l0i 0r 0h0h1d1 1 1 0e 0y0y 0mo1d0y0e0e001d0i0f 0g 0n0n1 10mo0n0t_0t0mo0f0t0g0g0f0h0r0r0i0001b10c 0c0l1111000001_1 100|_\
[ ' ""`e```.1.0.6i]56pq[""``\/*]298 .quit._[`\']""\""put 294 bye!\`""""360""print bye! #ss['];#/\\/;print 24;exit}}__END__/
###\MoOMoOMoOMoOMOOmoOMoOMoOMoOMoOMoOMoOMoOMoOMoOMoOMoOMoOMoOmOoMOomoomoOOOM  e&gt;+@+-@@@@=&gt;+&lt;@@@=&gt;+&lt;?#&gt;;?\:-._++._++++._#/&lt;?\&gt;3-++._6+---2._#/++++++++++++++++++++++++++++++++++++++++++++++++._++._++++++.&gt;!\
'wWWWw;WW;(W;Ww;v;;wW;Ww;WW;Ww;vw;W_;WW;wW;WW;WW;WW;Ww;WW;WW;w;WW;WWWWWw;;;WWWWWWWWwwwwvwWWWwWWWWwvwWWwW\WWwvwWWwWWWwvwW/Ww\WWW ho ho ho ho // ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi MU ) ([])({}&lt;(((((()()())){}{})){}{})&gt;)(({})){}{(&lt;(&lt;()&gt;)({})({}&lt;{}&gt;({}){})&gt;){({}[()])}}({}){}({}()&lt;()()()&gt;) (&lt;&gt;&lt;()&gt;){({}[()])}{  #(((()()()()())()())(()()())(()()())(()()())(()()())(()()())(()()())(()()())(()()())(()()())(()()())) ((((((((\'; "";echo 350;exit#""; a=$(printf \\x00);b=$(echo -n $a|wc -c);case $b[1]¢ in 1?)echo 54;;1* )echo 242;;4* )echo 78;;8* )echo $((9999999999999999999&gt;0?166:244));;0?1??)echo 50;;0* )[ ~+ = \~+ ]&amp;&amp;echo 282||echo $((346+010));;* )echo 58;;esac;exit;#{IO.puts 295#';  print (0and eval('"":""&amp;&amp;(defined?A)&amp;&amp;290||(defined?pp)&amp;&amp;190||(defined?__dir__)&amp;&amp;13||""_""[0]==95&amp;&amp;108||109+1')or(None and(-1 %2&gt;0and 9or 247)or eval('5&lt;&lt;64&gt;&gt;64or 68'))); [exit];  '""';""#{puts 187;exit}"";'""';       # wWWssss {}#(prin 45)(bye){{{}#}#}#r""\""print(355);400#{}""(prin 199)(bye)) 46(8+9+9+9+9+=!) &gt;* * * * *[[[[3+4*7*@] ] ] ]sxxxxxxxxxxxxxxxxxxxxx
###;{e=1}={e:null};console.log e&amp;&amp;39||180;\
__DATA__='''  
#'  \
__END__
se pr':;@echo 185 #';se pr'-';pr 89+1/2*518;exi
ifdef ss 
1     ! !
2   !    !
9      !!
2#
#  
dddd d b ggggg g iii i llllll l dddd ddddd cc ggggg g ooooooo dddd d ooooooo iii iiiii ooooooo eeeeeeeeee
echo 353;exit;'
#PLACET,2&lt;- #2FAC,2SUB#1&lt;- #52FAC,2SUB#2&lt;- #32FACREADOUT,2PLEASEGIVEUPFACs wwwwwwwwwwwWWWwWWWWWwWWWWWWWwWWWWWWWWWwWWWWWWWWWWWWWWWwWWWWWWWWWWWWw W
jrzaeeaeuee_wuuwq jii_iullluiiiogr se_eeepaeeeeeeeeee;eeecisajjarpppppp ⠆⠄⡒⡆⡘😆😨😒😨💬95💬👥➡😻😹😸🙀🙀😹😼😿🙀🙀😼😼😸🙀🙀🙀🙀
👋🔢🌚🌝🌝🌚🌚🌚🌚🌚🐸🐸🐸🐸🐸🐸😂😂😂😂😂😂😂🌚🔥😂😂😂😂😂😂😂💯💩🐸🔥😂💞💩💞😂😂😂😂💞🔥🌚▲▲▲²²²²▲¡▼¡▲▲¡⎚¿⁵228¦ₔ₁₉₃2♦10♦10♦10♥☰䷩䷏䷏䷨䷏䷩䷩䷩䷩䷩䷩䷩䷩䷩䷩䷩䷩䷩⚎ֱֲֵֶֶֶֶַַַָָ  
밠밠따빠빠맣박다맣받다맣희맣희吾有一數曰二百八十一書之うんたんたんたんたんうんうんうんうんうんたんうんうんうんたんうんたんたんうんたんたんうんたんたんうんたんたんうんたんたんたんたんたんうんうんうんうんたんたんうんたんたんたんうんうんうんたんうんうんたんうんうんたんうんうんたんうんたんうんうんうんたんたんうんたんたんうんたんたんうんたんたんうんたんたんたんうんうん  
😊♈💖  ↨↑1↑↑↑↑↑↑↑↑↨21↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑↨↨↑2↨↑1↑↑↑↨↨0↑0↕→
😇♈♈  
😊♉♈  
😇♈♈  
😇♈♉  
😇♈💜  
😊♉♈  
😊📢♈  #e:&gt;*****[[[[828+*+@+*99] ] ] ]*****&lt;
😈♈💜  
😊📢♈  
😇♉💞  
😊📢♉🐸⠀⢃⠛⠋  
#-49,A,-1                              #
#-5,A,-1                               #
#6,A,-1                                #
#X  
_+------+XX  !X583nnn;XXX
_|/0110@| X X  XXXXXXXXX X
_|/00011| X X   XXXXXXX
_|/1001 | X[``]````
_|/1001 | /183nnn;/283nnn;
_|/1000 | /01-2%+?/123nnn;
e|/$001 |  ;nnn383\          #/ff*:*:* :*:::*{,-?\ 683nnn;}
e+------+101-2%+?!/ 1a,3*3a,-?/483nnn; :n@04+7*aa/
#+    +
1   *xxxxxxx
53 x+       x x     xxx
1  x*  xxxx  xx   xx x  x
x  x  x  7  8 3  n  n  n;
 +xx xxxxxxx +x xxxxxxx  xxxx
x  x   x      x   x
51  +xx        xxx
#  
1   *     x``   x  x
49 #+  xx+x=&gt;+  x+x + x B+ ===+
#  =x x  x===  x x &gt;8 xxx +++= +
#+  +x + x,_8=&gt;+ xB  x+x
# =+R _*=x==  x +===+&gt; x x    +
 x +R""12""+8=Dx B=xD +  + xxx+
#+ ``=&gt;8=x&gt;  x+~ x  x +x+B+
#  +====+x&gt;~+B+= x x + x
#D~+x 8=++&gt;8x +=   x+    +,_   +
15 + x   x  + +  xx   +  ?   ?@  %""18""_     !
1  + x   + x ++  xx   + ?@    ?
1 \+* x    +  +  x    +   +   *
1   ! x  +x   +       + ?  !  ?
1    ! x xx --... ...--  ? @ ?
x +   ++ xx  ++ ++     +
 +xxxxx  +     +
  
#= +
+ *   +
#= + *
#=**************************************************+
  +  +$$$
#&gt;""3""O._   +// rk:start | print: ""69"" rk:end       +
   + ; + *
$'main' *****+ %++ %++ @@* %-- @@* %++ %++ @@*
 -+3o4o#  +
  &lt;++""269""&gt;o+
^* *
 #+*****|
.x= #   +
,,  .=#
 #+ OOO       =#
 #^=
+`` 231 =#
#  #uuu#
,,..,.,,,,..,.,.,,..,,.,,,...,,.,,..,,,,,,..,,,.$
  
write 224;bye; 
  
 console.log 178;
  
~~~x  
main:Int  
main =248 
~~~  
literally, print 249
(print 164  (exit    ) )
  (  *)
begin write         ('288'    )end.(*)
print 61
51 outputascii 57 outputascii 48 outputascii quit
#&lt;&lt;&lt;##&gt;  
         print(85)
#&lt;&lt;&lt;##&gt;CO COMMENTp]] 
execute_process(COMMAND echo 296)#[[
  
T:251  
E:0  
#+IDRIS: main:IO      (    );main=print 291
#ppW&lt;#require""stdio""Stdio:write     (293  )#&gt;
#ceppp  ;  ;   ; ;
MsgBox (0,"""",169   )
#cs  
You can see an x here.&lt;&lt;  
  
&gt;{-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;  
&gt;&gt; R2
  
&gt;&gt; -1
  
&gt; 398
  
&gt; 397
  
&gt; 176
&gt;&gt; Output 3
&gt;SET x TO 120.
&gt;X x.   ;-}
&gt;l=length$show""\0"";main=print$[0,0,0,233,0,146,157]!!l{-
  
\begin{code}  
{- ;  ␉␉␉␉ 
␉
 ␉  



-}
open import IO;main = run (putStr""159"" )
\end{code}
ppppppppppppp;
# {{{ {{{ {{{ {{
#!ZZt &gt;&gt;END-IF
#xxxh  program-id.h.procedure
#xxxg  diVision.display 230.
#}}}f &gt;&gt;IF 2&gt;2
#}}}e
#xxxd
#xx}c
#}}}b
#x}xa
#n::=~147
RA::~322
::=
*/
#if!1
#endif*/*/*/*/;say 338/*
#1""""/*
333
quit

:e
 if -%~0==- echo 341&amp;exit
set/ax=2222222222
 if -%x%==- echo 330&amp;exit
 if %x% gtr 0 echo 337&amp;exit
echo 336
exit

#!rubyperl
; print 0&amp;&amp;339||340
__END__

#}}} }put$343 {{{


#]#47|&gt;print""""""]#
let d=""""""#\"""""";echo 21#"" """""";log 380
#[#[
























































































































































































































































#//--&gt;
&lt;p&gt;301&lt;/p&gt;
&lt;a&gt;304&lt;/a&gt;
&lt;b&gt;305&lt;/b&gt;
&lt;i&gt;309&lt;/i&gt;
&lt;u&gt;310&lt;/u&gt;
 
&lt;script type=""text/tiscript""&gt;self.html=""&lt;p&gt;302""&lt;/script&gt;
&lt;script&gt;d=document;d.innerHTML=""&lt;p&gt;344"";onload=function  (){
g=window
e=g.external
d.body.style.color='000'
d.body.innerHTML=e===null?334:[ ].pop?
257+[10,,,0,,,18,2,!e?77:d.clear?5:58,d.compatible?50:g.XMLHttpRequest?49:d.nodeType?8:55][[""""+[].pop][0].length-!!d.head-!d.fonts-28]:d.dir==''?312-1:308}
&lt;/script&gt;
 
&lt;style&gt;
head+body,text{display:none}
:,a,i{color:fff}*{+color:fff}
a{-color:000}-a,b{color:000;-color:fff}
: u,-i{color:000}
:after{content:""258"";[;content:""276"";]}
@media all\0{
:after{content:""260"";color:#fff\ 
}:root:before{content:""316"";color:fff}
:before{content:""314""}}
@media \0 all{:after{content:""266""}}
@media x{:before{content:""345""}:after{color:#fff
}}&lt;/style&gt;
 
&lt;attache&gt;Print[194]Exit[ ]&lt;/attache&gt;
 
#^^
#*RV3&gt;&gt;[0]{472454523665721469465830106052219449897} ()//~#class C{function:Main (a:String[] )~Nil{83-&gt;Print();}} #~
#%RV2&gt;&gt;                          ()
#V2-&gt;=359
#V3-&gt;=323
 
 
22-23-31-13-13-31-13-13-31-13-13-31-13-13-31-12-12-23-31-13-13-31-13-13-31-13-13-31-13-13-31-21-22-21-12-32
Take Northern Line to Tooting Bec
Take Northern Line to Charing Cross
Take Northern Line to Charing Cross
Take Northern Line to Bank
Take District Line to Hammersmith
Take District Line to Upminster
Take District Line to Hammersmith
Take District Line to Upminster
Take District Line to Embankment
Take Bakerloo Line to Embankment
7 UP
Take Northern Line to Mornington Crescent
7 RIGHT
7 RIGHT
7 TEACH
6 BOND
6 BOND
6 BOND
5 RIGHT
5 LEFT
5 RIGHT
7 BOND
7 TEACH
5 TEACH
6 YELL
5 TEACH
6 YELL
6 YELL
4OURfuorfuor
FOU4
FOU4
FOU4fuor
FOU4four
4444fuor
FOU4
FOU4four
4444
4OUR
4OUR
4444
 ; ;
set ! 57
set ! 51
out &amp;49 &amp;1
out &amp;56 &amp;1
out &amp;50 &amp;1
When this program starts:
There is a scribe called x
x is to write 179

p now 70 dollar off!
p has been selling out worldwide!
More 91 of this
How much is it
red down one blue up red down one blue up red up one red right two blue up
baa baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeeeeet bleeeeeeeeeeeeet bleeeeeeeeeet baaaa bleet bleeeeeeeeeet bleeet bleeeeeeeeeet
#
#85""""C""""Hata;re7^0::Prullasge&gt;Ex Cr Uithary,8,3""t""F :n^*2giogrlopstdisp[]!!48 ?\在ｕg=1-2\0C05+---&lt;?ML42yalet d=/;~ 16mb|&gt;^ 5:
 
*/
 
#1""""
#if!1
.int 2298589328,898451655,12,178790,1018168591,84934449,12597
#endif//*
#1""""//*:
#include&lt;stdio.h&gt;
#define z(a) #a
#define u ""e""//""
const char*i=""25 10 37 1""""a c #FFC0FF""""B c #0000C0""""d c #58007B""""e c #0C8302""""o c #FF8000""""t c #FF00BC""""u c #008080""""h c #E60001""""i c #CAFFFF""""f c #280000""""k c #CA0000""""l c #CA007F""""n c #330001""""q c #E60000""""A c #0040C0""""E c #808000""""F c #00C040""""G c #008000""""R c #800000""""H c #0000AA""""I c #00AA00""""C c #55FFFF""""K c #AAAAAA""""r c red""""g c green""""b c blue""""c c cyan""""m c magenta""""y c #FFFF00""""x c black""""_ c #FFFFFF""""V c #000502"""": c #010001""""@ c #090909""""2 c #000002""""3 c #000003""""4 c #000004""""HHHVahtdegggggggyrggggggc""""IHH3aixuEFbGGbggbryAEGRgc""""CCH:afyurbgbgggggggb____o""""ICH2akmyyyyyyyyyyyyyyyyye""""I__:almyyyyyyyyyyyyyyyyye""""K__4anmyyyyyyyyyyyyyy_y_e""""HH_:aqggyyyyyyyyg____m_Ce""""CH_@axxxxxxxxxxxxxxxxxxxx""""K___aaaam___bbbbbBm_bbBab""""K___________bbbbb___bbxbb"";//""
//\(
typedef int known,macro;int x= 0,    y[60];macro m(){0;}int f(int a,...){y[x=0]=x=72;printf(""\x25i"",!m?195:!a?124+x:sizeof' '-1? (1&amp;*z (N)?234:""\??-""[1]?218:67^*u""""):*u""""?37:z(0'0  0'0 )[7]?75:""\??-""[1]?77+a/2:77);}__attribute__((weak))int main (){known y;int i;f(x,x=sizeof y);x=1;return 0;}__attribute__((destructor))int g(){x?0:puts(""198"");}//())*/
 
#1""""/*/
&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WQTkTTX
 
 
&gt;import Prelude;import GHC.IO;import Data.Functor.Const;import Data.String;import Text.Heredoc;import Control.Exception;import Language.Haskell.TH;import Text.Show.Functions;instance Monoid a=&gt;Monad (Const a)where _&gt;&gt;=_=mempty
&gt;instance K Float;instance IsString Integer where{fromString _=0};b=x#x
&gt;i_= -1`mod`2+c;data B=B Int;_=B b;e=error""#//"";f?n=unsafePerformIO$ catch (f e)$ \ErrorCall{}-&gt;r n;instance Num(a-&gt;b);instance Num(  );instance Show(Q a)where{show _=""""};f= (^ );q _=r$ (d.B)?4;d (B _)=r$0`f`f 2 64;class(Show a,Floating a )=&gt;K a where{k::a-&gt;String;k _=show$ (id::a-&gt;a )pi};c=l (- x )`mod`4;g=[here|here&lt;-""""]--[|]
&gt;--W
&gt;x=0;y#a=subtract 0b1206;x#a=174;h a=a^x;r=pure;l a=length$ show a;forall=0;z|(∀)&lt;-5=forall;b1206|let _._=x;negate _=3=206+[40,58,0,57,55,26,16,3,4,-78,0,1,8,5,6,12-1]!!(l(""  "",0x0.1,1e1,(0`id`),k(0::Float ),toEnum 0::Num a=&gt;Enum a=&gt;a )+2*l  (do a&lt;-Const[1];pure a,h pi,h(0::Real a=&gt;a))- 3*(l$(pure$TupE[]::ExpQ))-(-q?6+70+z));(!)=seq
&gt;;
&gt;main|let p!_=0=print$ sum[last$ 172:[[b,0,170,303]!!i_|g&lt;""&gt;""],0!61]--} 
 
#1 """"/*/
#if!1
#endif//*
/*/
#if!1
p_;
select 192;
.exit
382-9/5*50
quit
#endif
p=sizeof(""   (\"");print'(''72'')';end !"" );main(){puts('??-'&amp;1?""101"":""92"" );return 0;}
#if 0
#endif/*
#}
disp 49
#{
}{}&lt;&gt;
␍
S\\
#&lt;2^2^2^7^MAOAOAO␍
#&lt;9^7^8^MUOUOF
 /._++.._#;!;.;_;++.-.&gt;@
#:  /
 \?     -/!  +++++++++++++++++++++++++++++++++++++++++++++++++&lt;&gt;^+++++&lt;\&gt;+++.-.
rebol[ ]prin either Value? 'disarm[223][270];red[ ]prin 221;  -_#.---.&gt;/
#x{  /&lt;+&gt;/   K yya+-        &amp;:&gt;g+$02y#v_""693"",,,@_&gt;10k !'&amp;* 001- #vk!&gt;2*+'P:3+'D'34#v({3d49c1df-3e97-4480-9ff4-81497478bd8e}+&lt;&gt;2+^              &gt;0  ^
# {\
''';'#{' #'}'}'
#@[[[[""272""?]] #]]******&lt;````(print 346 )#9)print 379#s()
#&lt;&lt;&lt;##&gt;␍'@#'
#ce:ss~#
#endcomment K`250
#nocomment outtext(""155"" )
#/`psZ283MIOnDrFe
#\!|!o51   ;         ~nJQ  p'34' \=#x=4;print(1&gt;&gt;-1&lt;2 ? 17 : Inf16-0|&gt;sizeof&gt;2 ? 162 : √4x&lt;8 ? 201 : 225+2&gt;&gt;1*2 )#p⟫try {EVAL 'say ｢27｣;exit'};say 237#⟫say 167#{{p{{}}}}say 235#]#                #]##&gt;/1a97*.;  /8a7*._/#print  (171)#s-#print(365-((1/2)*380))#s|# print(208)#sCOMMENTprint(""65"")#ERi521@&lt;? ? ?342;![[""172""?]]]]* * * * * *&lt;es9#
#8M`|  &lt;esc&gt;dggi2&lt;esc&gt;// :~-&lt;~ -&lt; ~-&lt;&lt;&lt;~-! `=&gt; #
#1//  &gt;&gt;END-IF*&gt;&gt;&gt;9#
# '&gt;+/*' 25  &gt;[};}]+pppppeeeee^*n\               \! 99              \*n*n*e*s*s*s*ee*n*n*n*e*sss*e*n*n*n*ee*js""(*)//dd""                  &lt;e 5&gt;1  *///         **/*/*/*/*/*/*/--\)∙226ｐ|_|_X222999612#</code></pre>
</div>
</div>
</p>
<p><a href=""https://tio.run/##5L1rc@NKdiD4saPh@REpULdIigRAAHxTpEqlUt2q2/XqKtW9102yWCAJkiiBAAsgJbIkVXR7dnvdtmfW09N2tB/j2/asZ9vriRjvxM66vWPPRNj7ccIxn/wDyo@NDceG@x/0nnMSAEGJlOq27YiJXUgE8nny5MnMk@dkJg66hj/6yU8SeLGnrr0Y2u6UTU1/yvqedWJ6MruzYLcNyy9ouiBgqn1vOBubztSvCgmmMmYbznBmDE02sOyp6WWZb5qsa9ruKcRrjO3OnJlv9hvg0xlzzFP2wOlZfYDApu6x6VhvTQ/i8ozdNe3z8fmU9dzx2HD6Ppt4ljOl2AJjTw3wDGa9Y2Z0/aln9KaW60BUkbEXjm2Mu32DUfKJZ/JMJQageseUZzWmzNgj1/NNKMHtmb7vYmAFAg3Pch/uP/74Uno1xz42AKmJbc4vFa@q7DPL9PqXc2js06N79y6H6uxrkuuwe1dRUvNsfzZ1H0wvwy@w/aHpGEyTK7J2ObIIxJyadjlXzl2OKkF7mlOrt1IORNyzPGhdI2hF1jMcaC1syx1mjifTBZN4@xu2HbWtzwyfzfyZYVM6Zzbuml6Y0J8a3tRyhuzUmo7YdGT5UT5K7U@Mnin1TdsaW1Ozz2wLMrmDAAqAdvrs2Fycuh40eQDTdewFZDR71sDCLCEeABCv1HRkcjhjYwGN7EyhczCD@YCGbYbQ0kIC0t81u7Mhc2fTyWzKALe@5RtdG4B2F6xvDoyZPc2yLsQBkSn8dGQ6QWcGcDKAOHI5Vq9nhJq57PNGv89y0I8Bj2OTWUA1QqvKdB3CmesB1SBViFEAjPo1r6M5hzaDJhq4VVbI5SD@MApBbA3bdwNkVlHDSAfGKrUZwn3quUPPGAM1@ibR9NMHT5nfcz3wwQ/T8vF0HZieMWW7uyx5@PhukjWiZpG9rhA1UZ2dQRMkwkh2Ytgz6CHxlnChfbwot4BNltxKVlkSyKLlWD7P8jBsy0wrAJHUXAUcMP41XYVfkWlllldhBBWYrpWSWSxr4BlDyzY5pCFCKmHnhyQa3HN5pqtlnnLo2gOerEcFlpheZsUSKxVYCe4VVtGgRASfZ2qlAL8i/ABaBdBR4afnOaBl34e@iv3tgA2MsWUvAugEvscKKisBRMBZBchaGSDAU9fxp8OP0Fq94rCnI6D4yDgB8JJtHSNHMiOmhM2owEPZ2VGIKyLb5cX7IyweyAeEK5RZCYovAiXygAJQVytD8YUcr4g/Mm07yDbyMRthW8rBDzAvAR3K0AI5oGUOiVmCH/iB52nA3DTgZBowJw0YiqaBW8ciIF0R4orQnMWAXiPDP4aCeDlan4gPXB3AqEhtZGQqEgkgQGsxHdqsyPLQGXTsDAWdAf6AS6nIgJeVVVbOs3KJAT0rOQZtowJe2FNU4KEq4KMiMGh/FTqACjipQG0VgKp6gQkxYqs6xkNeHfICadQ85MmDGxpOLeIP8kHPUKFIFcrUtMqyIwJuWgHqW9Cph2pFaN0SxAHdNMBVg@6kAbZaGeIxbxloWMYODN2WE8JAOkCrYJeHfgjEKAA@BBfSglsr6Zx@hj0ZGV3k2Dxnd4BZizgUikhGyJrD6sEzj9QEVHIABkcBoK9BD9BpxMAzHxVvqwCkieDNvkVM2raAf6kRhUpZ6pCvjcl0STa1SBhNFtNRFKbxMBeYpwUM0BwavUUUCaMvG0UuQ4s6hmrEb5eAcnkM9YG7ujPfXgKJHHmNijJPLHsZVqawvmn0B5Y/erfENU@FdE1j6ljHy1IKhWyMqEYsoogRK0ElPZ52akkwZQ1H6FrWRSthmokbNdAKyqpK6HXNwcwZmlKlHMOPYqYzbwqTy7LMCg/2rOEQ5uUlHDVL1aTJchlcIAxtXZ8KUSBSF8v0LJjCb7HeCISKKLLC4VcqSxi6hjAWRhdndgkkMZgJKjh3Daw5697q0cyxRFAnOvVG1iRMXN2YONa4VMi8XIz1DaLc23IuYs14teXXruWkkiyZFi4EmG@4dBmfrWFS@wxnKpx7sevC3OqS5LBknyknnB3TQLTViR5mXhvYKDRKz8BZGOckk@bUEI41lRkUAqKg6Z6g6EoT40oxPk2eXQ8lVZB0@qbnMUwL4q2fpWnWn3V9880MZaklXgOYt02Y3geGZUcI0DxiTEkIgGfSh/IWq2gPPHdMk80Yp1HbdScbRBaYtE8R0H331FyivpzTjcnEBskJwk0uuAEypwbJ3CSgx0vlCEEmzAcNDgCpKJA4LM/sEe2DqkNuHWSTVRSrTGvc0hHKnZhIpcNgAXHDxzzOzLarIOuYPaY3lL55omAIF7tWxS3EIRTEQJwKQHQNkJcRc8IignRLk0nEOwpb1nfHq1Xj8@uDqOojC4Uj@9RYQOsNYGo158YYpHqGojOMXDaGHsNbEFsC9Bas1gPWd53kNIJy6oEgC5WOakLCMtJkao1N0IBcyIItniekcXYnzLoL6MpErbxMKg/H5BKhZOEyoXhAPhbABwuIfP1ZD6mGZVsO9SAQk3yU8z1glTxMmHqs1TLg54FMNwm0PBkdmPA5ohZTEnw@2gPpu0cQUU41HR9UC19mFupg0POH7gA626kFdQeGBVmXsHtEBCRBFDSXe7JAJMcOND62mcV6kwmDcJiUoHvey5VBDHVfW@wtRNojUCN6M89bsPkEWsIaQ6ppzx0MoPe@NScjAMHGfdZb9GB4QiNj7xH6LjGY3mS1mkvftglpHFRMDp7@LBuaQHYQWgeooWKXX1ZgMqEqECkMhwu0jgGUwir0Jgsii5BY5hi4rozhfdf0qbO43nE09LEw3xzS0IBxNlgyozEK6NBLHVIs@sB5guGF8LFAYW1lsKigF3xsOjB0etArYdBD82Gb7rMBKNoxERZ1DaPXMyfToJ@4xM4sJybzP7mHMj@FSgEw2R8J27fZ7qVeA0mjnhOTZVEHQtQngSpiIK8NtHmJBI9I7eScxV5cKR5SnFwqXXyFaVYweCVuwGFCQwIVIGISsymyEuSOVm@EvHCK3IbkbRht3uxq9SEsXrw3ZtIgKhuxUYHtCLISBSEem2FI8LOvApInNsJqrARg0pWAG0Ab/ngNZDdC0u7HQ2XFkIEp3gR07DruGqhAzAguJlmNobagzvgcuYZhR52Rhou/0kbIsJcLTDiRwRw6mbgejAzOdBa0mkBNFutdgRKeiuaKtMzurE6tMGUkccKf4iwIGSa2AX0BhxiOVNCsDOAUwMS4kgw8z@UlxhCmUU@wAvxOifXzzgRzqeOYqJwZ3oIDgerB9AwFLZjlecAGT3CS4HNQOJnI1E9hTjD6feSsSA4a95cLl7FHH8y61vyyJt7DQPm1L5wYHhugEu6B0AGDKJUc@Ml0jcIpZyxKVNzJVKGs/C5CQkokQ5OnBqDXwyRxDxjN84XTS4krQ0zMMnE2HZTFNDgwI5fR2CegKlzGDtUH7DTjYxjX5KuxIUzfkgR3CcMIE4xQZIwwPJAzYBCCllmp9LsGOwfu4TFpfsBVkVAlUeV8VJbp9KOyAkIgLvH6yrwI3@uRQ4rNalgDTE41p0lihYAfSAnKKEKAogRzKwaQtMfjSK7hgTOH1uJYiosiaXYWCb8wAaQIGQuED6tnTTuBuHLrVii4bNXr0NlAmgK22U/HNdpw0VIGTg2JZZJGgkLkqft8imMjlYb6YuILjg2ITdBT6w12Nh15MOLIfyFAIiCr4GBPDgkbtPNj63jWv9zQDgZiIhFHHQhNVm8q1gSY/PloqF9H1eQKVUHrTSJVsfNifgJ9pfNSKDaoGCTzTB/F33qASqyFU4hB0FfXkohnDcKWHfpg0bMDkYC7YLBzbtQF9I@DxayIEWUDmSActFdGKgeCw4HDYU/3j@7Xg7HII5Wu5VRXAmy3Z9gUvI3JxTDvwwd3nu0/@9nOGhi21a1eDlCsfLmIU@1sLg2dmZKXtep2HMYS8N3O9bAx42oaUQiimeTOY6LSogeTyzwk55NnX7tMEpCEkBxUArjxd0mk4WlA6BK6hj@6NAmzYSYDRUZZwrRMesBCmJEDUcd4I8Tn6eztW2y8y0hNgnDEzJ4ZHEAYqDxwwnwyRl4SwMKo7oDPiJQXpFDLwc2GpSueMsTnY5SaLyNDonSsy3z85N7hszqBDdbVJEqi@FOQpQyvL0Oft2eggq9LA@wPXD2WkZeIozxNuK4lcK@3QuBl27IN8AEA6jqyyyR7HFbNHwHuB5frRqFSL@oB5CcIl@XKuDzU@7KIxvDAKa6HKu@6WZQilpNVFLR2xopiV6etXqFglvKV@LTVW5bZjwOljQGYB0K50YOoY1/CEHkpRQZidYD@84dXEPdJiARVQAox820mU1m@LaD2Ilks6SsHoKG5til/RhxPZGJaUZLh3oDc80n5jKU/nFvTVC7Nn2oa0kLp@/sPtLth4mDJmlYySGlAXRxnJm@Ae3w9H/qI49ru0GU7kIdLh2GBIDZtrOb@0HWutJCBgVjVBG4TAv/FhRtjAnON9ZYUR8oVV1f5hqPh@KfApdWijkQiChEohdLLr40TA8i1rPfzB984hElELeRykTtHF5AglofIha5eLJQCmAQFyQE@aysYbRleGe1hhBTbs8NKB4wuyri/jF4bSBxTVtamX4vSJ@4Vir92F5e6FoTwrgWOGMkePH768MHjw0f7n7emWqGw4s/nKkUgHJTXBVlIHnG64Wjd4UMTq4XgEjA2PBxewAVmoKCEO0Yz3wPGLWMSmSOwodfwzdbUJ@7ISfrpy5U5xVjptdPjXegRDj6eNMgIinbfRmXE4zvWOJ9j/xlNpxO/qigwykezrgxKq/K659rGUKF8MDHYtqKi6vLgCa5r@OtyADL@wuQ5@OIWiA4LWkE07LELygvteyNrYCkOnlatbGs4Al0YN8dNLy1HPZhqo/RBQwBdWYnqRgyYfEDb4Bm2k8i79ldVrcz7tZrT8ooYJlsZ/pB2a2CC6pSC2QpIkb7kZa1brVtsAVwaIV0GkmDyDi1y@AznApuBIEmrpqjnh8QhboHrpcgriEZvZriaC1xKKeTyJbVYUEAtAzUNZFYJ19yksTHtjaSpKwE8yR3QukGsFw78nuEM5J3AESILct9HUFW9@bLVctogoLduEW6499xctJtqO11jV7PsBOnTNei9K9XDvhsGQN8lJ3RNerIN/KxvXGVnfYNGV58p0/EkmHOkCXu0D4LUWxf4dd@Mjz3MoMQjlZ2VtAomfqesWRCyMauAN6SUAgMKZlroegriJYHQi@Ih9BzgW7EMbLmaEQlMi@kI@IfOUgfkSl@VcDFYD7jGKiq4KCxPFsDyKBEybUlHhMIIKnDCISAqSVCBUOLB@CRHgR8zibEy1Ptx6Flu0qdtGhStcMHWn0A70np3DycKH5copzBBR4MPJwroXzhPsFMziUv5hs8XTCFTcNQgzA/qYgSBNgaiRXEnOlwB/ZBy0QoBMC/o2rhyO1oudOK6A3R2KJBwwvUPEGIc2sAYQiUhM6/IPq8IL4lCVqt07LinDkLrmqwsda0p329wZx5uuVv9eN0gua7xNACNKhebWmhvvmv2@EIvz0y1AD3UYGNz7OJqBgh4xI1MqoLB9/VRHfVx0RxGdk7CTUuAL7HbB8BIeyZfspLGqMdBrz5kyamn7EvfUAzpLQyoa8Q7rHysiYNGPwoJsHrKghZqgkVYEpDcMSX6jJZ8MPJOKHEHXQt7lmjU3YnpXFY7uVKaStfoNEQyyfehzpJbW1vJarKRzIJrD1y76NpDVwZce@SSyIXpZHRRjiy5MLZJOTCsnbxohpDn6Tb2gTkKL2@tScpoVqt6O2s01eCp4TMNTQGUh9QSPgBOMl2vozOdFhunuG0EKkSs7gfYd573PGsSkOATkEm4Pz68xGB4eWYN1ePrKTKue6C3mijlprxkq5lrtVtnrX6mdZHMYu50zaiDigr8c5oay0PPnU1AdmzmqxKw13RTr7Zr3Xoyl9xJpcqSDQUZ6fRH5XTG4LROJU3oU6lWKwkkDajT7I08gjfPaul0RCjAY2CBomPbqaR8Vobyu@l2OpOEvOlkFmaGejIJdKE9T58qjYsSvBPds@ZAShiYMMvGtzWIR9P@GA7Xb5iT0cKLJ4gW/kDQx0X85ZEZPFmEE0mcUb/l@eMy5cpiQyh683QgX@P6IYpskwWfYASOaUtZOaAVTv0n0mDsTg3lUxn0Njk2Yye3kookwWRMMRwSVfuR5eMQNhzTnfnxxc61a7BYOoQejWbALMNTclnoVdZEMHsjlyW3bwN0Fm05IePH3TOJ78GFAPo9GX7IRFEwwv0aEHDoXJMFfJFOhNHCkEpIcNYTbg8UipM3clRajfKwHBZkDR3XMyUgCeQQ6BAXHQ0UGuHW@ANafLsy/QSxNKviVGaZwBHv2a5BtOXsOrYlNRnH8jtDzPLM7As28I8BsEeZt4Vn9pUdgTaKXW8EMwTUBjmxFrXWOIhQXH/Sl6dzyCqkcM6PR3IFE@TeU9bXNK3YKwyqYRz2CiD2CBoJFWMHtOwwSlIhMh008iFfmQqXCR4/uXvIl29ovscZHpfyOmO3PwPRNlDdnpnOMMsOoT9Zjju2gAxh/rfH9jPXnfKFBvBsWhziers1ntkGLTtdXhm6Nl/P7bo2rUZdl3WZfub5hm3wdbAwdv/TR6BuvDh6XpersUSKcTK@tmxcCl1fLKfng/i2J235hjtUPu@Y4nZBxHkrPHyKbCaIKGLELDh6Cm0UhpcwPBxSuI0ThJcxfIzHTkFcDxYyyBsFBgkrlBCPouK5uyDwTM1dYPhGNTBKp1I6LrsusT1TNQo/mQ4GK8E6BR9LyJrsZXCegvmR1BU1NY5SgSfC86kraeKAipQmOqa6MV2J0vEDNnK0ufkoOgcxMu1wd/MZSCy4gweTvo1yFehNqCXwo6QmCPkT3Kgh1o3bf6wHcrB/RYqFwTaReGohsUUDCCY3BUUaYVthwfJ7jYaQ4wbbpj5nq66X5Ss7uw2@0Y5qncc1SoVvDGx3AMRuoxae@duUDEtKJqNkBJVwgxxUTTpbcKWq0UkRn9b7BcpSE3wFNJq5lpNa89Jh@zyp@ESGARNbrflHOe1zUI3w0Ob2LWVo1uiY1QZ61cKYZCDDdhdMAokPU/G1894I@AzLzFdJCe0zcwau3Zf4Rh10GMZVPGyg4JxEdJg0ODNsWl54jpQO8vKsyF9jR1CvwL3UpI2rCWKHViNAMHzO2Plx9uScNWHKO5H9iW1N2@xCnrqdUXBYy7l8vJXLoJ5nLHwhOGZTZ/vPPv60mWtzCMLYwM23Mm/FeXhKGgRnEJTwODu48LDQ1JqSJECHISysryoDUnPapwH0AQYvoMaigoIaIern5vmyLgMTlOWUiZj7i3GWmekLeWAb06np8D7Hd0A3k5tvVQXF1Kn4vWDfo8pytDkEkqmFcYBijT0/unv47JkMPddPJQ9xE6kKw9HojUBA2VTpkJLxylfZR/0k@wjzpHHlQIChBtpHJ8gPnboGnR70DygdecfQ9FIQmMb9nx4E05YbZeQSWkAgPPLVmxKNImApMw11ImDVtfi/cLiqFeBZhR6fIUoCuVO3qkBbKy3PHOuN7MNEQ3IrJAmUVZgv6tsp4mLbajo40zfG3WvQsEhohBo0m0x6C1wOEous3a7xYwiQFhUwb4jUFUVqCjpMX1fDpq9DMIg0BCHIXn/HXjZzUqWd2V4His63Befgef1jcBHCKmjfXFvsdorG@5WBzHHg25Gcc78gdfrSSyBVts0dIl/2puThmS1iOnTEa/Wo1upBMBhkyEpoNQgrErKERPCWQtBnKZ44P@g8mI0CUml2FhFdQ5Kz83OiIdvWGNEQXCrjjXERap/AmB66UJuHwRsKcemARmtwlgXHbEsQQzVrdbMYY7gIr5xckk6lEzGej0uHlnPs0pZT5OrkZLWAEmGUe3xsX82J52DptpI0woGn1TZh54@7A7qtSUA7L8GePgXQmn4gC4MQaSjP6EHL@2tKXj3HslJscEKWZlpwM@nNDSmlSpkSD7pda1NSIAIeTQufa5IBk8L@rMl5WQ1fecClGJiPgHFx7WVZ9ctHoNgK3YOjvMHzv3yzD/S/2jojmChw8TNydGDqxpaSBhsbK8iKHrqtb1i@Rj@zLYMIQ66bQPYMD6pk2JFjPWg6ByBJMP2PcVcjaHHom3gDqfGabsYx55uS4XN9Iev29Rxgmb1NaS8dCeNF0Q4UKHZ9IgIXgiyTMhHr4o1gzvkuUEzFRjZ2M1LhuS1GnZm3@2g2nfE7CK43NqI1wd91YzNImSsYXdVU@OH5a5rcM45nfVeaHA8jObW4Ju2y9rQNLYE4EOxId9C5vvq8gvwwevjclGw5tSmn9LipV/jOzJ9IXdLC@9xHA2F8TQmeze@bkljBO4SRYzPVLJtuH9gTA@jQUYIDGQoed5ViRLMukdk2uguUQUZfvpdFhxuA49R7mUxO37C7PZlszo@aJOWvVNbnnss9To91awQKP1Ir8VU0qnBwyPaGVoXpyhobtqT1Y86NzHzd2YgrSaNtVcqD73/QSyDXdnKckHoz2/CWrmu6@BKPcBth04p0MG08tXouiAMTppZkVQunjtiEQSwzPJ23LAhPNNMtdgLDWkfG8I0WKXKtZwFub4qnVjf0qQ9gaPy0KJ7JjXUS2d1EqZ57ir@N4sMIVFN@Xz@jvV2L1QcwJ8nu2QbM4xung5XFQVx8vKGjnlq@Sbf1hD1ei@i0Z68NXx0C4bJffBnvpm7tW7brs@d0v45AQw@owO/rO3SclpbhSLQYHndfw4PCYxbLBjXsoWsXy0PFgNvGVp95A@T7wfNDOVzEoVT1Bg4Vij@uowbPjXz9WPGOb2ogemfSwyO2Mec1U@w6NhXsvWyuHSgGuHG3vmb3cmXKKSt8qW9DwbjlcmoswudPMXVsIm04dUwWJE6DdIcZKmVwTD0uYv80peWvL63/YUzpCtjSTZWINe6xbcJkRfcrTcq0nPolc6i53IezqIE9M2fmWkXjSfe1iW/3X6NkfDhSuaAa28FKPW4O4NsxUaq3gWb4QVjjPI2@a5mJYVs982ZRZpWpTUD6nqDq/BQcT9FxNcfQmU1WWnVFO3OeXU@y0SQc0m5/BTuM@bJ8qHyDpLQin/sm/a7VmLiGh2fU6oVcLhcIMLEdlxXPdZqUHuV9bfH7SsEUsix5mRZ32byYc30ZRJb4KciNLEjbpNhT4kpFcSzHnC7w/oHctOu69pdpKWCq@M6yC9qqRKd9r2uxK@JO8B4LWy5d@Ljg0R1sWrTgs02gWwJ9UGm@rtHjW0If1JoSbnqOcUNq1Xv98k1sg@mmUvD9WlwT4ud/7c2yZLAaospluXTtqOMSqts1bYM/5sX8dfAqsn4tvFWmEWzW4uYu39JdbsUnLjGlyQKIZfVBSxmZY5O810j5Rh8tdQSPjYnmLv42Rc9Ns6fMD83epgQTC/iCg/eVPeSYsDR1HdCvpnjUEPUUGw@zBqGbOHC467eWyA/GxtDkpmOu45TLBQs8TcPVuqVz/dJFlZ@g6UG2pU2QzV0CBtWxufDD51qAjxY9aNfZ@ObltkuDv4droB8w2jedor06xTojd@SMzBE/uh75Ng0O6I9TburnOtQB6@EIT9NNJiun7OP0tF3b/hB6ImvkjNJ1B2txOsT3b/HlsS8Fl7/sHzxuXLwzppx3oGPjqBmZM5iXfHfqTkyJfJuS2rjQw@@beGi4Sf3TriBdq@cDRcLnTwv/Rt1yaLjTyYQenYk98@lGWSV6bfomuWnAj6bQuUzXG8pv3XFXDgLl4NwKbYGvZzFda9ob4XvrvGebQ7fbG1k3IR3YylDCJR/u/SDdFSljMekuBsu2BeT1FjL2l3o8/jk@Hmxq9GD1iE9rkeMaeWXdCh29GS5NjOOez1dD0cWquCAcG438/fEqvYFffTOzpkugsbNM0fIu35ZAxybcg9MTGyUrek1jyYaDUxUbeykJ6SiQS2YOBB51U7Gr59xiQ0zX@W0TQvFaEkaxcylfhtzB2R9aHbRi67YQvtK/Vg4trZ3knNFs6F9lmHy5vg8iGt42L1vQcerYkjXMWYYTPDaRWbMVfM8Snh2QuWbmtXsqhWs3VSidakuGa8GjAw9outnGNTTbmvj8zqTBxq244CwT6OKX9ws5bRbrlemgYfrmgG@BoOsmEXHsengSGWQQqYc76biCjsycC16ccTnuEJi6ZLNl4jDtJrFl7TGh9c0fzZnS54/NoYFnrR9aUzysuaZXUJddd7zoRthfnxm@9fUZ1GxTZ0OjEXwb0otbF0DfGniPjKHVu7/SEBGSAYGDk578sdL9MehqW5yOLB9PNEWOaxamsMvxToy9rgN6w5qUl9ftI3sZywHE38Rcm3rd2ro7WeALawtyXbesbk1plTV4blIdNx0CuxaJ09l4MvODx3oc6MxUfBV6fEzh/qkFwKU3wFrZyLCn61eqY0uuIIUFk@LSuUka/4Zlu0P2jXKOgdAGQhgK52s6zh2Ynp/igRzPWdMTqewP3PbEhQ7J4xV7A21r4nsVjjW9fjVnOsXDOeETK8NnDnxDQXmId/n2l4UgHa2nyMObZf3l29E3zO/Q8567M69nojMyeRJXC4JSzYPw9DG@0eGiyZbTuJbWc20YXuCw1w6ZnuvMppI3c66dFYrXzgpVNHgV6wYs9fXDRy/S8d5Ap7VvkkJDk2hL18YDA5c6meWAILaZj66mDnWJu9xU0zM6KnxDnn20J9Ujdn3XXafvPF3ABPLBChMw/9n4rtnDbcMby37sPnIdF2ajCTDK8TOTmx1YOeixPiNme4gv1gN9@jcW85zAbpiEuLRhTMwutK@9dH3IXMQB3zWmxoapiNYGSf@LXDf2Fcvumt5rWvSLuTeptKsI3TfnpFts7jB8DErTXo@LxLgetzJGVnZs/InrOvxO3DYHD/XR9VwFpgK6ffhGuYwH8VfWBdbqZ6tVfXLCT4mYfW4XY1NdPbPr2vx@zZkkx@JnAgzPMn3lIZpZoLBinkkgffnX8pDStTxkqRqBJHti@LRJv17VWIJU51/iCNDI8Hou7oQFjmtO58RsI9zApqOz/fzgQBcIPweOZfRmgb3Sm9Cyx90x3TYqDLHWfGZ28a2gLhkUmRrzq43JV4YCawqxE12RDYKQXeGgLrLUU9BG0jdPWyt61CpVrQndiFNv3C6nwzqSY5m9twaumrlEr@Xa9Eo81Fl5TM4Na9WxYUSryIpBL9uvHUmrR9dAoLFNaTryQOdXptctb4eWXtbsh8zGJm4yr@7CbBRdXX9ElXXX76dHzNUzpcDcIPCSyPQglw@l/Y2SJ4KH/yd3PlFgEu4U86H1E2BdN@/gA/IzzwkeH9IDn7r@dGDNnwDe@BbAJnaC1SpAFnjwkYGunU2VgNZzZjZffRjGzl2N@6SOSWQMWpJsYtdTUzKdE4ls0c2v1sjlL30p@2hAeGr2pcAUA@40SA/D97@iZMFzzQZqnDfiYU9V4YSdF/PB8c91xD0NOQPIW@5Umvj0VCb@0wcPnxzJE19dOz/tj/DtiCty3IptB62ciy1JvTa82H4nP47Wt/ypcue5Kh08fCBjgg305jsaEjxwZ27lsXHdMzQkqxgbtSCMNafrBcT7R48eZpavaLLUwchzx2Y6Hn3w/HkW3zT55Pna6HjuezA6Bu58Y/YHh6qaXtN9Xzi0O7iJe64paROkIxO0UeiM97lpmBuFq547MftHi4n5KUyeyMH9Dyy@uLGSj40Ta4ijkFU2EooGKqvIxXw6djIblG3Ti56b2vPYmiC37NFD4Y@Nx1FQctAVT18vPVy3439ZimG54CTCl8uk5q721rgpY8Xw/76Iqaq6ic7PjQG0KytsbKzVBOv2h2335AO2ks1AeZGiIGkKvUqybjxHXpLGwLoVvOHyfBAIzu7GYzDXAYiCi2sH/KnpLAxHor2s68SLKuTGQ23XJvmG@QEbUtEJnxO0l752jy86Us9SPXKmbyj4yItlOTi48@CmDM8CWl6f6uPHL9hTw0c7KNcnjGNsfgDGS8notYTrVmiEb@N2at8DUNq18IaT9eO5yp4bXt91FvObN@HoHVSc2sm@cQQLfZTItK25tW6u6vF1rafrjxndVDZ/icNdrMjBcfs4AaD33/4XqprLkfUjfKo57r2hZcIBzlLoMhZoUi8edfQgYg09lFtkCEiv1UYfmnM8jsJXg9cp9Wvnt@I1c18pvXk6uS6ufE1c/pryrsRhINPlnHoNwMI1cawgR9EPXft05MoHhmf6a84fr0XouopUrqlIJcadA4PttLEYuDeL@PjqQvBY21uPzKmXn4zcrpVfW4f9Adq5ZI/QXvvV@OA4heHR8ZahG7zywf3ryzudmWsLemS8XR9BnOZ4bRQwQXM0o1cirkavbpB2QeY1naHFTTyyO@70kHzXKGbRG8/rzyJYk7uzyWaMgTfiVzEus/OVhJ@Bzuye@uwOvhq3FNPX6P54Pm59@CaZlkULg2jp9P7Rfti7njxXtFiJSyw@f7oSjC@PTp88j4V55ny@SemV5pt0yLUxy1IfH@VXit1tvDxZQ6zN7xuBuAH8OHpulIM4s/vk@VWWgOrbaDq2w5hPDGe5YrrSYH13Sm8aro18upjTMcq1LT3ip9jWxXm9NcErij1MyJYFZftKp4PmmDqdTb3yyPyc9h5ADGJTLpZwoIHhJXOeH4UYUpaNA9U9Xgo/K@g@n4wsZ742arwpD50iTb321w@Dffbcdk/Zw8iq0Cb2oK0HbpyYzibmtO5lRamiXy@F6ZdEqk3twj@gEjw2NcmdTYLaJZ6BByKu4yaY/1lPuRd6PtXSN6b/5HmY/Oa0B7aL6/d9aza@OTGBzWRuTuhdw/4uA7RuTobfGzkeuZ5zc9KwO1Wrd8wPRGLrg1OOFz33A3DoDgY3Jzr03ZsTPZrZUwt1lvVJH7szGy0IrIs79IZrwxu7jVZLrsqbItGguz/y0pvj8VykO/NBB7Ii5hlllF5b05XAsM/Ew9C@vOnIjpu@BPcTl30NLcmvIcXbD2yjT@5tSre6YTPDLX56I3jp3HSod7LQbxzkb60heT5k0DnW@Nq0S5N/DzzX4b70pulxaf5vTUn3Ddu6kaGFBx60G44@4ITG49mJfjPXAgHh3uY2@3QxX6qbyxj@6j/MHPEvV/jZwPAXN5XBDRT4cvh5kVTKgQ6WXv2WW9zaAtp3T22jfeNtsqwAac/P2VZgzQAixNA@QmC/Ac2gWs7MRAMM/AtP0/o2FFOvq4UK28OPp1WZmqMy8ZuQFW5tMiysybbPAtsE1ap6wbbqTKyKLLAOERmP5wbQATCaboZKMelYZdtTiNkOLRsw@pYPO2e0ICv10EIu@GQlbuOlFth@AJy2z54@eHr4/Gj/6MXzZq59EdiGCGvhOFBaaIHmI70vQuUDuoGixz@HQDZJbCiOvjOEC7l@WC@G3y5brVp9pWrLSol7mGf7zHEUhcxjKNIF4CeJvDSKRXEFgjjssMbUQIFllCq3VEEGN6CNOGiRyoRGq7LcuoInBigt204Qf/lTfxSLn4Os4gchseDAgj30xKHr9oMSfZPdfIUl3tt/8PDFs0MWIrjsNadWfzqqVwr8AwfcZA@008Ci88J1lgyyJKGt6vXkvSQQJiknWZUMmtDHBaCjQ7KQOmgKJci9w1LbBB8omIwaRfkv31QukjK@@pKGtMkQqSQUC32eOsrW1hY7gk7C7j578OnhM4b4H96lYCQRgmBHaE3hz37Y55/nCa2dhZ/C9MakYZC1KCFuUSU0M7K0hII0p7E72fxBTPocDtkbib7DE31ITBDoM03Qb0/JVuolI5ZpsivHP@AZ2BgNC6IuFH7SA3dZ0V4o8i7Lt9DaCeIwQPOdq50dD2aS1VyZ7ePXPvGbogZ9KwpQnzlTbiIvMJSVgJ4mRzwny7YJWf5lKTGWMLm7BZ29a4LyyXzHgulvWmWvoSfiTmaVW8ORpEbySpYQdJVcEiossYRX7H36SstT3v/yP1OGNQbuKbi/E7jnuTvg@8XANwD3L3H3SwU72lX7oEtc4gihWeGgBhyRiP5I@9hHTh1ugWhJODRjGjJWZo2hmU6I6picl8DvEvDjJZxU81NoNOhu0GKB5SFenum1U2jXuKoo2KVwQUSmWdyc80PYl@wbFwvFvKoAktJJCJA@SDJE6xIcYDpdhWEinFiT@itQsnd3d5mIq6JmvVjjLatsOy918VWE6DakFWDWBOSaDPJAlmUOiGsE2WD2yahpzIrcK6kmkXH1XZiWKB6nL/Q7ASFElgJicRqZ@IWLOX4Pdwq6QmCnu4tfkI19rGo7ACSpMCeRKy0Kgc2ex@4Uug8M0uXn6LjNHnwJgU@BaH3W51@JJvPY2B/lqyNraWoi/CpWMNZk5AEclJ67PJvG21b8DEE8RxBVcV33bb5krWnLaSu8bzLopj9Y05kdcP@CMtzQZ3m9969aJk5dtiuMxGK3nzsuLv/eg8qwlKZouqIW08sq5fNrqxTUKCgGqoPmz86hOGBTwDJ6pvXanfj7B4cPPnny9PkV67uUMnk5GfD9xm6mJcnZZjtyJOPVWm2SO/eU54/u3AsbYol0McaNgfEHNVGvq8lyVwdBLt8SvFy1dRhert1mjD/jdkQu46tr16FGma7goea@RLn0po50j963vVy4Vl5HrULhOpSW8JQY6ANuLOEKqqn02UWzDbqXk0he7QlrBsLLhLyDgwBcLX9nW8HOfrVyWLHo@@1H@FVMPz4W9fVjUdzW0bgj2mqZusdL85dBQCwiVt@wGGCRgqyESTeOvidcSF8aadX49@W5Vci4zbsYwsXcdRSPgToKP1WPXGRpYjqwrjwCvci2ukJoa5BbWQ6NwUYGlrmdwFRaCL6VxAtOBR@vn1fnMh3LTaWR2xGsLLvOYHMILy3AgEbp7ukM9LOn7oR/O4OOX901Q9czF9jv3RlfrjXZJ7MxpBvQ45lJW@HAuSXIDJRMRqhyWQq4RGCveZ5Bi9hQXhOtNgcVl8f9QmqelkfmvG8Ngben0lngaB@paptFNp2x0mTD2UmK1GbLVrh2KH6MJjDiZP9Shr3nSwSMpiFbTt@cp5KnyXS1DeVjePL0s5NkWlzXl8jAeGBxu3/Z0niEfkm9npMY02B0hma813GLSuUql4Cwy4C5xcvww32VijzyBfoQax0l9@dT7yE4QYxIDcbGhKVmDrcWKjPyplopJ0tmFKUGt0TssEyGFCp4UITMKOeAXHz@ThnOgqWUOn6rF0J9p4@Pt9aENVVZboObCkmzbfyg5gFIXGg/Ny2AEgxZqgS2jl0I1AzAiA8SmXdwyIPxkBYeZHN1TTR9X5B2DF2kCdWaNW6x2AdSVyVHsVKpBg26yhUrDHrfVXYoKwD2Cp8L5XqgbmBIDGgG6q8sJJaM/CrHS1C5CY7I/cACGaCTiFkPDw2TMYC1tO3dG3n4Sx06MFZAPqhWXxzd65TTisgiS2ZDz@rjjjb/Bkek4gVfTYNhqqwkTda4RvcxZkObsR1uKg1Nl96jASNeYqmJOBkCu9uhsuwv@6aqXtvrg4xBK0DKPE4AwRvfnRAc2vkNV4bWxK1n9j/5SQKFjdS2qh53vJNMspCrwU2tFViBfbTdkqTtZq5@e9sALWr6Zt4CnVzZyZ@Yd0eD/oOh0hJFprO8ouycnZ0l7@08tV4WWFHqW1rxzXxxoRf1N/MLXS2/OZ6oxab8Zt4Wy/XscZs9ffr5u867tDg/WbwRWyktcfDkXFTzqPInqhV2tlfUE8cVUD@hXMaO2Vu4jgcM/8n9th9zG@juDkCFTYos0WoBxVWxJCpKM9mGf1L3X8HFFf9mQ27Ie@1379JNw5jOF8yyrInf78PPHYEEqaWfM9CXbwGn5xkU1qInaVB4jeeDq@sJBcbm@@ZwODs0GhoaA5Bvd2oLa3Zv@ugbn4XXC7zePotlext8wTuTSUlSc806RbVjFBL4LfA/@9HWRfbsaWf3z741VswtfDzBx3cuHqH7uVr4aGvrozt38vmspmnc/fQbT392f38/fzdbeNos7OWl3Nbun/7J1pam7WrKVtv31XayeXz8uajl8qL8Z7@T7Dx9@nXfb@j/5zffNVS8leB2wkrAJ@DSmQpOvJfhp6KM9aFX4m0CermaWNBfJxGGn20xtbFX@q/fe/ImMU00NOUzD57TxJtEsZzgTnCATw99J4lGYheTFS8SC6Ver4Oz9F//HeRvfAJwMGaxC7dGIYRVXCQaUp2ynCcaRXComgbl/t/f/GYMQ84m6iTGhddt1oRLzJc0ca8N1w5duwJaiJVyihKmc6ajqekytXxLvYUeCzzwcEz81IY5bSXUcp49uQ0pnzUzmUxb7khwyS9pkUhRVa2lqreAHUgf7dTr0g7jNnB1vXAL7finaUlr6MKMad76bOVKfPYPcq0FU/upwT0TEsWt26/uNhpQJ72h7zQydAUDicZUqSy67m2RZdmrJKggzfYrVnuIUQ0xV9bEbDZ7u0NJ53OklTSfhz0JL35PJKIQHLLsUlgDR3ubReE8F7ual8VBr02XOMTrz/@3P//@n3@P/r5Pv/@IJnSdvjVQdiDRCQyJBly3q9VeoyE2PPGshf4G9KNctVwtK52LVmqn2Wg/Y2ru4/NkQU8@Z8j9VSyjlW41KX@Dim0ExaO/kVgGN3hIIx4WRPDEFADPgFIssUo1ckdUY@xSOphag5cNpOZJoy2hQFSXmmqx0JZ4ruZtaBxRK1XETjshbS@A22jthlbQnrDbDX6x0bbPXMRG14phRQJ8G8u6LWOWvkY8KNEIszWWab5sugCnipBoNpW2SfNBI0T09lZ1q1wtVjWl09h81ZY58KKkpmk@9RMnieiqsaAfhvRMRD0zFvYy3hJRs7CwA7OVvDekg7a6fq0bm4ZRc@lFVawFLq0jshr0D02XtGFHzKliNNioF@zBtQV/9A9X5MX7FoUEwZTk6rXFquqOpiuFj4qHGs6vN1xxlAWYJ1iv2@2@7XVB6jCMrtEz1KkxM@bGwph2Z915d9qb9RgfNAGLwH9Pdwtu2Z0HXllK6AV1O3EL66RrFa2Mn1/Uy2W9ouklVS8V9VJOKxf0ckUv5fVSCQDqJU2vVPKaphdLerGsF4t6sQLhGqQpQhodIZQKekUXEu@aW@wZ52ttlgmvVubG64UsdwInOVz8SZI7TwiJf4SroWoq24EZLwc3EPPICVo4/qmqwBIgup213@003@3AkG9kdondthtSgCU85M7tdka6uGiCu1YL/ncbkbNGF3dB5doXmczuywbIMy8bzQyAfBmAlCVGQOVOo71LMVFhQWlB9G4bJCIps9vcrbsH9JNpzEnJvJssurfbAHh3BdnbtzMyuG4DgMY2DPF0JrMtSVs42zaD2QcStxuZsFaIQwrkj7Ozn/IHqiPwj4vdi8ZFc/fiYncX/nfpfhE8IfRi98o/PZbXhjTL@DbynlZTabSUVsB/2uCXlQaGyEoLHA14QrqmrpXbOOOh1CK3/9v8l7PLexSCKLdlwFpI7LCdBJqI1RM7QuLV@y/@F/y13n/x@yiBMvgzq0LiDBmFsoP6a4WrsXBjziOHPeKXA278hV4MwYDGIwx0@M3BLS5FeSWzKt9FSKnlYlrGKb3jDjpodUZmryDpClNFLspErVwUOxl1obHErlgsEQv9mStXMpn8J6@0SinJl37QbMor3/cfxbBc4gmJa1pOldTzBv8yCP@I08@su/7Jz2y6hMR5hZlVoE@KccIICehHCUWRpIaQaOyO8b0a3HyRUM89qX8uvdiXcGHGmNLWWo8vOtQfHNYrlQZqPeb2Uxo0O3d34K7C/@EW1IK1BpC0Naj3xiBRtwZ6QWvhVyQSUvcN/j18i3/sqId/z97gHzt6i3/PpvjHHnXx7@gN/u138e9ojH933uDfo7f492KIf62v6LpaE7fPiDAZtaJebM9FIlAtwfYara9MvUWVPokmansa6JHB0lVKz1fSidZXzHnPnEyrwRojvuRk9qY1o16pdetakDQ4oY0xsuWH35wPlhSrGkvj4qdeKbiehMcJ4QYBGb2iul7yx9/91reS9XpSStLXrPIQJnUxUZcSgRdy5jkm@JVgwA@a2/eTtdvJrzRpWaFQaTcxsg0RQqLOttVtNWfnejm1q3bBYbGcx3Kj3Ejtq6R@5UyWW@QWLDd21T64TPjLgcvKDVhuyHJOzoFkEAuuaSc3RdcAHkP4GwAgD/4sPKneVXM9BgXZKIrSh3vVDubMnXdaQpMlmfjKBP1ZVuWcXLTa@K2xpvjqVUvZaWuVMpOxW8ud5qtWsi22RPz@hFbJs@7C3Gq9EkHgyIm8@2MIS/g@KOW1hNJqKZzwQC5qyYuLTufw8d1OR8GJsPXIfbL8f/JkHPde@z9@4j564o5d@H/y5AkMXrORuZ2BKeL27TpMGcFjL9Go7bWqNPGEk09C2d1rNXQJ3cUMzCcahmW@5LWECM/GVktInoJSdAr6VC0FWtVp7aRWOyXHZ9wLjg66MTD6Pw0cwZMg1CKd7BSuEwJLPnSeftaKXNyhfHYKQZ8x0CWjf1Ba495/gH/rv63/Ry9YmqWa7XTq7GI3RVca/9Lps4uzi@DeSKdSgSe1C38YAH7McnbRQCclOgNXM5Vupy8ueBjcU@ldDrABxew2KO8yHUxMiahIKpbfUv@wTyg6uFrJGgNGSOsFhRyNo4RYY8byrFCrNc/l0sDngk/r4M63cU4HMtI1@q7qdreptv/0d@jzSXtpSlTI12rqDuMeLa/VavnQVyrXauXQs51KVa5ejdyeWgSlKp9Pp2s18OyFYHPghbxN9i7D6qwF9/atW7yQsnZ@HsLU88VMDs9o1WphSQUo1vSNXsD0zx48oS8PAaspJPCTX5yVpHL03TKcCJJiVbx1K9U38XWI/t5@@tYtrZI7P49CJhMIUleCOp2@5XU6GK6fn4sdkc72VArgz5XPz9VcJaMm066XeowfVYWiUpLKPtIaVGoFmLyWL0F0gEBhd7eYbzSKeQgplpNpPCfAWTzgmxSTNTFxRnVQyyXOAcUaBkeqGAxkHyfas4sEtSbLF9Ip4KJpEEEvEvjnIcPlE12hkK7lc7nE2YXIE6uVCk@dZvliqpypBH/1rTRrgJjF/1BW1DP5ndLObZC68c@fr7uQJ9fOzLp6UT8zq7hTcFEDUcF3QUhC6z3mrVt6BUhUztVaQqdzd/9ov9Opw1yGohrcMJC4u4BGjbxktXab2lUtFxg0IA@UkjAlsDJQWdF2CmoZqSJYA7TGBWQQuMq3xbYEjZ54EyqcWlsQCBoUlNaHi/VZlw3xYkPUQJnFbLqYzXg83Xu9KJHLryA28lJeUlLDEDO6hGDY6bxPwqz99OH@weFRVtuVWEK7t3@Q1Z6/uJNQ0VtY@ilaR/@zw/27T15AhqcPD/efH3784NPDF08h3Genyyvk8sF9@Yy71vhP2WfCa@@tYZqGOTPNzulsdvqGvbasjgWtZ8@gUu7QY77ZgbpMjGW9avDrWb7x@rXhTehi73/w7fc/@O/e//Z33//2t9//9vd//MX3vw2/H8Lvu/z53X9bKeD9x1/8i999/1u/DYH/EX5/BL8f/fiLX/sm/5H/j@H3n2Nhfxz8Yun4TwBYv/jjL773Oz/@4pd@HX7/Kvj9@tXfL/9o/e/7P7f5h/m@97vXp/nuv4Pf73FYYdrv/hYPw@eV9L/F0/3Sr7//1X/P//80@EPnb7//1T/GW@D557/@p//5/bf@g6aV//TfvP@5773/uW@9/7nvvP@5f6q9/7V/o@bit999//0/@Ks//L2/@sP/kf5/SPff@5D/97/@z//if/2L//0v/jD4/Qh@/x5cP/qL/wBD5W//4Af4/70/@Ns/@gH@/8//@m//4Ff@9hf/J3L8Bnf8P//q3/L7X//yf/qb3/zOX/3om3/zKz/6m9/4g7/6P37p//q1//TX//3v//U/@xYG/saP/uqPfvEvv/Xtv/y5f/mX3/piw/3b196/@IDwL/4RQj4czw@B8yH1@rIhX/xU@Px9qLEsBfoJ9O5feP9rPw8d/FcZe//tH@KLrvDb8P9DTaU0P@S@/w84tKt1xpgcuOD3K@@//V0k0f8AJIL/iF7fiTwrMdzznaUHyPqbazL9wo@/@Je/Q76EWW3Q1hNO1mWtnNkBhWanUgkm7GBXCrL8/Cq0CEBQ0neQQ63EfQd52/sffPP97/zT9z/4jfc/@EWcraV8JbufldQbtvQgYeED0mHC4oekw4SfQ/mdDK3qSZnPwbf1eaGsO45T@/zzz4XOuYJvVN8@Z5/DH/s8vBiPwjeug6gwDsPxFWwG4c1Xr9q4DxwLU1QOXNH4M4jCY/pQkqR9lNlTVI1HmefKNs/FahCgl/VWDHVlMNipwh@DW7W6c5aV9log9FHWC8EMq6QGULcUphpZfUc3IKGS5@lY1bmdy2dKO4YBKnAG4WZI5tkJZbCCzuaZcNWbzYPV7zkmmu@Qc07L4XxNHO4C3ui/xFiZ6Yw5/L8msAwtlNOFX54NneQI8gVFcKdQgGIy0UYcFYzyFmHIQ2iTncrNVxjWYD7PzEHbBgeUkIGoOyD31@sZzFjnKIKXV6ZRZoRKJlOHemNunifbKSOI@R2CAjnrmWess1Of84wZhNcIyZERMOiZqGpiply/CwXW53cZwkLgBPbVq3qjXJ83ENw7Tp3MPHOHcEJg9cy88Q78dYIJ@YTE3XeASrmeyTTKWCBWkjdPtsMbqUCVo7pnWCZoA3jiuxJ7txn7SFTLIt9j2UKC8dR4zyxTY0JIDvGtzE5QHfoPnfTbIYJvUVFBKYzH75FMvMfFZEwAcCVJlmUGPzy8sMduQ/Scg8pQsfDIcAgZ6hHUA6IAhgtRGSFD7ZshD5SfqO986QuBYWW2t7eFREPUxScykU5RmHdcpRdH8CwlqjJVJhYrIgab9BZNiAvkr1H520nclUwyDph9lOG/27d32EdQTXouwwQmZXQ37yY4lN1MRtQAfsPNCC9B/xGgnxKgc0Ge12kXNCNks4zJ9QTGsSdPngRIUMDLupCBbq7pKvpxM242myUghyxn5Ww2eMr0pAA5cMgUGzzlbSTuqWdNTaZp@RqoaTWGQSyuU6mga2Pgu3fvoFXocFr1AWi5LDinpuXLFAkB3KCVbS/C1620fEXgSwBMLeYZS9FqMlxphu8VpaAjpQX@UgNHI7xSSa1cTlJKoL@c2gkPLhZV5AD8BS56v5kVSitewCbuxWVBvvaMW/HRm1Mcv1S5kA4jD56wgyePHh0@Ppq020zAr9vOpmZn4rk90/dTGLf/@C5//0WrFNOJZhOpclTVkCMJh9UcdtTMg7vPHjyvMk6loM1SVI8a7WIHdKmoQmIy@Ww3EZzzEvETpa74HO/VJSlSWgW4ZTrREBI9E1Ug6Hz4D7@a8Mgf3nHnLJXLimJWLaIKmsbdWMDjZ90ZQwPa3NoWDEJ8K0be3SUKCI0zKbb5gwEN9kwTuENSycH0Sjl0lLhDLRUxAT9LyXSh8fzwCEAfPWGqlpOFxudsLiNq0oXQsOu26Qyno208lCi2cmKs9tvNXBb/NF2Hu5ovZtVCqb21ZZ9JWFCL@sMZni69AO@ZhBX@KlxM@KrAvgpBcEEZeGSUBWvpD57UgkOTaNQyxU9OimoBRnBawP0ADk6YxK8aDJzV7TQhsfWNb0xZo3H4@K704J6QAEY0YuG5QcnqyyOZOkR/5pkUO2Ssb31q4Vdq5b7lT2xjAaMSqJG4uLgYAKQH95jW0MjLc/TxftGjkC64L@aGkHCq1fo7NV8Snu1Xq@90TRMgQNhR8GDiFnQVOt@xo/C/mg@F6HpZASaoiiI8dF0XqKMLVVNgdIbnXa5el3hv1fMqHeER8MNHxryuRVeQdv7RMq2e42kxBiLYcOqxXBhX4nGBryiQD4iGpxbxBLpQC8Z97tYtHRdi9HwuWnGhGrMLaJttPa8jxfGtsHYiXwq2mkRRbCcE25yyfh3ciRbc@KKipiZEhj7kR3o5JySaiabw/9cr2EXbnTT0nLqrTMBpgDO/qxjg7IKzsKt0wWmBs7KrWOCcNXQ1t6vMGgITdrkdbIZmturi1Jyj2X0eJjZ80x7I@JJYXaQCNHE3@K5EI8zY6Nf7bm@G53NqfdlyHNNDoxg8Qz4v1lwHLbTWw80rYGPpM2FYPyXTHYJZH8po9MtzDFvoy123v5D96cLG161s16snQfRNhhFL6CbIRLjgt6fr@WqTteWJO9kTtEIp01RzMJnhTy1nteyWuVcqVftyzzYNb69QLZSzfXyTK9ha3CvkqkP580cP70@nk2cmvd61l69ABjSTiQbt9srVQqHdbIpipknFtJu5tsz5mbS1BUzANPoSPHHn0Ze0chsy9y2vXk8m93RVk9SqnitfCEvCIc2xhg0Bs2awZlmk@1nAMqqO6wB3qmaNrHVGVKgOBoOLnbPM0iMYZxL3AX0uJCPbPYu8NSmWrspmWclaRkKIMQBynwV7qlVRK5TFWrO29JeKYq19Idwem33LwLe6Wrmzq7mKwMU51AQU1GLCRdVz3Wm1aw5cz1wm1NVimJAjdDVBXryIimvlsMSzq8UVY4nmZ1eh5AviRZQrREu4uAC6c2ID2QMj5w06/dxUK/n2IfAs6D67of1zTJZ4@VJI7Dz7VG80oKnP8iUtX8gXNL1YLJQ0mKAq@SIogDk1V8wVNA2g5CvlSukC@rWivEvQ503ZwVnY36v0gZeUUeUWipttln732LLPyrrE8Uila8AJE@@ExEfPPtUajc3KaAom9E81qVHXCxVw6ejSdMCYCZomabqkq5Kq4/8NDg3/Pzy9Bv8a3iGXrglHaLfsMUy0IEY47CHaP5q67MjFL@AN2R2ztyHFwcigs@kHnuv7f480dwznmEfdtbix8CjqvoGfAfXH1nS0IcWLyRhNnpnePxqEw3EXEER@yBPcgZtnu@66BCX24umGWj6KPs8BxODf54Dkzx58fP8o9jw63D@4LxTZnSeP7156FIJEBfbw8N5R5C3x2DBrIQLxs4cPH172Bo/8kxfPBjPXw59w78mL/PIWBeGrz0IertVEUTABCW7oJaEVZBDQCgul0KEK@MLMLdDUbwXOQnHpzKHzM/5et@VHL3DwV/yrwlH4srfBkNV2Tdbjlu1w6YCszgZqhVqqCMKEOe4pK@VY37Vtw2PuYLAFgSMDX1w1UVi2beyJWPSp69n9U6tvbgmP8B3ZCugcA0JCuA9AxrMeGU0B8QdtmMO05jDcjOvaM5PNJmxjIDwwCJ2eNRzBJHzqhgmErmEw@H3ZC/Kb8Wt6fcCUl0FhV2Lsq8kFUDDLBVE8EMX7xtSoeWbpZa5aferBZGz4Q7NxOIf@yl7A@DG8Rbac1cWpeI9VnZc72hA3d2x3gtqNP2mCkA/q2V7rr3/zh3/3J78yrAOXaeUOcgVcmNrde/Qwry0MLv8ptXegMY67542XrFAFdgeyMCNxNxCJZVKjtEq5UK7oWjlbrpTzBbVYKGRVLQsqa6kCqkVOLavFcqGiZsv5Cogm@QrEFkCf4QK1EkrQyk4VwDo9e9Y3d0kTk0egcvENWfY2ZaRZwoj8MyaakEcUUEuekmGAHasOsypTc0wvMYBosB5L3Lt3kLt3TxTvoAcPtBzkRLGPnkI5lyvdEUWTYg7KKGaJLs9TRmux4pR7crk7QPYZB4AfWhHFEXoOi7jOKIoWeg72793Dcgbo0TA/JDvmMdxjh54SJHPQA3I@AXgTQYNk@7ycPCF6iB4sEmPu8ZgDiBPFj0N0MOYZT8YB3A9rur8vig@4Z38fYw6o2gWO6NfQs0@XKHrggeEgikNwDD0YiKLYBScOClHsgau3MCBsDC78FoczNURxwcmDBBLFOaU2esei2AnDsZhPA2wKSN0qeVRe69vkqeCfKGoh0phMjzy6KOYjTx7qdv/@p8Zo2jeH/Fp4/NmDmt6/rxvWfHZ4r/vxx93hsOst9g8/foZRBwf3QURZzLzusBtk7HbgciHXwX3NOB4vLl9Q6wedTtWw10Z9rdPJG86lqM6iYyKGkOsNYBZcQyxo3DmAqIP7ndvGug11AthBfjCGZxevO2N43jG6PCq8KIqe825XrGH3V5RWSkAlAnfGcTgeA391smOj57k19M/rLJdFMWbRLObaNYpgY1AGcrULjB@k8G7g4lT6bNGc13Pt@rxeCo7CDVJia64VLDG7Nd5TK4XqlrGnavnMvIq2SdxBkiUldY@l1Fs7b1nqcXpPA8VAbO3tSWJTbe9parlaLL3cmYliuor3Pb1UfZvKJXOM4S3dLLX3SoVYjlIpYyhatVQC8QxoMoVJvotLQJ1U6tQ0jtNpxJaWGaAKVFe2oHpatUFqnp3XOV5ska7N62qN26BnuSvA@vjBk1lv6noc5BDAzfdyVTyFkRLVSlkEBBQllU5HTA@0fmG5YvPZ14@Oj44@JzGwEayAPPVM5F61wPvx/QP5wZPQh58qke@heOp68gFyrZUYLqeGQUegmMj3YWIFJS8Mw3dAPdeWD@kEI8i4YURoLU0OzIbLR/dX4Dwfuae8ZDShUSPbs07PZPglF6vPjHoDXEafpQgrZqRPaUrvNBr1Tn1MViagimGurzH6zMkSzAOf4x4Z9qDsZ/heZBDRqecuat36PDEHOJ06k9RXY7f/Ssv0an38gMud@h3MXOvAs1sz66bnuZ4IKrZYG@w59ZnjGwPzqemhyZoHT7ZBwMCXJVMDZqa3WesQUx@g@nIhNTzmLDF7PBunDKnRTa8G4TpgFIDESX09rPQZvb/bqYviRW1QZ6mXkPQN@L1tlurLd9J7@RrQ6Q7rpCEo92rwasA0VszXSP1IISwYSkQfrLfB0vXG1@DBYR9Xq4BN0NDHABULA8BWnyIg9cS6qPXqNktJbM7SRKR8bVhvYvZzvO1KotiWpOZ5W2hI0mdCA8ZrbZEw6v6sS9/@YrmuquWKtTmEqaV8bQTNa7yc17z6ZOaZNRu8waIgf1XZqAFRgXYA5u156v3PfzO9KxXqPKxGoM5RGOjInfq85qA1YegYdb0OEZlmPpcFxR5upSzM@VoxqxazejaflUoYChN@tpCFQNB7QOhI2SmRMTGbm@dkNauaajaVe2X1X6WzxykQZYhoLJ2duofObMwgBJoK@yZ54QnkyWg7NuhjfZcZuxJ1VmAZNawYUH3EJlZ2hKCemYZNOdJpiek7KXs7hWm2j2aTw2a7Wj2cT74OUSnpzV4xU8pl3qbTtdRWuu6bb4RGTWgge6FaT7ag5wbrpcyfjZvQyuBSS1q12exiFUu5rJ7ToXZW53y4KzbEdja3VVShiS4YsQ3G@UZ8CRElnmXYpIPyuG1C06kVrSbItJ6nlzWpohR2Cjm@pshzCpOAvSElWaolhq/lp5LJkpZMppM13CjZEoOFbuBpxM@SwF2Tt9Q9EYQxsSpWNEywZI305nUuxA7EsQsBJUWWB3X3TLg4u9htCF8RnuP7tLvaS/wrvXy0/wT/vgJBFfCWXz568eTFk3sCU@jQq9xJ1LZqcq1TA48kN24LiSpjwElbgc0wZYuxL3ucNrPbeMmfLXyTA@AK9IWAJmvTMTfTQl2OfYr2KPZYEupgeOOmpuntplaCuQ@4aZhU09QaYNFJ4LsicgMaY34G@O1mGvgq59fYYmFkpHAB4Fa1Mcxs57RF4qQjFis6fyexoeaO2Vby1g4DcUZiiZPjrYa2k0k@reqZ5N2knk@cpFrbjYy6SCpsJ6MtBrhbj7u@ShLSaebOR/pO8kWmWh5mq2oG7xrcq0kmbSVud7K30xVfoCZhiUsrEvv1/eGz/fB04P5Bo6wtgldQEy87YrkUoNjaBpJpmZeruRsw@b7EZfeWgC8aJBNnSZZIXsCfkLhNr7lq/DVXlohedMXd8mAPSc8XWTpRSQe@UiXhp6INnK8kbyeSuE9S9f13CepS4VuEX3ulQW9OOG4YACoerr/BbFso4BZBQnk18b@hlfVHD544d717ppBobZ1vubi1w2oR@u@cT77O2AQInGStemJezwen9tVGQ1J3NTTsV2JVmFAGalHKnTf4kGlQRFGDmPc//@v5@S7oQEzLqeDXtEJGazTUHQ0qNnn/xe@jiaazw0/3H7IkLvP/3Z/8jlb6uz/513S4L3lBS/@aXkpASnSqxVLi7GxydnYBF48rJNqJK2ca2kAfRTUqpR0ZaqOUDXB0lASnI4hQJTWd8KVEcIizWJBSKVXR0jt6OZeGmPPABFtKy5XBG@6TUZBYLIjpxOEzq6Cpt3f3oGZ7el6rbUFbqtEryyz62zX9CiqUj16dMwaeXqM/HFoauRSFVd9Ju@@YtMve4RbVO2mLvao38EyGii86hxszO/gqJe57JhsZZSfJQPVijeZF7aKdoZ0dUlxf7jitS3RobeF7OqtBOw78mTs@/ZkmeSnAB2/oM3de@2JqJ60o/b54dZlu12SFBnSVHWX5OjbbCfdr@J8ktdLvf/7XNK34d3/yy@ed887nGqivlUpR1RI/@cnuzJn5Zr/xEwBwjWGeUAUlKRQt6KAjUl0Zt11sBbkih9wDrXnmoJjO04eKLKquDEQca@iYfVJkhRMUy6hlO9w2ZD9FyXbQbkeWxHyyxZauCUIoD3Mx3hv2sgSD7aDB7WY7LZwJX8UomPUZqAI14atLUBAwhnne7XV8e@ZN6D2nFOVT21l2C7JACV9Fu5tbZG8kmDIk4J3KztWsHGWfqEYiHBubvo9WPGG2E74KWYKvEtgLNjHQNA6mtByYo2RMQnhSRL8JZbehbJtn6FBoimrPE2QZx45nckDUF74KUgtRwQJhhlm7kKAGbOWrQACoQyoAbLXZLtPT7MzKZGpLE6EX@D4EvvdjhGY5BMyG0PpoBibMXMN0EAQqBn4HG/tF0MIgS8YCQyAcBj/VUAclBbOTD@VDspvzwaAAFtmoS1HV2K1bS6zqdaufZlQjhH9sTXDZjdrBWY8rAAsVvI/6VTHL0PhqLQyNuh1QPEPoQq@TuNXVWiwrE9F7IQjw/8GdFnvkpaaiiBpWIGgvPip6QDLIjGTnbdhju3WmaqU0i5DvAe49QoqMI0Raa2v@kax9HkZeAIY/SYRfmQOmdRRfygz67WW7LAxk@hl@4gut83FmENhT4fb3kPk9mIa5o1xQFcum1APLA32KjluEpj9TuprGbEtTqYQHvbGg5Rm@OFBI44NyYWoGTwNNWAblbJHprZ4LDepPXIdsXpJNLnxrA3oE8KjAXCBHe@ac4ichg7ahzHGMfDIViD0fMSYbni4aN6K8eHyh64HeHdImy8yhzHrjPtMqLEUdjcwaOhG4NGUihLsgliONu7Y5BpSemya9behXFWUIotqsS7YdH1nQr0b3LJiBHF@5ywmsnFrHlnKEttkld4AvJXJLOQmU7nD48fMPgR1F23WPmW0dm3yFOrViZ8hnoJiAbJ0Fyi5/QNgqntnR9Cyuj6hZngp@JXiUuLOcjeXdSi3SV5@6upXqYIue03xjQavY5onhxOhL17kQaOT@wg8tlZG9LfDLEcs1AxtF9SRaH4mMbwmBzbU6mfuScedjkhITYmirDJ3CxDNPGOrWAs4xwDR7odUfHMVQ26/SBEBjD0YWmjCdelW0VQWYeP1UD4ZewOAd9hHTNQETckNygdE3gIFNX1@FDnGQFevhT/vQMDIt9yNfgdE57kMcWkkJuh/mD3s3usm87LJ7s60AHE46VFad8WERegoxD44O7M9U9S2ILAKGazDZSokZAJsR0yIHHeW/nJ33doF4SZVdhZRlCCEgNUAhUcFAloM2KmPfbhQg4o7h8w/8BAZOT09PZbK6O/Ms2fTxe4a@6xi2MhlaIBG7ytQcT4Ivx1s9ZRLCXbok/hlTeTKa7M1Rrq1Xbi34UxAGfj04yJRKDvwkTo4n@Lm@4Zgs9KFpPJ861D2LPvXZSwXnqnj/09rZs7D/VbH/SeXkBQJhDMHMs4tsLwvAst3ecXZw2q8FESc0IAE4tKIZBqItbC/0jP3QZU0GUQp3inw0iurax7SBDJBEvpC8LJrXMEy5CL2Bf2LNIZNjnrJ9zzMWKYpPY2rswKkFiT1sAdM@xYATP35wxg0zW/Pmor2SfR5lh0ktOj7hofk94ex6oNxKN8bPefwc4uc8fr4sNCy2OW9zkQyDLrA62OvRamuYEsEswjQX3KL1MoYggzzOVA4CUy5Wwi7g16tT7pDe3AftWA87BvSJCRDcTCnNl61mq@345ulOO6MMobOLRAhocQDdbBNNT/uRG6lvn9gT118JctBYL8xKAd4Y1BsFvYH3Faxj1EDUMTi9LLSvOhwH5zy4QBBUGCCgHAaRKBrsT1NWuhaZhadI6DhNcUljjlgzQKZN0lcQFYSBuMRJzwkbB9SOAcLwqEqAJsSwcOTwr9eG3OEzz4U0YVqJPrg5Rjt/yXYSKHlpqHBeU6NGimElSSGaQHYUV@uXqxLGQ1M0L0XFqnkRtH8c/a0vjf4AxsV67KnD8gmjJsSHCp7aBBEiGC5EVdaox9oVMFB2DNv0YOY65PJpMFtDMTtKqGbwcrAK/qk17Y1SscbvpXn70FuroiNWo66wqNehios6H5Z8XIQk5QSPsvlBtkXYEYL8nIEAjNzabGaQbR7PNq/XOeNg8w3ZTmNIzgnJOc/CU883INkOsoH29CCcXrB52iCd4rFSEeCpfBoFMWgiMt84MXEz/jXaIMXNi6DMJc@hXhD0IRSxsZ/12mtLb8aQjjGtSwCwI14BAFKIMbOnVeEyw/t/u/u@9bZxZM9r8ykQ2WmTMfXPSZxEjtyRbTnRdGLn2E4yWcetpiXKZkeW1KL8R51kvrN7sS@we7@PsK9y3uFc7VPM1q8KIEFJlp3uOWf2256JRRJAoVAoFApAoaqcT94SGSWkNDJK3jQbiKwgBmMRvC5@ut2EyXgNTAp/boXnARq7uZUjJ1fmDWj8ryT/cr75aP6Vpz@WsjnL2Y8lf@J//yEfj0FZa4Ba2ke59AgCGSuZdz3t4NbWORZV7YIWOKTVnVz1lTtD2abvxQtdtHjS7Z8UzwMY1SA8tnwtDMaeWT/gCEe9GPRHwaj/6FFFFk0Rs92s@mXNEJ32@oiqZ/nqJ12v3Q/j3vKIOrXVP@1FcegruFH9HOplR6ijhzi2nqwf@7HjaPsuWcYCtPAVVN1mM@pFo2bThdmkV0nMy9mKEuy5vOxg/UtPVnkSTxro3sDtn/watkbe7TAReEIXO4xan929gU6Eq46aIhnWIv2fUs9Ig1FxP105slN7qNInI5djqZz1z/unpPVdxAXswzoT4BspbCAUDAaMi68CLGkrVvgRHiVuyw88XfSn7y6qflp1Ay8pv5oFkCGGr4aTNAZlhzOqa95YnRQz9R18P74HNr4H8/HlVfgkzrI0r0ri91X90E0hUMYUjYe3o4Gmk9xqT6GTQSX5DL1KCtwZxTYbrbWBaY2y1nT2Qof4w0/eYnpLEH9/E/3nd6ApXr9r9wU07NXBmOTNOQxAxc1ObE5iXcre8CB7pqtLWHv7jnVRXsSg3oEKQWosC64e/HHTwETUqjjZQDaAb@F52IlN8T0bj1UlcQZOw0tffV69uYu2m@2wG4zDtqtz@hZc0@J9WrCxvLpbwyHoWOj1Za3n0tzlJak0jYPokqlyA8sE/qXn3cxWkiVKuId3yhnDxs30Q/qUaMYWX1V2q2kdsLy8iO3Yywjbn4jWJSEfuhIFU8tRmX@kJ@F543aCEB1k9iz7abXePPG57yZNusOMkOQtZJsMj@wGInxqTffh95Ho9pZS51qFqqaXnWywo9k9Hs3rcYsrDE/KsdPdWPI2prszz1msJsBSEbb1fVPIFGSYj7Rarg1RvsztsX5vSibgG@/T9W6YVZozBGpSkiXdKOLlNusXnoOVcYN@seH0nn4B8DQcNYWhTNuwp6UDSytOOQ8Gltaiv5CSTlAsKgrJNRpWLsc8U/Yv35I6WzfW2Zqqs5WpMxkB2SqtTE4rU6XuBXTPvC7ohp3RDdIZSVg70888sU3/9frBELsVX5aj5Urkq@XL5QoJ5OVwuVJ3SSgvt5cr2/wQL1cO@OHzcuUnekjH1vLX5YoZFsgwpFd@eIHvWoTjvbVc2XK9b84o@BzGpt7CciXpU8rzo7wyRYgUaDdpjThi6/V1M0fDkCY2Vip9BY6JfSyfeB/G538l@r@EL@PARkjEHucDzqxWVDkzaVgzhtRD04YJnDFjJFf0bF7f22HzqyQLqlmhNZ5dhsGTGr64nBVGghhS@USDfglByM3KbIyUNZPdER1dO3Eod3K2fokWyfpA2@X0I8p8nFbCMet0edNfWRDSgXfDE4VvwnMKHVMdY4QzWW8GWiDqL8tzGoW@zuKie9/uId7rzmYibPMmi/QSg7VkOulwfDjH8Tb7gyyTcCpM/yO7DG/KyaAE904UY6mgR@YNyfxZtwyCwR783rzmWOWAWkYEIfGodCyjLJkXWBYjKZV1lqYqg49QsGQOjfCw9ZnjAW7rR84n4sbnueKmaciUlSpZcmXFJBUuwJPYRTCS2pPFax3@xb5v@WpKXmOvxQUAq2RSi8jX/nfo733R341CbYgwUcEsxXr2VDqtXs@dZScw76bVTncgEn217c1UjpIaUpLT6sDSzOfx2pSKD5MPUfKl0gT6hLZvyJasCW6h2@TaQmBBSxheZj9@XqWPn1dvJtS0RtK9LBilpYCaNBxpeIJp2rT5uErDZ3UxUnh/O@h@dwcPsx1sdx7gcQOGEySXUT686LGVSzq2SWzLF4jUckWJIOfj0qSb048k7vnoNjm2pQ97zf3tvd3XH2nSffLkiafn6HGKH0Yt9lqTeVwgsy13Mh/MWLas@gjahcNubMfHZ/3h6N6nXm5KloiwJmUgoFoM@@kx7mlZZsnzibFL5SSvRVEN63M6DIKMVIKqE2DKjjRdR0SQcOQ@CDQQo94SvX1erXkcnqrZ7AXnYbPJ01ezCeOlZlPPYugacyLu/X3xXvEiHnLwd4mtduU47GlDbe@pD69qh@rwVV3tvNv6SX3ce6c@1HYP4Qnh7bvN140tRf/quwd15WRM8RCHEgtKout22AoRXVitlkqPFEPe6g/GInfcLU@@HwTn6lW/FeKY6nkcnL84k5dCLxxtSKk6LUfH2MOMOO7oeTSCvQUHyqRlLJSbNl9XxOUDRXlPaE17jjXveb8ddSLK62DtO4jC2NxwU92IepDkrbnl7YuShJiYbDrEsW5hgXVFxQPKj7MbAhOI/RVIjBwSRLNdUJpwyX/fTcHD@v6bAwX3G1t7u9uNw8be7oHa2dun17cfG7sviZ6Ng8P9xuY7JHHGN3vbjZ3GVo0/CAKlgoJfjF8v4tFcFArIzlRpfcbJd2FA3Z@8ZXe9ocGrq4AvbsZq@aIH6RMF3ej3sL287lzEUF9wWZSPCpS7VNt/@Z7mfBX@hhNOcxTM9ge5dzHHaV0qqedcGw2WDRpv63q40rSXL3t8HnE@VgjVFK6zFwyXn31lgLMRTzsKVW4LNirY@xZnGTyWDWiq6B7BBihjsFJVHGJtedl/ziA3qLZWtw/vrFKbGBHqFxR9YUxN1h2mmLaVAVBcr2j0sB9UXk8@EN/Th1Vd7WgoGdTD5INkUI/kA1TRBmxH1GOd42K0dwHxrNbkw6/ngx0@FlZPkg@bAa9in2qcpN@4SwOVhKiE65AuB9KTXR4O9is@Y1Ak5vwIMtftysAIJbwpyUQ5SmTbNsqZI2HTwVGDNnuTsOFIJW6AnVDQGcXKrXoFdQjjoLAXSQjD027QExOo1HSHeU89hQOoqr4XHiWh//jCyqDPDIiwo1k8knLbWisM71qOSm5O1RhoG0kOv2tM0G5DYHMKgT8ChgDlMyudFs9UfJcWYPodzcpu3CeOxL7t3@z8xM7ti1aYKaCtttxfo99/9zSR/cw6ydgpMnbURb@HQ1Ir@Siz0x/SGGexysHSIAVbZ/3BKJI@dLMt4BMnnuYoNyY2qu2X6kamNtBhssZev2dVekJcfEOtJ8SUd6mVOV7OzhPxlUbRJs6nSVjs7oBOcNK/DK2zMx@HSFchtl9IEeazcmx@jkeMieifTio7/qYQfPdpdWN781P@b7/4iMArYkECYBujQ/wjxkRdNDz4nI8NFofQu/RIM5ET44sTlNY2eFpaYpQbYLQOPItoXfeiuZ6kibnx9Hdc5pn8zh@/fq1KqTwkk46aHp@5qXTz1ZGp0ucyx0qbgFiyk5AlWe@aLz7DTOT1C1zgQS/A7VAPcgTr9om4hFqEmNadXHRIsujw0Lq7E/ie2mCLCqNIisMIuz@KP7ub1ZUNr5galCiLnK4R0b6BXPY8yyyF56spcNvzwZH8vju4p3Oxk@nhu6Btz4X2XbjlV26GJdOSBevuYP82B6xMbn8ILLXdvxmwTJLT0BJOT5jTX1pMrGnn1/jLVN/x2CMwmHuxg5IAtWq76PERtfF17koBzwaTKkQHh9v1/X2Vk/UJlSW5hyVDW4tBwL6n3qbWtlGPhV0hUZqSxXKiPJkvGYs289@8wTyTeDeICq2D@JoeibBI7uPQgu5apJ6eWViFYOt7FoiGclnsvhgZFB9pwN9oDUjIpp1mNdCZ2cxFmXyi2DYC13TzRTe2bfjZwlrmbgRdHo5tQLZNUHCKmyWz@@@D6McVU48oWHC9hAa3SZOm@YbWCQdU8YAyFgrZHpzTLaZLYWQvCvaioR0Mv0pZDfvPMxQzkijhogtbYl0rxxo10Y@XjJrDBomYBgJYeupEsWimBCPi@ctzu0O9dNJzs1MQKZkIw/vC5goqfvxNT2FMjWSerCYKuT3WlhibI4PlMXZnNez1mzPdhy302qR4mKyKpO3cqvL/mKpklsjUZGg@szEmkSCvPX788DbYk60wxfN/FrbMIZPyc3Q@oPV9CjIex7y9T5zb2PVNesoAc0gnpvVmwEwUJFVnxpySaTtPRjZ@hIvsCxEyiBeAyMaTtXrqegK32dBlRrKhc5apNlhDOGmojJop6n@bXx0E8q313fv@@mSwIRNMB7/BKv9NfxiH6a08y6OM9Qk38bPfwuGwx9nkPtM5oLh8jWnuZTu@bScGr9IqJPJ5m92Sjr6dJGa3vtlr4Ep4e7GAYObY3Vuf3N7Ll9ftpu40XtfVA3a22cnsReaGOc@SPfei3jwEWAbzvgSmD77Ddz@u0D/CwTcgiUx8m89l2ni34sYUIa35iCNIabNQLVvLk73fiVtBDz5I/Nz9WOX8H6gg78LW93a8WTvrpfVMeUIuHvRcKuXn8oUcF6Vv2NAFpCwI6U18tyYs3NQwlpK4XnPah30UDrbCa9k9Y8vJoFh@Wlp75nDrev7IPz96duw/aFVziibfoHceXwyv2p9P@2eXHdVVg19Prlvj339T6vEjONtWqz@IM@XyWrXI7mifKPjhflZiztUI/siOoRFcuyBRh5VaVuk6fP2e8viBF80V3JCY4FL14NxwIa7YjarnR2vH1V61tH5@1DtexyW/0Up1tFJecfHhB5pFScbIyfzR6Bhzqr3rGvYuFfyKcnRbfTVE8dUQ@vImGEb917Xdl5ndOCgA2ALTtt68oS6BzBdgzYa7J4VeeOXqbTJfgWMdKEjOAt8KKuPSO@8nYzumHRFm1Cs@abPxNf8de85CqXAxGPU5xTiFBGupr9FXZ8FcYyrxjgJlOYqM60jcLyA4aR4XB0PydSxW1PmyqGtl3J30LBBHKMniMPcpl8OdQiCq73IdHTtxIQxaZ0CiS2r1Vy6mnj9XeCNWiwu8iwdTjmDIFyZKx3jEAQj9DPi0AVWw5h7ztQ@Hmo/3Mh7kC@9RjfieDBvIO6wpIgXm3@oL32/i8s@JAEL4BdG5CnqLU2tepEjK3UHeXIDDtezCH8cMuFYpnbKAxgK21FdNgbOlONMI1Woy0feFK5BTaEX/6Rbky/w21YwkvyfZmSR8Tq3fYtCSu5STNvDTTYu5VrG8KWYyW6RYuJUa2Omi5dGbkIbVWG2F3S4hLbRYSMmBR77fq@tfSeqPj1DncYK8pOen0vOZ9IKkC1JprgJN8Gmmip0pt/glzfdN5dJs/lRdVcXKS4F6ulUglSTNuz4vb1wY9ZtRmnkj6UrhyiTheSYhb6X8PKP3JeVepkzC4En6kaRr/l7VPZ9gmcn7Ils/fh3dQSEbz2pbkwkuLfSi7o@ODvquU8BmOaKmUlKcQ28qM6iq@g6mFiekwWGfn4ftRjWFslI2EofHTG7j@YtcQSsZP7qTaMgtxqmBNWOMWFTiOleYcNd8YZHq4eR7FgiGCUZTZuRumMJjXXhsgUWue6ZauQU5NcCpaZNDvIp7kV/xxwz2LHIm3@LsxAXB/FoaL7ebswRioXsvN5tMWWmC6yLyUTdqziyS1j2ehDhbSOxau8BJnaHcwe5gG/xeIidsQWEkxRTdkxRN6TRD2bDvTV2IxG/O34sPnJcB6diDbnitalhmBHwLy8lccB@F8SiGFyp2kBNfDAZdnDqywnfFV6h1fIDVxzhuSSFaM3vBacCyR/L7eNIX0qlQQe0B8hUMRNKE@OL0FJfJcAO2fwXRih2XaFRwar2xbGjQmHm4KtfMQwXnGyyAu9GpjYT0nIweUDoeBK2w4JCOFpP240hTO5GOWMv76bg3AmdnNKVVHOdfLqLW562XOM99Ui49LFsku9THwaXCw0fpBSsikklYhb/Cx@VHjmOdDbfkbDgPgL56jYn@PfFmeBn2eqFToxmDM8aktMbh8DJsFxxnP0wOgQEXrIyTSdzD7l8MW7K5Q0pXQMyIW8KxL8dhxGH4xfwsx8UtPivzHRxapafN1NWXURsENDdOOn2cDvOBBdwECD1Q6DwcEVEeeCqLEp89a1xYdznHRhRRA35OrLOJhAy9/ihqUc/wTpbTJVByDJJW1mtPYEL1tboBLgcXZiGA6zEpBQwC5ihpHg6OPjT/LhyUbpg5Yw9MzxRJ@vV5rNBwD4cRSd@UwNwrXMzCnTr48FXjQB3s7Rx@qO3XFT2/3d9739iub6vNj3zGjYNy9gasXu29JumSnKbLqfkefcjVDqhkjhOc2u5HVf/r2/36wYHa21eNN29fNwgagd@v7R426ge@auxuvX63zafvBEHt7h2q1403jUPKdrjnc62mmJOWU3s76k19f@sVvdY2G68bhx@5xp3G4S4qw6l@Tb2t7R82tt69ru2rt@/23@4d1BUa5mw3DrZe1xpv6tsFqp/qVPX39d1DdfCq9vr1REP3PuzW9xUbCVit3KwTlrVNWsKiJm7ndmO/vnWIBqVPW0Q8QvC1rw7e1rcaeKj/tU7Nqe1/9DXQg/q/vKNMlKi2a29qL6lxjnsLVahftt7t1@E@CZQ4eLd5cNg4fHdYVy/39raZ1gf1/feNrfrBunJe7x0wwd4d1H2FYJZcNcEgalE6PW@@O2gw3Rq7hzRnvHsLewePOvkDEYawrFHRbSYwzCDQWiLS3v5HQAUduAN89eFVnb7vg6ZMrRqoAIuKrUM7G1VIRDy0m6l26y9fN17Wd7fqSN4DmA@Ng7pHHdY4QIYGDDI@EutQpe@41egnwkseiVkdw7k@d6dq7Kja9vsGMNe5iQMOGppbmGxbrzTNC/AMbG2iRH3sGQTn9sZKZ/rTZQhfmNM7MrP3aBKPSVt723WakbWzq1ya8I5mnacTrpTsNJppkkR6zbisaYcnF6fNqNfp445pUkw2Ps7jUx@RkzxEkfnkzAlcpvdXuMDiYrP5vtakhe5Bs@n5dymZQeO2EnobfF4uT7cRoSCw8sbGT6UidH@eIdTGD/qgkw31cACBnEL9H8T0LTgPPVUstkNdDJf3AdhsHcVybHKGoxQSjXzZEeFv0ip5Z4LfI80OXNA14AutJvZJYRnJmfox/el9TV9kcrA@kHSW7a5iEYtYRiP6PTTVSCXsEoH/aI8EUYerLMRh@PnULdnVYc1fOO33267nmTKcd0TrwFPXu6X4SXg6UTw/WZ6R5WNnHUUhNutuVmGS82dNMqX7pTDklrn40xzxj2ewEZ8P2DXlqnizWm9auj9IcVgk@Uq7tsD1Cu5k6Hxvan9tfMBqrrT6aH3i@6vku4wt2AvCay5NeEdc7ph/Xh1LBhpg7IuDSBJpDxnFolXG2Jskma8o4xkyXUVtWP7QXH0W8rxOJCFF9iLo2nViNh5G1zb2JIdf7tfebL7b2SHRCWwfPX38ZG3dSdxu/dWX34@ohx3bstexAc3jpKdxkjVKtkjx4ZFi@RVP2Z8ZuFhERniRN53GH@HnIbHbyFoyQZChuTFiQfVgopcLQYecYgcc9xzDrzNHpmYAN9NUD605D65ZxQ9IV2Ie0MYs3TH32jX@AHYy/M0QTxqkGUizGLv6Jc6l1QXLvdyOMRXlxQ077kGWQs7wsbhxS2jAW11sP4vbtfymedvqxVhMGTFeudu5JCFxbxILZewqejKy37KfEb0BzN7D6MtfNb/R40ft4I7d3QXxqDY6IDLuJCWxT51uRutGH2nIx4jqAadqpqbnCrv8nkaKx57eTk4cg1ijgVFBjBrY@GYBryd@RCarZAvYF8ue@iKcCucdgLOuOVa/E@fOao6Gsm78h@h345VCCazEyYlQ7SqpwzFZPiZ@LAw5M2T6U/Rg@P9EmsyA/5xWnAQ9pZblBPBOlGSoQitavjJRoitz0GCdbqTUtD99TMF8szvmLGmYPr25lvs1RALdO2Pz4SO7Pey4MwgAJsfGhj1@E5O0s4CWTi9yni6Oc5Je63zgKj1XmKliCm5@7dhntcs3Zyt48ZQne01Wha@pqHohC7cTHvW0ZJpYyqv7cU7Aecb/R/EBb4AkA5659EysVic5q6RHmZED2tWSNeG0E49JpJZ@u/HU7oGyXGRmZL8@@TKEItAbwGe6nRzepK/EPDfrcZFnYnXIXvDgvhzLZEw@2mXdCRtidkPAud/mzRBEQBldYYLoCnR21ZdCU@59NhRBJanVYepnEOLWKxBpeVq9SrDnnUlwaIL9u554zg9lV8vkKIiDD42hfV2@oN4EY0K5e7dmC4sVHxz0fdguojLZltDlEe2l1e8PSXUM0G7C0Y/GXkF90JsOYS@@GGr/hTSfRUO9I2GUfqoGapOs3nmaEZf1jFocjXBboV1g/uAmnYewEBX3JNf5NeUS8xoe3TCbjtH1Slm5z9OU50QTdkvKRHyu1tTXr5JLCKpdhoZMwShOFhdss8n14NwhGX5X/eFnzP1QgXrtsJ14JrVA8l6gdFKjxz4eWyNp@qAf844GdQV2QBJKlGUjLTFUpTn6iWYnbdeUS71jwncpt@T760mY1FhLUUUp4@raifnW8tSZoNKqdg2aOAstrz5mVGYtuL7duBhjb6HZY2uV@9RLREpFlIjqfaM64knkZvL0EU96k796P8booS8449YqKBCGzopz1Wk5x/jBpuBDFA7b9p4oaTLtYIDtN1769HvMi2brULv9awWjOBzTCqBVjK6LDKPp/qV/1mtu9bvBadSPAlqnwd/8tUg8PI75ER12OuxfxRzISMIyWpna4/RZ/MuIGza8J@eS65ZrrngUDlzbTGE0HNfOxE0E75zDCDAN0Mr8PZj0kZaUefQ4LeRk75@yPV7ZW7@x7MPyrMJyog8AWsBtTFhQyB3SEV9Msi6frk9lOJmXwcLxROVV4N1gsZfB@BmRiI9hMhgbZKbMEuxGYGV2I8ZH7Wu/zT4Ih3C0FG6HCMATu/zZDxAkm6TIj7AUqKjy05JVVE5RruGHEA/jm8m9@uSfjD0h8CfQLz@cxS2zGIFFXMd4W4plvaK9jBIubB4YsYxmSUxSLDqNetb1Q452cT0JNZs8vokabPlDSpF2szfFlRiRLi18EG/PbZLIaY49TCrLatljvx1QQWojt3Qzw4a32c/y4MchruycQTBtaciuhfRNpGoRlRAreMK81kZZfCrfPmJWV@/aaxMErM4yObPCYbs5o7nwDZRI5lcca/WHJIxzE9TTph7L8ag/WL4j9W6UHTM9s82idcvzbjUEFmar0mT5oM2krY7xOF53JvGZYJosxdjSjHgIy1d@Tth8kojX1SbGW7U5voUON9EstZtKJpWkv9sy9jEpXsKi10w0yZBi3OGkdD35ftSkhjdvliAapiyvmiwxmhAZzbE8WqAmyJRQ6e4UYu7TuE/Qo02UQ71top3dPzcSddJIzrg8NUkZJ5egJxy349ImyaVBB8YXcBMnGm4ipBKF89of81FeOX8CJ8NIEIDQisN8ug8lO7hpZ03wEUcH6LhNWAuVIYnoacO2cEic/icEY6/8enNHWzw0x/ny8bpAuk4g0aqCc82DZO6b0@tR85qhTJGChvgMUiQtmpJNZ3dv1Z9tC@UjCFKak7Wlb8lHYzy1QtjQHzupeQ0dOK1Kl8yMqOxAaLJooLFAq5TTbijLVWh/0VA4HtYNehjRAkI@u/hZ0SXgznutlFAbRa7bY2TxNLlltHkqvyFFUoaSd5BfD0VRdXnhSgBCwZjKV8sEAW5NGXscCrDrHZvzMojqPqKC1TKGJX1kr6ipneeMdBBVZ3j02MpRmpXjmQ0jPxMIKRaz86SIkM4yO0sKhSa6mbhYOZ7Mbk@agxRiw/tCceoK3StZGiY9JwTkmNclL5UoR2XllzQHc@Kjx14mMeFvTn1WslJLk6lEnwTDo3x5MvVpKZOaqXZ1NVs0U5Lo4dm1ZhKJFJ6NcCIV/tx/fDXFdnme2IRai4yMlqHtsxGTnFaZtG4r/Bqr53wp2@gYBp59M9wsv5oSYiXjlH2@A3a1zEcG8N3@p1trLFMNJjpWAPulM5ddXFkQssaaw1SPZmGlazztJQ4KzJq231HvD3d2Mm5fT8bG0Og8HD4ulUpg4hPb@b2xrcZWUtQvZnMXOxfdbnFw9Zfh@5Miy/4w5JAAFbOCDqlLaFDEhf7wVCJDAAfKitx5fZEVa/2LTscOwYATSnQedZvk1N4QFE9AUWL08v6QN4AYpJ5gf0ED0b5fVDL6rgJRNDUUcwxFpWESfJkzp2dEHnzowD47OaliYBDMxpqJ5i2vuvEFMwgim3Bnsfti70tqnpx7FXa7fV99QChkeApY@DZZYGfHLlCSLDhh5Nu9FzH7o/VVeBl1rXvFyGLzOsCZicnEmTB@4eEbfz88rV8P3NzRzzmaVqjJK2jmCvxT@yp3mvO0s/g7gBU@JLTvlPs8GLgtptNkZprq9QhOnwijh2V/5tonk8XjPTFNs9tzg6iz0S2wswZquse6gPFlz93LLbkhe0Lc3Kfrcgc0LAkMjRN8rtytBK6a/fPE4uWo07mbVOQwANKx3yURJRLKnxOIfAbAI1APP6InvGj/lKdhvTPhUEQUHATrmJY7KNBEAce536r@duXWajW1NFhZUbXaJj3k86q2WVPb@LC5qbbpfRPvP1RXHz9eF5m77X2hj5vm4ze1STB4h3OldTbcpldKq@LeGKy10cVLxeqSv77UrD7fWI@LR7VNXOunp3//r//93//b/yjW9Mv/wssmvxz9nGQqFArFpdaXpR@@reP9aPt4eenkaGlwvHy6Di77O3sN7zdG@SA1Hy0MT5xFmQWsr2xHatbZ7H1GF1Umpt95MPxM0qWiFltxcVF/jSVyFMvYxVZofQ9xj/KElvAm6MDkUp6QWCSgY2zHU@@0Qhjg0XxDlCRcYAcq5eVsxWzcwx1MkiE5VVnUnnhYZ70Mcacl9aSAu7g0Y@WjXhz2sAN@yTqvNM9xAvqNRk3Nv8Wf38Snm/1r9eCTqx6U1ANfPcjl@Ke89oy@ekvFCLdzJRstB3I5n1LSowWYGao4YkWP1w8ca2eC3I6zxCF7AMm4qeDMcgvOT1Z/fFlGAq7Fp84CYn4q2SLhQyYUWfyy1PtG3fKFcnzLZa7asKLQ1KsYrsw6UUn6FypQEIshQFrzuRCk0qcqcdLHN5LxVDRfdF87HE2IAYOs@y93eNzjA81FSz1t85xZSyHMEZvPy1fMjetyGZrRRorUnyLAByqynCzxTcLlxWVHrLytVnIz5Ra23T7NfGLrMA5HxjZdCv1NWUwg1tw24ZZ6@l6LNuSW4xWVi5LjFauq3KTtt3KsIucX3VE00NcVuHYMqC9Jbd9kJKFHGZDAEZ/9lekRxhsFxlPURLdIsKyxavfRdBkJPX01nTrYK8jJkUWE4s8uje2vE2PbK/ItEcMOwgOMVGLK1wmibqy9rgyZ2KfB8ATRAYMOB1QbybkZ7@chdusExv1OgnSBIbPJeTqeqSmLg2Fweh74anG3fzgMxg2atkjzGbUKHrUQLpiABAafrnpW8wzC0iLdJUyRpClsOYTgBd2xDo8mfZtL7pygS81Q0G5XMAgy7MSUDL9m@mqCjilXf0cn2ChPCe/kNFKLWJa8sDTSkHL2tRkeZlNDxzE12GMnGTg5R1BNRqbhBV3oAhPtOR/8kiTvwkeArjunbwHqqwhrz1A/ZqfTsBdkJqdB1zEX/YvrSuZFjGcORSnWSI6G8qScRrwDVqRH/pz1AiFzk3Fn5Cy47sKnWIdzW7TnEXbyndjiFwMVJQHoOIAZ3wxR73qRCMuJGSqNgVFQDbb8JwidbnBK@I2vgjFY8dOi@@O9onf086fe8QP3U@/rp989xkSLZDPL5tWiPsw2EkuPFZoZi37m1VilxcbV4KdeNsOnnpI7LBYJCJGie/Rz8fhrkRD6tOh5D4qfFoUgmS4DJsX59RUBvjiF5mIWi@Kis@A98Eznuz@WPUVzK/@iD@WDJ7@EhVlU8jY9rXOGHQLF93R/u5ArJ3Hx6Wrp0Wr5Ea2ETsPr/DC8wHybjy9OwmtSJWIsZ2nq@fR7hhsyhPh2HQfr9PGa2ilhTeTuSawvKWkRqoc51@MkbEVlCsITlJ@ozO5SccXFS/IEOHzEgt9XxHImL/uCEtNBi/tczJ9x/xz1BDHk2uTtEOFIWBmIjQhvoeYB2QRfuYlDPTNclvmeU0FtwXcrA6HuLS5as0Wv38trZc0rLK9Dicatme7T0tPS5BidGqKZEbqklanle6q88eOTf/ufe78tjhY3VosfhvQ7Wvxtce3pojzSA709NG@XixuLz5Ft7dviuEhrYHp88m//m8pv/IXgIGX8nP5sPDaw1saLG/kqF/m6uLFGD@XVVar3//zrv1IblmTFhlisS01fMWLrhiJbQY95l9JVA62UZelyKlb4YhZgiIUhrc3pBYZR16tPS7xNt6itKi5D7fnK2KPoKZ4Ns0ZsKiQ7GcaegjQjKVBFBXkBaUwoOsqy3TBmG2DeFE31y/3CWkwrgF@0OUdSZWK6cT@GydCSLIuoA12pkdbz8rBR@jGXmHdUcsamZN2okFjaaVn79OE6scPbfjiKWlkrCTNcz1vBVXhSAB8WwvYFral6cbf/67B4SSx5Xl59Wuxgc7/IdtzFAUPKD8aF30kR1MGAaGHIRqe@GlIP9M/hwsvnaEGk0O8kZ1ImniRp2YOwJXtY2ZjElEXu@PlyPIzmFFJV2uW/pMAjcqYOBGnFSvvUo5J7@xWVW0kySj5e83rA5i0bx2oXGHmxhh2wbCo43AbsDpr2FGrDU76ExKXgdV2yFIJ2uxnoNNdZyJlQab6zcBZ2B9VcR9y7w3cqTkw0/UXNvBFKPsIOQj7Pgg6wzsNRQEv0ao6/YD2e1gA3KfqsNXEVl5K1o/PqVX27ylFX5lR9JVVfUY9CS0jrSXjG8sam7GwiW6rYqhyGTRypzayYaotN0OZhgX@AQSzd0ujgWoJuDt@AJKqlzdFWZXa3@bwWJh65CuXOnmwtSuRqZzG9/OibHHKDGroT6i1IZSQg4AW3Agtlej@QGxBVE2Y06jniz28i2fj30GC4DXtwJWq7rRPnozIt9S4R@yYa8V1KRSTQfmVtG2xHZo8EdOJiKwlBm8PGS84DS3UqvNjijKY7KhwG2riEyuVkn@qopZLwsh0dvVYCRdCHXKm8@vDR47UnT58hytmCbu1sMChUwCpgcBYQDNaoXVpk43u1mlvOySeEoJ6uEtBngcUBHMy6rjzPuH2@8u5VyyUNrJRjWFccRkOK6@1KBplCHIYFzAi0RnGHOdf9sXKEhh1/antf6R/xt/EPyAxn3NEGQnqrH96mnqmcc3E4UGXBzE5x3IfwoOLpFDtv2O/sw9tECFtXYXuq6DU8QIzOhv2L0zObOwratdUhDRgiOPulxgrqZThKHYxZWEEX1RsODev2RdXAO5puAYxyMSVA5xPgNMy038pAW5pidCzTJATPmrixiiNEy3TUZmfmzl5f1Xe3JxFbtMPQMdyCbdlKyh17MoMDGcTqtZp7SNTV3i74KqmWSX7GqzILuBLylfk6fIC70i0EoraoYmQ16w0jdx5ZysyLqWvTtCj1I/CaAbNcup2U5l6raQUIYgSh3k1KhJifnOfYJEtxsjsZ4xS8nKtYNqJvojhmB3O6spynLUo5E0cVWHBuAIh9m1JOGlKqoEf5sc6Bl6W3EcxRbkVja0CbIScr1XBmTg4zwVa3sTjARtRxQwu0v7G75avtOv3Z@bDtQ1HerP2Edichnm/Gt6zxLVdUY8d0ge0tlm1uYTP1G64oEbOUtMPYFEEI345ERQxTrwH1xo6mvQzqo8zYPk65AuwaaCXc7I7qQQJHL7wHsqAX74krDr6uw98qsnk1LWkSlyp6WMgW1/yBbdFkIa01gSSkvAOI1UkQiaOWlNsXUoYXC3TWvAO9djGM3diZzdMZlpUFFantO0Uie5Znb6TMPLZY1WyxWkE/zuML5tu5vHESdvr6LlrCHLfwxr0/xhv5uzNH/v8L5qj/c7jjoeaOhxXIHuGOxG043@jkMOz9GRxzMuY5uNmOTiPsD3WsVzSi5FsAWOABQ9whpcRyCW27QZwod3bCyuR8BCOh1ce4GPCHGv9IN/5RBTKXH7fD/1cbn/8HN/6xbvzjCuaaGT2vVTvL3fo/psWpSuhmP8zsXqi7ks37oy1d0y1dq2A2ndHN/@ktzf8HtfSJbumTCjwmyIGDuK@fz82iidQOthqN1Nyi4GinXS7i2M/mSg9rr3Y1R4uHTvciPqtCW1d/GP@nGv@nkEb8hDB0OItIbEOTtbwsT@WyvGiWvMuhcMlKWiLtNZ7RrfbqCStdj@gJSoQ0b2wN9UKFFHJfEtPTpkKqP6bSN5l87oqzyHYdLBMH59YCWlaEZS8d4qL56iCZq2vJvLLNPpDV1uH@65X/ImQ4Dz7rW2iEPLr2Kux2zUxiL8EOE69TujFWcwD7QK85MqyiycnIjvRt74RdFm6WauzYYmJenL1IkKM2nP/RWuoc@oYVlRtbRkSbgi5vVlUwzTXLC/lCbZdMs5usW/yHuPSZ5tJnFbWvFwY3kSrQG36aF9N12urjx/PmAClVwA8GYMmn/HNG1f8F"" rel=""nofollow noreferrer"">Try it online!</a></p>
<p>Latest development version of Vyxal is needed to run the polyglot.<br />
Command line: <code>vyxal polyglot &lt; /dev/null</code>.</p>
<p>Vyxal has <code>#</code> line comments and nesting <code>#{ }#</code> block comments which don't have to be closed at EOF.
Also, <code>&quot;</code> <a href=""https://github.com/Vyxal/Vyxal/blob/main/documents/knowledge/elements.md#-pair"" rel=""nofollow noreferrer"">does not delimit strings</a> in Vyxal, so
Vyxal ends up executing Sphinx code:</p>
<pre><code>}#r&quot;\&quot;print(355);400#{
</code></pre>
"
"256928","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 7 bytes</h1>
<pre><code>≬h€÷↔∩h
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4omsaOKCrMO34oaU4oipaCIsIiIsIlsxLDIsMyw0LDIsNV1cbls0LDMsNiwyLDMsOCw1LDIsOCw3XVxuWzEsMSwyXVxuWzEsMiw3LDIsNywyLDMsN10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>≬       # three element lambda:
 h      #   head
  €     #   split by
   ÷    #   push each item to stack
</code></pre>
<p>This lambda takes a list. If length &gt; 0 it splits by the first element and returns the last chunk. If length == 0 it does nothing.</p>
<pre><code>    ↔   # apply the lambda and collect results until the the result doesn't change
     ∩  # transpose
      h # head
</code></pre>
"
"256938","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 27 bytes</h1>
<p><em>-1 byte thanks to <a href=""https://codegolf.stackexchange.com/users/116074/androvt"">AndrovT</a></em></p>
<p>First input is the note, second is the scale; 0 for minor and 1 for major.</p>
<p><code>kA7Ẏ:\#ẊY3⟇8⟇~ḟǓ»°f»b⁰9*ǔ*ꜝ</code></p>
<p>I'm a bit rusty.</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrQTfhuo46XFwj4bqKWTPin4c44p+HfuG4n8eTwrvCsGbCu2LigbA5KseUKuqcnSIsIiIsIkYjXG4wIl0="" rel=""nofollow noreferrer"">Try it Online!</a> | <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXGJva0E34bqOOlxcI+G6ilkz4p+HOOKfh37huJ/HkyTCueKJoMOfx5TCu8KwZsK7YuKBsDkqx5Qq6pydIiwiIiwiQWJcbjAiXQ=="" rel=""nofollow noreferrer"">35 bytes if you have to handle flats</a></p>
<p><strong>Explanation:</strong></p>
<pre><code>kA7Ẏ:\#ẊY3⟇8⟇~ḟǓ»°f»b⁰9*ǔ*ꜝ
kA7Ẏ                           Uppercase alphabets A-H
    :\#ẊY                      Duplicate, take cartesian product with &quot;#&quot;, interleave
         3⟇8⟇                  Remove third and remove eight char (I know, very cringe)
             ~ḟǓ               Find index of note, rotate list by index
                »°f»b          Compressed number 2906, binary &quot;101101011010&quot;
                     ⁰9*       Multiply scale by 9, pushes 9 for major and 0 for minor
                        ǔ      Rotate &quot;101101011010&quot; by 0 or 9
                         *ꜝ    Filter out list by binary string
</code></pre>
"
"256970","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> <s>10</s> 8 bytes</h1>
<pre><code>ƛ÷T-*;∑±
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwixpvDt1QtKjviiJHCsSIsIiIsIltbLTEsIDEwMCwgNV0sIFsxLCA5NSwgMl1dXG5bWy0xLCAyMCwgMF0sIFstMSwgMzAsIDFdLCBbMSwgNDAsIDZdLCBbMSwgMjAsIDJdXVxuW1stMSwgNTAsIDNdLCBbLTEsIDcwLCA1XSwgWzEsIDM1LCAwXSwgWy0xLCAyNSwgMV0sIFsxLCA2MCwgMl0sIFsxLCA0MCwgNF1dXG5bXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Inspired by <a href=""https://codegolf.stackexchange.com/a/256965/116074"">Arnaulds answer</a>.
Expects <code>-1</code> for 'A' and <code>1</code> for 'B'. Returns <code>1</code>, <code>-1</code> or <code>0</code> for A wins, B wins and draw respectively.</p>
<pre><code>ƛ    ;   # map:
 ÷       #   push each on stack
  T      #   triple
   -     #   subtract
    *    #   multiply
      ∑  # sum
       ± # sign
</code></pre>
"
"256987","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>≬~≈F∩İ÷
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4omsfuKJiEbiiKnEsMO3IiwiIiwiW1sxLDEsMSwxLDFdLFsyLDMsNCw1LDZdLFsyLDMsNCw1LDZdXVxuW1sxLDEsMSwxLDFdLFsyLDMsNCwxLDZdLFsyLDMsNCwxLDZdXVxuW1sxLDEsMSwxLDZdLFsyLDMsNCwxLDZdLFsyLDMsNCwxLDZdXVxuW1sxLDJdLFsyLDFdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 byte: changed output method (thanks to @emanresuA)</em></p>
<p>Outputs an empty list if it's possible or a non-empty list if not.</p>
<pre><code>≬        # three element lambda:
 ~≈      #   filter by: are all elements equal
   F     #   remove elements of a that are in b
    ∩    #   transpose
     İ   # apply function while results are unique, collecting results
      ÷  # push each item to stack
</code></pre>
"
"257035","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 113 bytes</h1>
<pre><code>₌L↵r⅛⅛k2T0ẋ⅛k≈N→0{:k□i←+:¾hÞẏ$c¬ßQ→¾h←Þi:¨□›[¨□N$_|`?.,+-][`$v=÷N+&amp;+N+^¼¥k2T%:£~i„+„[¼ḣ⅛:[C$]_]₈%:‟Ȧ⟑;⅛^$[:C₴]∧[‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwi4oKMTOKGtXLihZvihZtrMlQw4bqL4oWba+KJiE7ihpIwezpr4pahaeKGkCs6wr5ow57huo8kY8Ksw59R4oaSwr5o4oaQw55pOsKo4pah4oC6W8Ko4pahTiRffGA/LiwrLV1bYCR2PcO3TismK04rXsK8wqVrMlQlOsKjfmnigJ4r4oCeW8K84bij4oWbOltDJF1fXeKCiCU64oCfyKbin5E74oWbXiRbOkPigrRd4oinW+KAuSIsIiIsIlwiKysrKysrdlsuKysrPFxcbiAgICAgID8tXSsrK15cIlxuXCJhYmNkXFwwXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>It takes the program as a string and the input as a string. <a href=""https://vyxal.pythonanywhere.com/#WyJUIiwiIiwi4oKMTOKGtXLihZvihZszMFQw4bqL4oWba+KJiE7ihpIwezpr4pahaeKGkCs6wr5ow57huo8kY8Ksw59R4oaSwr5o4oaQw55pOsKo4pah4oC6W8Ko4pahTiRffGA/LiwrLV1bYCR2PcO3TismK04rXsK8wqUzMFQlOsKjfmnigJ4r4oCeW8K84bij4oWbOltDJF1fXeKCiCU64oCfyKbin5E74oWbXiRbOkPigrRd4oinW+KAuSIsIiIsIlwiKysrKysrdlsuKysrPFxcbiAgICAgID8tXSsrK15cIlxuXCJhYmNkXFwwXCIiXQ=="" rel=""nofollow noreferrer"">Here</a> is a version with 90 cells.</p>
<pre><code>₌L↵            # parallel apply length and split on newline
   r           # pad with spaces to given length 
    ⅛          # push to global array
     ⅛         # push input to global array
k2T0ẋ⅛         # push a list of 30000 zeros to global array 
k≈N→           # save [0, -1] to a variable with empty name
    0          # push 0
# Together this sets up the global array as [code, input, tape],
# the position in a variable and the direction on stack.
{              # start a while loop
 :             # duplicate
  k□i          # index into [[0,1],[1,0],[0,-1],[-1,0]]
     ←         # load variable
      +        # add
# Stack: direction position
:→             # duplicate and store variable
  ¾h           # push the global array and get the first item, this     pushes code
    Þẏ         # multidimensional indices
      $c       # check if it contains current position
        ¬ßQ    # if not stop execution
# Stack: direction
¾h←            # push code and position
   Þi          # index into, this gets the current instruction
     :¨□›[     # if it is an arrow:
¨□N$_          #   convert to integer, negate and remove the previos direction from the stack
     |         # else:
`?.,+-][`$v=÷  #   for each of the characters in the string push 1 if it's equal to current instruction and 0 otherwise
# Stack: direction ? . , + - ] [
N              #   negate
 +             #   sum the top two elements
  &amp;+           #   add top of stack to the register (the register represents the data pointer)
    N+         #   negate and add
      ^        #   reverse the stack
       ¼       #   pop from global array
        ¥      #   push register
# Stack: value_delta , . ? direction tape ptr
30T%:£         #   modulo 30000 and store to the register
      ~i       #   index into without popping
# Stack: value_delta , . ? direction tape ptr value
„+             #   rotate stack left and add
  „            #   rotate stack left
   [           #   if the instruction was &quot;,&quot;:
    ¼ḣ⅛        #     pop from global array, extract head, push to global array
               #       this gets the next character from input
       :[C$]_  #     if non-empty conver to number and replace the current value
             ] #   end if
# Stack: . ? direction tape ptr value
₈%             #   modulo 256
  :‟           #   duplicate and rotate stack right
    Ȧ          #   tape[ptr] = value
     ⟑;⅛       #   push tape to global array
        ^$     #   reverse stack and swap the top two items
# Stack: direction ? value .
[:C₴]          #  if instruction was &quot;.&quot; print value
     ∧[‹       #  if value != 0 and the instruction was &quot;?&quot; decrement direction
</code></pre>
"
"257144","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>5ɾ+₆+24%$S+`∴∷₇›†↵ƈ…±↑`5/Y
</code></pre>
<p><a href=""https://vyxapedia.hyper-neutrino.xyz/tio#WyIiLCI1yb4r4oKGKzI0JSRTK2DiiLTiiLfigofigLrigKDihrXGiOKApsKx4oaRYDUvWSIsIiIsIiIsIjBcbjMwIl0="" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>Takes in <code>&lt;hour&gt;</code> <code>&lt;minute&gt;</code>, outputs an interleaved list of <code>&lt;time&gt;|&lt;city&gt;</code>.</p>
<p>My first Vyxal answer... it took me an embarrassingly long time to figure out how to properly deal with input.</p>
"
"257145","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>7</s> 6 bytes</h1>
<p><em>-1 thanks to @emanresu A</em></p>
<pre><code>›℅‹$℅x
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigLrihIXigLkk4oSFeCIsIiIsIjYiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"257148","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>'?‛.*jr;Þg
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInP+KAmy4qanI7w55nIiwiIiwiXCJkaWN0aW9uYXJ5XCIsIFwiZGljdG9uYXJ5XCIsIFwiZGljdGlvbmFyeXR3b1wiLCBcInRocmVlZGljdGlvbmFyeVwiLCBcInhcIlxuXCJkaWNcIiwgXCJpb25cIiwgXCJhcnlcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes in the dictionary and the partial transcription as lists.</p>
"
"257179","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20</s> 14 bytes</h1>
<p><em>-6 bytes from @AndrovT</em></p>
<pre><code>⌈?\%VṄ?vÞ℅∩vṄ%
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLijIg/XFwlVuG5hD92w57ihIXiiKl24bmEJSIsIiIsIlwiS2VnIGlzIGEgZ29sZmluZyBsYW5ndWFnZSBjcmVhdGVkIGJ5IGx5eGFsIGluIDIwMTguIE5vdCB0byBiZSBjb25mdXNlZCB3aXRoIGFuIGFjdHVhbCBiZWVyIGtlZywgS2VnIGlzIGFuIGFjcm9ueW0gdGhhdCBzdGFuZHMgZm9yIEtleWJvYXJkIEdvbGZlZC5cIlxuXCJLZWdcIlxuW1tcIkthbGVpZG9zY29wZXNcIiwgXCJLZXlib2FyZFwiLCBcIktpbmdcIl0sW1wiZW5lcmdldGljYWxseVwiLCBcImVhZ2VybHlcIiwgXCJlbnRlcnRhaW5zXCIsIFwiZW5yYWdlXCJdLFtcImdvb21iYXNcIiwgXCJnaW5nZXJcIiwgXCJnb29nbGVcIiwgXCJncmFtc1wiLCBcImdvb2RcIl1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explanation</h2>
<pre><code>⌈?\%VṄ?vÞ℅∩vṄ%
⌈               # Split implicit first input (text) by spaces
 ?              # Take second input (acronym)
  \%V           # Replace all instances of second input in first with &quot;%&quot;
  Ṅ             # Rejoin the split list with spaces
    ?           # Take third input (list of lists of substitute words)
     vÞ℅        # Randomly permute each of the lists in the third input
        ∩       # Transpose 
         vṄ     # Join each row of transposed list  
           %    # Format string: replace all &quot;%&quot; from original string with entries from the transposed list
</code></pre>
"
"257218","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɾɾR
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvsm+UiIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Can't believe I never answered this challenge despite the fact it was asked by one of the greatest golfers I ever knew</p>
<h2>Explained</h2>
<pre><code>ɾɾR
ɾ   # the range [1, input] 
 ɾ  # and that for each item in the range
  R # vectorised reverse
</code></pre>
"
"257289","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>15</s> <s>13</s> <s>12</s> 9 bytes</h1>
<pre><code>k6≬℅+Ḣ↔ƒ⋎
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrNuKJrOKEhSvhuKLihpTGkuKLjiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a>
Outputs characters from the string <code>&quot;0123456789abcdef&quot;</code></p>
<p><em>-3 thanks to emanresu</em></p>
<h2>Explained (old)</h2>
<pre><code>k6≬℅+Ḣ↔ḣvt∑+
k6           # The string &quot;0123456789abcdef&quot;
  ≬   ↔      # apply the following and collect results while invariant:
   ℅+        #  append a random item of the string to the string
     Ḣ       #  remove the first character
       ḣvt   # separate the first item from that list and get the tail of each remaining item
          ∑+ # join that into a single string and append to the previously separated head
</code></pre>
"
"257334","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>75ɾ15ẇƛÞ℅5Ẏ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI3Ncm+MTXhuofGm8Oe4oSFNeG6jiIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>75ɾ         # range(1, 75)
   15ẇ      # Cut into chunks of 15
      ƛ     # Over each
       Þ℅   # Shuffle
         5Ẏ # Get the first five items
</code></pre>
"
"257352","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 19 bytes</h1>
<pre><code>ȧ₁?›(-½:ȧ~+^-Þr)_-∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLIp+KCgT/igLooLcK9OsinfiteLcOecilfLeKIkSIsIiIsIlsyNSw3NSw1NSwxNTUsMjE1XVxuMiJd"" rel=""noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwi4oyI4bmq4bmqReG5mMKoUyIsIsin4oKBP+KAuigtwr06yKd+K14tw55yKV8t4oiRIiwiIiwiMSBbMTAwLDEwMCwxMDBdIC0+IDMwMFxuMSBbMzcyLDE5MjAsMTAyXSAtPiAzMDBcbjEgWzI1LDI1LDI1XSAtPiA3NVxuMSBbMjUsMTAwLDEyMF0gLT4gMjI1XG4xIFsyNSwxMDAsMTAwLDEyMF0gLT4gMzI1XG4xIFswLDIwMF0gLT4gMjAwXG4xIFswLDE3NSw3NV0gLT4gMjUwXG4xIFs3NSwxNTAsMTUwXSAtPiAzMDBcbjEgWzAsMTAxLDE5OV0gLT4gMjAxXG4xIFsyMDAsMF0gLT4gMTAwXG4yIFsxMDAsMTAwLDEwMF0gLT4gMzAwXG4yIFszNzIsMTkyMCwxMDJdIC0+IDMwMFxuMiBbMjUsMjUsMjVdIC0+IDc1XG4yIFsyNSwxMDAsMTIwXSAtPiAyNDVcbjIgWzI1LDEwMCwxMDAsMTIwXSAtPiAzMjVcbjIgWzAsMjAwXSAtPiAyMDBcbjIgWzAsMTc1LDc1XSAtPiAyNTBcbjIgWzc1LDE1MCwxNTBdIC0+IDMwMFxuMiBbMCwxMDEsMTk5XSAtPiAzMDBcbjIgWzIwMCwwXSAtPiAxMDAiXQ=="" rel=""noreferrer"">verify all test cases</a></p>
"
"257365","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>kh\!+,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJraFxcISssIiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Basically the normal way of printing &quot;Hello World!&quot; in Vyxal.</p>
"
"257383","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 140 bytes</h1>
<pre><code>»÷¤xŻλjb↑+k2x₴O₍‟ḂṀṫ. ɖ`‟z¦¼ẇeRʁ&gt;j:t{*0 Nq;*₅1z⟑-¶±↓`ṡF²k•-ṡ⁼₌]L₇ḊṪṗ₃h¦SεĠT$₴∴∇ǎ)¾ŀ⟇ḟṡ₄↲ḣ×£↳ǎrq°ʁ₀∇ẋ≠↑⁽5₍↑¯₈¤⌈←±e«∷¦jẇʁ»⁺9(n›ḋ÷$)_WṘ(n~i⅛⟇)¾
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLigJssIOKCrHfCqFMiLCLCu8O3wqR4xbvOu2pi4oaRK2syeOKCtE/igo3igJ/huILhuYDhuasuIMmWYOKAn3rCpsK84bqHZVLKgT5qOnR7KjAgTnE7KuKChTF64p+RLcK2wrHihpNg4bmhRsKya+KAoi3huaHigbzigoxdTOKCh+G4iuG5quG5l+KCg2jCplPOtcSgVCTigrTiiLTiiIfHjinCvsWA4p+H4bif4bmh4oKE4oay4bijw5fCo+KGs8eOcnHCsMqB4oKA4oiH4bqL4omg4oaR4oG9NeKCjeKGkcKv4oKIwqTijIjihpDCsWXCq+KIt8KmauG6h8qBwrvigbo5KG7igLrhuIvDtyQpX1fhuZgobn5p4oWb4p+HKcK+IiwiIiwiQWJ1IERoYWJpLCBBZmdoYW5pc3RhbiwgQWxiYW5pYSwgQWxnZXJpYSwgQWxnaWVycywgQW5nb2xhLCBBcmdlbnRpbmEsIEF1c3RyYWxpYSwgQXVzdHJpYSwgQmFoYW1hcywgQmFocmFpbiwgQmFuZ2xhZGVzaCwgQmFyYmFkb3MsIEJlbGdpdW0sIEJlbGl6ZSwgQmVuaW4sIEJlcm11ZGEsIEJodXRhbiwgQm9saXZpYSwgQm9ybmVvLCBCb3Rzd2FuYSwgQnJhemlsLCBCdWxnYXJpYSwgQnVybWEsIEJ1cnVuZGksIENhbWVyb29uLCBDYW5hZGEsIENhcmliYmVhbiwgQ2F5bWFuLCBDaGFkLCBDaGlsZSwgQ2hpbmEsIENvbG9tYmlhLCBDb25nbywgQ29zdGEgUmljYSwgQ3JldGUsIEN1YmEsIEN5cHJ1cywgQ3plY2hvc2xvdmFraWEsIERhaG9tZXksIERlbm1hcmssIERqaWJvdXRpLCBFY3VhZG9yLCBFZ3lwdCwgRWwgU2FsdmFkb3IsIEVuZ2xhbmQsIEV0aGlvcGlhLCBGaWppLCBGaW5sYW5kLCBGcmFuY2UsIEZyZW5jaCBHdWlhbmEsIEdhYm9uLCBHYW1iaWEsIEdlcm1hbnksIEdoYW5hLCBHcmVlY2UsIEdyZWVubGFuZCwgR3VhbSwgR3VhdGVtYWxhLCBHdWluZWEsIEd1aW5lYS1CaXNzYXUsIEd1eWFuYSwgSGFpdGksIEhvbmR1cmFzLCBIb25nIEtvbmcsIEh1bmdhcnksIEljZWxhbmQsIEluZGlhLCBJbmRvbmVzaWEsIElyYW4sIElyYXEsIElyZWxhbmQsIElzcmFlbCwgSXRhbHksIEphbWFpY2EsIEphcGFuLCBKb3JkYW4sIEthbXB1Y2hlYSwgS2VueWEsIEtvcmVhLCBLdXdhaXQsIExhb3MsIExlYmFub24sIExlc290aG8sIExpYmVyaWEsIExpYnlhLCBMaWVjaHRlbnN0ZWluLCBMdXhlbWJvdXJnLCBNYWRhZ2FzY2FyLCBNYWhvcmUsIE1hbGF3aSwgTWFsYXlzaWEsIE1hbGksIE1hbHRhLCBNYXVyaXRhbmlhLCBNZXhpY28sIE1vbmFjbywgTW9uZ29saWEsIE1vcm9jY28sIE1vemFtYmlxdWUsIE5hbWliaWEsIE5lcGFsLCBOZXcgR3VpbmVhLCBOZXcgWmVhbGFuZCwgTmljYXJhZ3VhLCBOaWdlciwgTmlnZXJpYSwgTm9yd2F5LCBPbWFuLCBQYWtpc3RhbiwgUGFsZXN0aW5lLCBQYW5hbWEsIFBhcmFndWF5LCBQZXJ1LCBQb2xhbmQsIFBvcnR1Z2FsLCBQdWVydG8gUmljbywgUWF0YXIsIFJlcHVibGljIERvbWluaWNhbiwgUm9tYW5pYSwgUnVzc2lhLCBSd2FuZGEsIFNhbiBKdWFuLCBTYXVkaSBBcmFiaWEsIFNjb3RsYW5kLCBTZW5lZ2FsLCBTaWVycmEgTGVvbmUsIFNvbWFsaWEsIFNwYWluLCBTcmkgTGFua2EsIFN1ZGFuLCBTdW1hdHJhLCBTdXJpbmFtLCBTd2F6aWxhbmQsIFN3ZWRlbiwgU3dpdHplcmxhbmQsIFN5cmlhLCBUYWl3YW4sIFRhbnphbmlhLCBUaGFpbGFuZCwgVGhlIE5ldGhlcmxhbmRzLCBUaGUgUGhpbGlwcGluZSBJc2xhbmRzLCBUaWJldCwgVG9iYWdvLCBUb2dvLCBUcmFuc3lsdmFuaWEsIFR1bmlzaWEsIFR1cmtleSwgVWdhbmRhLCBVbml0ZWQgU3RhdGVzLCBVcnVndWF5LCBWZW5lenVlbGEsIFZpZXRuYW0sIFllbWVuLCBZdWdvc2xhdmlhLCBaYWlyZSwgWmFtYmlhLCBaaW1iYWJ3ZSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This uses <a href=""https://en.wikipedia.org/wiki/Factorial_number_system"" rel=""nofollow noreferrer"">factorial number system</a> to encode the permutation. A shorter solution would be to index into the list of all permutations of the input but that wouldn't complete before the heat death of the universe.</p>
<p>This code starts with a big integer encoding the permutation on the stack:</p>
<pre><code>⁺9(                    # for n in range(158):
   n›                  #   increment
     ḋ                 #   divmod
      ÷$               #   push each to stack and swap
        )              # end for
         _WṘ           # pop, wrap stack and reverse
            (          # for each:
             n~i⅛      #   index into input and push result to global array
                 ⟇     #   remove this index from input
                  )    # end for
                   ¾   # push global array
</code></pre>
"
"257409","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ɾ:ẋfṖλ2lvsÞu;c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvjrhuotm4bmWzrsybHZzw551O2MiLCIiLCIzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes an integer as input. Takes a long time to calculate for larger integers. (Each element <span class=""math-container"">\$x\$</span> appears <span class=""math-container"">\$x\$</span> times.)</p>
<h2>Explanation</h2>
<pre><code>ɾ               # Make range from input [1,2,...,r]
 :ẋ             # Repeat each element x times [[1],[2,2],[3,3,3],...]
   f            # Flatten [1,2,2,3,3,3,...,r]
    Ṗ           # Get all permutations of input
     λ          # Opening a lambda function
      2l        # Get all adjacent pairs of items
        vs      # Sort each pair (so, e.g. (1,2) and (2,1) become the same)
          Þu    # Check if there are any duplicates
            ;c  # Take first item from list of permutations which satisfies the lambda above 
</code></pre>
"
"257413","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8</s> <s>5</s> 3 bytes</h1>
<pre><code>₅[L
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoVbTCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Modified Kevin Cruijssen's 05AB1E answer. Equivalent python code: <code>lambda n: n if n%5 != 0 else len(str(n))</code></p>
"
"257419","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>~∷‹∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwifuKIt+KAueKIkSIsIiIsIlsxLCAyLCAzLCA0LCA1XVxuWzIsIDRdXG5bNSwgNl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>~    # Filter by
 ∷   # Odd? 
  ‹  # Decrement
   ∑ # Sum
</code></pre>
"
"257454","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>Ė¾$(n*:~¨=ȧgF0J‹n/)L
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLElsK+JChuKjp+wqg9yKdnRjBK4oC5bi8pTCIsIiIsIltcIjDCsDFOXCIsIFwiMMKwMU5cIiwgXCIxwrAwXCIsIFwiMMKwMVwiLCBcIjHCsDBOXCIsIFwiMcKwME5cIl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwi4oyIaMabYFJETFVgJOG4n8O34p+oXFwxXFzCsFxcMEpKfFxcMFxcwrBcXDFKSnxcXDFcXMKwXFwwXFxOSkpKfFxcMFxcwrBcXDFcXE5KSkrin6lpO3fCqFMiLCLElsK+JChuKjp+wqg9yKdnRjBK4oC5bi8pTCIsIiIsIlIgPT4gMVxuUkQgPT4gMlxuUkwgPT4gMVxuUkRSVSA9PiA0XG5VUlJETCA9PiA0XG5VVVJETEwgPT4gNVxuRFJERERMVVVVID0+IDciXQ=="" rel=""nofollow noreferrer"">verify all test cases</a></p>
<p>A full program accepting a list of strings &quot;1°0&quot;, &quot;0°1N&quot;, &quot;1°0N&quot;, &quot;0°1&quot; for right, down, up, left respectively. Works by keeping a list of empty positions and removing the first one in the direction of travel each time.</p>
<pre><code>Ė              # evaluate (convert each to a complex number)
 ¾             # push empty list
  $            # swap
   (           # for n in directions:
    n*         #   multiply by n
      :        #   duplicate
       ~¨=ȧ    #   keep only real non-negative numbers by checking if they are invariant under abs(x)
           g   #   minimum
            F  #   remove from the original list

0J             #   append 0
  ‹            #   decrement
   n/          #   divide by n
     )         # end for
      L        # length
</code></pre>
"
"257456","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>15</s> 12 bytes</h1>
<p>Thanks to @Steffan i learned more about Vyxal!</p>
<pre><code>{…:|:∷[2ḭ|T›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ74oCmOnw64oi3WzLhuK18VOKAuiIsIiIsIjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Naive approach for beginners:</p>
<pre><code>{…:Ṡ|:₂[3*›|‹2/
</code></pre>
"
"257459","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ÞS~Ḣ²Ṡc
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnlN+4biiwrLhuaBjIiwiIiwiMTQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works</strong></p>
<pre><code>ÞS~Ḣ²Ṡc
ÞS       Sublists of range 1-n
  ~Ḣ     Keep lists with length &gt;= 2
    ²Ṡ   Square and sum each sublist
      c  Does it contain n?
</code></pre>
"
"257473","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>b0₌O€vL≈=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiMOKCjE/igqx2TOKJiD0iLCIiLCIxMTkiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Output 0 → False, 1 → True</p>
<pre>
b         # To binary array
 0        # Push 0
  ₌       # Parallel apply next two operators:
   O      #   Count how many ""0"" and
    €     #   Split at ""0""
     vL   # Lengths of parts
       ≈  # If its equal return 1
        = # If its equal number of zeroes, return 1, else 0
</pre>
"
"257501","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<p><em>-1 byte thanks to AndrovT</em></p>
<pre><code>ƛ⇧ṡ‹ǎḣṁε
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGm+KHp+G5oeKAuceO4bij4bmBzrUiLCIiLCIxMCJd"" rel=""nofollow noreferrer"">Try it Online!</a> | <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLih6fhuaHigLnHjuG4o+G5gc61IiwiIiwiMTAiXQ=="" rel=""nofollow noreferrer"">7 bytes to output the nth number</a> | <a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnnAzbMabw7crwr3OtSIsIiIsIiJd"" rel=""nofollow noreferrer"">9 bytes as an infinite list by emanresu A</a></p>
<p><strong>Explantion:</strong></p>
<pre><code>ƛ⇧ṡ‹ǎḣṁε
ƛ           Implicitly take input, convert it to a range and open mapping lambda :P
 ⇧ṡ         Range between n and n+2
   ‹ǎ       Decrement and get the respective prime (1-indexed)
     ḣṁε    Head extract; push mean and get the abs difference
</code></pre>
"
"257530","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>20</s> 11 bytes</h1>
<pre><code>∞2lUfvO4=A∞
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oieMmxVZnZPND1B4oieIiwiIiwiW11cblsxLDIsNCwxXVxuWzEsMSwyLDJdXG5bMV1cblsxLDJdXG5bMSwyLDEsMl1cblsxLDMsNCw0LDMsMiwxXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This is valid because all characters except <code>∞</code> are used exactly once and <code>∞</code> is both at the beginning and the end.</p>
<p>Now uses the same approach as @Unrelated String's Jelly answer.</p>
<pre><code>∞2lUfvO4=A∞
∞            # palindromize
 2l          # overlapping pairs
   U         # uniquify
    f        # flatten
     vO      # for each in number input count how many times it occurs
       4=    # is equal to four?
         A   # are all true?
          ∞  # palindromize
</code></pre>
"
"257581","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 28 bytes</h1>
<pre><code>6ɾ£⟑½4ʁ=⁺…*9+⟑¥Ṗi£;¥h;1pṅ2ø∧
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI2yb7Co+KfkcK9NMqBPeKBuuKApio5K+KfkcKl4bmWacKjO8KlaDsxcOG5hTLDuOKIpyIsIiIsIls2LDIsMCw0LDQsMCwyLDJdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Expects a list of numbers 0, 2, 4, 6 for <code>NESW</code> respectively. Outputs a string with numbers 1 to 6 for each of the colors.</p>
<p>It represents cube rotations as permutations of sides
of the cube. The lexicographically 9th permutation represents rotating 90 degrees around the vertical axis and the lexicographically 325th permutation represents rotating 90 degrees around the vertical axis and then rolling west.</p>
<p>Rolling in direction <span class=""math-container"">\$n\$</span> can be represented as rotating <span class=""math-container"">\$90(n/2+1)\$</span> degrees around the vertical axis, rolling west and then rotating rotating <span class=""math-container"">\$90(3-n/2)\$</span> degrees around the vertical axis. This corresponds to sequences of three 9th permutations and one 325th permutation.</p>
<pre><code>6ɾ£                     # save [1,2,3,4,5,6] to the register
   ⟑                    # map input:
    ½                   #   halve
     4ʁ                 #   push [0,1,2,3]
       =                #   equals?
        ⁺…*             #   times 316
           9+           #   plus 9
                        #     Now we have a list with three nines and one 325
             ⟑          #   for each:
              ¥         #      push register
               Ṗi       #      index into permutations
                 £      #      save register
                  ;     #   end for
                   ¥h   #   first item of register
                     ;  # end map
</code></pre>
<p>Now we have the sequence of bottom side colors after rolling the cube along the path.</p>
<pre><code>1p       # prepend 1
  ṅ      # join by nothing
   2     # push 2
    ø∧   # canvas draw
</code></pre>
"
"257651","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>Ė⌐Π/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLEluKMkM6gLyIsIiIsIlsyLCA5LCA0LCA4XVxuNyJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Based on @Sean's Raku answer. I feel stupid for not seeing this 4 byte solution sooner.</p>
<pre><code>Ė     reciprocal (1/x)
 ⌐    complement (1-x)
  Π   product
   /  divide
</code></pre>
"
"257687","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>19</s> 18 bytes</h1>
<pre><code>»µ7!¾∷»₄τ¦&gt;ḣ∑∷+›²d
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCu8K1NyHCvuKIt8K74oKEz4TCpj7huKPiiJHiiLcr4oC6wrJkIiwiIiwiMTIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwi4oyIaOKMinfCqFMiLCLCu8K1NyHCvuKIt8K74oKEz4TCpj7huKPiiJHiiLcr4oC6wrJkIiwiIiwiMSA9PiAyXG4yID0+IDJcbjMgPT4gMlxuNCA9PiA4XG4xOCA9PiA4XG4xOSA9PiA4XG4yMCA9PiA4XG4yMSA9PiAxOFxuMjYgPT4gMThcbjMwID0+IDE4XG4zMSA9PiA4XG45MiA9PiAxOFxuMTE4ID0+IDgiXQ=="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p><em>-1 byte</em> by porting part of <a href=""https://codegolf.stackexchange.com/a/257708/116074"">Jonathan Allan's Jelly answer</a>.</p>
<pre><code>»...»               # push compressed integer
     ₄τ             # convert to base 26
       ¦            # cumulative sum
                        this results in the list [3,20,30,38,48,56,80,88,112]
        &gt;           # is less than input?
         ḣ          # extract head, pushes a[0] and a[1:] (a[0] == 0 iff input is less than 4)
          ∑         # sum
           ∷        # modulo 2 (this is 1 iff the 18-electron rule applies)
            +       # add
             ›      # increment
              ²     # square
               d    # double
</code></pre>
"
"257693","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>45</strike> <strike>39</strike> 36 bytes</h1>
<p>- 6 bytes yeah lyxal outgolfed me in about <strike>2</strike> 5 minutes<br />
- 3 bytes by AndrovT using an amazing approach</p>
<pre><code>`-⇩Ḋx '*;^\`,._ $+-Oox~`½℅⌈÷2ƈṅ2ƈ$℅Y
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgLeKHqeG4inggJyo7XlxcYCwuXyAkKy1Pb3h+YMK94oSF4oyIw7cyxojhuYUyxogk4oSFWSIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works</strong></p>
<pre><code>`-⇩Ḋx '*;^\`,._ $+-Oox~`½℅⌈÷2ƈṅ2ƈ$℅Y

`-⇩Ḋx '*;^\`,._ $+-Oox~`½℅⌈    Compressing part:
`-⇩Ḋx '*;^\`,._ $+-Oox~`        Slightly compressed string &quot;-coux '*;^`,._ $+-Oox~&quot;
                        ½℅      Get random half of string (upper and lower level)
                          ⌈     Split on space (eyes and mouth)


÷2ƈṅ2ƈ$℅Y    Random part:
÷             Dump list on register
 2ƈṅ          Choose two random eyes and concatenate them
    2ƈ        Again, choose two random eyes from the above string (probability of having same eyes: 7/12)
       $℅     Swap and choose random mouth
         Y    Interleave eyes with mouth
</code></pre>
"
"257710","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>73</s> <s>68</s> <s>66</s> <s>63</s> <s>62</s> 60 bytes</h1>
<pre><code>‛ngkvvẊ÷V⌈ƛṪAa[ṫ‛iy*J;C«ƛẋ8›ŀ+λ¢Żƛvτ&quot;Ŀ¨z`B†⁋ɽ†g&lt;¹⌊}+.+«⌈$İṠṄ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigJtuZ2t2duG6isO3VuKMiMab4bmqQWFb4bmr4oCbaXkqSjtDwqvGm+G6izjigLrFgCvOu8KixbvGm3bPhFwixL/CqHpgQuKAoOKBi8m94oCgZzzCueKMin0rLivCq+KMiCTEsOG5oOG5hCIsIiIsInRva2kgcG9uYSJd"" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiYCAtPiBg4oKsaHfCqFMiLCLigJtuZ2t2duG6isO3VuKMiMab4bmqQWFb4bmr4oCbaXkqSjtDwqvGm+G6izjigLrFgCvOu8KixbvGm3bPhFwixL/CqHpgQuKAoOKBi8m94oCgZzzCueKMin0rLivCq+KMiCTEsOG5oOG5hCIsIiIsInRva2kgcG9uYSAtPiBwbG9yY2x5IGJvcmdsYXJcbm5hc2luIC0+IGdsYXJzY3JlZW5nXG5wb2tpIC0+IGJvcmNseVxubmkgLT4gZ2xlZVxubWkgb2xpbiBlIHNpbmEgLT4gYmxlZSBvcnNjbGVlbmcgbyBzY3JlZWdsYXJcbnNvd2VsaSBsYXdhIGxpIGlrZSB0YXdhIG1pIC0+IHNjcm9yc3B3b3NjbHkgc2NsYXJzcHdhciBzY2xlZSBlZWNsbyBwbGFyc3B3YXIgYmxlZVxubG9uIHNpa2UgbG9uIG1hIGxhIGphbiBsaWxpIGxpIHRvbW8gLT4gc2Nsb3JuZyBzY3JlZWNsbyBzY2xvcm5nIGJsYXIgc2NsYXIgc2hsYXJuZyBzY2xlZXNjbHkgc2NsZWUgcGxvcmJsb3IiXQ=="" rel=""nofollow noreferrer"">verify all test cases</a>.</p>
<p><em>-3 bytes</em> by emanresu A</p>
<p><em>-3 bytes</em> by slightly modifying emanresu A's 64 byte solution</p>
<p><em>-1 byte</em> by adapting mod 17 indexing from <a href=""https://codegolf.stackexchange.com/a/257740/116074""><em>@Arnauld's</em> JavaScript answer</a></p>
<p><em>-2 bytes</em> by emanresu A</p>
<p>Start by handling the <code>n</code> special case by replacing every occurrence of <code>n</code> where special rules don't apply with <code>g</code>.</p>
<pre><code>‛ng       # push the string &quot;ng&quot;
   kv     # push all vowels &quot;aeiou&quot;
     vẊ   # vectorize cartesian product [[&quot;na&quot;, &quot;ne&quot;, ... ], [ga, ge, ...]]
       ÷  # push each to stack
        V # replace
</code></pre>
<p>Process each word individually, optionally replacing a <code>i</code> at the end with <code>y</code>.</p>
<pre><code>⌈              # split on spaces
 ƛ             # map:
  Ṫ            #   remove last item
   A           #   is vowel?
    a[         #   if any is true:
      ṫ        #     tail extract
       ‛iy     #     push &quot;ib&quot;
          *    #     ring translate
           J   #     concatenate
            ;  # end map
</code></pre>
<p>Now comes the main part where most of the replacements happen.</p>
<pre><code>C             # convert to a list of char codes
 «...«        # push the string &quot;spw gl y ee shl cl scl bl ng or b  ar scr pl oo o&quot;
      ⌈       # split on spaces
       $      # swap top two items on the stack
        İ     # index into (Vyxal indexing wraps around)
         Ṡ    # vectorizing sum
          Ṅ   # join by spaces
</code></pre>
"
"257753","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>11</s> <s>10</s> 9 bytes</h1>
<pre><code>⁰τꜝ⁰ɽ⊍¬)ȯ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigbDPhOqcneKBsMm94oqNwqwpyK8iLCIiLCI2XG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Prints the first n pandigital numbers. Takes n then base.</p>
<p><em>-1 thanks to @mathcat</em></p>
<p><em>-1 thanks to @AndrovT</em></p>
<h2>Explained (old)</h2>
<pre><code>⁰τUs⁰ɽ~↔⁼)ȯ
         )ȯ  # First n numbers where:
⁰τ           #   that number in base input
  Us         #   uniquified sorted
    ⁰ɽ ↔     #   with digits from the range [1, input) kept
      ~ ⁼    #   equals that range
</code></pre>
"
"257873","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 20 bytes</h1>
<pre><code>ɖλZɖλ÷nfṪg›*&quot;;vt;fG²
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJls67WsmWzrvDt25m4bmqZ+KAuipcIjt2dDtmR8KyIiwiIiwiW1sxLDAsMSwxLDFdLFsxLDAsMSwxLDFdLFsxLDEsMSwxLDFdLFsxLDAsMCwxLDBdXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Based on <a href=""https://codegolf.stackexchange.com/a/257862/116074""><em>@Jonah's</em> J answer</a>.</p>
<p>For each 2x2 square</p>
<pre><code>a b
c d
</code></pre>
<p>it replaces <code>d</code> with <code>d*(min(a,b,c)+1)</code> in sequence going from left to right, top to bottom. Then it takes maximum and squares it.</p>
<pre><code>ɖλ                   # scan by:
  Z                  #   zip
   ɖλ                #   scan by:  receives [a,c], [b,d]
     ÷               #     push each to stack
      n              #     push the function argument [[a,c],[b,d]]
       f             #     flatten
        Ṫ            #     remove tail  [a,c,b]
         g           #     minimum
          ›          #     increment
           *         #     multiply
            &quot;        #     pair [b, new d]
             ;       #   end scan
              vt     #   get the tail of each
                ;    # end scan
                 f   # flatten
                  G  # maximum
                   ² # square
</code></pre>
"
"257877","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>27</s> <s>20</s> 18 bytes</h1>
<pre><code>`↔ṅ`₴k2ṁċ[`ec`|`ce`]₴`r…ż`,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJg4oaU4bmFYOKCtGsy4bmBxItbYGVjYHxgY2VgXeKCtGBy4oCmxbxgLCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Edit: this is actually 7 less bytes, at only 20:</p>
<pre><code>k2ṁ[`↓∑ġ¬`|`↔ṅ⇩ṡ…ż`]
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrMuG5gVtg4oaT4oiRxKHCrGB8YOKGlOG5heKHqeG5oeKApsW8YF0iLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Edit 2: Thanks to <a href=""https://codegolf.stackexchange.com/users/100664/emanresu-a?tab=profile"">@emanresu A</a>, this has been shortened to 18 bytes.</p>
<pre><code>k2ṁ[`↓∑ġ¬`|`↔ṅ⇩ṡ…ż
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrMuG5gVtg4oaT4oiRxKHCrGB8YOKGlOG5heKHqeG5oeKApsW8IiwiIiwiMTEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"257880","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>22</s> 21 bytes</h1>
<pre><code>Þn:Ẋλ⁰∩YṘ÷*+-±₌A∑¬∧;c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnm464bqKzrvigbDiiKlZ4bmYw7cqKy3CseKCjEHiiJHCrOKIpztjIiwiIiwiWyg1LCAyKSwgKDQsIDMpXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 byte:</em> Fixed a bug and saved a byte thanks to <em>@KevinCruijssen</em></p>
<p>Simply tries all integer pairs until one works.</p>
<pre><code>Þn                      # all integers
  :                     # duplicate
   Ẋ                    # cartesian product
    λ               ;c  # find first pair [m,b] such that:  
     ⁰∩                 #   transposed input [x-coords, y-coords]
       Y                #   interleave [m, x-coords, b, y-coords]
        Ṙ               #   reverse [y-coords, b, x-coords, m]
         ÷              #   push each to stack
          *             #   multiply
           +            #   add
            -           #   subtract
             ±          #   sign
              ₌A∑¬∧     #   are all non zero and is the sum 0?
</code></pre>
"
"257924","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>¦⁽øβǑ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLCpuKBvcO4zrLHkSIsIiIsIlsoKXs8Pjw+WygpXX08PigpXSgpIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>    Ǒ # First index
¦     # In prefixes of input
 ⁽--  # Where...
  øβ  # Brackets are balanced
</code></pre>
"
"257947","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>9</strike> 7 bytes</h1>
<p>- 2 bytes by AndrovT porting <a href=""https://codegolf.stackexchange.com/a/257949/96037"">Suevers MATL answer</a></p>
<pre><code>ṘkrḂ₀ǔĿ
</code></pre>
<p>No questionable constants :p<br />
<a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuZhrcuG4guKCgMeUxL8iLCIiLCJIZWxsbyB3b3JsZCEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works:</strong></p>
<pre><code>ṘkrḂ₀ǔĿ
Ṙ           Reverse string
 krḂ        Bifurcate [0-9A-Za-z], (duplicate and reverse)
    ₀ǔ      Shift string by 10 [9-0z-aZ-A]
      Ŀ     Transliterate
</code></pre>
"
"257964","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>∆b8∆Z2ẇv∩vvBvṄ`P2 8 8 3`p⁋
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLIp+KMkEgiLCLiiIZiOOKIhloy4bqHduKIqXZ2QnbhuYRgUDIgOCA4IDNgcOKBiyIsIiIsIlwiN0MsIDdDLCAwMCwgQzYsIEM2LCAwMCwgMDAsIEZFLCBDNiwgQzYsIDAwLCBDNiwgQzYsIDAwLCAwMCwgMDBcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of my Japt answer. I'm a total Vyxal noob so I'm sure there are several ways to improve this solution.</p>
"
"257988","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 32 bytes</h1>
<pre><code>2(ðvø.∩)∩ðÞIk□&quot;λhn÷:k□ẊṠJ↔&quot;;Ẋ÷F℅
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLilqHGm2Y7d8KoUyIsIjIow7B2w7gu4oipKeKIqcOww55Ja+KWoVwizrtobsO3OmvilqHhuorhuaBK4oaUXCI74bqKw7dG4oSFIiwiIiwiIC0tLSBcbiB8IHwgXG4tLSAtLVxufCAgIHxcbi0tLS0tIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Expects a rectangular matrix containing <code>|</code>, <code>-</code>, <code> </code>. Returns a 2D index.</p>
<h2>How?</h2>
<p>Surround the input with spaces from all sides.</p>
<pre><code>2(     )  # repeat twice:
  ð       #   push a space
   vø.    #   vectorized surround
      ∩   #   transpose
        ∩ # transpose
</code></pre>
<p>Find the coordinates of all spaces that are in the outside component.</p>
<pre><code>ðÞI                  # get the coordinates of all spaces
   k□                # push cardinal directions [[0,1],[1,0],[0,-1],[-1,0]]
     &quot;               # pair
      λ           ;Ẋ # apply the following function until a fixed point:
                         Takes a pair [coordinates of all spaces,  coordinates spaces reached so far]  
       h             #   head
        n            #   argument
         ÷           #   push each to stack
          :          #   duplicate
           k□        #   push cardinal directions [[0,1],[1,0],[0,-1],[-1,0]]
             Ẋ       #   cartesian product
              Ṡ      #   vectorising sum
               J     #   join the top two item on the stack
                ↔    #   keep only those items of a that are in b
                 &quot;   #   pair
</code></pre>
<p>Now we have the pair <code>[coordinates of all spaces,  coordinates of spaces reachable from one of the sides]</code>.</p>
<pre><code>÷   # push each to stack
 F  # remove items from a that are in b
  ℅ # choose a random item
</code></pre>
"
"258018","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>λΠvx
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLOu86gdngiLCIiLCJbW1tdLFtbXV0sW11dLCBbW10sW1tdXV1dIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Jonathan Allan's Jelly answer.</p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>λ    # Start a lambda function
 Π   # Cartesian product
  v  # For each inner list:
   x #  Do a recursive call
</code></pre>
"
"258020","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>ʀėṠ:Ẋ'ɖ↔ꜝnF;?ḣL≠∨
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyoDEl+G5oDrhuoonyZbihpTqnJ1uRjs/4bijTOKJoOKIqCIsIiIsIls1LDIsMCwwLDAsMF1cbls1LDIsMSwwLDAsMF1cbls1LDIsMSwwLDEsMF1cbls1LDMsMSwwLDAsMF1cbls2LDUsNCwzLDIsMSwwXVxuWzBdXG5bMCwwLDAsMCwwLDBdXG5bNSwyLDEsMSwwLDBdXG5bNSwyLDAsMSwwLDBdXG5bNSwzLDEsMCwxLDBdXG5bNiwyLDEsMCwwLDBdXG5bNSwzLDEsMCwwLDFdXG5bNCwzLDEsMCwwLDBdIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Outputs a falsy value if it is a counting tree and a truthy if it's not.</p>
<p>Uses the fact that it is a counting tree iff</p>
<ol>
<li>the first number is equal to the length of the rest of the list</li>
<li>for each pair of values <code>a</code>, <code>b</code> at indices <code>i</code>, <code>j</code> respectively the inclusive ranges <code>[i, i+a]</code> and <code>[j, j+b]</code> are either disjoint or one is a subset of the other</li>
</ol>
<p>Get all inclusive ranges.</p>
<pre><code>ʀ   # elementwise inclusive range from 0
 ė  # enumerate
  Ṡ # elementwise sum
</code></pre>
<p>Get all pairs and keep only those that don't satisfy 2.</p>
<pre><code>:         # duplicate
 Ẋ        # cartesian product
  '     ; # filter by:
          #                        [[1,2,3],[3,4]]
   ɖ↔     #   scan by intersection [[1,2,3],[3]]
     ꜝ    #   keep truthy          [[1,2,3],[3]]
      n   #   push argument        [[1,2,3],[3]], [[1,2,3],[3,4]]
       F  #   set difference       [[3]]
          #   empty are falsy, non-emtpy are truthy
</code></pre>
<p>Check if 1. is not satisfied and combine the two.</p>
<pre><code>?     # push input
 ḣ    # head extract
  L   # length
   ≠  # not equal
    ∨ # or
</code></pre>
"
"258031","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>Þ∞K
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInksiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>Þ∞ɾ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnuKInsm+IiwiIiwiIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>Þ∞  # Push an infinite list of positive integers:   [1, 2, 3, 4, 5, ...]
  K # Get the prefixes of this list                 [[1], [1, 2], [1, 2, 3], ...]
  ɾ # Inclusive one-range of each:                  [[1], [1, 2], [1, 2, 3], ...]
</code></pre>
"
"258066","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<pre><code>søṖ'L⁰=;‡ƛṁ-²ṁ;∑∵
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJzw7jhuZYnTOKBsD074oChxpvhuYEtwrLhuYE74oiR4oi1IiwiIiwiWzEwLCAxMywgNiwgMTEsIDhdXG4zIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>s                 # sort
 øṖ               # all partitions
   '   ;          # filter by:
    L             #   length
      =           #   is equal to
     ⁰            #   last input
        ‡       ∵ # minimum by:
         ƛ    ;   #   map:
          ṁ-      #     subtract mean
            ²     #     square
             ṁ    #     mean
               ∑  #   sum
</code></pre>
"
"258069","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>2J≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIySuKJiCIsIiIsIlsyLDIsMl1cbiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Append a 2, check if everything is equal</p>
"
"258084","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 18 bytes</h1>
<pre><code> 4(:⁽ḭÞC÷-$∩R)_WÞMh
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiIDQoOuKBveG4rcOeQ8O3LSTiiKlSKV9Xw55NaCIsIiIsIltbMSwgMl0sIFszLCA0XV1cbltbNSwgN10sIFs5LCAyXV1cbltbNSwgNl0sIFs3LCA4XV1cbltbMSwgOV0sIFsyLCAzXV1cbltbMiwgNV0sIFs2LCA4XV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Unfortunately useful operator <code>İ</code> &quot;collect while unique&quot; currently works bad, so simple for-loop is used.</p>
<pre>
4(     # Open for-loop with 4 iterations
:      # Duplicate
⁽ḭÞC   # Reduce columns by integer division
÷-     # Calculate value
$      # Swap
∩R     # Transpose + Reverse = Rotate
)      # Close loop 
_      # Pop unnecessary
W      # Wrap stack into list
ÞM     # Find all indices of maximum
h      # Pick and print one (first)
</pre>
"
"258089","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 14 bytes</h1>
<pre><code>ṖvøṖÞf'Ṡ¨=⌊;ÞG
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJhIiwiIiwi4bmWdsO44bmWw55mJ+G5oMKoPeKMijvDnkciLCIiLCIxLzJcbjEvM1xuMS82XG42LzdcbjgvNyJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Times out for anything more than 5 fractions if you're lucky. Don't even bother giving it the third and fourth test case.</p>
<p>Inputs as a list of fraction objects. Due to technical limitations, this is done with the <code>a</code> flag for convenience.</p>
<h2>Explained</h2>
<pre><code>ṖvøṖÞf'Ṡ¨=⌊;ÞG # We'll call the length of the list N so we can see why this takes so long
Ṗ              # Permutations of the input - returns a list of N! items
 vøṖ           # To each of the N! permutations, get all possible partitions. Each permutation has 2^(N-1) partitions, so there are now N! * 2^(N-1) sublists but still N! items
    Þf         # Flatten the entire thing by one level. This iterates over each of those N! * 2^(N-1) sublists.
      '    ;   # From those partitions of permutations, keep only those where: (also iterating over each of those N! * 2^(N-1) items)
       Ṡ       #   Summating each partition
        ¨=⌊    #   is invariant under flooring
            ÞG # Get the longest remaining item.
</code></pre>
"
"258124","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <strike>22</strike> <strike>10</strike> 7 bytes</h1>
<p>-12 bytes by emanresu A (double welp)<br />
-3 bytes by alephalpha using a clever approach</p>
<pre><code>ꜝ$ʀƈ¦ṁȧ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLqnJ0kyoDGiMKm4bmByKciLCIiLCI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works</strong></p>
<pre><code>ꜝ$ʀƈ¦ṁȧ
ꜝ$               Bitwise not n and swap with input
  ʀƈ             Take the binomial coefficient
    ¦ṁȧ          Cumultative sum, take the mean and push the absolute value
</code></pre>
"
"258214","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>(Ġ:‡ḢḢǑ⟇f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIoxKA64oCh4bii4biix5Hin4dmIiwiIiwiJzEzMjIyMzIyMjMyMjIzMTEnIl0="" rel=""noreferrer"">Try it Online!</a></p>
<p>Why use fixed point when you can do too much work?</p>
<pre><code>(         # Over each character
 Ġ        # Group identical items
  :   Ǒ   # Find the first group where...
   ‡--    # Next two as lambda
    ḢḢ    # Removing the first two items yields a truthy result
       ⟇  # Remove the group at the index
        f # Flatten the result.
</code></pre>
"
"258219","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<p><em>+1 byte from @Jacob for informing me about the requirement for exclusive range</em></p>
<pre><code>rḢ'æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJy4biiJ8OmIiwiIiwiMTBcbjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Finds all the primes between the first input and the second input (exclusive).</p>
<h2>Explanation</h2>
<pre><code>r      # Get the range from [&lt;input 1&gt;, ..., &lt;input 2&gt;-1]
 Ḣ     # Remove the first value (so it's exclusive on both ends)
  '    # of that range, filter....
   æ   # only those which are prime
</code></pre>
"
"258233","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a> <code>s</code>, 0 bytes</h1>
<pre><code>
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwiIiwiIiwiNjk0MjAiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p>That's right. No bytes needed.</p>
<p>Alternatively</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 1 byte</h2>
<pre><code>∑
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJEiLCIiLCI2OTQyMCJd"" rel=""noreferrer"">Try it Online!</a></p>
<p>Just the built-in that works on numbers</p>
"
"258304","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12 11</s> 9 bytes</h1>
<pre><code>Þp~Þu'fæA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDnnB+w551J2bDpkEiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Prints the sequence infinitely.</p>
<p>Saved a byte by using a trick from caird's Jelly answer. <br />
Saved 2 bytes thanks to emanresu A.</p>
<h4>Explanation</h4>
<pre><code>Þp~Þu'fæA
Þp         # All primes
  ~Þu      # Filtered by are their digits unique
     'fæA  # Filtered by are their digits all prime
</code></pre>
<p>Old:</p>
<pre class=""lang-python prettyprint-override""><code>Þun:fpæA∧)l
         )l  # First n non-negative integers where:
Þu           #  It has unique digits
        ∧    #  And
  n:fp       #  Its digits with it prepended
      æA     #  All are prime
</code></pre>
"
"258325","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>₌i∑/₁*
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigoxp4oiRL+KCgSoiLCIiLCI0XG5bMSwgMiwgMywgNCwgNV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Another 6 byter joins the fray. Takes index then list. 0-indexed</p>
<h2>Explained</h2>
<pre><code>₌i∑/₁*
₌i∑     # Push list[index], sum(list)
   /    # ^ / ^
    ₁*  # times 100
</code></pre>
"
"258337","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s> 6  5 </s> 4 bytes</h1>
<pre><code>?F)ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI/RinhuYUiLCIiLCJbMSwyLDMsNCw1LDYsN10iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-2 thanks to @lyxal</em></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>?F)ṅ  # Implicit input
  )ṅ  # First integer where:
?F    #  Remove elements from the input which are in this number
      #  (i.e. is the number not in the input)
</code></pre>
"
"258407","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>b
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJiIiwiIiwiMTAiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
"
"258434","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>9</s> 8 bytes</h1>
<pre><code>ɾ3ḋ'²÷ε=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvjPhuIsnwrLDt861PSIsIiIsIjIwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>I'm surprised I didn't manage to make this horribly inefficient.</p>
<p><em>-1 thanks to Kevin!</em></p>
<h2>Explained</h2>
<pre><code>ɾ3ḋ'²÷ε=
ɾ          # Range [1, input]
 3ḋ        # Combinations of length 3
   '       # filtered by:
    ²      #   squaring everything
     ÷     #   dumping the triplet onto the stack in reverse order
      ε    #   absolute difference of b**2 and c**2
       =   #   equals a**2
</code></pre>
"
"258445","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 60 bytes</h1>
<pre><code>ƛṖvøṖÞf'L⁰=;'ƛhw&quot;λhn÷:k□ẊṠJ↔&quot;;Ẋ≈;A;ƛƛ3(:k+v*Ṙ)Wƛgv-s;g;s;;ƒ↔
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJUIiwi4pahwqTigqzDt+KIh1wixpt2ZlxceMOeSTt3JErCqFMiLCLGm+G5lnbDuOG5lsOeZidM4oGwPTsnxptod1wizrtobsO3OmvilqHhuorhuaBK4oaUXCI74bqK4omIO0E7xpvGmzMoOmsrdirhuZgpV8abZ3YtcztnO3M7O8aS4oaUIiwiIiwieHh4XG4geFxuIHhcblxueHh4XG54IHhcblxuMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very slow. Takes input as a list of lists of coordinates of the two shapes and then the number pieces. Outputs truthy value if it is possible and falsy otherwise. Works by finding all possible dissections into <span class=""math-container"">\$n\$</span> connected pieces for both of the shapes and then checking if they have any in common.</p>
<p>Get all dissections into <span class=""math-container"">\$n\$</span> pieces:</p>
<pre><code>ṖvøṖÞf'L⁰=;
</code></pre>
<p>Keep only those where all the pieces are connected:</p>
<pre><code>'ƛhw&quot;λhn÷:k□ẊṠJ↔&quot;;Ẋ≈;A;
</code></pre>
<p>Transform all of the pieces into a unique representation by getting all rotations, sorting the coordinates by dictionary ordering, translating them so the first coordinate is <code>[0, 0]</code> and then taking the smallest one.</p>
<pre><code>ƛƛ3(:k+v*Ṙ)Wƛgv-s;g;s;
</code></pre>
"
"258479","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ɾ$ÞṖRf
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJviTDnuG5llJmIiwiIiwiOFxuWzEsIDQsIDVdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes <code>n</code> and then a list of indices.</p>
<pre><code>ɾ      # range
 $     # swap top two items on the stack
  ÞṖ   # split before indices
    R  # reverse each
     f # flatten
</code></pre>
"
"258497","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 16 bytes</h1>
<pre><code>y1Ǔ-:∆ṁ-:N1ǔY0v∴
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ5MceTLTriiIbhuYEtOk4xx5RZMHbiiLQiLCIiLCIxLDIsMyw0LDUsNiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/258428/116074""><em>Neil's</em> Charcoal answer</a>.</p>
<pre><code>y                 # uninterleave
 1Ǔ               # rotate left by one
   -              # subtract
    :             # duplicate
     ∆ṁ           # median
       -          # subtract
        :         # duplicate
         N        # negate
          1ǔ      # rotate right by one
            Y     # interleave
             0v∴  # elementwise maximum with 0
</code></pre>
"
"258513","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ǎ~øβÞGL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwix45+w7jOssOeR0wiLCIiLCIoKCkoKSlcbikoKSgpKVxuKCkoKVxuKCkoKClcbikpXG5cIlwiIl0="" rel=""noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ǎ~øβÞGL
ǎ       # substrings of the input
 ~øβ    # with only those with balanced brackets kept
    ÞGL # get the length of the longest substring that remains
</code></pre>
"
"258562","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>C∑k₴%C
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJD4oiRa+KCtCVDIiwiIiwiW1wi0J/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40LVcIiwgXCJQcm9ncmFtbWluZ1wiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works</strong>:</p>
<pre><code>C∑k₴%C
C∑       Sum codepoints of each word
  k₴%    Push 65535 and modulo by each element
     C   Convert codepoints to words
</code></pre>
"
"258590","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>`†`ẎɽUL
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiYOKAoGDhuo7JvVVMIiwiIiwiXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nXCJcblwiVG8gYmUsIG9yIG5vdCB0byBiZSwgdGhhdCBpcyB0aGUgcXVlc3Rpb25cIlxuXCJIZWxsbywgV29ybGQhXCJcblwiaGVsbG8td29ybGQyXCJcblwiSGVsbG8sIFdvcmxkISBIZWxsbyFcIlxuXCLihpBUaGUtcXVpMmNrLmJy8J2fkG93X24lZm94IGp1w71wcyBvdmVy4omgdGhlIGzmooF6eSBkb2dcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>`†`Ẏ    # find all matches of \w+
    ɽ   # to lowercase
     U  # uniquify
      L # length
</code></pre>
<h2>With a flag:</h2>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>l</code>, 6 bytes</h1>
<pre><code>`†`ẎɽU
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBbCIsIiIsImDigKBg4bqOyb1VIiwiIiwiXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nXCJcblwiVG8gYmUsIG9yIG5vdCB0byBiZSwgdGhhdCBpcyB0aGUgcXVlc3Rpb25cIlxuXCJIZWxsbywgV29ybGQhXCJcblwiaGVsbG8td29ybGQyXCJcblwiSGVsbG8sIFdvcmxkISBIZWxsbyFcIlxuXCLihpBUaGUtcXVpMmNrLmJy8J2fkG93X24lZm94IGp1w71wcyBvdmVy4omgdGhlIGzmooF6eSBkb2dcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"258591","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>²∑√/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLCsuKIkeKImi8iLCIiLCJbNS41LCA2LCAtMy41XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>²    # Square each
 ∑   # Sum
  √  # Square root
   / # Divide by that
</code></pre>
"
"258610","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 28 - 10 = 18 bytes</h1>
<pre><code>(λṁn∆ṁwfṁnDvOÞMİṁn₌Gg-WW;†)ṁ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuItBIiwiIiwiKM674bmBbuKIhuG5gXdm4bmBbkR2T8OeTcSw4bmBbuKCjEdnLVdXO+KAoCnhuYEiLCIiLCIzLCBbMSwgMiwgMywgNCwgNV1cbjMsIFsxLCAxLCAxLCAxLCAxXVxuMywgWzIsIDMsIDUsIDcsIDExLCAxMywgMTcsIDE5LCAyMywgMjksIDMxLCAzNywgNDEsIDQzLCA0NywgNTMsIDU5LCA2MSwgNjcsIDcxLCA3MywgNzksIDgzLCA4OSwgOTddXG4zLCBbMCwgNSwgMTAsIDUwXVxuMywgWzQsIDQsIDgsIDEwLCAxNiwgMjQsIDEwMCwgMTUwLCAyMDAsIDIwMCwgMjUwXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A horrible mess of <code>n</code>s, <code>ṁ</code>s and other letters.</p>
<h2>Explained</h2>
<pre><code>(λṁn∆ṁwfṁnDvOÞMİṁn₌Gg-WW;†)ṁ
(                         )  # first inputh times
 λ                      ;†   # do to argument n:
  ṁ                          #  mean of n
   n∆ṁwfṁ                    #  average of medians of n
         nDvOÞMİṁ            #  average of modes of n. If it was smallest mode or first mode, this could just be ∆M
                 ₌Gg-        #  range of n
                     WW      #  wrap into a list
                           ṁ # average of that
</code></pre>
"
"258676","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ʁ∷:v=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLKgeKItzp2PSIsIiIsIjQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-3 thanks to @lyxal</em> <br />
<em>-1 thanks to @emanresuA</em></p>
<h4>Explanation</h4>
<pre><code>ʁ∷:v=    implicit input
ʁ        range(input)
 ∷       mod 2
  :      duplicate
   v=    equals, vectorised over the top list
         (generates a nested list)
</code></pre>
<p>Old:</p>
<pre><code>ɾ∷ẋ⁽†ẇ    implicit input
ɾ         range(1, input+1)
 ∷        mod 2
  ẋ       repeated input times
     ẇ    apply to every 2nd item:
   ⁽†     vectorised not
</code></pre>
<pre><code>ʁ:∷:†$&quot;$İ    implicit input
ʁ:           range, duplicate
  ∷:         mod 2, duplicate
    †        vectorised not
     $&quot;      swap and pair
       $İ    swap and index in
</code></pre>
"
"258741","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>5</s> 4 bytes</h1>
<pre><code>‡C∑P
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKFD4oiRUCIsIiIsIltcImhlbGxvXCIsXCJ3b3JsZFwiLFwiY29kZVwiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-1 thanks to @mathcat</em></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>‡C∑P  # Implicit input
‡  P  # Minimum by:
 C    #  ASCII values
  ∑   #  Sum
      # Implicit output
</code></pre>
<p>Old:</p>
<pre class=""lang-python prettyprint-override""><code>C∑)ṡh # Implicit input
  )ṡ  # Sort by:
C     #  ASCII values
 ∑    #  Sum
    h # First item
      # Implicit output 
</code></pre>
"
"258754","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h1>
<pre><code>ɽøWǍUL‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvcO4V8eNVUzigLkiLCIiLCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Explanation:</p>
<pre><code>ɽ       - Lowercases Input
 øW     - Groups string by words into a list
   Ǎ    - Removes all non-alphabetical items, leaving empty list spaces
    U   - Removes all non-unique list items
     L  - Gets length of list
      ‹ - Decrements by 1, to account for extra list item for first symbol
</code></pre>
"
"258765","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ǍɽĊs
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHjcm9xIpzIiwiIiwiXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nXCIiXQ=="" rel=""noreferrer"">Try it Online!</a></p>
<p><strong>How it works</strong>:</p>
<pre><code>ǍɽĊs
Ǎɽ    Remove non-alphabetical chars and lowercase
  Ċ   Count of each element
   s  Sorted 
</code></pre>
"
"258813","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 12 bytes</h1>
<pre><code>ṄλĖ∑1=nÞu∧;c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuYTOu8SW4oiRMT1uw5514oinO2MiLCIiLCI4MCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>No need to worry about floating point error, because everything is fractions under the hood.</p>
<h2>Explained</h2>
<pre><code>ṄλĖ∑1=nÞu∧;c
Ṅλ        ;c  # From all integer partitions of the input, get the first where
  Ė∑          #  the sum of reciprocals
    1=        #  equals 1
         ∧    #  and
      nÞu     #  the partition has unique integers
</code></pre>
"
"258816","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 23 bytes</h1>
<pre><code>D0J¨pε⁽ṅḋ•ƛL⁰≥[₍ht\-Y}f
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJEMErCqHDOteKBveG5heG4i+KAosabTOKBsOKJpVvigo1odFxcLVl9ZiIsIiIsIlszLCA1LCA2LCA3LCA4LCAxMCwgMTEsIDEyLCAxNCwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDI0XVxuNCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>23 bytes seems to be the standard here, so I figured I'd add my own 23 byter. Takes <code>L</code>ist then <code>N</code>.</p>
<h2>Explained</h2>
<pre><code>D0J¨pε⁽ṅḋ•ƛL⁰≥[₍ht\-Y}f
D0J                     # Push 3 copies of the input and append 0 to the last
   ¨pε                  # get the absolute difference of each overlapping pair
      ⁽ṅḋ               # group by diff &lt;= 1
         •              # mold to shape
          ƛ          }  # to each consecutive run:
           L⁰≥[         #   if the length is &gt;= N
               ₍ht\-Y   #     [head, &quot;-&quot;, tail]
                      f # flatten that
</code></pre>
"
"258819","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>13</s> 12 bytes</h1>
<pre><code>'‡d›↔4ẎæB13=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIn4oChZOKAuuKGlDThuo7DpkIxMz0iLCIiLCIxNTAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>If I've understood the challenge correctly, for a number to be Imtiaz Germain, it has to first be prime, and applying <code>2p+1</code> 3 times must produce the required pattern. Hence, the list <code>[p, 2p + 1, 2(2p + 1) + 1, 2((2(2p + 1) + 1) + 1)]</code> must equal <code>[1, 1, 0, 1]</code>, which is <code>13</code> when converted from binary.</p>
<p>Accidentally the same algorithm as Jelly, which was posted while I was writing the explanation :p</p>
<h2>Explained</h2>
<pre><code>'‡d›↔4ẎæB13=
'             # From the range [1, input], keep numbers N where:
     4Ẏ       #   the first 4 items of
 ‡d›↔         #   applying `lambda x: 2 * x + 1` until fixed-point (yes it's infinite, but lazy evaluation means it doesn't get stuck here)
       æ      #   tested for primality
        B     #   converted from binary
         13=  #   equals 13. This works for the reason explained in the introduction.
</code></pre>
"
"258908","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ʀ:E*›c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiyoA6RSrigLpjIiwiIiwiMVxuM1xuNVxuOVxuMTJcbjI1Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>ʀ:E*›c
ʀ:     # push 2 copies of the range [0, input]
  E    # 2 ** x for x in ^
   *   # vectorised multiply with the other copy
    ›  # + 1
     c # contains the input?
</code></pre>
"
"258934","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>•
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigKIiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Same as Jelly</p>
"
"258946","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>56</s> <s>49</s> 46 bytes</h1>
<pre><code>(ṫ~c[€ɖ‡ṘNf&amp;›|p;ȧ:(ṫ€:ḣt↔h:ḃ∇v€ÞfḣṘJf)W∑¥[d¥+N
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwi4pah4bmrYCAtPiBg4oKsaErijIp3wqhTIiwiKOG5q35jW+KCrMmW4oCh4bmYTmYm4oC6fHA7yKc6KOG5q+KCrDrhuKN04oaUaDrhuIPiiId24oKsw55m4bij4bmYSmYpV+KIkcKlW2TCpStOIiwiIiwiW10gLT4gMFxuWzEsIC0xXSAtPiAwXG5bMSwgMV0gLT4gLTFcblsxLCAyLCAtMiwgLTFdIC0+IDBcblsxLCAyLCAtMSwgLTJdIC0+IDFcblsxLCAyLCAxLCAtMl0gLT4gLTJcblsxLCAyLCAxLCAyXSAtPiAtMVxuWy0yLCAtMiwgLTEsIDFdIC0+IC0xXG5bMSwgMiwgMywgLTEsIC0yLCAtM10gLT4gMVxuWy0zLCAxLCAzLCAtMiwgMSwgMl0gLT4gLTJcblsxLCAyLCAzLCA0LCAtMSwgLTIsIC0zLCAtNF0gLT4gMlxuWzEsIDIsIDQsIDQsIC0yLCAtMywgMSwgLTNdIC0+IC0yXG5bMSwgLTgsIDIsIC02LCAzLCAtMSwgNCwgLTIsIDUsIC05LCA2LCAtNCwgNywgLTUsIDgsIC0zLCA5LCAtN10gLT4gMlxuWzEsIC04LCAyLCAtOSwgMywgLTEsIDQsIC0yLCA1LCAtMywgNiwgLTQsIDcsIC01LCA4LCAtNiwgOSwgLTddIC0+IDNcbls0LCAzLCAyLCAxLCAxLCAyLCAzLCA0XSAtPiAtNFxuWzMsIDQsIDEsIDIsIDYsIDcsIC00LCA1LCAtMiwgLTMsIC03LCAtMSwgLTUsIC02XSAtPiAzXG5bMSwgMiwgMywgMywgLTEsIC0yXSAtPiAtMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>First we extract all cross-caps. This is done by looking at the last symbol. If it occurs in the same orientation twice, the cross-cap is extracted by taking a word <span class=""math-container"">\$PaQa\$</span> and transforming it into <span class=""math-container"">\$PQ^{-1}\$</span>, incrementing the register each time it happens. Otherwise the word is rotated to the left. This is repeated as many times as the number of symbols in the input.</p>
<pre><code>(ṫ~c[€ɖ‡ṘNf&amp;›|p;
(              ; # run the following once for each symbol in the input:
                                               [1, 2, 3, 1, -2, 3]
 ṫ               #   tail extract              [1, 2, 3, 1, -2], 3
  ~c             #   contains? without popping [1, 2, 3, 1, -2], 3, 1
    [            #   if:
     €           #     split on                [[1, 2], [1, -2]]
      ɖ‡--       #     apply the following to the second item:
        ṘN       #       reverse and negate
                                               [[1, 2], [2, -1]]
          f      #     flatten                 [1, 2, 2, -1]
           &amp;›    #     increment register
             |   #   else:
              p  #     prepend
</code></pre>
<p>Now we are left with a word of an orientable surface so we can forget which symbols are inverted.</p>
<p>Now we extract handles and remove adjacent inverses. This is done by looking at the last symbol. We write the word as <span class=""math-container"">\$PaQa\$</span>. If there is a common symbol in <span class=""math-container"">\$P\$</span> and <span class=""math-container"">\$Q\$</span> there exists a handle <span class=""math-container"">\$RbSaTbUa\$</span> so we transform the word into <span class=""math-container"">\$RUTS\$</span>, leaving a 1 on the stack each time it happens. If there are no common symbols in <span class=""math-container"">\$P\$</span> and <span class=""math-container"">\$Q\$</span> then <span class=""math-container"">\$a\$</span> will eventually become adjacent with itself so we can delete it, leaving a 0 on the stack each time it happens. This is repeated as many times as the number symbols left in the word after extracting cross-caps.</p>
<pre><code>ȧ:(ṫ€:ḣt↔h:ḃ∇v€ÞfḣṘJf)
ȧ                      # absolute value
 :(                  ) # run the following once for each symbol in the word:
   ṫ                   #   tail extract
    €                  #   split on
     :                 #   duplicate
      ḣ                #   head extract
       t               #   tail
        ↔              #   intersection
         h             #   head
          :            #   duplicate
           ḃ           #   boolify
            ∇          #   shift (leave it on the stack for later)
             v€        #   vectorise split on
               Þf      #   flatten by one level
                 ḣ     #   head extract
                  Ṙ    #   reverse
                   Jf  #   join and flatten
</code></pre>
<p>All that's left is to combine the number of cross-caps extracted and number of handles extracted.</p>
<pre><code>W∑¥[d¥+N
W        # wrap stack in a list
 ∑       # sum
  ¥[     # if register is non-zero
    d    #   double
     ¥+  #   add register
       N #   negate
</code></pre>
"
"258952","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>15</s> <s>13</s> <s>10</s> 9 bytes</h1>
<pre><code>(:g…Ȯt=ǔḢ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIoOmfigKbIrnQ9x5ThuKIiLCIiLCJbNCwgMywgMSwgMl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><s>It's not every day I get to use recursion in a lambda</s> Nevermind, I don't anymore.</p>
<p><em>-3 thanks to AndrovT</em></p>
<p><em>-1 by outputting items on newlines</em></p>
<h2>Explained</h2>
<pre><code>(:g…Ȯt=ǔḢ
(          # input length times:
 :g…       #   get the minimum of the top of the stack without popping and print that without popping
    Ȯt     #   push the tail of the item over the top of the stack
      =    #   does that equal the min?
       ǔ   #  rotate the list right that many times (once if tail is min [placing tail at front] or no times at all).
        Ḣ  #  Remove the head of the list
</code></pre>
"
"258959","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>':d›n‹½WæA
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCInOmTigLpu4oC5wr1Xw6ZBIiwiIiwiMTAwMCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Ports japt. Quite literally get all numbers where n, 2n incremented, and n decremented halved are all prime. Here's a more fun 11 byter</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h2>
<pre><code>~æ~≬‹½æ'd›æ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ+w6Z+4oms4oC5wr3Dpidk4oC6w6YiLCIiLCIxMDAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>~æ~≬‹½æ'd›æ
~æ          # keep only from range [1, input] where prime
  ~≬---     # from that, keep where:
   ‹½       #   (n - 1) / 2
     æ      #   is prime
      '     # from that, keep where:
       d›   #   2n + 1
         æ  #   is prime
</code></pre>
"
"259048","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 26 bytes</h1>
<pre><code>fC‹\1꘍›ṅ»¬½ẆZ¶ẋḞ≥P»3R2€yøV
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiZkPigLlcXDHqmI3igLrhuYXCu8Kswr3huoZawrbhuovhuJ7iiaVQwrszUjLigqx5w7hWIiwiIiwiXCJSUlJSUlwiXG5cIkxMTExTUlJSUlNcIlxuXCJTUlJTUlJTUlJTUlJcIlxuXCJcIlxuXCJSXCJcblwiU1wiXG5cIkxMTExMTFwiXG5cIlNMTExMUlwiXG5cIlNTU1NSU1JSU0xTTExSTFJMXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of <a href=""https://codegolf.stackexchange.com/a/259059/116074""><em>@Neil's</em> Retina answer</a>. Returns a falsey value if the path is closed and truthy otherwise.</p>
<pre><code>fC                   # covert to a list of charcodes
  ‹                  # decrement
   \1꘍               # prepend that many spaces to &quot;1&quot;
      ›              # replace spaces with zeros
       ṅ             # join by nothing
        »...»        # push the compressed integer 36932780194571550874
             3R      # convert to base 3 &quot;100010001201010210101200010001000200002211&quot;
               2€    # split on 2 [&quot;100010001&quot;, &quot;01010&quot;, &quot;10101&quot;, &quot;00010001000&quot;, &quot;0000&quot;, &quot;&quot;, &quot;11&quot;]
                 y   # uninterleave [&quot;100010001&quot;, &quot;10101&quot;, &quot;0000&quot;, &quot;11&quot;], [&quot;01010&quot;, &quot;00010001000&quot;, &quot;&quot;]
                  øV # replace strings from the first list with corresponding strings from the second list while it's possible
</code></pre>
<h2>Old:</h2>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 44 bytes</h1>
<pre><code>‹‹C‹λ2Ẏk₁⁼[ḢḢǔk₁-3Y]₌ǔh¬[3₌ȯẎ∑J]:hċßN4%;İṪta
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oC54oC5Q+KAuc67MuG6jmvigoHigbxb4bii4biix5Rr4oKBLTNZXeKCjMeUaMKsWzPigozIr+G6juKIkUpdOmjEi8OfTjQlO8Sw4bmqdGEiLCIiLCJcIlJSUlJSXCJcblwiTExMTFNSUlJSU1wiXG5cIlNSUlNSUlNSUlNSUlwiXG5cIlwiXG5cIlJcIlxuXCJTXCJcblwiTExMTExMXCJcblwiU0xMTExSXCJcblwiU1NTU1JTUlJTTFNMTFJMUkxcIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Returns <code>0</code> for closed paths and <code>1</code> otherwise.</p>
<p>First it represents the turns right, straight, left and backwards with numbers 1, 2, 3 and 0 respectively.</p>
<p>If the path is closed with length greater than 1, then it can be reduced to path <code>0, 0</code> with the following transformations:</p>
<ol>
<li>Rotating the path (e. g. <code>0, 1, 2, 1, 3 -&gt; 3, 0, 1, 2, 1</code>)</li>
<li>Changing right turns to left turns and vice versa (e. g. <code>0, 1, 2, 1, 3 -&gt; 0, 3, 2, 3, 1</code>)</li>
<li>If the path contains the pattern <code>a, 0, b</code> replacing it with <code>a+b mod 4</code> (e. g. <code>2, 0, 1, 3 -&gt; 3, 3</code>)</li>
<li>If the path contains the pattern <code>a, 1, 1, b</code> replacing it with <code>(a-1 mod 4), 3, (b-1 mod 4)</code> (e. g. <code>1, 1, 1, 2 -&gt; 0, 3, 1</code>)</li>
</ol>
<p>This is because a closed path has at least one of <code>0</code>, <code>[1, 1]</code> and <code>[3, 3]</code> so we can always use the transformations to shorten it.</p>
<h2>Code explanation</h2>
<p>Append &quot;--&quot; representing two backwards turns to avoid cases where the path is too short.</p>
<pre><code>‹‹
</code></pre>
<p>Replace L, R, S and - with the corresponding numbers.</p>
<pre><code>C    # get the ascii value
 ‹   # decrement
     # eventually when mod 4 gets applied it will transform into the correct numbers
</code></pre>
<p>Apply the a function repeatedly and collect unique results</p>
<pre><code>λ ... ;İ
</code></pre>
<p>where the function is:</p>
<ul>
<li><p>Use the fourth transformation</p>
<pre><code>  2Ẏk₁⁼           # are the first two items equal to 1?
       [        ] # if they are:
        ḢḢ        #   remove first two items
          ǔ       #   rotate right
           k₁-    #   subtract 1 from the first two items
              3Y  #   insert 3 into the second position
</code></pre>
</li>
<li><p>Use the third transformation and rotate</p>
<pre><code>  ₌ǔh          # push the list rotated to the right and then the first item of the original list
     ¬[      ] # if it's equal to 0:
       3₌ȯẎ    #   push a[3:] and a[:3]
           ∑   #   sum
            J  #   join
</code></pre>
</li>
<li><p>Mirror the turns such that the first turn is not 3</p>
<pre><code>  :hċß    # if the first item is not 1:
      N   #   negate each
       4% # mod 4
</code></pre>
</li>
</ul>
<p>Finally check if the second to last item in the list is <code>[0, 0]</code>.</p>
<pre><code>Ṫ   # remove last item
 t  # last item
  a # is any truthy
</code></pre>
"
"259052","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>bṅÞS'3/≈;h≈
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJi4bmFw55TJzMv4omIO2jiiYgiLCIiLCI3MjUiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCInIiwiYuG5hcOeUyczL+KJiDto4omIIiwiwqwiLCIyMDAiXQ=="" rel=""nofollow noreferrer"">get all the Bubbler numbers up to a given number</a>.</p>
<p>Port of Kevin Cruijssen's 05AB1E answer. Outputs <span class=""math-container"">\$0\$</span> for truthy and <span class=""math-container"">\$1\$</span> for falsy.</p>
<h4>Explanation</h4>
<pre><code>bṅÞS'3/≈;h≈   # Implicit input
bṅ            # Input as a binary string
  ÞS          # All substrings
    '   ;     # Filtered by:
     3/       #  Split into three parts
       ≈      #  All equal?
         h    # First item
          ≈   # All equal?
              # Implicit output
</code></pre>
"
"259064","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 285 - 310 - 15 - 25 = -65 bytes</h1>
<pre><code>`∷¾`=[`λ⟩ ƛ∪ λλ ∷¾ ∨¶`|`Ḃṙ ∞¨ εċ ṗµ √₇ Ṁ⋎ ¢₌ β¡ ¦‹ √⊍ ₃⇩ •ƈ ṡƒ ¦ø ḟ₇ Ẇ⟑ µɽ ½ż Þ‡ ₃⅛ Ḣ⟨ ₈Ḋ ġṄ ⁋ė Ċṁ ∴† Ẏ₇ ass ₀⌈ ⌊ṫ Ȯ⁰`⌈?ḟ:£0≥[`s⇩⋏↳⋎ r⋎« Ȧ¨ r⋎« r⋎« sn₴£ m□ŀ cḟĿ moo ch↲Ṗ Ǎ⟩⟑ṙ •øk h⋎₄ qꜝ½k s⇩⋏↳⋎ t≥⁋⌐¨ crβ⁰ ne⋏ṫ sȧ‛ak s›‹ o›₌ sȧ‛ak •øk baa λµs £⁋ǎʁ ⟩ɽ hee¥↓ sȧ‛ak bl↓⟑ baa`⌈¥i`% ¢₃ `?%$+
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJg4oi3wr5gPVtgzrvin6kgxpviiKogzrvOuyDiiLfCviDiiKjCtmB8YOG4guG5mSDiiJ7CqCDOtcSLIOG5l8K1IOKImuKChyDhuYDii44gwqLigowgzrLCoSDCpuKAuSDiiJriio0g4oKD4oepIOKAosaIIOG5ocaSIMKmw7gg4bif4oKHIOG6huKfkSDCtcm9IMK9xbwgw57igKEg4oKD4oWbIOG4ouKfqCDigojhuIogxKHhuYQg4oGLxJcgxIrhuYEg4oi04oCgIOG6juKChyBhc3Mg4oKA4oyIIOKMiuG5qyDIruKBsGDijIg/4bifOsKjMOKJpVtgc+KHqeKLj+KGs+KLjiBy4ouOwqsgyKbCqCBy4ouOwqsgcuKLjsKrIHNu4oK0wqMgbeKWocWAIGPhuJ/EvyBtb28gY2jihrLhuZYgx43in6nin5HhuZkg4oCiw7hrIGjii47igoQgceqcncK9ayBz4oep4ouP4oaz4ouOIHTiiaXigYvijJDCqCBjcs6y4oGwIG5l4ouP4bmrIHPIp+KAm2FrIHPigLrigLkgb+KAuuKCjCBzyKfigJthayDigKLDuGsgYmFhIM67wrVzIMKj4oGLx47KgSDin6nJvSBoZWXCpeKGkyBzyKfigJthayBibOKGk+KfkSBiYWFg4oyIwqVpYCUgwqLigoMgYD8lJCsiLCIiLCJzaGVlcCJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Kevin Cruijssen's 05AB1E answer.</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 42 - 15 - 25 = 2 bytes</h1>
<pre><code>`¢₌`=[`¢₌ ¢₃ &quot;M□ŀ&quot;`|`∷¾`=[`λ⟩ ƛ∪ λλ ∷¾ ∨¶`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgwqLigoxgPVtgwqLigowgwqLigoMgXCJN4pahxYBcImB8YOKIt8K+YD1bYM674p+pIMab4oiqIM67zrsg4oi3wr4g4oiowrZgIiwiIiwiZm94Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Bonuses:</p>
<ul>
<li>-15 for not using <code>cat</code></li>
<li>-25 for responding to <code>fox</code> with <code>What does the fox say</code></li>
</ul>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 19 - 15 = 4 bytes</h2>
<pre><code>`¢₌`=[`¢₌ ¢₃ &quot;M□ŀ&quot;`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgwqLigoxgPVtgwqLigowgwqLigoMgXCJN4pahxYBcImAiLCIiLCJjYXQiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Bonuses:</p>
<ul>
<li>-15 for not using <code>cat</code></li>
</ul>
<h3>Explanation</h3>
<p>Most of it is just string compression:</p>
<ul>
<li><code>`¢₌`</code> is <code>cat</code></li>
<li><code>`¢₌ ¢₃ &quot;M□ŀ&quot;`</code> is <code>cat goes &quot;meow&quot;</code></li>
<li><code>`∷¾`</code> is <code>fox</code></li>
<li><code>`λ⟩ ƛ∪ λλ ∷¾ ∨¶`</code> is <code>What does the fox say</code></li>
</ul>
"
"259066","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>kQ?F
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJrUT9GIiwiIiwiSGVsbG8sIFdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>kQ   # Printable ASCII
  ?F # Without the input
</code></pre>
"
"259067","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 4 bytes</h1>
<pre><code>øAɾt
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLDuEHJvnQiLCIiLCJCIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<ul>
<li>-8 thanks to @lyxal</li>
</ul>
<h4>Explanation</h4>
<p>Of course there's a built-in</p>
<pre class=""lang-python prettyprint-override""><code>øAɾt # Implicit input
øA   # Letter to number or number to letter
  ɾ  # Range or uppercase (overloaded)
   t # Last item
</code></pre>
<p>Old:</p>
<pre class=""lang-python prettyprint-override""><code>‹kA:?c[?ḟ›|i  # Implicit input
‹             # Decrement (no effect on strings)
 kA:          # Push uppercase alphabet and duplicate
    ?c        # Is the input alphabetic?
      [       # If it is:
       ?ḟ     #  Find the 0-based index of the input in the alphabet
         ›    #  And increment it to make it 1-based
          |   # Otherwise:
           i  #  Index input-1 into the alphabet
</code></pre>
"
"259068","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 34 bytes</h1>
<pre><code>`&lt;∨ø&gt;`?(`&lt;tr&gt;`‛hdn1&gt;i`&lt;t%&gt;A`$%⁰*Wṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJgPOKIqMO4PmA/KGA8dHI+YOKAm2hkbjE+aWA8dCU+QWAkJeKBsCpX4bmFIiwiIiwiMlxuMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of Emigna's 05AB1E answer.</p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>`&lt;∨ø&gt;`         # Push &quot;&lt;table&gt;&quot;
      ?(       # Input number of times:
        `&lt;tr&gt;` #  Push &quot;&lt;tr&gt;
‛hd            #  Push &quot;hd&quot;
   n1&gt;         #  Is the loop variable
               #  greater than 1?
      i        #  Index into &quot;hd&quot;
       `&lt;t%&gt;A` #  Push &quot;&lt;t%&gt;A&quot;
$%             #  Replace &quot;%&quot; with
               #  either &quot;h&quot; or &quot;d&quot;
   ⁰*          #  Multiply this string
               #  by the second input
     Wṅ        #  Join the stack into a string
               #  Implicit output
</code></pre>
"
"259088","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes <code>A</code></h1>
<pre><code>vṅ÷:Ld1$(voÞṡḣ‟)₃
</code></pre>
<p>Input: nested array, output: <code>1(True)</code>, <code>0(False)</code></p>
<pre>
vṅ                  # Convert all pairs to strings
  ÷:L               # Split and find length of one list
     d              # Double length (get number of straws N)
      1$            # Push 1 (may be any straw number 1..N) and swap
        (           # Begin ""for"" loop N times
         vo         # Remove index of current straw
            Þṡ      # Sort by length
              ḣ‟    # Extract head (next index) and rotate
                )₃  # End loop and compare length with 1

</pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiduG5hcO3OkxkMSQodm/DnuG5oeG4o+KAnynigoMiLCIiLCJbW1sxLCAyXV0sW1syLCAxXV1dXG5bW1sxLDJdLFszLDZdLFs0LDVdXSxbWzEsNF0sWzIsM10sWzUsNl1dXVxuW1tbMSwgMl0sIFszLCA0XV0sW1syLCAxXSwgWzMsIDRdXV1cbltbWzEsIDJdLCBbMywgNF0sIFs2LCA1XSwgWzcsIDhdXSxbWzgsIDFdLCBbMywgMl0sIFs0LCA1XSwgWzcsIDZdXV1cbltbWzEsIDNdLCBbMiwgNF0sIFs1LCA3XSwgWzgsIDZdXSxbWzQsIDFdLCBbMywgMl0sIFs4LCA1XSwgWzcsIDZdXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"259111","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>7ε↔¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiN8614oaUwqwiLCIiLCJbNl1cbls2LCAyXVxuWzEsIDNdXG5bMiwgMSwgM11cblszLCAyLCA2XVxuWzEsIDZdXG5bNSwgNCwgMl1cblszLCAxLCA0XVxuWzUsIDQsIDYsIDJdXG5bMSwgMiwgMywgNCwgNSwgNl0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Very simple answer, ports the approach of the 5 byte Jelly.</p>
<h2>Explained</h2>
<pre><code>7ε↔¬
7ε    # Abs difference of 7 with each item in the input
  ↔   # Remove items in that list that are also in the input
   ¬  # Logical negation - empty list turns into 1, non-empty turns into 0
</code></pre>
"
"259156","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h1>
<p>Based on <a href=""https://codegolf.stackexchange.com/users/92727/command-master"">Command Master's answer</a></p>
<pre><code>∑₂?sṫ$∑≤?∑½?L‹≥WA
</code></pre>
<pre><code>∑₂?sṫ$∑≤?∑½?L‹≥WA
∑₂                  Is the sum of the list even?
  ?sṫ$∑≤            Sort list, swap and sum tail-removed part, is lesser than or equal?
        ?∑½?L‹≥     Is length of list - 1 greater than or equal to half of the sum
               WA   Wrap stack, all truthy?
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLiiJHigoI/c+G5qyTiiJHiiaQ/4oiRwr0/TOKAueKJpVdBIiwiIiwiWzMsIDMsIDIsIDEsIDFdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"259171","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 25 bytes</h1>
<pre><code>{:ÞṠ¬|÷^!(~&lt;ß$‟)„$‟^W&amp;›}¥
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiezrDnuG5oMKsfMO3XiEofjzDnyTigJ8p4oCeJOKAn15XJuKAun3CpSIsIiIsIltdXG5bLTIsMyw5XVxuWzQsMSwyLDNdXG5bMSwzLDIsNF1cbls0LDMsMiwxXVxuWzAsLTEsLTIsLTMsLTRdXG5bMSwyLDAsMywyLDEsMiw0LDNdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Count how many times the sweep is applied until it's sorted.</p>
"
"259256","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>-±
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCItwrEiLCIiLCI2XG44Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as b then a. Simply subtract the two numbers and get the sign of the result.</p>
<p>Alternatively a more fun looking, symbol only answer comes in at 17 bytes:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 17 bytes</h2>
<pre><code>-:::-&lt;[::-$~-|:]/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCItOjo6LTxbOjotJH4tfDpdLyIsIiIsIjEwXG4xMiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Also takes b then a. This answer is purely just for fun, and could be made shorter by using numbers and letters (<code>-D0&lt;[N|:]/</code>).</p>
<h3>Explained</h3>
<pre><code>-:::-&lt;[::-$~-|:]/
-:                # Subtract the two numbers and push a copy
  ::-             # Push 0 to the stack by subtracting the top of the stack from itself
     &lt;            # Is the original top of the stack &lt; 0?
      [           # If so:
       ::         #   Duplicate the top of the stack twice. This could just be `D`, but that wouldn't be a symbol.
         -        #   Subtract those copies to get 0 again.
          $~-     #   Push the 0 under the top of the stack, and subtract without popping. The stack is now [0, a - b, -(a - b)]
             |    # Otherwise:
              :   #   Just duplicate the top of the stack
               ]  # this whole if statement was to make sure there was [a - b, abs(a - b)] as the stack
                / # Divide the top two stack items to get either -1, 0 or 1. negative/positive = -1, 0/0 = 0 and positive/positive = 1
</code></pre>
"
"259271","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>7εF⁼
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiN861RuKBvCIsIiIsIls2XVxuWzYsIDJdXG5bMSwgM11cblsyLCAxLCAzXVxuWzMsIDIsIDZdXG5bMSwgNl1cbls1LCA0LCAyXVxuWzMsIDEsIDRdXG5bNSwgNCwgNiwgMl1cblsxLCAyLCAzLCA0LCA1LCA2XSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<pre><code>7ε   # 7 - each item
  F  # Remove values that are in ^
   ⁼ # Is it equal to the original?
</code></pre>
"
"259433","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>{ÞṠ¬|Þ℅:
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJ7w57huaDCrHzDnuKEhToiLCIiLCJbNCwgMiwgMywgMV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>{ÞṠ¬|Þ℅:  # Implicit input
{   |     # While loop
 ÞṠ       # (Condition): Is sorted?
   ¬      #              Logical NOT
     Þ℅   # (Body): Randomly shuffle
       :  #         Duplicate
          # Implicit output
</code></pre>
"
"259434","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>2ḋ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIy4biLIiwiIiwiW1wiYVwiLFwiYlwiLFwiY1wiXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Almost a built-in. <code>ḋ</code> is the built-in for &quot;combinations of a with length b&quot;</p>
"
"259448","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>AB</code>  37 bytes</h1>
<pre><code>:ƛ`SL`⟨₀|1110⟩Ŀ\06εJṅÞċ60²Ẏv⌊;∑$Lʀ¨VO
</code></pre>
<p>The first start may be slow (or time-off) due to the use of the infinite lazy list, but then everything works well</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBQiIsIiIsIjrGm2BTTGDin6jigoB8MTExMOKfqcS/XFwwNs61SuG5hcOexIs2MMKy4bqOduKMijviiJEkTMqAwqhWTyIsIiIsIlsnU0xTJywgJ1NMTCcsICdTU1MnLCAnTFNMJ11cblsnUycsICdMJywgJ1NTJ11cblsnU0xTTCcsICdTJ11cblsnU0xTJ10gXG5bJ1NTJywgJ1NTJywgJ0wnXSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"259508","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>3∆ċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCIz4oiGxIsiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Simply push the number 3 and convert it to words.</p>
"
"259521","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 82 bytes</h1>
<pre><code>6℅4+ƛ20℅;…:7c[‹…:A¬[›…}1J:13ḟẎ…:2cß~₂…D20c[2i₂[20|L20*],Q}1J:¦‡50&gt;ǑẎ…:16c[∑₌,H,|∑,
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCI24oSFNCvGmzIw4oSFO+KApjo3Y1vigLnigKY6QcKsW+KAuuKApn0xSjoxM+G4n+G6juKApjoyY8OffuKCguKApkQyMGNbMmnigoJbMjB8TDIwKl0sUX0xSjrCpuKAoTUwPseR4bqO4oCmOjE2Y1viiJHigowsSCx84oiRLCIsIiIsIiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>6℅4+ƛ20℅;…:7c[‹…:A¬[›…}1J:13ḟẎ…:2cß~₂…D20c[2i₂[20|L20*],Q}1J:¦‡50&gt;ǑẎ…:16c[∑₌,H,|∑,
6℅4+ƛ20℅;…  # Generate the original array with randint(1, 6) + 4 items, each being randint(1, 20). Print it without popping.
:7c[‹…      # If the array contains a 7, subtract 1 from everything
:A¬[›…}     # If there's 0s after doing that, add 1 to everything
1J:13ḟẎ…    # Find the first occurance of `13` in the array with a 1 appended, and keep everything up to that index. If `13` is not in the array, this will return -1, and will keep everything except the appended 1. Basically, the appended 1 is always removed.
2cß~₂…      # If the array contains a 2, keep only even numbers
D20c[2i₂[   # If there's 20 in the array and the 3rd item (0 if &lt; 3 items) is even:
20          #   Push 20
|L20*       # else, push len(array) * 20
,Q}         # print and terminate
1J:¦‡50&gt;ǑẎ… # find the first item in the cumulative sums of the array where the sum is &gt; 50 and keep until that index. Same logic as the 13 check.
:16c[       # If 16 is in the array
∑₌,H,       # Print the sum as dec and hex
|∑,         # else, just print the sum
</code></pre>
"
"259535","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>12</s> 7 bytes</h1>
<pre><code>q\\d\\V
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwicVxcXFxkXFxcXFYiLCIiLCJcXGBcbmBcXFxcYFxcYFxcXFxgYFxuYFxcYFxcXFxcXGBcXFxcYFxcXFxcXGBcXGBgXG5gYGBgYGBcblxcXFxcXFxcXFxcXFxcXFxcXGBcbmBcbmBcXGBcXGBcXGBcXGBcXGBcXGBcXGAiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><em>-5 thanks to @lyxal</em></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>q\\d\\V  # Implicit input
q        # Repr (Vyxal strings are
         # delimited by backticks)
 \\d     # Double a backslash to get \\
    \\V  # Replace with one backslash
         # Implicit output
</code></pre>
<p>Old:</p>
<pre class=""lang-python prettyprint-override""><code>\`\\\`+V\`ø.  # Implicit input
\`            # Push the character `
  \\          # Push the character \
    \`+       # Add it to ` to get \`
              # This is one byte shorter than
              # using a string literal, `\\\``,
              # since strings in Vyxal are
              # delimited by backticks
       V      # Replace ` with \`
        \`ø.  # Surround with backticks
              # Implicit output
</code></pre>
"
"259538","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>s</code>, 6 bytes</h1>
<pre><code>ƛ∆ċ\oO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJzIiwiIiwixpviiIbEi1xcb08iLCIiLCIxMDEiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Suggested by <em>@emirps</em></p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 7 bytes</h2>
<pre><code>ɾ∆ċṅ\oO
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKIhsSL4bmFXFxvTyIsIiIsIjEwMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Num-to-words builtins FTW!</p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>ƛ∆ċ\oO  # Implicit input
ƛ       # Map over range:
 ∆ċ     #  Convert to words
   \oO  #  Count &quot;o&quot;
        # s flag sums the list
        # Implicit output

ɾ∆ċṅ\oO # Implicit input
ɾ       # One-range
 ∆ċ     # Convert to words
   ṅ    # Join into a string
    \oO # Count &quot;o&quot;
        # Implicit output
</code></pre>
"
"259544","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>$177827 (10 bytes) $192450 (9 bytes)</s> $210224 (8 bytes)</h1>
<p><em>Thanks to <a href=""https://codegolf.stackexchange.com/users/52210/kevin-cruijssen"">Kevin Cruijssen</a> for -1 byte and me for -1 byte</em></p>
<pre><code>\$»∧&lt;i»J
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJcXCTCu+KIpzxpwrtKIiwiIiwiIl0="" rel=""nofollow noreferrer"">Run it</a></p>
<p>Explanation:</p>
<pre><code>\$       # Push a dollar sign
  »∧&lt;i»  # Push salary (base-255-compressed)
       J # Concatenate
         # Implicit print
</code></pre>
"
"259554","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 10 bytes</h1>
<pre><code>ḢλǏ²∑-;Z↑Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLhuKLOu8ePwrLiiJEtO1rihpHhuYQiLCIiLCIxMDAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Maximum by tail is useless they said. No one ever uses it they said. Well look who's laughing now.</p>
<h2>Explained</h2>
<pre><code>ḢλǏ²∑-;Z↑Ṅ
Ḣ      Z   # Create a list of [x, f(x)] from range(2, input + 1) where f(x) = 
 λ    ;    # lambda x:
  Ǐ        #  prime factors
   ²       #  squared
    ∑      #  summed
     -     #  subtracted from x
        ↑  # maximum by tail
         Ṅ # joined on spaces
</code></pre>
"
"259555","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>†
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oCgIiwiIiwiMlxuM1xuNFxuOFxuOVxuMTZcbjI1XG4yN1xuMzJcbjQ5XG42NFxuODFcbjEzMzFcbjI0MDFcbjQ5MTNcbjY4NTlcbjI3OTg0MVxuNTMxNDQxXG4xMTczNDgxXG43ODkwNDgxXG40MDM1MzYwN1xuNzUyODI4OVxuNlxuMTJcbjM2XG41NFxuMTkzOFxuNTgxNFxuMTc1NTYwXG45OTk5OTk5XG4xNzI5NDQwMyJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Truthy outputs are <code>1</code>, falsy outputs are anything else.</p>
<h1>Explanation</h1>
<pre><code>† # length of prime factors
</code></pre>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 2 bytes</h1>
<pre><code>†ċ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oCgxIsiLCIiLCIyXG4zXG40XG44XG45XG4xNlxuMjVcbjI3XG4zMlxuNDlcbjY0XG44MVxuMTMzMVxuMjQwMVxuNDkxM1xuNjg1OVxuMjc5ODQxXG41MzE0NDFcbjExNzM0ODFcbjc4OTA0ODFcbjQwMzUzNjA3XG43NTI4Mjg5XG42XG4xMlxuMzZcbjU0XG4xOTM4XG41ODE0XG4xNzU1NjBcbjk5OTk5OTlcbjE3Mjk0NDAzIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Version with distinct and consistent (albeit inverted) truthy and falsy  values. A simple logical NOT <code>¬</code> could fix it for a fully correct 3 bytes: <a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwi4oCgxIvCrCIsIiIsIjJcbjNcbjRcbjhcbjlcbjE2XG4yNVxuMjdcbjMyXG40OVxuNjRcbjgxXG4xMzMxXG4yNDAxXG40OTEzXG42ODU5XG4yNzk4NDFcbjUzMTQ0MVxuMTE3MzQ4MVxuNzg5MDQ4MVxuNDAzNTM2MDdcbjc1MjgyODlcbjZcbjEyXG4zNlxuNTRcbjE5MzhcbjU4MTRcbjE3NTU2MFxuOTk5OTk5OVxuMTcyOTQ0MDMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"259560","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>18 16 13</s> 11 bytes</h1>
<p><em>Thanks to <a href=""https://codegolf.stackexchange.com/users/114446/the-thonnu"">The Thonnu</a> for -7 bytes</em></p>
<pre><code>ƛ?$Ḋ$æ∧;∑1=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLGmz8k4biKJMOm4oinO+KIkTE9IiwiIiwiMjUiXQ=="" rel=""nofollow noreferrer"">Run it</a></p>
<p>Explanation:</p>
<pre><code>ƛ      ;    # map over the input with this code:
 ?          # get input
  $         # swap
   Ḋ        # divisible?
    $       # swap
     æ      # is the item prime?
      ∧     # logical and

        ∑   # sum
         1= # is 1?
</code></pre>
"
"259565","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>26</s> 22 bytes</h1>
<pre><code>a:[λ?żD›v+$Ẋvƒḭ↔Ṡ∷?c;Ṅ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJhOlvOuz/FvETigLp2KyThuop2xpLhuK3ihpThuaDiiLc/YzvhuYQiLCIiLCJbMF0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Surprisingly it only times out for the longest test case despite using a brute force method.</p>
<pre><code>a:[                     # if the input doesn't contain a 1 return 0
   λ                ;Ṅ  # find the first n where the following is truthy:
    ?żD›v+$Ẋvƒḭ         #   get all waves as lists of numbers 
                             where odd numbers represent 1 and even 0
    ?ż                  #   range [1, len(input)]
      D                 #   triplicate
       ›                #   increment
        v+              #   addition vectorised over the left operand
          $             #   swap top two items on the stack
           Ẋ            #   cartesian product
            vƒḭ         #   reduce each by integer division

               ↔        #   all combinations with replacement of length n
                Ṡ       #   vectorising sum
                 ∷      #   mod 2
                  ?c    #   does it contain input?
</code></pre>
"
"259568","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 45 bytes</h1>
<pre><code>₄↔ƛ⁰kAfnvvV₅¹↔$vZ'ƛ÷Mƛ÷εnh=;A;A;vvh;ÞfUvṄ‛; j
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCLCueKBsFxcO+KCrFxcPXbigqxXwqhTIiwi4oKE4oaUxpvigbBrQWZudnZW4oKFwrnihpQkdlonxpvDt03Gm8O3zrVuaD07QTtBO3Z2aDvDnmZVduG5hOKAmzsgaiIsIiIsIltcIm9uZVwiLCBcInR3b1wiLCBcIm9uZXR3b1wiLCBcIm9uZXNpeFwiXVxuXCJBPS4uLjtCPS4uLjtDPUFCXCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a> (times out) or <a href=""https://vyxal.pythonanywhere.com/#WyIiLCLCueKBsFxcO+KCrFxcPXbigqxXwqhTIiwiM+KGlMab4oGwYEFCQ2BmbnZ2VuKChcK54oaUJHZaJ8abw7dNxpvDt861bmg9O0E7QTt2dmg7w55mVXbhuYTigJs7IGoiLCIiLCJbXCJvbmVcIiwgXCJ0d29cIiwgXCJvbmV0d29cIiwgXCJvbmVzaXhcIl1cblwiQT0uLi47Qj0uLi47Qz1BQlwiIl0="" rel=""nofollow noreferrer"">try a version with only three variables.</a></p>
<p>Tries all possible substitutions and all possible equation results so it's extremely slow.</p>
"
"259569","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 3 bytes</h1>
<pre><code>ɾ∆Ŀ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLJvuKIhsS/IiwiIiwiMjAiXQ=="" rel=""nofollow noreferrer"">Run it!</a></p>
<p>Explanation:</p>
<pre><code>ɾ   # numbers from 1 to input
 ∆Ŀ # least common multiple
</code></pre>
"
"259632","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>C¯±››×↲§
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJDwq/CseKAuuKAusOX4oaywqciLCIiLCJaU0lMRU5UWU9VVEgiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>The power of that one built-in I added 3 years ago because I thought it was a good idea to have something to vertically join a list of lists. Can be 7 bytes with the L flag.</p>
<h2>Explained</h2>
<pre><code>C¯±››×↲§
C¯        # Convert each character to ascii value and get pairwise differences
  ±       # Sign of each
   ››     # + 2 (the ⇧ element doesn't vectorise it's numeric overload)
     ×↲   # left adjust the string &quot;*&quot; by each number in ^
       §  # &quot;vertical join&quot; - Transpose (filling with spaces) and then join on newlines
</code></pre>
"
"259647","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 11 bytes</h1>
<pre><code>$⌈⌊2ẇ(n~İṘȦ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiJOKMiOKMijLhuocobn7EsOG5mMimIiwiIiwiXCJIZWxsb193b3JsZCFcIiwgXCIwIDZcIiA9PiB3ZWxsb19Ib3JsZCFcblwiRmlyc3RcIiwgXCIxIDIgMSAwIDAgNFwiID0+IHRGaXNyXG5cIihTZWNvbmQhJCQpXCIsIFwiOCA3IDEwIDFcIiA9PiAoKWVjb25kJCEkU1xuXCJ+VGhpcmR+XCIsIFwiMCAwIDYgNiAwIDYgNiAwXCIgPT4gflRoaXJkfiJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiJChufsSw4bmYyKYiLCIiLCJcIkhlbGxvX3dvcmxkIVwiLCBbWzAsNl1dID0+IFwid2VsbG9fSG9ybGQhXCJcblwiRmlyc3RcIiwgW1sxLCAyXSwgWzEsIDBdLCBbMCwgNF1dID0+IHRGaXNyXG5cIihTZWNvbmQhJCQpXCIsIFtbOCwgN10sIFsxMCwgMV1dID0+ICgpZWNvbmQkISRTXG5cIn5UaGlyZH5cIiwgW1swLCAwXSwgWzYsIDZdLCBbMCwgNl0sIFs2LCAwXV0gPT4gflRoaXJkfiJd"" rel=""nofollow noreferrer"">7 bytes by taking the string and then a list of lists of the indices to swap</a></p>
<h2>Explained</h2>
<pre><code>$⌈⌊2ẇ(n~İṘȦ
$⌈           # Push the numbers split on spaces then the string.
  ⌊2ẇ        # eval each number in the rest and wrap into lists of size 2
     (       # to each pair:
      n~İ    #   without popping anything, index the pair into the string
         Ṙ   #   reverse that
          Ȧ  #   assign back to the string, vectorises
</code></pre>
"
"259669","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 1 byte</h1>
<pre><code>ǔ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLHlCIsIiIsIjVcbkhlbGxvIHdvcmxkISJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes the number then the string. Prepend <code>$</code> if you want the inputs the other way round.</p>
<p>Built-in solution for &quot;rotate right&quot;. Rotation is modular so we don't have to worry about negative inputs.</p>
"
"259694","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>Π:Ḃ=$0O=
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwizqA64biCPSQwTz0iLCIiLCIwXG4xXG41XG45XG4xMFxuMjdcbjg1XG4xMDFcbjExMVxuMTE5Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Different approach from the other Vyxal answer.</p>
<pre><code>Π        # binary of input
  Ḃ=     # the equality of the reversed version of it to itself (0 for non palindrome, 1 for palindrome)
       = # is equal to
 :  $0O  # the count of 0s in itself
</code></pre>
<p>Could potentially be golfed</p>
"
"259720","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>21 22</s> 21 bytes</h1>
<pre><code>vf0ÞṪÞKƛKƛ∩Þu;;∩1ÞḟṘ¦
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwidmYww57huarDnkvGm0vGm+KIqcOedTs74oipMcOe4bif4bmYwqYiLCIiLCJbXCJoYXBweVwiLCBcImFuZ3J5XCIsIFwiaHVuZ3J5XCJdXG5bXCJzaGVlclwiLCBcInNocmV3XCIsIFwic2hpbmVcIiwgXCJzaGlyZVwiLCBcInNwaWtlXCIsIFwic2h5XCJdXG5bXCJzbmFwXCIsIFwiY3JhY2tsZVwiLCBcInBvcFwiLCBcInNtYWNrXCIsIFwic2l6emxlXCIsIFwid2hpZmZcIiwgXCJzaGVlblwiXVxuW1wiU3BvbmdlXCIsIFwiUGFwZXJcIiwgXCJNb29uXCIsIFwiQWlyXCIsIFwiQm93bFwiLCBcIldhdGVyXCIsIFwiQWxpZW5cIiwgXCJEcmFnb25cIiwgXCJEZXZpbFwiLCBcIkxpZ2h0bmluZ1wiLCBcIk51a2VcIiwgXCJEeW5hbWl0ZVwiLCBcIkd1blwiLCBcIlJvY2tcIiwgXCJTdW5cIiwgXCJGaXJlXCIsIFwiQXhlXCIsIFwiU25ha2VcIiwgXCJNb25rZXlcIiwgXCJXb21hblwiLCBcIk1hblwiLCBcIlRyZWVcIiwgXCJDb2Nrcm9hY2hcIiwgXCJXb2xmXCJdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of @UnrelatedString's Jelly answer. <br />
<em>-1 thanks to @UnrelatedString</em></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>vf0ÞṪÞKƛKƛ∩Þu;;∩1ÞḟṘ¦   # Implicit input
vf                      # Flatten each into a list of characters
  0ÞṪ                   # Transpose with filler 0
     ÞKƛ      ;         # Map over suffixes:
        Kƛ   ;          #  Map over prefixes:
          ∩             #   Transpose
           Þu           #   All unique?
               ∩        # Transpose
                1Þḟ     # First multidimensional indices of 1
                   Ṙ    # Reverse
                    ¦   # Cumulative sums
                        # Implicit output
</code></pre>
<p>Old (didn't work):</p>
<pre class=""lang-python prettyprint-override""><code>             # Implicit input

@Gʀ2↔µ÷$-;   # Step 1: Generate all possible slices in order
@            # Push the length of each string in the input list
 Gʀ          # Get the zero range of the maximum of this list
   2↔        # Combinations of the above list with length 2
     µ   ;   # Sort this list of pairs by the following:
      ÷      #  Dump both numbers onto the stack
       $-    #  Swap and subtract the two numbers

λ£?ƛ¥i;Þu;c  # Step 2: Get the shortest distunguishable slice
λ        ;c  # Get the first item for which the following is true:
 £           #  Save the pair in the register
  ?ƛ  ;      #  For each string in the input list:
    ¥i       #   Index the pair into the string
             #   (Vyxal supports slice indexing)
       Þu    #  And check if all the results are unique

             # Implicit output of the first pair which returns true
</code></pre>
"
"259724","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>fḂ=i
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCJm4biCPWkiLCIiLCJwcHFxcHFcbjIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>fḂ=i  # Implicit input
f     # Flatten into a list of characters
 Ḃ    # Bifurcate: duplicate and reverse
  =   # Are they equal (vectorises)
   i  # Index in
      # Implicit output
</code></pre>
"
"259733","<h2>Tips for overloading</h2>
<ul>
<li>Try not to use up every overloading space you have right away (<a href=""https://github.com/dzaima/SOGLOnline"" rel=""nofollow noreferrer"">Unless you're really good at overloading</a>). You should be prepared for adding new overloads to your language.</li>
<li>Don't overload if vectorization makes sense. Vectoriation is a really common operation. For example, vectorization is the most common 1-byter in both <a href=""https://github.com/DennisMitchell/jellylanguage/issues/69"" rel=""nofollow noreferrer"">Jelly</a> and <a href=""https://github.com/Vyxal/Vyxal/issues/14#issuecomment-1042668140"" rel=""nofollow noreferrer"">Vyxal</a>, and these two are very different languages. This should show how prominent vectorization is in golfing languages.
<ul>
<li>For example, <code>+</code> should definitely be vectorized, because it makes sense to do so. If you overload it, you end up wasting bytes in codegolf due to an unnecessary use of a vectorization prefix.</li>
</ul>
</li>
<li>Sometimes, it can be hard to track down your overloads, especially if you have a lot of them. So, it can be helpful to make a table of all of your overloads, to see which instructions could be overloaded, which operations are duplicated, etc.
<ul>
<li>Another trick when you're designing the language. You can first list every instruction you want to overload (without actually introducing overloads). Then, try to merge all the commands you have into fewer operations (in a way that makes sense to you).</li>
</ul>
</li>
<li>When you don't know what things to overload in your language, generating a 1-gram corpus of a popular golfing language will lead you to some interesting ideas.</li>
</ul>
"
"259735","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>3¨e‹ḟ›
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiM8KoZeKAueG4n+KAuiIsIiIsIjI2XG4yXG4xMDI0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Decided this was different enough from the other Vyxal answers to post.</p>
<pre><code>    ḟ  # find the index of the input in
3¨e    # all powers of 3
   ‹   # -1
     › # and add 1 to that index
</code></pre>
"
"259758","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>ʀ~‹E≬E?&gt;c
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiyoB+4oC5ReKJrEU/PmMiLCIiLCIwIC0+IDFcbjEgLT4gMVxuMiAtPiA0XG4xNSAtPiA0XG4xNiAtPiA4XG4xMjMgLT4gOFxuMjYwIC0+IDE2XG4xMzEzMTMgLT4gMzJcbjM0MzU5NzUwNzA5IC0+IDY0Il0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>This took a lot of experimenting to get to 9 bytes. Like at least 20 minutes of trying and trying.</p>
<h2>Explained</h2>
<pre><code>ʀ~‹E≬E?&gt;c
ʀ          # The range [0, input]
 ~‹        # With 1 removed (filter by decrement, could also be 1o, but that's not as stylish)
   E       # with 2 raised to the power of each item. This creates a list of [1, 4, ...]
    ≬   c  # get the first item of that where
     E     #   2 to the power of the item
      ?&gt;   #   is greater than the input
</code></pre>
"
"259759","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 9 bytes</h1>
<pre><code>Þ•∇&quot;²Ṡ√Π/
</code></pre>
<p>Edit: Thunno ninja'd me but kinda want to leave my answer here as it (was) shorter</p>
<p><a href=""https://vyxal.pythonanywhere.com/#WyLhuIsiLCIiLCLDnuKAouKIh1wiwrLhuaDiiJrOoC8iLCIiLCJbOSwgNjIsIDAsIDNdXG5bMjUsIDMsIDZdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p><strong>How it works:</strong></p>
<pre><code>Þ•∇&quot;²Ṡ√Π/
Þ•          Calculate the dot product
  ∇         Shift stack
   &quot;        Pair the vectors
    ²Ṡ√     Square, take vectorised sum and square root
       Π/   Push product and divide
</code></pre>
"
"259776","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>10</s> 9 bytes</h1>
<pre><code>JkBC:CV)R
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiSmtCQzpDVilSIiwiIiwiXCIxMjM0NTY3XCIgPT4gMTIzNDVDXG5cIjM0NTY3ODlcIiA9PiAzNDVDWVxuXCI5ODY1NDMyXCIgPT4gYkE0MzJcblwiNjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MFwiID0+IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG5cIjY3MTExMTAwMTAxMDAwNzExMTExMDgxMDJcIiA9PiBDb2RlMDAwR29sZiJd"" rel=""nofollow noreferrer"">Try it Online!</a> Link includes test cases.</p>
<p>Port of @KevinCruijssen's 05AB1E answer. <br />
<em>-1 thanks to @KevinCruijssen</em></p>
<h4>Explanation</h4>
<pre class=""lang-python prettyprint-override""><code>JkBC:CV)R  # Implicit input
       )R  # Reduce by:
J          #  Append to the string
 kB        #  Push constant [A-Za-z]
   C       #  Convert to codepoints
    :C     #  Duplicate and convert back
      V    #  Replace codepoints with characters
           # Implicit output
</code></pre>
"
"259840","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 6 bytes</h1>
<pre><code>ƛ∑+;c¬
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwixpviiJErO2PCrCIsIiIsIjEgPT4gMVxuMyA9PiAxXG41ID0+IDFcbjcgPT4gMVxuOSA9PiAxXG4yMCA9PiAxXG4zMSA9PiAxXG44NiA9PiAxXG4xNTQgPT4gMVxuNTI1ID0+IDFcbjIgPT4gMFxuNCA9PiAwXG42ID0+IDBcbjggPT4gMFxuMTAgPT4gMFxuMTUgPT4gMFxuMjEgPT4gMFxuNTAgPT4gMFxuMTAwID0+IDBcbjUwMCA9PiAwIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just another 6 byter. Kinda sorta ports Jelly in that it maps <code>sum(digits) + n</code> to the range 1..input. 5 bytes if inverted booleans are allowed.</p>
<h2>Explained</h2>
<pre><code>ƛ∑+;c¬
ƛ  ;   # To each number N in the range [1, input]
 ∑     #  sum the digits of N
  +    #  and add that to N
    c  # is the input in that?
     ¬ # logical not of that
</code></pre>
"
"259876","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 21 bytes</h1>
<pre><code>Þp¥(¨₂›æ;)ḟ›&amp;›)⁽æ$ŀL‹
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiw55wwqUowqjigoLigLrDpjsp4bif4oC6JuKAuinigb3DpiTFgEzigLkiLCIiLCIyIC0+IDBcbjMgLT4gMVxuMTEgLT4gMlxuMjExIC0+IDFcbjI3NyAtPiAyXG44MjMgLT4gMFxuNDM5NyAtPiAyXG41MzgxIC0+IDNcbjE3MTY5NyAtPiAyXG40OTk0MDMgLT4gMlxuNjQ4MzkxIC0+IDMiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<h2>Explained</h2>
<pre><code>Þp¥(¨₂›æ;)ḟ›&amp;›)⁽æ$ŀL‹
              )⁽  $ŀ   # While applying function ⁽ on the result of function ) is true, collect results.
               ⁽æ      # Function ⁽: Is argument prime?
Þp¥(¨₂›æ;)ḟ›&amp;›)        # Function ):
Þp                     #   The list of all primes
  ¥(     )             #   #register times (starts at 0):
    ¨₂  ;              #     Filter the top of the stack by:
      ›                #       item index + 1         
       æ               #       is prime
                       #   This gets the (register)th order super primes
          ḟ›           #   Find the index of the function argument in that list
            &amp;›         #   Increment the register for the next iteration
                    L‹ # Length of that - 1
</code></pre>
"
"259886","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <s>8 7</s> 6 bytes</h1>
<pre><code>₍↔∪@÷/
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyIiLCIiLCLigo3ihpTiiKpAw7cvIiwiIiwiey03LCAzLCAtOX1cbns5LCAyLCAzLCA0fSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>-1 thanks to TheThonnu, -1 thanks to Lyxal</p>
<pre class=""lang-python prettyprint-override""><code>₍↔∪@÷/  # implicit input of two lists
₍       # apply each to the stack, and wrap:
 ↔      #   intersection
  ∪     #   union
   @    # map each set to its size
    ÷   # dump list onto stack
     /  # divide
</code></pre>
"
"259979","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>A</code> <s>23</s> <s>21</s> 11 bytes</h1>
<p>@AndrovT cool result:</p>
<pre><code>Eλ-[żǎ$vxeΠ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwiRc67LVvFvMeOJHZ4Zc6gIiwiIiwiWzEsIDEsIDFdXG5bWzFdLCBbMV1dXG5bMCwgW1swXV0sIDBdXG5bW1swXSwgMF0sIDBdIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Unfortunately, can't explain in detail.
Hope one of Vyxal' experts helps...</p>
<p>My old version, maybe useful for beginners in Vyxal:</p>
<pre><code>ƛIȧ[:L›ÞpŻ$vx¨£e|E]fΠ
</code></pre>
<p>Every input must be list of lists, so first test case should be <code>[[1, 1, 1]]</code> etc.</p>
<p>-2 bytes thanks @emanresu (Vyxal chat)</p>
<pre>
ƛ                       #Begin lambda map 
 Iȧ                     #Condition for If: is it list?
     [                  #Begin If
      :L›               #If list - get length and add 1
         ÞpŻ            #Get slice of given length from infinite  list of primes
            $           #Swap
             vx         #Recursively apply to list
               ¨£e      #Zip and reduce pairs with exponentiation
                  |     #Else
                   E    #If number - two power
                    ]   #End If and lambda map,
                     fΠ #Flatten and reduce by product

</pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJBIiwiIiwixptJyKdbOkzigLrDnnDFuyR2eMKowqNlfEVdZs6gIiwiIiwiW1sxLCAxLCAxXV1cbltbWzFdLCBbMV1dXVxuW1swLCBbWzBdXSwgMF1dXG5bW1tbMF0sIDBdLCAwXV0iXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
"
"259988","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>₌Jp&gt;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwi4oKMSnA+IiwiIiwiXCJhXCIsIFwiYlwiID0+IDFcblwiYWNcIiwgXCJhXCIgPT4gMFxuXCJiZWtja2FcIiwgXCJrd25mb2VcIiA9PiAxXG5cImJlenRiZXN0XCIsIFwiYmVzdGJlXCIgPT4gMFxuXCJtY2phZlwiLCBcIm1jXCIgPT4gMVxuXCJha2JvZVwiLCBcInVlbnZpXCIgPT4gMSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>A port of python is one byte shorter because of the niceness of parallel apply.</p>
<h2>Explained</h2>
<pre><code>₌Jp&gt;
₌  &gt;  # check whether
J    # the joining of the two strings
  &gt;  # is greater than
 p   # the prepending of the two strings
</code></pre>
<p>For a more straightforward approach:</p>
<h2><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h2>
<pre><code>@Ṙ*ƒ&lt;
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiQOG5mCrGkjwiLCIiLCJbXCJhXCIsIFwiYlwiXSA9PiAxXG5bXCJhY1wiLCBcImFcIl0gPT4gMFxuW1wiYmVrY2thXCIsIFwia3duZm9lXCJdID0+IDFcbltcImJlenRiZXN0XCIsIFwiYmVzdGJlXCJdID0+IDBcbltcIm1jamFmXCIsIFwibWNcIl0gPT4gMVxuW1wiYWtib2VcIiwgXCJ1ZW52aVwiXSA9PiAxIl0="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Takes input as a list of strings.</p>
<h2>Explained</h2>
<pre><code>@Ṙ*ƒ&lt;
@     # vectorised lengths
 Ṙ*   # reverse that, and pairwise repeat the input strings that many times
   ƒ&lt; # reduce by lexographic less than
</code></pre>
"
"260081","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 8 bytes</h1>
<pre><code>`g.gl`¨U
</code></pre>
<p><em>Wait, <code>¨U</code> exists?</em></p>
<p>Doesn't work on the online interpreter. Exits with error for falsy, runs successfully with no output for truthy.</p>
<pre><code>`g.gl`   # string literal g.gl
      ¨U # GET request to that URL
</code></pre>
<p>For fun, here's a fairly cheaty version. Ports JavaScript:</p>
<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>E</code>, 13 bytes</h1>
<pre><code>`ƈ⌈(₍†.on¬ḣ)`
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJFIiwiIiwiYMaI4oyIKOKCjeKAoC5vbsKs4bijKWAiLCIiLCIiXQ=="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Just runs the JavaScript <code>alert(navigator.onLine)</code> using the <code>E</code> flag</p>
"
"260124","<h1><a href=""https://github.com/Vyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>ɾ¡uβ
</code></pre>
<p><a href=""https://vyxal.pythonanywhere.com/#WyJ+IiwiIiwiyb7CoXXOsiIsIiIsIiEoXFxkKykgKyhcXGQrKVxuMCAgIDBcbjEgICAxXG4yICAgMVxuMyAgIDVcbjQgICAxOVxuNSAgIDEwMVxuNiAgIDYxOVxuNyAgIDQ0MjFcbjggICAzNTg5OVxuOSAgIDMyNjk4MSJd"" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>Port of the 4 byte jelly answer</p>
<h2>Explained</h2>
<pre><code>ɾ¡uβ 
ɾ    # range [1, n]
 ¡   # factorial of each
  uβ # converted from base -1
</code></pre>
"